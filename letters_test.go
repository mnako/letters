package letters_test // package test

import (
	"net/mail"
	"os"
	"testing"
	"time"

	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/mnako/letters"
	"github.com/mnako/letters/email"
	"github.com/mnako/letters/parser"
)

func testEmailHeadersFromFile(t *testing.T, fp string, expectedEmail *email.Email) {
	rawEmail, err := os.Open(fp)
	if err != nil {
		t.Errorf("error while reading email from file: %s", err)
		return
	}

	opt := parser.WithHeadersOnly()                   // headers only option
	p := letters.NewParser(opt, parser.WithVerbose()) // chain options
	parsedEmail, err := p.Parse(rawEmail)
	got, want := parsedEmail, expectedEmail
	if err != nil {
		t.Errorf("error while parsing email headers: %s", err)
		return
	}
	if diff := cmp.Diff(
		want,
		got,
		cmpopts.IgnoreFields(email.File{}, "Reader"),
		cmpopts.IgnoreFields(email.ContentInfo{}, "Encoding", "encDone"),
	); diff != "" {
		t.Errorf("emails (headers only) are not equal\n%s", diff)
	}
}

func testEmailFromFile(t *testing.T, fp string, expectedEmail *email.Email) {
	rawEmail, err := os.Open(fp)
	if err != nil {
		t.Errorf("error while reading email from file: %s", err)
		return
	}
	p := letters.NewParser()
	parsedEmail, err := p.Parse(rawEmail)
	if err != nil {
		t.Errorf("error while parsing email: %s", err)
		return
	}
	got, want := parsedEmail, expectedEmail
	// if diff := cmp.Diff(want, got, cmpopts.IgnoreFields(email.File{}, "Reader")); diff != "" {
	if diff := cmp.Diff(
		want,
		got,
		cmpopts.IgnoreFields(email.File{}, "Reader"),
		cmpopts.IgnoreFields(email.ContentInfo{}, "Encoding", "encDone"),
	); diff != "" {
		t.Errorf("emails are not equal\n%s", diff)
	}
}

func TestParseEmailEnglishEmpty(t *testing.T) {
	fp := "tests/test_english_empty.txt"
	expectedEmail := &email.Email{
		Headers: email.Headers{
			Date:            time.Time(time.Date(1, 1, 1, 0, 0, 0, 0, time.UTC)),
			Sender:          nil,
			From:            nil,
			ReplyTo:         nil,
			To:              nil,
			Cc:              nil,
			Bcc:             nil,
			MessageID:       "",
			InReplyTo:       nil,
			References:      nil,
			Subject:         "",
			Comments:        "",
			Keywords:        nil,
			ResentDate:      time.Time(time.Date(1, 1, 1, 0, 0, 0, 0, time.UTC)),
			ResentFrom:      nil,
			ResentSender:    nil,
			ResentTo:        nil,
			ResentCc:        nil,
			ResentBcc:       nil,
			ResentMessageID: "",
			ExtraHeaders:    map[string][]string{},
			ContentInfo: &email.ContentInfo{
				Type:              "text/plain",
				TypeParams:        map[string]string{},
				Disposition:       "",
				DispositionParams: map[string]string(nil),
				TransferEncoding:  "7bit",
				ID:                "",
				Charset:           "",
			},
			Received: nil,
		},
		Text: "While this email is undeliverable, this test case makes sure that the\n" +
			"parser does not crash, most fields are nullable, and the rest has sane\n" +
			"defaults (e.g. text/plain Content-Type).",
		EnrichedText: "",
		HTML:         "",
		Files:        nil,
	}
	testEmailFromFile(t, fp, expectedEmail)
}

func TestParseEmailEnglishNoTextContent(t *testing.T) {
	fp := "tests/test_english_no_text_content.txt"
	expectedEmail := &email.Email{
		Headers: email.Headers{
			Date: time.Time(time.Date(2019, 4, 1, 6, 55, 0, 0, time.UTC)),
			Sender: &mail.Address{
				Name:    "Alice Sender",
				Address: "alice.sender@example.com",
			},
			From: []*mail.Address{
				&mail.Address{
					Name:    "Alice Sender",
					Address: "alice.sender@example.com",
				},
				&mail.Address{
					Name:    "Alice Sender",
					Address: "alice.sender@example.net",
				},
			},
			ReplyTo: []*mail.Address{
				&mail.Address{
					Name:    "Alice Sender",
					Address: "alice.sender@example.net",
				},
			},
			To: []*mail.Address{
				&mail.Address{
					Name:    "Bob Recipient",
					Address: "bob.recipient@example.com",
				},
				&mail.Address{
					Name:    "Carol Recipient",
					Address: "carol.recipient@example.com",
				},
			},
			Cc: []*mail.Address{
				&mail.Address{
					Name:    "Dan Recipient",
					Address: "dan.recipient@example.com",
				},
				&mail.Address{
					Name:    "Eve Recipient",
					Address: "eve.recipient@example.com",
				},
			},
			Bcc: []*mail.Address{
				&mail.Address{
					Name:    "Frank Recipient",
					Address: "frank.recipient@example.com",
				},
				&mail.Address{
					Name:    "Grace Recipient",
					Address: "grace.recipient@example.com",
				},
			},
			MessageID:       "Message-Id-1@example.com",
			InReplyTo:       nil,
			References:      nil,
			Subject:         "Test No Text Content, Attachment Only",
			Comments:        "",
			Keywords:        nil,
			ResentDate:      time.Time(time.Date(1, 1, 1, 0, 0, 0, 0, time.UTC)),
			ResentFrom:      nil,
			ResentSender:    nil,
			ResentTo:        nil,
			ResentCc:        nil,
			ResentBcc:       nil,
			ResentMessageID: "",
			ExtraHeaders: map[string][]string{
				"X-Clacks-Overhead": []string{
					"GNU Terry Pratchett",
				},
				"X-Script/function/\t !\"#$%&'()*+,-./;<=>?@[\\]^_`{|}~": []string{
					"TEST VALUE 1\t !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_` abcdefghijklmnopqrstuvwxyz{|}~",
					"TEST VALUE 2\t !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_` abcdefghijklmnopqrstuvwxyz{|}~",
				},
			},
			ContentInfo: &email.ContentInfo{ // p0
				Type: "application/pdf",
				TypeParams: map[string]string{
					"name": "attached-pdf-name.pdf",
				},
				Disposition: "attachment",
				DispositionParams: map[string]string{
					"filename": "attached-pdf-filename.pdf",
				},
				TransferEncoding: "base64",
				ID:               "",
				Charset:          "",
			},
			Received: nil,
		},
		Text:         "",
		EnrichedText: "",
		HTML:         "",
		Files: []*email.File{
			&email.File{
				FileType: "attachment",
				Name:     "attached-pdf-filename.pdf",
				ContentInfo: &email.ContentInfo{ // p0
					Type: "application/pdf",
					TypeParams: map[string]string{
						"name": "attached-pdf-name.pdf",
					},
					Disposition: "attachment",
					DispositionParams: map[string]string{
						"filename": "attached-pdf-filename.pdf",
					},
					TransferEncoding: "base64",
					ID:               "",
					Charset:          "",
				},
				Data: []byte{
					37, 80, 68, 70, 45, 49, 46, 13, 116, 114, 97, 105, 108, 101, 114, 60, 60, 47, 82,
					111, 111, 116, 60, 60, 47, 80, 97, 103, 101, 115, 60, 60, 47, 75, 105, 100, 115,
					91, 60, 60, 47, 77, 101, 100, 105, 97, 66, 111, 120, 91, 48, 32, 48, 32, 51, 32,
					51, 93, 62, 62, 93, 62, 62, 62, 62, 62, 62,
				},
			},
		},
	}
	testEmailFromFile(t, fp, expectedEmail)
}

func TestParseEmailHeadersEnglishPlaintextAsciiOver7bit(t *testing.T) {
	fp := "tests/test_english_plaintext_ascii_over_7bit.txt"
	expectedEmail := &email.Email{
		Headers: email.Headers{
			Date: time.Time(time.Date(2019, 4, 1, 6, 55, 0, 0, time.UTC)),
			Sender: &mail.Address{
				Name:    "Alice Sender",
				Address: "alice.sender@example.com",
			},
			From: []*mail.Address{
				&mail.Address{
					Name:    "Alice Sender",
					Address: "alice.sender@example.com",
				},
				&mail.Address{
					Name:    "Alice Sender",
					Address: "alice.sender@example.net",
				},
			},
			ReplyTo: []*mail.Address{
				&mail.Address{
					Name:    "Alice Sender",
					Address: "alice.sender@example.net",
				},
			},
			To: []*mail.Address{
				&mail.Address{
					Name:    "Bob Recipient",
					Address: "bob.recipient@example.com",
				},
				&mail.Address{
					Name:    "Carol Recipient",
					Address: "carol.recipient@example.com",
				},
			},
			Cc: []*mail.Address{
				&mail.Address{
					Name:    "Dan Recipient",
					Address: "dan.recipient@example.com",
				},
				&mail.Address{
					Name:    "Eve Recipient",
					Address: "eve.recipient@example.com",
				},
			},
			Bcc: []*mail.Address{
				&mail.Address{
					Name:    "Frank Recipient",
					Address: "frank.recipient@example.com",
				},
				&mail.Address{
					Name:    "Grace Recipient",
					Address: "grace.recipient@example.com",
				},
			},
			MessageID: "Message-Id-1@example.com",
			InReplyTo: []string{
				"Message-Id-0@example.com",
			},
			References: []string{
				"Message-Id-0@example.com",
			},
			Subject:  "📧 Test English Pangrams",
			Comments: "Message Header Comment",
			Keywords: []string{
				"Keyword 1",
				"Keyword 2",
			},
			ResentDate:      time.Time(time.Date(1, 1, 1, 0, 0, 0, 0, time.UTC)),
			ResentFrom:      nil,
			ResentSender:    nil,
			ResentTo:        nil,
			ResentCc:        nil,
			ResentBcc:       nil,
			ResentMessageID: "",
			ExtraHeaders: map[string][]string{
				"X-Clacks-Overhead": []string{
					"GNU Terry Pratchett",
				},
				"X-Script/function/\t !\"#$%&'()*+,-./;<=>?@[\\]^_`{|}~": []string{
					"TEST VALUE 1\t !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_` abcdefghijklmnopqrstuvwxyz{|}~",
					"TEST VALUE 2\t !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_` abcdefghijklmnopqrstuvwxyz{|}~",
				},
			},
			ContentInfo: &email.ContentInfo{
				Type: "text/plain",
				TypeParams: map[string]string{
					"charset": "ascii",
				},
				Disposition:       "",
				DispositionParams: map[string]string(nil),
				TransferEncoding:  "7bit",
				ID:                "",
				Charset:           "ascii",
			},
			Received: nil,
		},
		Text:         "",
		EnrichedText: "",
		HTML:         "",
		Files:        nil,
	}
	testEmailHeadersFromFile(t, fp, expectedEmail)
}

func TestParseEmailEnglishPlaintextAsciiOver7bit(t *testing.T) {
	fp := "tests/test_english_plaintext_ascii_over_7bit.txt"
	expectedEmail := &email.Email{
		Headers: email.Headers{
			Date: time.Time(time.Date(2019, 4, 1, 6, 55, 0, 0, time.UTC)),
			Sender: &mail.Address{
				Name:    "Alice Sender",
				Address: "alice.sender@example.com",
			},
			From: []*mail.Address{
				&mail.Address{
					Name:    "Alice Sender",
					Address: "alice.sender@example.com",
				},
				&mail.Address{
					Name:    "Alice Sender",
					Address: "alice.sender@example.net",
				},
			},
			ReplyTo: []*mail.Address{
				&mail.Address{
					Name:    "Alice Sender",
					Address: "alice.sender@example.net",
				},
			},
			To: []*mail.Address{
				&mail.Address{
					Name:    "Bob Recipient",
					Address: "bob.recipient@example.com",
				},
				&mail.Address{
					Name:    "Carol Recipient",
					Address: "carol.recipient@example.com",
				},
			},
			Cc: []*mail.Address{
				&mail.Address{
					Name:    "Dan Recipient",
					Address: "dan.recipient@example.com",
				},
				&mail.Address{
					Name:    "Eve Recipient",
					Address: "eve.recipient@example.com",
				},
			},
			Bcc: []*mail.Address{
				&mail.Address{
					Name:    "Frank Recipient",
					Address: "frank.recipient@example.com",
				},
				&mail.Address{
					Name:    "Grace Recipient",
					Address: "grace.recipient@example.com",
				},
			},
			MessageID: "Message-Id-1@example.com",
			InReplyTo: []string{
				"Message-Id-0@example.com",
			},
			References: []string{
				"Message-Id-0@example.com",
			},
			Subject:  "📧 Test English Pangrams",
			Comments: "Message Header Comment",
			Keywords: []string{
				"Keyword 1",
				"Keyword 2",
			},
			ResentDate:      time.Time(time.Date(1, 1, 1, 0, 0, 0, 0, time.UTC)),
			ResentFrom:      nil,
			ResentSender:    nil,
			ResentTo:        nil,
			ResentCc:        nil,
			ResentBcc:       nil,
			ResentMessageID: "",
			ExtraHeaders: map[string][]string{
				"X-Clacks-Overhead": []string{
					"GNU Terry Pratchett",
				},
				"X-Script/function/\t !\"#$%&'()*+,-./;<=>?@[\\]^_`{|}~": []string{
					"TEST VALUE 1\t !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_` abcdefghijklmnopqrstuvwxyz{|}~",
					"TEST VALUE 2\t !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_` abcdefghijklmnopqrstuvwxyz{|}~",
				},
			},
			ContentInfo: &email.ContentInfo{
				Type: "text/plain",
				TypeParams: map[string]string{
					"charset": "ascii",
				},
				Disposition:       "",
				DispositionParams: map[string]string(nil),
				TransferEncoding:  "7bit",
				ID:                "",
				Charset:           "ascii",
			},
			Received: nil,
		},
		Text: "The quick brown fox jumps over a lazy dog.\n" +
			"Glib jocks quiz nymph to vex dwarf.\n" +
			"Sphinx of black quartz, judge my vow.\n" +
			"How vexingly quick daft zebras jump!\n" +
			"The five boxing wizards jump quickly.\n" +
			"Jackdaws love my big sphinx of quartz.\n" +
			"Pack my box with five dozen liquor jugs.",
		EnrichedText: "",
		HTML:         "",
		Files:        nil,
	}
	testEmailFromFile(t, fp, expectedEmail)
}

func TestParseEmailEnglishPlaintextAsciiOverBase64(t *testing.T) {
	fp := "tests/test_english_plaintext_ascii_over_base64.txt"
	expectedEmail := &email.Email{
		Headers: email.Headers{
			Date: time.Time(time.Date(2019, 4, 1, 6, 55, 0, 0, time.UTC)),
			Sender: &mail.Address{
				Name:    "Alice Sender",
				Address: "alice.sender@example.com",
			},
			From: []*mail.Address{
				&mail.Address{
					Name:    "Alice Sender",
					Address: "alice.sender@example.com",
				},
				&mail.Address{
					Name:    "Alice Sender",
					Address: "alice.sender@example.net",
				},
			},
			ReplyTo: []*mail.Address{
				&mail.Address{
					Name:    "Alice Sender",
					Address: "alice.sender@example.net",
				},
			},
			To: []*mail.Address{
				&mail.Address{
					Name:    "Bob Recipient",
					Address: "bob.recipient@example.com",
				},
				&mail.Address{
					Name:    "Carol Recipient",
					Address: "carol.recipient@example.com",
				},
			},
			Cc: []*mail.Address{
				&mail.Address{
					Name:    "Dan Recipient",
					Address: "dan.recipient@example.com",
				},
				&mail.Address{
					Name:    "Eve Recipient",
					Address: "eve.recipient@example.com",
				},
			},
			Bcc: []*mail.Address{
				&mail.Address{
					Name:    "Frank Recipient",
					Address: "frank.recipient@example.com",
				},
				&mail.Address{
					Name:    "Grace Recipient",
					Address: "grace.recipient@example.com",
				},
			},
			MessageID: "Message-Id-1@example.com",
			InReplyTo: []string{
				"Message-Id-0@example.com",
			},
			References: []string{
				"Message-Id-0@example.com",
			},
			Subject:  "📧 Test English Pangrams",
			Comments: "Message Header Comment",
			Keywords: []string{
				"Keyword 1",
				"Keyword 2",
			},
			ResentDate: time.Time(time.Date(2019, 4, 1, 6, 55, 0, 0, time.UTC)),
			ResentFrom: []*mail.Address{
				&mail.Address{
					Name:    "Alice Sender",
					Address: "alice.sender@example.net",
				},
				&mail.Address{
					Name:    "Alice Sender",
					Address: "alice.sender@example.com",
				},
			},
			ResentSender: &mail.Address{
				Name:    "Alice Sender",
				Address: "alice.sender@example.net",
			},
			ResentTo: []*mail.Address{
				&mail.Address{
					Name:    "Bob Recipient",
					Address: "bob.recipient@example.net",
				},
				&mail.Address{
					Name:    "Carol Recipient",
					Address: "carol.recipient@example.net",
				},
			},
			ResentCc: []*mail.Address{
				&mail.Address{
					Name:    "Dan Recipient",
					Address: "dan.recipient@example.net",
				},
				&mail.Address{
					Name:    "Eve Recipient",
					Address: "eve.recipient@example.net",
				},
			},
			ResentBcc: []*mail.Address{
				&mail.Address{
					Name:    "Frank Recipient",
					Address: "frank.recipient@example.net",
				},
				&mail.Address{
					Name:    "Grace Recipient",
					Address: "grace.recipient@example.net",
				},
			},
			ResentMessageID: "Message-Id-1@example.net",
			ExtraHeaders: map[string][]string{
				"X-Clacks-Overhead": []string{
					"GNU Terry Pratchett",
				},
				"X-Script/function/\t !\"#$%&'()*+,-./;<=>?@[\\]^_`{|}~": []string{
					"TEST VALUE 1\t !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_` abcdefghijklmnopqrstuvwxyz{|}~",
					"TEST VALUE 2\t !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_` abcdefghijklmnopqrstuvwxyz{|}~",
				},
			},
			ContentInfo: &email.ContentInfo{
				Type: "text/plain",
				TypeParams: map[string]string{
					"charset": "ascii",
				},
				Disposition:       "",
				DispositionParams: map[string]string(nil),
				TransferEncoding:  "base64",
				ID:                "",
				Charset:           "ascii",
			},
			Received: nil,
		},
		Text: "The quick brown fox jumps over a lazy dog.\n" +
			"Glib jocks quiz nymph to vex dwarf.\n" +
			"Sphinx of black quartz, judge my vow.\n" +
			"How vexingly quick daft zebras jump!\n" +
			"The five boxing wizards jump quickly.\n" +
			"Jackdaws love my big sphinx of quartz.\n" +
			"Pack my box with five dozen liquor jugs.",
		EnrichedText: "",
		HTML:         "",
		Files:        nil,
	}
	testEmailFromFile(t, fp, expectedEmail)
}

func TestParseEmailEnglishPlaintextAsciiOverQuotedprintable(t *testing.T) {
	fp := "tests/test_english_plaintext_ascii_over_quoted-printable.txt"
	expectedEmail := &email.Email{
		Headers: email.Headers{
			Date: time.Time(time.Date(2019, 4, 1, 6, 55, 0, 0, time.UTC)),
			Sender: &mail.Address{
				Name:    "Alice Sender",
				Address: "alice.sender@example.com",
			},
			From: []*mail.Address{
				&mail.Address{
					Name:    "Alice Sender",
					Address: "alice.sender@example.com",
				},
				&mail.Address{
					Name:    "Alice Sender",
					Address: "alice.sender@example.net",
				},
			},
			ReplyTo: []*mail.Address{
				&mail.Address{
					Name:    "Alice Sender",
					Address: "alice.sender@example.net",
				},
			},
			To: []*mail.Address{
				&mail.Address{
					Name:    "Bob Recipient",
					Address: "bob.recipient@example.com",
				},
				&mail.Address{
					Name:    "Carol Recipient",
					Address: "carol.recipient@example.com",
				},
			},
			Cc: []*mail.Address{
				&mail.Address{
					Name:    "Dan Recipient",
					Address: "dan.recipient@example.com",
				},
				&mail.Address{
					Name:    "Eve Recipient",
					Address: "eve.recipient@example.com",
				},
			},
			Bcc: []*mail.Address{
				&mail.Address{
					Name:    "Frank Recipient",
					Address: "frank.recipient@example.com",
				},
				&mail.Address{
					Name:    "Grace Recipient",
					Address: "grace.recipient@example.com",
				},
			},
			MessageID: "Message-Id-1@example.com",
			InReplyTo: []string{
				"Message-Id-0@example.com",
			},
			References: []string{
				"Message-Id-0@example.com",
			},
			Subject:  "📧 Test English Pangrams",
			Comments: "Message Header Comment",
			Keywords: []string{
				"Keyword 1",
				"Keyword 2",
			},
			ResentDate: time.Time(time.Date(2019, 4, 1, 6, 55, 0, 0, time.UTC)),
			ResentFrom: []*mail.Address{
				&mail.Address{
					Name:    "Alice Sender",
					Address: "alice.sender@example.net",
				},
				&mail.Address{
					Name:    "Alice Sender",
					Address: "alice.sender@example.com",
				},
			},
			ResentSender: &mail.Address{
				Name:    "Alice Sender",
				Address: "alice.sender@example.net",
			},
			ResentTo: []*mail.Address{
				&mail.Address{
					Name:    "Bob Recipient",
					Address: "bob.recipient@example.net",
				},
				&mail.Address{
					Name:    "Carol Recipient",
					Address: "carol.recipient@example.net",
				},
			},
			ResentCc: []*mail.Address{
				&mail.Address{
					Name:    "Dan Recipient",
					Address: "dan.recipient@example.net",
				},
				&mail.Address{
					Name:    "Eve Recipient",
					Address: "eve.recipient@example.net",
				},
			},
			ResentBcc: []*mail.Address{
				&mail.Address{
					Name:    "Frank Recipient",
					Address: "frank.recipient@example.net",
				},
				&mail.Address{
					Name:    "Grace Recipient",
					Address: "grace.recipient@example.net",
				},
			},
			ResentMessageID: "Message-Id-1@example.net",
			ExtraHeaders: map[string][]string{
				"X-Clacks-Overhead": []string{
					"GNU Terry Pratchett",
				},
				"X-Script/function/\t !\"#$%&'()*+,-./;<=>?@[\\]^_`{|}~": []string{
					"TEST VALUE 1\t !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_` abcdefghijklmnopqrstuvwxyz{|}~",
					"TEST VALUE 2\t !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_` abcdefghijklmnopqrstuvwxyz{|}~",
				},
			},
			ContentInfo: &email.ContentInfo{
				Type: "text/plain",
				TypeParams: map[string]string{
					"charset": "ascii",
				},
				Disposition:       "",
				DispositionParams: map[string]string(nil),
				TransferEncoding:  "quoted-printable",
				ID:                "",
				Charset:           "ascii",
			},
			Received: nil,
		},
		Text: "The quick brown fox jumps over a lazy dog.\n" +
			"Glib jocks quiz nymph to vex dwarf.\n" +
			"Sphinx of black quartz, judge my vow.\n" +
			"How vexingly quick daft zebras jump!\n" +
			"The five boxing wizards jump quickly.\n" +
			"Jackdaws love my big sphinx of quartz.\n" +
			"Pack my box with five dozen liquor jugs.",
		EnrichedText: "",
		HTML:         "",
		Files:        nil,
	}
	testEmailFromFile(t, fp, expectedEmail)
}

func TestParseEmailEnglishPlaintextUtf8Over7bit(t *testing.T) {
	fp := "tests/test_english_plaintext_utf-8_over_7bit.txt"
	expectedEmail := &email.Email{
		Headers: email.Headers{
			Date: time.Time(time.Date(2019, 4, 1, 6, 55, 0, 0, time.UTC)),
			Sender: &mail.Address{
				Name:    "Alice Sender",
				Address: "alice.sender@example.com",
			},
			From: []*mail.Address{
				&mail.Address{
					Name:    "Alice Sender",
					Address: "alice.sender@example.com",
				},
				&mail.Address{
					Name:    "Alice Sender",
					Address: "alice.sender@example.net",
				},
			},
			ReplyTo: []*mail.Address{
				&mail.Address{
					Name:    "Alice Sender",
					Address: "alice.sender@example.net",
				},
			},
			To: []*mail.Address{
				&mail.Address{
					Name:    "Bob Recipient",
					Address: "bob.recipient@example.com",
				},
				&mail.Address{
					Name:    "Carol Recipient",
					Address: "carol.recipient@example.com",
				},
			},
			Cc: []*mail.Address{
				&mail.Address{
					Name:    "Dan Recipient",
					Address: "dan.recipient@example.com",
				},
				&mail.Address{
					Name:    "Eve Recipient",
					Address: "eve.recipient@example.com",
				},
			},
			Bcc: []*mail.Address{
				&mail.Address{
					Name:    "Frank Recipient",
					Address: "frank.recipient@example.com",
				},
				&mail.Address{
					Name:    "Grace Recipient",
					Address: "grace.recipient@example.com",
				},
			},
			MessageID: "Message-Id-1@example.com",
			InReplyTo: []string{
				"Message-Id-0@example.com",
			},
			References: []string{
				"Message-Id-0@example.com",
			},
			Subject:  "📧 Test English Pangrams",
			Comments: "Message Header Comment",
			Keywords: []string{
				"Keyword 1",
				"Keyword 2",
			},
			ResentDate: time.Time(time.Date(2019, 4, 1, 6, 55, 0, 0, time.UTC)),
			ResentFrom: []*mail.Address{
				&mail.Address{
					Name:    "Alice Sender",
					Address: "alice.sender@example.net",
				},
				&mail.Address{
					Name:    "Alice Sender",
					Address: "alice.sender@example.com",
				},
			},
			ResentSender: &mail.Address{
				Name:    "Alice Sender",
				Address: "alice.sender@example.net",
			},
			ResentTo: []*mail.Address{
				&mail.Address{
					Name:    "Bob Recipient",
					Address: "bob.recipient@example.net",
				},
				&mail.Address{
					Name:    "Carol Recipient",
					Address: "carol.recipient@example.net",
				},
			},
			ResentCc: []*mail.Address{
				&mail.Address{
					Name:    "Dan Recipient",
					Address: "dan.recipient@example.net",
				},
				&mail.Address{
					Name:    "Eve Recipient",
					Address: "eve.recipient@example.net",
				},
			},
			ResentBcc: []*mail.Address{
				&mail.Address{
					Name:    "Frank Recipient",
					Address: "frank.recipient@example.net",
				},
				&mail.Address{
					Name:    "Grace Recipient",
					Address: "grace.recipient@example.net",
				},
			},
			ResentMessageID: "Message-Id-1@example.net",
			ExtraHeaders: map[string][]string{
				"X-Clacks-Overhead": []string{
					"GNU Terry Pratchett",
				},
				"X-Script/function/\t !\"#$%&'()*+,-./;<=>?@[\\]^_`{|}~": []string{
					"TEST VALUE 1\t !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_` abcdefghijklmnopqrstuvwxyz{|}~",
					"TEST VALUE 2\t !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_` abcdefghijklmnopqrstuvwxyz{|}~",
				},
			},
			ContentInfo: &email.ContentInfo{
				Type: "text/plain",
				TypeParams: map[string]string{
					"charset": "utf-8",
				},
				Disposition:       "",
				DispositionParams: map[string]string(nil),
				TransferEncoding:  "7bit",
				ID:                "",
				Charset:           "utf-8",
			},
			Received: nil,
		},
		Text: "The quick brown fox jumps over a lazy dog.\n" +
			"Glib jocks quiz nymph to vex dwarf.\n" +
			"Sphinx of black quartz, judge my vow.\n" +
			"How vexingly quick daft zebras jump!\n" +
			"The five boxing wizards jump quickly.\n" +
			"Jackdaws love my big sphinx of quartz.\n" +
			"Pack my box with five dozen liquor jugs.",
		EnrichedText: "",
		HTML:         "",
		Files:        nil,
	}
	testEmailFromFile(t, fp, expectedEmail)
}

func TestParseEmailEnglishPlaintextUtf8OverBase64(t *testing.T) {
	fp := "tests/test_english_plaintext_utf-8_over_base64.txt"
	expectedEmail := &email.Email{
		Headers: email.Headers{
			Date: time.Time(time.Date(2019, 4, 1, 6, 55, 0, 0, time.UTC)),
			Sender: &mail.Address{
				Name:    "Alice Sender",
				Address: "alice.sender@example.com",
			},
			From: []*mail.Address{
				&mail.Address{
					Name:    "Alice Sender",
					Address: "alice.sender@example.com",
				},
				&mail.Address{
					Name:    "Alice Sender",
					Address: "alice.sender@example.net",
				},
			},
			ReplyTo: []*mail.Address{
				&mail.Address{
					Name:    "Alice Sender",
					Address: "alice.sender@example.net",
				},
			},
			To: []*mail.Address{
				&mail.Address{
					Name:    "Bob Recipient",
					Address: "bob.recipient@example.com",
				},
				&mail.Address{
					Name:    "Carol Recipient",
					Address: "carol.recipient@example.com",
				},
			},
			Cc: []*mail.Address{
				&mail.Address{
					Name:    "Dan Recipient",
					Address: "dan.recipient@example.com",
				},
				&mail.Address{
					Name:    "Eve Recipient",
					Address: "eve.recipient@example.com",
				},
			},
			Bcc: []*mail.Address{
				&mail.Address{
					Name:    "Frank Recipient",
					Address: "frank.recipient@example.com",
				},
				&mail.Address{
					Name:    "Grace Recipient",
					Address: "grace.recipient@example.com",
				},
			},
			MessageID: "Message-Id-1@example.com",
			InReplyTo: []string{
				"Message-Id-0@example.com",
			},
			References: []string{
				"Message-Id-0@example.com",
			},
			Subject:  "📧 Test English Pangrams",
			Comments: "Message Header Comment",
			Keywords: []string{
				"Keyword 1",
				"Keyword 2",
			},
			ResentDate: time.Time(time.Date(2019, 4, 1, 6, 55, 0, 0, time.UTC)),
			ResentFrom: []*mail.Address{
				&mail.Address{
					Name:    "Alice Sender",
					Address: "alice.sender@example.net",
				},
				&mail.Address{
					Name:    "Alice Sender",
					Address: "alice.sender@example.com",
				},
			},
			ResentSender: &mail.Address{
				Name:    "Alice Sender",
				Address: "alice.sender@example.net",
			},
			ResentTo: []*mail.Address{
				&mail.Address{
					Name:    "Bob Recipient",
					Address: "bob.recipient@example.net",
				},
				&mail.Address{
					Name:    "Carol Recipient",
					Address: "carol.recipient@example.net",
				},
			},
			ResentCc: []*mail.Address{
				&mail.Address{
					Name:    "Dan Recipient",
					Address: "dan.recipient@example.net",
				},
				&mail.Address{
					Name:    "Eve Recipient",
					Address: "eve.recipient@example.net",
				},
			},
			ResentBcc: []*mail.Address{
				&mail.Address{
					Name:    "Frank Recipient",
					Address: "frank.recipient@example.net",
				},
				&mail.Address{
					Name:    "Grace Recipient",
					Address: "grace.recipient@example.net",
				},
			},
			ResentMessageID: "Message-Id-1@example.net",
			ExtraHeaders: map[string][]string{
				"X-Clacks-Overhead": []string{
					"GNU Terry Pratchett",
				},
				"X-Script/function/\t !\"#$%&'()*+,-./;<=>?@[\\]^_`{|}~": []string{
					"TEST VALUE 1\t !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_` abcdefghijklmnopqrstuvwxyz{|}~",
					"TEST VALUE 2\t !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_` abcdefghijklmnopqrstuvwxyz{|}~",
				},
			},
			ContentInfo: &email.ContentInfo{
				Type: "text/plain",
				TypeParams: map[string]string{
					"charset": "utf-8",
				},
				Disposition:       "",
				DispositionParams: map[string]string(nil),
				TransferEncoding:  "base64",
				ID:                "",
				Charset:           "utf-8",
			},
			Received: nil,
		},
		Text: "The quick brown fox jumps over a lazy dog.\n" +
			"Glib jocks quiz nymph to vex dwarf.\n" +
			"Sphinx of black quartz, judge my vow.\n" +
			"How vexingly quick daft zebras jump!\n" +
			"The five boxing wizards jump quickly.\n" +
			"Jackdaws love my big sphinx of quartz.\n" +
			"Pack my box with five dozen liquor jugs.",
		EnrichedText: "",
		HTML:         "",
		Files:        nil,
	}
	testEmailFromFile(t, fp, expectedEmail)
}

func TestParseEmailEnglishPlaintextUtf8OverQuotedprintable(t *testing.T) {
	fp := "tests/test_english_plaintext_utf-8_over_quoted-printable.txt"
	expectedEmail := &email.Email{
		Headers: email.Headers{
			Date: time.Time(time.Date(2019, 4, 1, 6, 55, 0, 0, time.UTC)),
			Sender: &mail.Address{
				Name:    "Alice Sender",
				Address: "alice.sender@example.com",
			},
			From: []*mail.Address{
				&mail.Address{
					Name:    "Alice Sender",
					Address: "alice.sender@example.com",
				},
				&mail.Address{
					Name:    "Alice Sender",
					Address: "alice.sender@example.net",
				},
			},
			ReplyTo: []*mail.Address{
				&mail.Address{
					Name:    "Alice Sender",
					Address: "alice.sender@example.net",
				},
			},
			To: []*mail.Address{
				&mail.Address{
					Name:    "Bob Recipient",
					Address: "bob.recipient@example.com",
				},
				&mail.Address{
					Name:    "Carol Recipient",
					Address: "carol.recipient@example.com",
				},
			},
			Cc: []*mail.Address{
				&mail.Address{
					Name:    "Dan Recipient",
					Address: "dan.recipient@example.com",
				},
				&mail.Address{
					Name:    "Eve Recipient",
					Address: "eve.recipient@example.com",
				},
			},
			Bcc: []*mail.Address{
				&mail.Address{
					Name:    "Frank Recipient",
					Address: "frank.recipient@example.com",
				},
				&mail.Address{
					Name:    "Grace Recipient",
					Address: "grace.recipient@example.com",
				},
			},
			MessageID: "Message-Id-1@example.com",
			InReplyTo: []string{
				"Message-Id-0@example.com",
			},
			References: []string{
				"Message-Id-0@example.com",
			},
			Subject:  "📧 Test English Pangrams",
			Comments: "Message Header Comment",
			Keywords: []string{
				"Keyword 1",
				"Keyword 2",
			},
			ResentDate: time.Time(time.Date(2019, 4, 1, 6, 55, 0, 0, time.UTC)),
			ResentFrom: []*mail.Address{
				&mail.Address{
					Name:    "Alice Sender",
					Address: "alice.sender@example.net",
				},
				&mail.Address{
					Name:    "Alice Sender",
					Address: "alice.sender@example.com",
				},
			},
			ResentSender: &mail.Address{
				Name:    "Alice Sender",
				Address: "alice.sender@example.net",
			},
			ResentTo: []*mail.Address{
				&mail.Address{
					Name:    "Bob Recipient",
					Address: "bob.recipient@example.net",
				},
				&mail.Address{
					Name:    "Carol Recipient",
					Address: "carol.recipient@example.net",
				},
			},
			ResentCc: []*mail.Address{
				&mail.Address{
					Name:    "Dan Recipient",
					Address: "dan.recipient@example.net",
				},
				&mail.Address{
					Name:    "Eve Recipient",
					Address: "eve.recipient@example.net",
				},
			},
			ResentBcc: []*mail.Address{
				&mail.Address{
					Name:    "Frank Recipient",
					Address: "frank.recipient@example.net",
				},
				&mail.Address{
					Name:    "Grace Recipient",
					Address: "grace.recipient@example.net",
				},
			},
			ResentMessageID: "Message-Id-1@example.net",
			ExtraHeaders: map[string][]string{
				"X-Clacks-Overhead": []string{
					"GNU Terry Pratchett",
				},
				"X-Script/function/\t !\"#$%&'()*+,-./;<=>?@[\\]^_`{|}~": []string{
					"TEST VALUE 1\t !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_` abcdefghijklmnopqrstuvwxyz{|}~",
					"TEST VALUE 2\t !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_` abcdefghijklmnopqrstuvwxyz{|}~",
				},
			},
			ContentInfo: &email.ContentInfo{
				Type: "text/plain",
				TypeParams: map[string]string{
					"charset": "utf-8",
				},
				Disposition:       "",
				DispositionParams: map[string]string(nil),
				TransferEncoding:  "quoted-printable",
				ID:                "",
				Charset:           "utf-8",
			},
			Received: nil,
		},
		Text: "The quick brown fox jumps over a lazy dog.\n" +
			"Glib jocks quiz nymph to vex dwarf.\n" +
			"Sphinx of black quartz, judge my vow.\n" +
			"How vexingly quick daft zebras jump!\n" +
			"The five boxing wizards jump quickly.\n" +
			"Jackdaws love my big sphinx of quartz.\n" +
			"Pack my box with five dozen liquor jugs.",
		EnrichedText: "",
		HTML:         "",
		Files:        nil,
	}
	testEmailFromFile(t, fp, expectedEmail)
}

func TestParseEmailEnglishMultipartRelatedAsciiOver7bit(t *testing.T) {
	fp := "tests/test_english_multipart_related_ascii_over_7bit.txt"
	expectedEmail := &email.Email{
		Headers: email.Headers{
			Date: time.Time(time.Date(2019, 4, 1, 6, 55, 0, 0, time.UTC)),
			Sender: &mail.Address{
				Name:    "Alice Sender",
				Address: "alice.sender@example.com",
			},
			From: []*mail.Address{
				&mail.Address{
					Name:    "Alice Sender",
					Address: "alice.sender@example.com",
				},
				&mail.Address{
					Name:    "Alice Sender",
					Address: "alice.sender@example.net",
				},
			},
			ReplyTo: []*mail.Address{
				&mail.Address{
					Name:    "Alice Sender",
					Address: "alice.sender@example.net",
				},
			},
			To: []*mail.Address{
				&mail.Address{
					Name:    "Bob Recipient",
					Address: "bob.recipient@example.com",
				},
				&mail.Address{
					Name:    "Carol Recipient",
					Address: "carol.recipient@example.com",
				},
			},
			Cc: []*mail.Address{
				&mail.Address{
					Name:    "Dan Recipient",
					Address: "dan.recipient@example.com",
				},
				&mail.Address{
					Name:    "Eve Recipient",
					Address: "eve.recipient@example.com",
				},
			},
			Bcc: []*mail.Address{
				&mail.Address{
					Name:    "Frank Recipient",
					Address: "frank.recipient@example.com",
				},
				&mail.Address{
					Name:    "Grace Recipient",
					Address: "grace.recipient@example.com",
				},
			},
			MessageID: "Message-Id-1@example.com",
			InReplyTo: []string{
				"Message-Id-0@example.com",
			},
			References: []string{
				"Message-Id-0@example.com",
			},
			Subject:  "📧 Test English Pangrams",
			Comments: "Message Header Comment",
			Keywords: []string{
				"Keyword 1",
				"Keyword 2",
			},
			ResentDate: time.Time(time.Date(2019, 4, 1, 6, 55, 0, 0, time.UTC)),
			ResentFrom: []*mail.Address{
				&mail.Address{
					Name:    "Alice Sender",
					Address: "alice.sender@example.net",
				},
				&mail.Address{
					Name:    "Alice Sender",
					Address: "alice.sender@example.com",
				},
			},
			ResentSender: &mail.Address{
				Name:    "Alice Sender",
				Address: "alice.sender@example.net",
			},
			ResentTo: []*mail.Address{
				&mail.Address{
					Name:    "Bob Recipient",
					Address: "bob.recipient@example.net",
				},
				&mail.Address{
					Name:    "Carol Recipient",
					Address: "carol.recipient@example.net",
				},
			},
			ResentCc: []*mail.Address{
				&mail.Address{
					Name:    "Dan Recipient",
					Address: "dan.recipient@example.net",
				},
				&mail.Address{
					Name:    "Eve Recipient",
					Address: "eve.recipient@example.net",
				},
			},
			ResentBcc: []*mail.Address{
				&mail.Address{
					Name:    "Frank Recipient",
					Address: "frank.recipient@example.net",
				},
				&mail.Address{
					Name:    "Grace Recipient",
					Address: "grace.recipient@example.net",
				},
			},
			ResentMessageID: "Message-Id-1@example.net",
			ExtraHeaders: map[string][]string{
				"X-Clacks-Overhead": []string{
					"GNU Terry Pratchett",
				},
				"X-Script/function/\t !\"#$%&'()*+,-./;<=>?@[\\]^_`{|}~": []string{
					"TEST VALUE 1\t !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_` abcdefghijklmnopqrstuvwxyz{|}~",
					"TEST VALUE 2\t !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_` abcdefghijklmnopqrstuvwxyz{|}~",
				},
			},
			ContentInfo: &email.ContentInfo{
				Type: "multipart/related",
				TypeParams: map[string]string{
					"boundary": "RelatedBoundaryString",
					"charset":  "ascii",
				},
				Disposition:       "",
				DispositionParams: map[string]string(nil), // p0
				TransferEncoding:  "7bit",
				ID:                "",
				Charset:           "ascii",
			},
			Received: nil,
		},
		Text: "The quick brown fox jumps over a lazy dog.\n" +
			"Glib jocks quiz nymph to vex dwarf.\n" +
			"Sphinx of black quartz, judge my vow.\n" +
			"How vexingly quick daft zebras jump!\n" +
			"The five boxing wizards jump quickly.\n" +
			"Jackdaws love my big sphinx of quartz.\n" +
			"Pack my box with five dozen liquor jugs.",
		EnrichedText: "<bold>The quick brown fox jumps over a lazy dog.</bold>\n" +
			"<italic>Glib jocks quiz nymph to vex dwarf.</italic>\n" +
			"<fixed>Sphinx of black quartz, judge my vow.</fixed>\n" +
			"<underline>How vexingly quick daft zebras jump!</underline>\n" +
			"The five boxing wizards jump quickly.\n" +
			"Jackdaws love my big sphinx of quartz.\n" +
			"Pack my box with five dozen liquor jugs.",
		HTML: "<html>\n" +
			"<div dir=\"ltr\">\n" +
			"<p>The quick brown fox jumps over a lazy dog.</p>\n" +
			"<p>Glib jocks quiz nymph to vex dwarf.</p>\n" +
			"<p>Sphinx of black quartz, judge my vow.</p>\n" +
			"<p>How vexingly quick daft zebras jump!</p>\n" +
			"<p>The five boxing wizards jump quickly.</p>\n" +
			"<p>Jackdaws love my big sphinx of quartz.</p>\n" +
			"<p>Pack my box with five dozen liquor jugs.</p>\n" +
			"</div>\n" +
			"</html>",
		Files: []*email.File{
			&email.File{
				FileType: "inline",
				Name:     "inline-jpg-image-filename.jpg",
				ContentInfo: &email.ContentInfo{
					Type: "image/jpeg",
					TypeParams: map[string]string{
						"name": "inline-jpg-image-name.jpg",
					},
					Disposition: "inline",
					DispositionParams: map[string]string{
						"filename": "inline-jpg-image-filename.jpg",
					},
					TransferEncoding: "base64",
					ID:               "inline-jpg-image.jpg@example.com",
					Charset:          "ascii",
				},
				Data: []byte{
					195, 191, 195, 152, 195, 191, 195, 155, 0, 67, 0, 3, 2, 2, 2, 2, 2, 3, 2, 2, 2, 3,
					3, 3, 3, 4, 6, 4, 4, 4, 4, 4, 8, 6, 6, 5, 6, 9, 8, 10, 10, 9, 8, 9, 9, 10, 12, 15,
					12, 10, 11, 14, 11, 9, 9, 13, 17, 13, 14, 15, 16, 16, 17, 16, 10, 12, 18, 19, 18,
					16, 19, 15, 16, 16, 16, 195, 191, 195, 137, 0, 11, 8, 0, 1, 0, 1, 1, 1, 17, 0, 195,
					191, 195, 140, 0, 6, 0, 16, 16, 5, 195, 191, 195, 154, 0, 8, 1, 1, 0, 0, 63, 0, 195,
					146, 195, 143, 32, 195, 191, 195, 153,
				},
			},
		},
	}
	testEmailFromFile(t, fp, expectedEmail)
}

func TestParseEmailEnglishMultipartRelatedAsciiOverBase64(t *testing.T) {
	fp := "tests/test_english_multipart_related_ascii_over_base64.txt"
	expectedEmail := &email.Email{
		Headers: email.Headers{
			Date: time.Time(time.Date(2019, 4, 1, 6, 55, 0, 0, time.UTC)),
			Sender: &mail.Address{
				Name:    "Alice Sender",
				Address: "alice.sender@example.com",
			},
			From: []*mail.Address{
				&mail.Address{
					Name:    "Alice Sender",
					Address: "alice.sender@example.com",
				},
				&mail.Address{
					Name:    "Alice Sender",
					Address: "alice.sender@example.net",
				},
			},
			ReplyTo: []*mail.Address{
				&mail.Address{
					Name:    "Alice Sender",
					Address: "alice.sender@example.net",
				},
			},
			To: []*mail.Address{
				&mail.Address{
					Name:    "Bob Recipient",
					Address: "bob.recipient@example.com",
				},
				&mail.Address{
					Name:    "Carol Recipient",
					Address: "carol.recipient@example.com",
				},
			},
			Cc: []*mail.Address{
				&mail.Address{
					Name:    "Dan Recipient",
					Address: "dan.recipient@example.com",
				},
				&mail.Address{
					Name:    "Eve Recipient",
					Address: "eve.recipient@example.com",
				},
			},
			Bcc: []*mail.Address{
				&mail.Address{
					Name:    "Frank Recipient",
					Address: "frank.recipient@example.com",
				},
				&mail.Address{
					Name:    "Grace Recipient",
					Address: "grace.recipient@example.com",
				},
			},
			MessageID: "Message-Id-1@example.com",
			InReplyTo: []string{
				"Message-Id-0@example.com",
			},
			References: []string{
				"Message-Id-0@example.com",
			},
			Subject:  "📧 Test English Pangrams",
			Comments: "Message Header Comment",
			Keywords: []string{
				"Keyword 1",
				"Keyword 2",
			},
			ResentDate: time.Time(time.Date(2019, 4, 1, 6, 55, 0, 0, time.UTC)),
			ResentFrom: []*mail.Address{
				&mail.Address{
					Name:    "Alice Sender",
					Address: "alice.sender@example.net",
				},
				&mail.Address{
					Name:    "Alice Sender",
					Address: "alice.sender@example.com",
				},
			},
			ResentSender: &mail.Address{
				Name:    "Alice Sender",
				Address: "alice.sender@example.net",
			},
			ResentTo: []*mail.Address{
				&mail.Address{
					Name:    "Bob Recipient",
					Address: "bob.recipient@example.net",
				},
				&mail.Address{
					Name:    "Carol Recipient",
					Address: "carol.recipient@example.net",
				},
			},
			ResentCc: []*mail.Address{
				&mail.Address{
					Name:    "Dan Recipient",
					Address: "dan.recipient@example.net",
				},
				&mail.Address{
					Name:    "Eve Recipient",
					Address: "eve.recipient@example.net",
				},
			},
			ResentBcc: []*mail.Address{
				&mail.Address{
					Name:    "Frank Recipient",
					Address: "frank.recipient@example.net",
				},
				&mail.Address{
					Name:    "Grace Recipient",
					Address: "grace.recipient@example.net",
				},
			},
			ResentMessageID: "Message-Id-1@example.net",
			ExtraHeaders: map[string][]string{
				"X-Clacks-Overhead": []string{
					"GNU Terry Pratchett",
				},
				"X-Script/function/\t !\"#$%&'()*+,-./;<=>?@[\\]^_`{|}~": []string{
					"TEST VALUE 1\t !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_` abcdefghijklmnopqrstuvwxyz{|}~",
					"TEST VALUE 2\t !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_` abcdefghijklmnopqrstuvwxyz{|}~",
				},
			},
			ContentInfo: &email.ContentInfo{
				Type: "multipart/related",
				TypeParams: map[string]string{
					"boundary": "RelatedBoundaryString",
					"charset":  "ascii",
				},
				Disposition:       "",
				DispositionParams: map[string]string(nil), // p0
				TransferEncoding:  "base64",
				ID:                "",
				Charset:           "ascii",
			},
			Received: nil,
		},
		Text: "The quick brown fox jumps over a lazy dog.\n" +
			"Glib jocks quiz nymph to vex dwarf.\n" +
			"Sphinx of black quartz, judge my vow.\n" +
			"How vexingly quick daft zebras jump!\n" +
			"The five boxing wizards jump quickly.\n" +
			"Jackdaws love my big sphinx of quartz.\n" +
			"Pack my box with five dozen liquor jugs.",
		EnrichedText: "<bold>The quick brown fox jumps over a lazy dog.</bold>\n" +
			"<italic>Glib jocks quiz nymph to vex dwarf.</italic>\n" +
			"<fixed>Sphinx of black quartz, judge my vow.</fixed>\n" +
			"<underline>How vexingly quick daft zebras jump!</underline>\n" +
			"The five boxing wizards jump quickly.\n" +
			"Jackdaws love my big sphinx of quartz.\n" +
			"Pack my box with five dozen liquor jugs.",
		HTML: "<html>\n" +
			"<div dir=\"ltr\">\n" +
			"<p>The quick brown fox jumps over a lazy dog.</p>\n" +
			"<p>Glib jocks quiz nymph to vex dwarf.</p>\n" +
			"<p>Sphinx of black quartz, judge my vow.</p>\n" +
			"<p>How vexingly quick daft zebras jump!</p>\n" +
			"<p>The five boxing wizards jump quickly.</p>\n" +
			"<p>Jackdaws love my big sphinx of quartz.</p>\n" +
			"<p>Pack my box with five dozen liquor jugs.</p>\n" +
			"</div>\n" +
			"</html>",
		Files: []*email.File{
			&email.File{
				FileType: "inline",
				Name:     "inline-jpg-image-filename.jpg",
				ContentInfo: &email.ContentInfo{
					Type: "image/jpeg",
					TypeParams: map[string]string{
						"name": "inline-jpg-image-name.jpg",
					},
					Disposition: "inline",
					DispositionParams: map[string]string{
						"filename": "inline-jpg-image-filename.jpg",
					},
					TransferEncoding: "base64",
					ID:               "inline-jpg-image.jpg@example.com",
					Charset:          "ascii",
				},
				Data: []byte{
					195, 191, 195, 152, 195, 191, 195, 155, 0, 67, 0, 3, 2, 2, 2, 2, 2, 3, 2, 2, 2, 3,
					3, 3, 3, 4, 6, 4, 4, 4, 4, 4, 8, 6, 6, 5, 6, 9, 8, 10, 10, 9, 8, 9, 9, 10, 12, 15,
					12, 10, 11, 14, 11, 9, 9, 13, 17, 13, 14, 15, 16, 16, 17, 16, 10, 12, 18, 19, 18,
					16, 19, 15, 16, 16, 16, 195, 191, 195, 137, 0, 11, 8, 0, 1, 0, 1, 1, 1, 17, 0, 195,
					191, 195, 140, 0, 6, 0, 16, 16, 5, 195, 191, 195, 154, 0, 8, 1, 1, 0, 0, 63, 0, 195,
					146, 195, 143, 32, 195, 191, 195, 153,
				},
			},
		},
	}
	testEmailFromFile(t, fp, expectedEmail)
}

func TestParseEmailEnglishMultipartRelatedAsciiOverQuotedprintable(t *testing.T) {
	fp := "tests/test_english_multipart_related_ascii_over_quoted-printable.txt"
	expectedEmail := &email.Email{
		Headers: email.Headers{
			Date: time.Time(time.Date(2019, 4, 1, 6, 55, 0, 0, time.UTC)),
			Sender: &mail.Address{
				Name:    "Alice Sender",
				Address: "alice.sender@example.com",
			},
			From: []*mail.Address{
				&mail.Address{
					Name:    "Alice Sender",
					Address: "alice.sender@example.com",
				},
				&mail.Address{
					Name:    "Alice Sender",
					Address: "alice.sender@example.net",
				},
			},
			ReplyTo: []*mail.Address{
				&mail.Address{
					Name:    "Alice Sender",
					Address: "alice.sender@example.net",
				},
			},
			To: []*mail.Address{
				&mail.Address{
					Name:    "Bob Recipient",
					Address: "bob.recipient@example.com",
				},
				&mail.Address{
					Name:    "Carol Recipient",
					Address: "carol.recipient@example.com",
				},
			},
			Cc: []*mail.Address{
				&mail.Address{
					Name:    "Dan Recipient",
					Address: "dan.recipient@example.com",
				},
				&mail.Address{
					Name:    "Eve Recipient",
					Address: "eve.recipient@example.com",
				},
			},
			Bcc: []*mail.Address{
				&mail.Address{
					Name:    "Frank Recipient",
					Address: "frank.recipient@example.com",
				},
				&mail.Address{
					Name:    "Grace Recipient",
					Address: "grace.recipient@example.com",
				},
			},
			MessageID: "Message-Id-1@example.com",
			InReplyTo: []string{
				"Message-Id-0@example.com",
			},
			References: []string{
				"Message-Id-0@example.com",
			},
			Subject:  "📧 Test English Pangrams",
			Comments: "Message Header Comment",
			Keywords: []string{
				"Keyword 1",
				"Keyword 2",
			},
			ResentDate: time.Time(time.Date(2019, 4, 1, 6, 55, 0, 0, time.UTC)),
			ResentFrom: []*mail.Address{
				&mail.Address{
					Name:    "Alice Sender",
					Address: "alice.sender@example.net",
				},
				&mail.Address{
					Name:    "Alice Sender",
					Address: "alice.sender@example.com",
				},
			},
			ResentSender: &mail.Address{
				Name:    "Alice Sender",
				Address: "alice.sender@example.net",
			},
			ResentTo: []*mail.Address{
				&mail.Address{
					Name:    "Bob Recipient",
					Address: "bob.recipient@example.net",
				},
				&mail.Address{
					Name:    "Carol Recipient",
					Address: "carol.recipient@example.net",
				},
			},
			ResentCc: []*mail.Address{
				&mail.Address{
					Name:    "Dan Recipient",
					Address: "dan.recipient@example.net",
				},
				&mail.Address{
					Name:    "Eve Recipient",
					Address: "eve.recipient@example.net",
				},
			},
			ResentBcc: []*mail.Address{
				&mail.Address{
					Name:    "Frank Recipient",
					Address: "frank.recipient@example.net",
				},
				&mail.Address{
					Name:    "Grace Recipient",
					Address: "grace.recipient@example.net",
				},
			},
			ResentMessageID: "Message-Id-1@example.net",
			ExtraHeaders: map[string][]string{
				"X-Clacks-Overhead": []string{
					"GNU Terry Pratchett",
				},
				"X-Script/function/\t !\"#$%&'()*+,-./;<=>?@[\\]^_`{|}~": []string{
					"TEST VALUE 1\t !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_` abcdefghijklmnopqrstuvwxyz{|}~",
					"TEST VALUE 2\t !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_` abcdefghijklmnopqrstuvwxyz{|}~",
				},
			},
			ContentInfo: &email.ContentInfo{
				Type: "multipart/related",
				TypeParams: map[string]string{
					"boundary": "RelatedBoundaryString",
					"charset":  "ascii",
				},
				Disposition:       "",
				DispositionParams: map[string]string(nil), // p0
				TransferEncoding:  "quoted-printable",
				ID:                "",
				Charset:           "ascii",
			},
			Received: nil,
		},
		Text: "The quick brown fox jumps over a lazy dog.\n" +
			"Glib jocks quiz nymph to vex dwarf.\n" +
			"Sphinx of black quartz, judge my vow.\n" +
			"How vexingly quick daft zebras jump!\n" +
			"The five boxing wizards jump quickly.\n" +
			"Jackdaws love my big sphinx of quartz.\n" +
			"Pack my box with five dozen liquor jugs.",
		EnrichedText: "<bold>The quick brown fox jumps over a lazy dog.</bold>\n" +
			"<italic>Glib jocks quiz nymph to vex dwarf.</italic>\n" +
			"<fixed>Sphinx of black quartz, judge my vow.</fixed>\n" +
			"<underline>How vexingly quick daft zebras jump!</underline>\n" +
			"The five boxing wizards jump quickly.\n" +
			"Jackdaws love my big sphinx of quartz.\n" +
			"Pack my box with five dozen liquor jugs.",
		HTML: "<html>\n" +
			"<div dir=\"ltr\">\n" +
			"<p>The quick brown fox jumps over a lazy dog.</p>\n" +
			"<p>Glib jocks quiz nymph to vex dwarf.</p>\n" +
			"<p>Sphinx of black quartz, judge my vow.</p>\n" +
			"<p>How vexingly quick daft zebras jump!</p>\n" +
			"<p>The five boxing wizards jump quickly.</p>\n" +
			"<p>Jackdaws love my big sphinx of quartz.</p>\n" +
			"<p>Pack my box with five dozen liquor jugs.</p>\n" +
			"</div>\n" +
			"</html>",
		Files: []*email.File{
			&email.File{
				FileType: "inline",
				Name:     "inline-jpg-image-filename.jpg",
				ContentInfo: &email.ContentInfo{
					Type: "image/jpeg",
					TypeParams: map[string]string{
						"name": "inline-jpg-image-name.jpg",
					},
					Disposition: "inline",
					DispositionParams: map[string]string{
						"filename": "inline-jpg-image-filename.jpg",
					},
					TransferEncoding: "base64",
					ID:               "inline-jpg-image.jpg@example.com",
					Charset:          "ascii",
				},
				Data: []byte{
					195, 191, 195, 152, 195, 191, 195, 155, 0, 67, 0, 3, 2, 2, 2, 2, 2, 3, 2, 2, 2, 3,
					3, 3, 3, 4, 6, 4, 4, 4, 4, 4, 8, 6, 6, 5, 6, 9, 8, 10, 10, 9, 8, 9, 9, 10, 12, 15,
					12, 10, 11, 14, 11, 9, 9, 13, 17, 13, 14, 15, 16, 16, 17, 16, 10, 12, 18, 19, 18,
					16, 19, 15, 16, 16, 16, 195, 191, 195, 137, 0, 11, 8, 0, 1, 0, 1, 1, 1, 17, 0, 195,
					191, 195, 140, 0, 6, 0, 16, 16, 5, 195, 191, 195, 154, 0, 8, 1, 1, 0, 0, 63, 0, 195,
					146, 195, 143, 32, 195, 191, 195, 153,
				},
			},
		},
	}
	testEmailFromFile(t, fp, expectedEmail)
}

func TestParseEmailEnglishMultipartRelatedUtf8Over7bit(t *testing.T) {
	fp := "tests/test_english_multipart_related_utf-8_over_7bit.txt"
	expectedEmail := &email.Email{
		Headers: email.Headers{
			Date: time.Time(time.Date(2019, 4, 1, 6, 55, 0, 0, time.UTC)),
			Sender: &mail.Address{
				Name:    "Alice Sender",
				Address: "alice.sender@example.com",
			},
			From: []*mail.Address{
				&mail.Address{
					Name:    "Alice Sender",
					Address: "alice.sender@example.com",
				},
				&mail.Address{
					Name:    "Alice Sender",
					Address: "alice.sender@example.net",
				},
			},
			ReplyTo: []*mail.Address{
				&mail.Address{
					Name:    "Alice Sender",
					Address: "alice.sender@example.net",
				},
			},
			To: []*mail.Address{
				&mail.Address{
					Name:    "Bob Recipient",
					Address: "bob.recipient@example.com",
				},
				&mail.Address{
					Name:    "Carol Recipient",
					Address: "carol.recipient@example.com",
				},
			},
			Cc: []*mail.Address{
				&mail.Address{
					Name:    "Dan Recipient",
					Address: "dan.recipient@example.com",
				},
				&mail.Address{
					Name:    "Eve Recipient",
					Address: "eve.recipient@example.com",
				},
			},
			Bcc: []*mail.Address{
				&mail.Address{
					Name:    "Frank Recipient",
					Address: "frank.recipient@example.com",
				},
				&mail.Address{
					Name:    "Grace Recipient",
					Address: "grace.recipient@example.com",
				},
			},
			MessageID: "Message-Id-1@example.com",
			InReplyTo: []string{
				"Message-Id-0@example.com",
			},
			References: []string{
				"Message-Id-0@example.com",
			},
			Subject:  "📧 Test English Pangrams",
			Comments: "Message Header Comment",
			Keywords: []string{
				"Keyword 1",
				"Keyword 2",
			},
			ResentDate: time.Time(time.Date(2019, 4, 1, 6, 55, 0, 0, time.UTC)),
			ResentFrom: []*mail.Address{
				&mail.Address{
					Name:    "Alice Sender",
					Address: "alice.sender@example.net",
				},
				&mail.Address{
					Name:    "Alice Sender",
					Address: "alice.sender@example.com",
				},
			},
			ResentSender: &mail.Address{
				Name:    "Alice Sender",
				Address: "alice.sender@example.net",
			},
			ResentTo: []*mail.Address{
				&mail.Address{
					Name:    "Bob Recipient",
					Address: "bob.recipient@example.net",
				},
				&mail.Address{
					Name:    "Carol Recipient",
					Address: "carol.recipient@example.net",
				},
			},
			ResentCc: []*mail.Address{
				&mail.Address{
					Name:    "Dan Recipient",
					Address: "dan.recipient@example.net",
				},
				&mail.Address{
					Name:    "Eve Recipient",
					Address: "eve.recipient@example.net",
				},
			},
			ResentBcc: []*mail.Address{
				&mail.Address{
					Name:    "Frank Recipient",
					Address: "frank.recipient@example.net",
				},
				&mail.Address{
					Name:    "Grace Recipient",
					Address: "grace.recipient@example.net",
				},
			},
			ResentMessageID: "Message-Id-1@example.net",
			ExtraHeaders: map[string][]string{
				"X-Clacks-Overhead": []string{
					"GNU Terry Pratchett",
				},
				"X-Script/function/\t !\"#$%&'()*+,-./;<=>?@[\\]^_`{|}~": []string{
					"TEST VALUE 1\t !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_` abcdefghijklmnopqrstuvwxyz{|}~",
					"TEST VALUE 2\t !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_` abcdefghijklmnopqrstuvwxyz{|}~",
				},
			},
			ContentInfo: &email.ContentInfo{
				Type: "multipart/related",
				TypeParams: map[string]string{
					"boundary": "RelatedBoundaryString",
					"charset":  "utf-8",
				},
				Disposition:       "",
				DispositionParams: map[string]string(nil), // p0
				TransferEncoding:  "7bit",
				ID:                "",
				Charset:           "utf-8",
			},
			Received: nil,
		},
		Text: "The quick brown fox jumps over a lazy dog.\n" +
			"Glib jocks quiz nymph to vex dwarf.\n" +
			"Sphinx of black quartz, judge my vow.\n" +
			"How vexingly quick daft zebras jump!\n" +
			"The five boxing wizards jump quickly.\n" +
			"Jackdaws love my big sphinx of quartz.\n" +
			"Pack my box with five dozen liquor jugs.",
		EnrichedText: "<bold>The quick brown fox jumps over a lazy dog.</bold>\n" +
			"<italic>Glib jocks quiz nymph to vex dwarf.</italic>\n" +
			"<fixed>Sphinx of black quartz, judge my vow.</fixed>\n" +
			"<underline>How vexingly quick daft zebras jump!</underline>\n" +
			"The five boxing wizards jump quickly.\n" +
			"Jackdaws love my big sphinx of quartz.\n" +
			"Pack my box with five dozen liquor jugs.",
		HTML: "<html>\n" +
			"<div dir=\"ltr\">\n" +
			"<p>The quick brown fox jumps over a lazy dog.</p>\n" +
			"<p>Glib jocks quiz nymph to vex dwarf.</p>\n" +
			"<p>Sphinx of black quartz, judge my vow.</p>\n" +
			"<p>How vexingly quick daft zebras jump!</p>\n" +
			"<p>The five boxing wizards jump quickly.</p>\n" +
			"<p>Jackdaws love my big sphinx of quartz.</p>\n" +
			"<p>Pack my box with five dozen liquor jugs.</p>\n" +
			"</div>\n" +
			"</html>",
		Files: []*email.File{
			&email.File{
				FileType: "inline",
				Name:     "inline-jpg-image-filename.jpg",
				ContentInfo: &email.ContentInfo{
					Type: "image/jpeg",
					TypeParams: map[string]string{
						"name": "inline-jpg-image-name.jpg",
					},
					Disposition: "inline",
					DispositionParams: map[string]string{
						"filename": "inline-jpg-image-filename.jpg",
					},
					TransferEncoding: "base64",
					ID:               "inline-jpg-image.jpg@example.com",
					Charset:          "utf-8",
				},
				Data: []byte{
					239, 191, 189, 239, 191, 189, 239, 191, 189, 239, 191, 189, 0, 67, 0, 3, 2, 2, 2,
					2, 2, 3, 2, 2, 2, 3, 3, 3, 3, 4, 6, 4, 4, 4, 4, 4, 8, 6, 6, 5, 6, 9, 8, 10, 10, 9,
					8, 9, 9, 10, 12, 15, 12, 10, 11, 14, 11, 9, 9, 13, 17, 13, 14, 15, 16, 16, 17, 16,
					10, 12, 18, 19, 18, 16, 19, 15, 16, 16, 16, 239, 191, 189, 239, 191, 189, 0, 11,
					8, 0, 1, 0, 1, 1, 1, 17, 0, 239, 191, 189, 239, 191, 189, 0, 6, 0, 16, 16, 5, 239,
					191, 189, 239, 191, 189, 0, 8, 1, 1, 0, 0, 63, 0, 239, 191, 189, 239, 191, 189, 32,
					239, 191, 189, 239, 191, 189,
				},
			},
		},
	}
	testEmailFromFile(t, fp, expectedEmail)
}

func TestParseEmailEnglishMultipartRelatedUtf8OverBase64(t *testing.T) {
	fp := "tests/test_english_multipart_related_utf-8_over_base64.txt"
	expectedEmail := &email.Email{
		Headers: email.Headers{
			Date: time.Time(time.Date(2019, 4, 1, 6, 55, 0, 0, time.UTC)),
			Sender: &mail.Address{
				Name:    "Alice Sender",
				Address: "alice.sender@example.com",
			},
			From: []*mail.Address{
				&mail.Address{
					Name:    "Alice Sender",
					Address: "alice.sender@example.com",
				},
				&mail.Address{
					Name:    "Alice Sender",
					Address: "alice.sender@example.net",
				},
			},
			ReplyTo: []*mail.Address{
				&mail.Address{
					Name:    "Alice Sender",
					Address: "alice.sender@example.net",
				},
			},
			To: []*mail.Address{
				&mail.Address{
					Name:    "Bob Recipient",
					Address: "bob.recipient@example.com",
				},
				&mail.Address{
					Name:    "Carol Recipient",
					Address: "carol.recipient@example.com",
				},
			},
			Cc: []*mail.Address{
				&mail.Address{
					Name:    "Dan Recipient",
					Address: "dan.recipient@example.com",
				},
				&mail.Address{
					Name:    "Eve Recipient",
					Address: "eve.recipient@example.com",
				},
			},
			Bcc: []*mail.Address{
				&mail.Address{
					Name:    "Frank Recipient",
					Address: "frank.recipient@example.com",
				},
				&mail.Address{
					Name:    "Grace Recipient",
					Address: "grace.recipient@example.com",
				},
			},
			MessageID: "Message-Id-1@example.com",
			InReplyTo: []string{
				"Message-Id-0@example.com",
			},
			References: []string{
				"Message-Id-0@example.com",
			},
			Subject:  "📧 Test English Pangrams",
			Comments: "Message Header Comment",
			Keywords: []string{
				"Keyword 1",
				"Keyword 2",
			},
			ResentDate: time.Time(time.Date(2019, 4, 1, 6, 55, 0, 0, time.UTC)),
			ResentFrom: []*mail.Address{
				&mail.Address{
					Name:    "Alice Sender",
					Address: "alice.sender@example.net",
				},
				&mail.Address{
					Name:    "Alice Sender",
					Address: "alice.sender@example.com",
				},
			},
			ResentSender: &mail.Address{
				Name:    "Alice Sender",
				Address: "alice.sender@example.net",
			},
			ResentTo: []*mail.Address{
				&mail.Address{
					Name:    "Bob Recipient",
					Address: "bob.recipient@example.net",
				},
				&mail.Address{
					Name:    "Carol Recipient",
					Address: "carol.recipient@example.net",
				},
			},
			ResentCc: []*mail.Address{
				&mail.Address{
					Name:    "Dan Recipient",
					Address: "dan.recipient@example.net",
				},
				&mail.Address{
					Name:    "Eve Recipient",
					Address: "eve.recipient@example.net",
				},
			},
			ResentBcc: []*mail.Address{
				&mail.Address{
					Name:    "Frank Recipient",
					Address: "frank.recipient@example.net",
				},
				&mail.Address{
					Name:    "Grace Recipient",
					Address: "grace.recipient@example.net",
				},
			},
			ResentMessageID: "Message-Id-1@example.net",
			ExtraHeaders: map[string][]string{
				"X-Clacks-Overhead": []string{
					"GNU Terry Pratchett",
				},
				"X-Script/function/\t !\"#$%&'()*+,-./;<=>?@[\\]^_`{|}~": []string{
					"TEST VALUE 1\t !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_` abcdefghijklmnopqrstuvwxyz{|}~",
					"TEST VALUE 2\t !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_` abcdefghijklmnopqrstuvwxyz{|}~",
				},
			},
			ContentInfo: &email.ContentInfo{
				Type: "multipart/related",
				TypeParams: map[string]string{
					"boundary": "RelatedBoundaryString",
					"charset":  "utf-8",
				},
				Disposition:       "",
				DispositionParams: map[string]string(nil), // p0
				TransferEncoding:  "base64",
				ID:                "",
				Charset:           "utf-8",
			},
			Received: nil,
		},
		Text: "The quick brown fox jumps over a lazy dog.\n" +
			"Glib jocks quiz nymph to vex dwarf.\n" +
			"Sphinx of black quartz, judge my vow.\n" +
			"How vexingly quick daft zebras jump!\n" +
			"The five boxing wizards jump quickly.\n" +
			"Jackdaws love my big sphinx of quartz.\n" +
			"Pack my box with five dozen liquor jugs.",
		EnrichedText: "<bold>The quick brown fox jumps over a lazy dog.</bold>\n" +
			"<italic>Glib jocks quiz nymph to vex dwarf.</italic>\n" +
			"<fixed>Sphinx of black quartz, judge my vow.</fixed>\n" +
			"<underline>How vexingly quick daft zebras jump!</underline>\n" +
			"The five boxing wizards jump quickly.\n" +
			"Jackdaws love my big sphinx of quartz.\n" +
			"Pack my box with five dozen liquor jugs.",
		HTML: "<html>\n" +
			"<div dir=\"ltr\">\n" +
			"<p>The quick brown fox jumps over a lazy dog.</p>\n" +
			"<p>Glib jocks quiz nymph to vex dwarf.</p>\n" +
			"<p>Sphinx of black quartz, judge my vow.</p>\n" +
			"<p>How vexingly quick daft zebras jump!</p>\n" +
			"<p>The five boxing wizards jump quickly.</p>\n" +
			"<p>Jackdaws love my big sphinx of quartz.</p>\n" +
			"<p>Pack my box with five dozen liquor jugs.</p>\n" +
			"</div>\n" +
			"</html>",
		Files: []*email.File{
			&email.File{
				FileType: "inline",
				Name:     "inline-jpg-image-filename.jpg",
				ContentInfo: &email.ContentInfo{
					Type: "image/jpeg",
					TypeParams: map[string]string{
						"name": "inline-jpg-image-name.jpg",
					},
					Disposition: "inline",
					DispositionParams: map[string]string{
						"filename": "inline-jpg-image-filename.jpg",
					},
					TransferEncoding: "base64",
					ID:               "inline-jpg-image.jpg@example.com",
					Charset:          "utf-8",
				},
				Data: []byte{
					239, 191, 189, 239, 191, 189, 239, 191, 189, 239, 191, 189, 0, 67, 0, 3, 2, 2, 2,
					2, 2, 3, 2, 2, 2, 3, 3, 3, 3, 4, 6, 4, 4, 4, 4, 4, 8, 6, 6, 5, 6, 9, 8, 10, 10, 9,
					8, 9, 9, 10, 12, 15, 12, 10, 11, 14, 11, 9, 9, 13, 17, 13, 14, 15, 16, 16, 17, 16,
					10, 12, 18, 19, 18, 16, 19, 15, 16, 16, 16, 239, 191, 189, 239, 191, 189, 0, 11,
					8, 0, 1, 0, 1, 1, 1, 17, 0, 239, 191, 189, 239, 191, 189, 0, 6, 0, 16, 16, 5, 239,
					191, 189, 239, 191, 189, 0, 8, 1, 1, 0, 0, 63, 0, 239, 191, 189, 239, 191, 189, 32,
					239, 191, 189, 239, 191, 189,
				},
			},
		},
	}
	testEmailFromFile(t, fp, expectedEmail)
}

func TestParseEmailEnglishMultipartRelatedUtf8OverQuotedprintable(t *testing.T) {
	fp := "tests/test_english_multipart_related_utf-8_over_quoted-printable.txt"
	expectedEmail := &email.Email{
		Headers: email.Headers{
			Date: time.Time(time.Date(2019, 4, 1, 6, 55, 0, 0, time.UTC)),
			Sender: &mail.Address{
				Name:    "Alice Sender",
				Address: "alice.sender@example.com",
			},
			From: []*mail.Address{
				&mail.Address{
					Name:    "Alice Sender",
					Address: "alice.sender@example.com",
				},
				&mail.Address{
					Name:    "Alice Sender",
					Address: "alice.sender@example.net",
				},
			},
			ReplyTo: []*mail.Address{
				&mail.Address{
					Name:    "Alice Sender",
					Address: "alice.sender@example.net",
				},
			},
			To: []*mail.Address{
				&mail.Address{
					Name:    "Bob Recipient",
					Address: "bob.recipient@example.com",
				},
				&mail.Address{
					Name:    "Carol Recipient",
					Address: "carol.recipient@example.com",
				},
			},
			Cc: []*mail.Address{
				&mail.Address{
					Name:    "Dan Recipient",
					Address: "dan.recipient@example.com",
				},
				&mail.Address{
					Name:    "Eve Recipient",
					Address: "eve.recipient@example.com",
				},
			},
			Bcc: []*mail.Address{
				&mail.Address{
					Name:    "Frank Recipient",
					Address: "frank.recipient@example.com",
				},
				&mail.Address{
					Name:    "Grace Recipient",
					Address: "grace.recipient@example.com",
				},
			},
			MessageID: "Message-Id-1@example.com",
			InReplyTo: []string{
				"Message-Id-0@example.com",
			},
			References: []string{
				"Message-Id-0@example.com",
			},
			Subject:  "📧 Test English Pangrams",
			Comments: "Message Header Comment",
			Keywords: []string{
				"Keyword 1",
				"Keyword 2",
			},
			ResentDate: time.Time(time.Date(2019, 4, 1, 6, 55, 0, 0, time.UTC)),
			ResentFrom: []*mail.Address{
				&mail.Address{
					Name:    "Alice Sender",
					Address: "alice.sender@example.net",
				},
				&mail.Address{
					Name:    "Alice Sender",
					Address: "alice.sender@example.com",
				},
			},
			ResentSender: &mail.Address{
				Name:    "Alice Sender",
				Address: "alice.sender@example.net",
			},
			ResentTo: []*mail.Address{
				&mail.Address{
					Name:    "Bob Recipient",
					Address: "bob.recipient@example.net",
				},
				&mail.Address{
					Name:    "Carol Recipient",
					Address: "carol.recipient@example.net",
				},
			},
			ResentCc: []*mail.Address{
				&mail.Address{
					Name:    "Dan Recipient",
					Address: "dan.recipient@example.net",
				},
				&mail.Address{
					Name:    "Eve Recipient",
					Address: "eve.recipient@example.net",
				},
			},
			ResentBcc: []*mail.Address{
				&mail.Address{
					Name:    "Frank Recipient",
					Address: "frank.recipient@example.net",
				},
				&mail.Address{
					Name:    "Grace Recipient",
					Address: "grace.recipient@example.net",
				},
			},
			ResentMessageID: "Message-Id-1@example.net",
			ExtraHeaders: map[string][]string{
				"X-Clacks-Overhead": []string{
					"GNU Terry Pratchett",
				},
				"X-Script/function/\t !\"#$%&'()*+,-./;<=>?@[\\]^_`{|}~": []string{
					"TEST VALUE 1\t !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_` abcdefghijklmnopqrstuvwxyz{|}~",
					"TEST VALUE 2\t !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_` abcdefghijklmnopqrstuvwxyz{|}~",
				},
			},
			ContentInfo: &email.ContentInfo{
				Type: "multipart/related",
				TypeParams: map[string]string{
					"boundary": "RelatedBoundaryString",
					"charset":  "utf-8",
				},
				Disposition:       "",
				DispositionParams: map[string]string(nil), // p0
				TransferEncoding:  "quoted-printable",
				ID:                "",
				Charset:           "utf-8",
			},
			Received: nil,
		},
		Text: "The quick brown fox jumps over a lazy dog.\n" +
			"Glib jocks quiz nymph to vex dwarf.\n" +
			"Sphinx of black quartz, judge my vow.\n" +
			"How vexingly quick daft zebras jump!\n" +
			"The five boxing wizards jump quickly.\n" +
			"Jackdaws love my big sphinx of quartz.\n" +
			"Pack my box with five dozen liquor jugs.",
		EnrichedText: "<bold>The quick brown fox jumps over a lazy dog.</bold>\n" +
			"<italic>Glib jocks quiz nymph to vex dwarf.</italic>\n" +
			"<fixed>Sphinx of black quartz, judge my vow.</fixed>\n" +
			"<underline>How vexingly quick daft zebras jump!</underline>\n" +
			"The five boxing wizards jump quickly.\n" +
			"Jackdaws love my big sphinx of quartz.\n" +
			"Pack my box with five dozen liquor jugs.",
		HTML: "<html>\n" +
			"<div dir=\"ltr\">\n" +
			"<p>The quick brown fox jumps over a lazy dog.</p>\n" +
			"<p>Glib jocks quiz nymph to vex dwarf.</p>\n" +
			"<p>Sphinx of black quartz, judge my vow.</p>\n" +
			"<p>How vexingly quick daft zebras jump!</p>\n" +
			"<p>The five boxing wizards jump quickly.</p>\n" +
			"<p>Jackdaws love my big sphinx of quartz.</p>\n" +
			"<p>Pack my box with five dozen liquor jugs.</p>\n" +
			"</div>\n" +
			"</html>",
		Files: []*email.File{
			&email.File{
				FileType: "inline",
				Name:     "inline-jpg-image-filename.jpg",
				ContentInfo: &email.ContentInfo{
					Type: "image/jpeg",
					TypeParams: map[string]string{
						"name": "inline-jpg-image-name.jpg",
					},
					Disposition: "inline",
					DispositionParams: map[string]string{
						"filename": "inline-jpg-image-filename.jpg",
					},
					TransferEncoding: "base64",
					ID:               "inline-jpg-image.jpg@example.com",
					Charset:          "utf-8",
				},
				Data: []byte{
					239, 191, 189, 239, 191, 189, 239, 191, 189, 239, 191, 189, 0, 67, 0, 3, 2, 2, 2,
					2, 2, 3, 2, 2, 2, 3, 3, 3, 3, 4, 6, 4, 4, 4, 4, 4, 8, 6, 6, 5, 6, 9, 8, 10, 10, 9,
					8, 9, 9, 10, 12, 15, 12, 10, 11, 14, 11, 9, 9, 13, 17, 13, 14, 15, 16, 16, 17, 16,
					10, 12, 18, 19, 18, 16, 19, 15, 16, 16, 16, 239, 191, 189, 239, 191, 189, 0, 11,
					8, 0, 1, 0, 1, 1, 1, 17, 0, 239, 191, 189, 239, 191, 189, 0, 6, 0, 16, 16, 5, 239,
					191, 189, 239, 191, 189, 0, 8, 1, 1, 0, 0, 63, 0, 239, 191, 189, 239, 191, 189, 32,
					239, 191, 189, 239, 191, 189,
				},
			},
		},
	}
	testEmailFromFile(t, fp, expectedEmail)
}

func TestParseEmailEnglishMultipartMixedAsciiOver7bit(t *testing.T) {
	fp := "tests/test_english_multipart_mixed_ascii_over_7bit.txt"
	expectedEmail := &email.Email{
		Headers: email.Headers{
			Date: time.Time(time.Date(2019, 4, 1, 6, 55, 0, 0, time.UTC)),
			Sender: &mail.Address{
				Name:    "Alice Sender",
				Address: "alice.sender@example.com",
			},
			From: []*mail.Address{
				&mail.Address{
					Name:    "Alice Sender",
					Address: "alice.sender@example.com",
				},
				&mail.Address{
					Name:    "Alice Sender",
					Address: "alice.sender@example.net",
				},
			},
			ReplyTo: []*mail.Address{
				&mail.Address{
					Name:    "Alice Sender",
					Address: "alice.sender@example.net",
				},
			},
			To: []*mail.Address{
				&mail.Address{
					Name:    "Bob Recipient",
					Address: "bob.recipient@example.com",
				},
				&mail.Address{
					Name:    "Carol Recipient",
					Address: "carol.recipient@example.com",
				},
			},
			Cc: []*mail.Address{
				&mail.Address{
					Name:    "Dan Recipient",
					Address: "dan.recipient@example.com",
				},
				&mail.Address{
					Name:    "Eve Recipient",
					Address: "eve.recipient@example.com",
				},
			},
			Bcc: []*mail.Address{
				&mail.Address{
					Name:    "Frank Recipient",
					Address: "frank.recipient@example.com",
				},
				&mail.Address{
					Name:    "Grace Recipient",
					Address: "grace.recipient@example.com",
				},
			},
			MessageID: "Message-Id-1@example.com",
			InReplyTo: []string{
				"Message-Id-0@example.com",
			},
			References: []string{
				"Message-Id-0@example.com",
			},
			Subject:  "📧 Test English Pangrams",
			Comments: "Message Header Comment",
			Keywords: []string{
				"Keyword 1",
				"Keyword 2",
			},
			ResentDate: time.Time(time.Date(2019, 4, 1, 6, 55, 0, 0, time.UTC)),
			ResentFrom: []*mail.Address{
				&mail.Address{
					Name:    "Alice Sender",
					Address: "alice.sender@example.net",
				},
				&mail.Address{
					Name:    "Alice Sender",
					Address: "alice.sender@example.com",
				},
			},
			ResentSender: &mail.Address{
				Name:    "Alice Sender",
				Address: "alice.sender@example.net",
			},
			ResentTo: []*mail.Address{
				&mail.Address{
					Name:    "Bob Recipient",
					Address: "bob.recipient@example.net",
				},
				&mail.Address{
					Name:    "Carol Recipient",
					Address: "carol.recipient@example.net",
				},
			},
			ResentCc: []*mail.Address{
				&mail.Address{
					Name:    "Dan Recipient",
					Address: "dan.recipient@example.net",
				},
				&mail.Address{
					Name:    "Eve Recipient",
					Address: "eve.recipient@example.net",
				},
			},
			ResentBcc: []*mail.Address{
				&mail.Address{
					Name:    "Frank Recipient",
					Address: "frank.recipient@example.net",
				},
				&mail.Address{
					Name:    "Grace Recipient",
					Address: "grace.recipient@example.net",
				},
			},
			ResentMessageID: "Message-Id-1@example.net",
			ExtraHeaders: map[string][]string{
				"X-Clacks-Overhead": []string{
					"GNU Terry Pratchett",
				},
				"X-Script/function/\t !\"#$%&'()*+,-./;<=>?@[\\]^_`{|}~": []string{
					"TEST VALUE 1\t !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_` abcdefghijklmnopqrstuvwxyz{|}~",
					"TEST VALUE 2\t !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_` abcdefghijklmnopqrstuvwxyz{|}~",
				},
			},
			ContentInfo: &email.ContentInfo{
				Type: "multipart/mixed",
				TypeParams: map[string]string{
					"boundary": "MixedBoundaryString",
					"charset":  "ascii",
				},
				Disposition:       "",
				DispositionParams: map[string]string(nil), // p0
				TransferEncoding:  "7bit",
				ID:                "",
				Charset:           "ascii",
			},
			Received: nil,
		},
		Text: "The quick brown fox jumps over a lazy dog.\n" +
			"Glib jocks quiz nymph to vex dwarf.\n" +
			"Sphinx of black quartz, judge my vow.\n" +
			"How vexingly quick daft zebras jump!\n" +
			"The five boxing wizards jump quickly.\n" +
			"Jackdaws love my big sphinx of quartz.\n" +
			"Pack my box with five dozen liquor jugs.",
		EnrichedText: "<bold>The quick brown fox jumps over a lazy dog.</bold>\n" +
			"<italic>Glib jocks quiz nymph to vex dwarf.</italic>\n" +
			"<fixed>Sphinx of black quartz, judge my vow.</fixed>\n" +
			"<underline>How vexingly quick daft zebras jump!</underline>\n" +
			"The five boxing wizards jump quickly.\n" +
			"Jackdaws love my big sphinx of quartz.\n" +
			"Pack my box with five dozen liquor jugs.",
		HTML: "<html>\n" +
			"<div dir=\"ltr\">\n" +
			"<p>The quick brown fox jumps over a lazy dog.</p>\n" +
			"<p>Glib jocks quiz nymph to vex dwarf.</p>\n" +
			"<p>Sphinx of black quartz, judge my vow.</p>\n" +
			"<p>How vexingly quick daft zebras jump!</p>\n" +
			"<p>The five boxing wizards jump quickly.</p>\n" +
			"<p>Jackdaws love my big sphinx of quartz.</p>\n" +
			"<p>Pack my box with five dozen liquor jugs.</p>\n" +
			"</div>\n" +
			"</html>",
		Files: []*email.File{
			&email.File{
				FileType: "",
				Name:     "inline-jpg-image-without-disposition.jpg",
				ContentInfo: &email.ContentInfo{
					Type: "image/jpeg",
					TypeParams: map[string]string{
						"name": "inline-jpg-image-without-disposition.jpg",
					},
					Disposition:       "",
					DispositionParams: map[string]string(nil), // p0
					TransferEncoding:  "base64",
					ID:                "",
					Charset:           "ascii",
				},
				Data: []byte{
					195, 191, 195, 152, 195, 191, 195, 155, 0, 67, 0, 3, 2, 2, 2, 2, 2, 3, 2, 2, 2, 3,
					3, 3, 3, 4, 6, 4, 4, 4, 4, 4, 8, 6, 6, 5, 6, 9, 8, 10, 10, 9, 8, 9, 9, 10, 12, 15,
					12, 10, 11, 14, 11, 9, 9, 13, 17, 13, 14, 15, 16, 16, 17, 16, 10, 12, 18, 19, 18,
					16, 19, 15, 16, 16, 16, 195, 191, 195, 137, 0, 11, 8, 0, 1, 0, 1, 1, 1, 17, 0, 195,
					191, 195, 140, 0, 6, 0, 16, 16, 5, 195, 191, 195, 154, 0, 8, 1, 1, 0, 0, 63, 0, 195,
					146, 195, 143, 32, 195, 191, 195, 153,
				},
			},
			&email.File{
				FileType: "inline",
				Name:     "inline-jpg-image-filename.jpg",
				ContentInfo: &email.ContentInfo{
					Type: "image/jpeg",
					TypeParams: map[string]string{
						"name": "inline-jpg-image-name.jpg",
					},
					Disposition: "inline",
					DispositionParams: map[string]string{
						"filename": "inline-jpg-image-filename.jpg",
					},
					TransferEncoding: "base64",
					ID:               "inline-jpg-image.jpg@example.com",
					Charset:          "ascii",
				},
				Data: []byte{
					195, 191, 195, 152, 195, 191, 195, 155, 0, 67, 0, 3, 2, 2, 2, 2, 2, 3, 2, 2, 2, 3,
					3, 3, 3, 4, 6, 4, 4, 4, 4, 4, 8, 6, 6, 5, 6, 9, 8, 10, 10, 9, 8, 9, 9, 10, 12, 15,
					12, 10, 11, 14, 11, 9, 9, 13, 17, 13, 14, 15, 16, 16, 17, 16, 10, 12, 18, 19, 18,
					16, 19, 15, 16, 16, 16, 195, 191, 195, 137, 0, 11, 8, 0, 1, 0, 1, 1, 1, 17, 0, 195,
					191, 195, 140, 0, 6, 0, 16, 16, 5, 195, 191, 195, 154, 0, 8, 1, 1, 0, 0, 63, 0, 195,
					146, 195, 143, 32, 195, 191, 195, 153,
				},
			},
			&email.File{
				FileType: "attachment",
				Name:     "attached-pdf-filename.pdf",
				ContentInfo: &email.ContentInfo{
					Type: "application/pdf",
					TypeParams: map[string]string{
						"name": "attached-pdf-name.pdf",
					},
					Disposition: "attachment",
					DispositionParams: map[string]string{
						"filename": "attached-pdf-filename.pdf",
					},
					TransferEncoding: "base64",
					ID:               "",
					Charset:          "ascii",
				},
				Data: []byte{
					37, 80, 68, 70, 45, 49, 46, 13, 116, 114, 97, 105, 108, 101, 114, 60, 60, 47, 82,
					111, 111, 116, 60, 60, 47, 80, 97, 103, 101, 115, 60, 60, 47, 75, 105, 100, 115,
					91, 60, 60, 47, 77, 101, 100, 105, 97, 66, 111, 120, 91, 48, 32, 48, 32, 51, 32,
					51, 93, 62, 62, 93, 62, 62, 62, 62, 62, 62,
				},
			},
			&email.File{
				FileType: "",
				Name:     "attached-pdf-without-disposition.pdf",
				ContentInfo: &email.ContentInfo{
					Type: "application/pdf",
					TypeParams: map[string]string{
						"name": "attached-pdf-without-disposition.pdf",
					},
					Disposition:       "",
					DispositionParams: map[string]string(nil), // p0
					TransferEncoding:  "base64",
					ID:                "",
					Charset:           "ascii",
				},
				Data: []byte{
					37, 80, 68, 70, 45, 49, 46, 13, 116, 114, 97, 105, 108, 101, 114, 60, 60, 47, 82,
					111, 111, 116, 60, 60, 47, 80, 97, 103, 101, 115, 60, 60, 47, 75, 105, 100, 115,
					91, 60, 60, 47, 77, 101, 100, 105, 97, 66, 111, 120, 91, 48, 32, 48, 32, 51, 32,
					51, 93, 62, 62, 93, 62, 62, 62, 62, 62, 62,
				},
			},
			&email.File{
				FileType: "attachment",
				Name:     "attached-json-filename.json",
				ContentInfo: &email.ContentInfo{
					Type: "application/json",
					TypeParams: map[string]string{
						"name": "attached-json-name.json",
					},
					Disposition: "attachment",
					DispositionParams: map[string]string{
						"filename": "attached-json-filename.json",
					},
					TransferEncoding: "7bit",
					ID:               "",
					Charset:          "ascii",
				},
				Data: []byte{
					123, 34, 102, 111, 111, 34, 58, 34, 98, 97, 114, 34, 125,
				},
			},
			&email.File{
				FileType: "attachment",
				Name:     "attached-text-plain-filename.txt",
				ContentInfo: &email.ContentInfo{
					Type: "text/plain",
					TypeParams: map[string]string{
						"name": "attached-text-plain-name.txt",
					},
					Disposition: "attachment",
					DispositionParams: map[string]string{
						"filename": "attached-text-plain-filename.txt",
					},
					TransferEncoding: "base64",
					ID:               "",
					Charset:          "ascii",
				},
				Data: []byte{
					84, 101, 120, 116, 47, 112, 108, 97, 105, 110, 32, 99, 111, 110, 116, 101, 110, 116,
					32, 97, 115, 32, 97, 110, 32, 97, 116, 116, 97, 99, 104, 101, 100, 32, 46, 116, 120,
					116, 32, 102, 105, 108, 101, 46,
				},
			},
			&email.File{
				FileType: "attachment",
				Name:     "attached-text-html-filename.html",
				ContentInfo: &email.ContentInfo{
					Type: "text/html",
					TypeParams: map[string]string{
						"name": "attached-text-html-name.html",
					},
					Disposition: "attachment",
					DispositionParams: map[string]string{
						"filename": "attached-text-html-filename.html",
					},
					TransferEncoding: "base64",
					ID:               "",
					Charset:          "ascii",
				},
				Data: []byte{
					84, 101, 120, 116, 47, 104, 116, 109, 108, 32, 99, 111, 110, 116, 101, 110, 116,
					32, 97, 115, 32, 97, 110, 32, 97, 116, 116, 97, 99, 104, 101, 100, 32, 46, 104, 116,
					109, 108, 32, 102, 105, 108, 101, 46,
				},
			},
		},
	}
	testEmailFromFile(t, fp, expectedEmail)
}

func TestParseEmailEnglishMultipartMixedAsciiOverBase64(t *testing.T) {
	fp := "tests/test_english_multipart_mixed_ascii_over_base64.txt"
	expectedEmail := &email.Email{
		Headers: email.Headers{
			Date: time.Time(time.Date(2019, 4, 1, 6, 55, 0, 0, time.UTC)),
			Sender: &mail.Address{
				Name:    "Alice Sender",
				Address: "alice.sender@example.com",
			},
			From: []*mail.Address{
				&mail.Address{
					Name:    "Alice Sender",
					Address: "alice.sender@example.com",
				},
				&mail.Address{
					Name:    "Alice Sender",
					Address: "alice.sender@example.net",
				},
			},
			ReplyTo: []*mail.Address{
				&mail.Address{
					Name:    "Alice Sender",
					Address: "alice.sender@example.net",
				},
			},
			To: []*mail.Address{
				&mail.Address{
					Name:    "Bob Recipient",
					Address: "bob.recipient@example.com",
				},
				&mail.Address{
					Name:    "Carol Recipient",
					Address: "carol.recipient@example.com",
				},
			},
			Cc: []*mail.Address{
				&mail.Address{
					Name:    "Dan Recipient",
					Address: "dan.recipient@example.com",
				},
				&mail.Address{
					Name:    "Eve Recipient",
					Address: "eve.recipient@example.com",
				},
			},
			Bcc: []*mail.Address{
				&mail.Address{
					Name:    "Frank Recipient",
					Address: "frank.recipient@example.com",
				},
				&mail.Address{
					Name:    "Grace Recipient",
					Address: "grace.recipient@example.com",
				},
			},
			MessageID: "Message-Id-1@example.com",
			InReplyTo: []string{
				"Message-Id-0@example.com",
			},
			References: []string{
				"Message-Id-0@example.com",
			},
			Subject:  "📧 Test English Pangrams",
			Comments: "Message Header Comment",
			Keywords: []string{
				"Keyword 1",
				"Keyword 2",
			},
			ResentDate: time.Time(time.Date(2019, 4, 1, 6, 55, 0, 0, time.UTC)),
			ResentFrom: []*mail.Address{
				&mail.Address{
					Name:    "Alice Sender",
					Address: "alice.sender@example.net",
				},
				&mail.Address{
					Name:    "Alice Sender",
					Address: "alice.sender@example.com",
				},
			},
			ResentSender: &mail.Address{
				Name:    "Alice Sender",
				Address: "alice.sender@example.net",
			},
			ResentTo: []*mail.Address{
				&mail.Address{
					Name:    "Bob Recipient",
					Address: "bob.recipient@example.net",
				},
				&mail.Address{
					Name:    "Carol Recipient",
					Address: "carol.recipient@example.net",
				},
			},
			ResentCc: []*mail.Address{
				&mail.Address{
					Name:    "Dan Recipient",
					Address: "dan.recipient@example.net",
				},
				&mail.Address{
					Name:    "Eve Recipient",
					Address: "eve.recipient@example.net",
				},
			},
			ResentBcc: []*mail.Address{
				&mail.Address{
					Name:    "Frank Recipient",
					Address: "frank.recipient@example.net",
				},
				&mail.Address{
					Name:    "Grace Recipient",
					Address: "grace.recipient@example.net",
				},
			},
			ResentMessageID: "Message-Id-1@example.net",
			ExtraHeaders: map[string][]string{
				"X-Clacks-Overhead": []string{
					"GNU Terry Pratchett",
				},
				"X-Script/function/\t !\"#$%&'()*+,-./;<=>?@[\\]^_`{|}~": []string{
					"TEST VALUE 1\t !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_` abcdefghijklmnopqrstuvwxyz{|}~",
					"TEST VALUE 2\t !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_` abcdefghijklmnopqrstuvwxyz{|}~",
				},
			},
			ContentInfo: &email.ContentInfo{
				Type: "multipart/mixed",
				TypeParams: map[string]string{
					"boundary": "MixedBoundaryString",
					"charset":  "ascii",
				},
				Disposition:       "",
				DispositionParams: map[string]string(nil), // p0
				TransferEncoding:  "base64",
				ID:                "",
				Charset:           "ascii",
			},
			Received: nil,
		},
		Text: "The quick brown fox jumps over a lazy dog.\n" +
			"Glib jocks quiz nymph to vex dwarf.\n" +
			"Sphinx of black quartz, judge my vow.\n" +
			"How vexingly quick daft zebras jump!\n" +
			"The five boxing wizards jump quickly.\n" +
			"Jackdaws love my big sphinx of quartz.\n" +
			"Pack my box with five dozen liquor jugs.",
		EnrichedText: "<bold>The quick brown fox jumps over a lazy dog.</bold>\n" +
			"<italic>Glib jocks quiz nymph to vex dwarf.</italic>\n" +
			"<fixed>Sphinx of black quartz, judge my vow.</fixed>\n" +
			"<underline>How vexingly quick daft zebras jump!</underline>\n" +
			"The five boxing wizards jump quickly.\n" +
			"Jackdaws love my big sphinx of quartz.\n" +
			"Pack my box with five dozen liquor jugs.",
		HTML: "<html>\n" +
			"<div dir=\"ltr\">\n" +
			"<p>The quick brown fox jumps over a lazy dog.</p>\n" +
			"<p>Glib jocks quiz nymph to vex dwarf.</p>\n" +
			"<p>Sphinx of black quartz, judge my vow.</p>\n" +
			"<p>How vexingly quick daft zebras jump!</p>\n" +
			"<p>The five boxing wizards jump quickly.</p>\n" +
			"<p>Jackdaws love my big sphinx of quartz.</p>\n" +
			"<p>Pack my box with five dozen liquor jugs.</p>\n" +
			"</div>\n" +
			"</html>",
		Files: []*email.File{
			&email.File{
				FileType: "",
				Name:     "inline-jpg-image-without-disposition.jpg",
				ContentInfo: &email.ContentInfo{
					Type: "image/jpeg",
					TypeParams: map[string]string{
						"name": "inline-jpg-image-without-disposition.jpg",
					},
					Disposition:       "",
					DispositionParams: map[string]string(nil), // p0
					TransferEncoding:  "base64",
					ID:                "",
					Charset:           "ascii",
				},
				Data: []byte{
					195, 191, 195, 152, 195, 191, 195, 155, 0, 67, 0, 3, 2, 2, 2, 2, 2, 3, 2, 2, 2, 3,
					3, 3, 3, 4, 6, 4, 4, 4, 4, 4, 8, 6, 6, 5, 6, 9, 8, 10, 10, 9, 8, 9, 9, 10, 12, 15,
					12, 10, 11, 14, 11, 9, 9, 13, 17, 13, 14, 15, 16, 16, 17, 16, 10, 12, 18, 19, 18,
					16, 19, 15, 16, 16, 16, 195, 191, 195, 137, 0, 11, 8, 0, 1, 0, 1, 1, 1, 17, 0, 195,
					191, 195, 140, 0, 6, 0, 16, 16, 5, 195, 191, 195, 154, 0, 8, 1, 1, 0, 0, 63, 0, 195,
					146, 195, 143, 32, 195, 191, 195, 153,
				},
			},
			&email.File{
				FileType: "inline",
				Name:     "inline-jpg-image-filename.jpg",
				ContentInfo: &email.ContentInfo{
					Type: "image/jpeg",
					TypeParams: map[string]string{
						"name": "inline-jpg-image-name.jpg",
					},
					Disposition: "inline",
					DispositionParams: map[string]string{
						"filename": "inline-jpg-image-filename.jpg",
					},
					TransferEncoding: "base64",
					ID:               "inline-jpg-image.jpg@example.com",
					Charset:          "ascii",
				},
				Data: []byte{
					195, 191, 195, 152, 195, 191, 195, 155, 0, 67, 0, 3, 2, 2, 2, 2, 2, 3, 2, 2, 2, 3,
					3, 3, 3, 4, 6, 4, 4, 4, 4, 4, 8, 6, 6, 5, 6, 9, 8, 10, 10, 9, 8, 9, 9, 10, 12, 15,
					12, 10, 11, 14, 11, 9, 9, 13, 17, 13, 14, 15, 16, 16, 17, 16, 10, 12, 18, 19, 18,
					16, 19, 15, 16, 16, 16, 195, 191, 195, 137, 0, 11, 8, 0, 1, 0, 1, 1, 1, 17, 0, 195,
					191, 195, 140, 0, 6, 0, 16, 16, 5, 195, 191, 195, 154, 0, 8, 1, 1, 0, 0, 63, 0, 195,
					146, 195, 143, 32, 195, 191, 195, 153,
				},
			},
			&email.File{
				FileType: "attachment",
				Name:     "attached-pdf-filename.pdf",
				ContentInfo: &email.ContentInfo{
					Type: "application/pdf",
					TypeParams: map[string]string{
						"name": "attached-pdf-name.pdf",
					},
					Disposition: "attachment",
					DispositionParams: map[string]string{
						"filename": "attached-pdf-filename.pdf",
					},
					TransferEncoding: "base64",
					ID:               "",
					Charset:          "ascii",
				},
				Data: []byte{
					37, 80, 68, 70, 45, 49, 46, 13, 116, 114, 97, 105, 108, 101, 114, 60, 60, 47, 82,
					111, 111, 116, 60, 60, 47, 80, 97, 103, 101, 115, 60, 60, 47, 75, 105, 100, 115,
					91, 60, 60, 47, 77, 101, 100, 105, 97, 66, 111, 120, 91, 48, 32, 48, 32, 51, 32,
					51, 93, 62, 62, 93, 62, 62, 62, 62, 62, 62,
				},
			},
			&email.File{
				FileType: "",
				Name:     "attached-pdf-without-disposition.pdf",
				ContentInfo: &email.ContentInfo{
					Type: "application/pdf",
					TypeParams: map[string]string{
						"name": "attached-pdf-without-disposition.pdf",
					},
					Disposition:       "",
					DispositionParams: map[string]string(nil), // p0
					TransferEncoding:  "base64",
					ID:                "",
					Charset:           "ascii",
				},
				Data: []byte{
					37, 80, 68, 70, 45, 49, 46, 13, 116, 114, 97, 105, 108, 101, 114, 60, 60, 47, 82,
					111, 111, 116, 60, 60, 47, 80, 97, 103, 101, 115, 60, 60, 47, 75, 105, 100, 115,
					91, 60, 60, 47, 77, 101, 100, 105, 97, 66, 111, 120, 91, 48, 32, 48, 32, 51, 32,
					51, 93, 62, 62, 93, 62, 62, 62, 62, 62, 62,
				},
			},
			&email.File{
				FileType: "attachment",
				Name:     "attached-json-filename.json",
				ContentInfo: &email.ContentInfo{
					Type: "application/json",
					TypeParams: map[string]string{
						"name": "attached-json-name.json",
					},
					Disposition: "attachment",
					DispositionParams: map[string]string{
						"filename": "attached-json-filename.json",
					},
					TransferEncoding: "7bit",
					ID:               "",
					Charset:          "ascii",
				},
				Data: []byte{
					123, 34, 102, 111, 111, 34, 58, 34, 98, 97, 114, 34, 125,
				},
			},
			&email.File{
				FileType: "attachment",
				Name:     "attached-text-plain-filename.txt",
				ContentInfo: &email.ContentInfo{
					Type: "text/plain",
					TypeParams: map[string]string{
						"name": "attached-text-plain-name.txt",
					},
					Disposition: "attachment",
					DispositionParams: map[string]string{
						"filename": "attached-text-plain-filename.txt",
					},
					TransferEncoding: "base64",
					ID:               "",
					Charset:          "ascii",
				},
				Data: []byte{
					84, 101, 120, 116, 47, 112, 108, 97, 105, 110, 32, 99, 111, 110, 116, 101, 110, 116,
					32, 97, 115, 32, 97, 110, 32, 97, 116, 116, 97, 99, 104, 101, 100, 32, 46, 116, 120,
					116, 32, 102, 105, 108, 101, 46,
				},
			},
			&email.File{
				FileType: "attachment",
				Name:     "attached-text-html-filename.html",
				ContentInfo: &email.ContentInfo{
					Type: "text/html",
					TypeParams: map[string]string{
						"name": "attached-text-html-name.html",
					},
					Disposition: "attachment",
					DispositionParams: map[string]string{
						"filename": "attached-text-html-filename.html",
					},
					TransferEncoding: "base64",
					ID:               "",
					Charset:          "ascii",
				},
				Data: []byte{
					84, 101, 120, 116, 47, 104, 116, 109, 108, 32, 99, 111, 110, 116, 101, 110, 116,
					32, 97, 115, 32, 97, 110, 32, 97, 116, 116, 97, 99, 104, 101, 100, 32, 46, 104, 116,
					109, 108, 32, 102, 105, 108, 101, 46,
				},
			},
		},
	}
	testEmailFromFile(t, fp, expectedEmail)
}

func TestParseEmailEnglishMultipartMixedAsciiOverQuotedprintable(t *testing.T) {
	fp := "tests/test_english_multipart_mixed_ascii_over_quoted-printable.txt"
	expectedEmail := &email.Email{
		Headers: email.Headers{
			Date: time.Time(time.Date(2019, 4, 1, 6, 55, 0, 0, time.UTC)),
			Sender: &mail.Address{
				Name:    "Alice Sender",
				Address: "alice.sender@example.com",
			},
			From: []*mail.Address{
				&mail.Address{
					Name:    "Alice Sender",
					Address: "alice.sender@example.com",
				},
				&mail.Address{
					Name:    "Alice Sender",
					Address: "alice.sender@example.net",
				},
			},
			ReplyTo: []*mail.Address{
				&mail.Address{
					Name:    "Alice Sender",
					Address: "alice.sender@example.net",
				},
			},
			To: []*mail.Address{
				&mail.Address{
					Name:    "Bob Recipient",
					Address: "bob.recipient@example.com",
				},
				&mail.Address{
					Name:    "Carol Recipient",
					Address: "carol.recipient@example.com",
				},
			},
			Cc: []*mail.Address{
				&mail.Address{
					Name:    "Dan Recipient",
					Address: "dan.recipient@example.com",
				},
				&mail.Address{
					Name:    "Eve Recipient",
					Address: "eve.recipient@example.com",
				},
			},
			Bcc: []*mail.Address{
				&mail.Address{
					Name:    "Frank Recipient",
					Address: "frank.recipient@example.com",
				},
				&mail.Address{
					Name:    "Grace Recipient",
					Address: "grace.recipient@example.com",
				},
			},
			MessageID: "Message-Id-1@example.com",
			InReplyTo: []string{
				"Message-Id-0@example.com",
			},
			References: []string{
				"Message-Id-0@example.com",
			},
			Subject:  "📧 Test English Pangrams",
			Comments: "Message Header Comment",
			Keywords: []string{
				"Keyword 1",
				"Keyword 2",
			},
			ResentDate: time.Time(time.Date(2019, 4, 1, 6, 55, 0, 0, time.UTC)),
			ResentFrom: []*mail.Address{
				&mail.Address{
					Name:    "Alice Sender",
					Address: "alice.sender@example.net",
				},
				&mail.Address{
					Name:    "Alice Sender",
					Address: "alice.sender@example.com",
				},
			},
			ResentSender: &mail.Address{
				Name:    "Alice Sender",
				Address: "alice.sender@example.net",
			},
			ResentTo: []*mail.Address{
				&mail.Address{
					Name:    "Bob Recipient",
					Address: "bob.recipient@example.net",
				},
				&mail.Address{
					Name:    "Carol Recipient",
					Address: "carol.recipient@example.net",
				},
			},
			ResentCc: []*mail.Address{
				&mail.Address{
					Name:    "Dan Recipient",
					Address: "dan.recipient@example.net",
				},
				&mail.Address{
					Name:    "Eve Recipient",
					Address: "eve.recipient@example.net",
				},
			},
			ResentBcc: []*mail.Address{
				&mail.Address{
					Name:    "Frank Recipient",
					Address: "frank.recipient@example.net",
				},
				&mail.Address{
					Name:    "Grace Recipient",
					Address: "grace.recipient@example.net",
				},
			},
			ResentMessageID: "Message-Id-1@example.net",
			ExtraHeaders: map[string][]string{
				"X-Clacks-Overhead": []string{
					"GNU Terry Pratchett",
				},
				"X-Script/function/\t !\"#$%&'()*+,-./;<=>?@[\\]^_`{|}~": []string{
					"TEST VALUE 1\t !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_` abcdefghijklmnopqrstuvwxyz{|}~",
					"TEST VALUE 2\t !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_` abcdefghijklmnopqrstuvwxyz{|}~",
				},
			},
			ContentInfo: &email.ContentInfo{
				Type: "multipart/mixed",
				TypeParams: map[string]string{
					"boundary": "MixedBoundaryString",
					"charset":  "ascii",
				},
				Disposition:       "",
				DispositionParams: map[string]string(nil), // p0
				TransferEncoding:  "quoted-printable",
				ID:                "",
				Charset:           "ascii",
			},
			Received: nil,
		},
		Text: "The quick brown fox jumps over a lazy dog.\n" +
			"Glib jocks quiz nymph to vex dwarf.\n" +
			"Sphinx of black quartz, judge my vow.\n" +
			"How vexingly quick daft zebras jump!\n" +
			"The five boxing wizards jump quickly.\n" +
			"Jackdaws love my big sphinx of quartz.\n" +
			"Pack my box with five dozen liquor jugs.",
		EnrichedText: "<bold>The quick brown fox jumps over a lazy dog.</bold>\n" +
			"<italic>Glib jocks quiz nymph to vex dwarf.</italic>\n" +
			"<fixed>Sphinx of black quartz, judge my vow.</fixed>\n" +
			"<underline>How vexingly quick daft zebras jump!</underline>\n" +
			"The five boxing wizards jump quickly.\n" +
			"Jackdaws love my big sphinx of quartz.\n" +
			"Pack my box with five dozen liquor jugs.",
		HTML: "<html>\n" +
			"<div dir=\"ltr\">\n" +
			"<p>The quick brown fox jumps over a lazy dog.</p>\n" +
			"<p>Glib jocks quiz nymph to vex dwarf.</p>\n" +
			"<p>Sphinx of black quartz, judge my vow.</p>\n" +
			"<p>How vexingly quick daft zebras jump!</p>\n" +
			"<p>The five boxing wizards jump quickly.</p>\n" +
			"<p>Jackdaws love my big sphinx of quartz.</p>\n" +
			"<p>Pack my box with five dozen liquor jugs.</p>\n" +
			"</div>\n" +
			"</html>",
		Files: []*email.File{
			&email.File{
				FileType: "",
				Name:     "inline-jpg-image-without-disposition.jpg",
				ContentInfo: &email.ContentInfo{
					Type: "image/jpeg",
					TypeParams: map[string]string{
						"name": "inline-jpg-image-without-disposition.jpg",
					},
					Disposition:       "",
					DispositionParams: map[string]string(nil), // p0
					TransferEncoding:  "base64",
					ID:                "",
					Charset:           "ascii",
				},
				Data: []byte{
					195, 191, 195, 152, 195, 191, 195, 155, 0, 67, 0, 3, 2, 2, 2, 2, 2, 3, 2, 2, 2, 3,
					3, 3, 3, 4, 6, 4, 4, 4, 4, 4, 8, 6, 6, 5, 6, 9, 8, 10, 10, 9, 8, 9, 9, 10, 12, 15,
					12, 10, 11, 14, 11, 9, 9, 13, 17, 13, 14, 15, 16, 16, 17, 16, 10, 12, 18, 19, 18,
					16, 19, 15, 16, 16, 16, 195, 191, 195, 137, 0, 11, 8, 0, 1, 0, 1, 1, 1, 17, 0, 195,
					191, 195, 140, 0, 6, 0, 16, 16, 5, 195, 191, 195, 154, 0, 8, 1, 1, 0, 0, 63, 0, 195,
					146, 195, 143, 32, 195, 191, 195, 153,
				},
			},
			&email.File{
				FileType: "inline",
				Name:     "inline-jpg-image-filename.jpg",
				ContentInfo: &email.ContentInfo{
					Type: "image/jpeg",
					TypeParams: map[string]string{
						"name": "inline-jpg-image-name.jpg",
					},
					Disposition: "inline",
					DispositionParams: map[string]string{
						"filename": "inline-jpg-image-filename.jpg",
					},
					TransferEncoding: "base64",
					ID:               "inline-jpg-image.jpg@example.com",
					Charset:          "ascii",
				},
				Data: []byte{
					195, 191, 195, 152, 195, 191, 195, 155, 0, 67, 0, 3, 2, 2, 2, 2, 2, 3, 2, 2, 2, 3,
					3, 3, 3, 4, 6, 4, 4, 4, 4, 4, 8, 6, 6, 5, 6, 9, 8, 10, 10, 9, 8, 9, 9, 10, 12, 15,
					12, 10, 11, 14, 11, 9, 9, 13, 17, 13, 14, 15, 16, 16, 17, 16, 10, 12, 18, 19, 18,
					16, 19, 15, 16, 16, 16, 195, 191, 195, 137, 0, 11, 8, 0, 1, 0, 1, 1, 1, 17, 0, 195,
					191, 195, 140, 0, 6, 0, 16, 16, 5, 195, 191, 195, 154, 0, 8, 1, 1, 0, 0, 63, 0, 195,
					146, 195, 143, 32, 195, 191, 195, 153,
				},
			},
			&email.File{
				FileType: "attachment",
				Name:     "attached-pdf-filename.pdf",
				ContentInfo: &email.ContentInfo{
					Type: "application/pdf",
					TypeParams: map[string]string{
						"name": "attached-pdf-name.pdf",
					},
					Disposition: "attachment",
					DispositionParams: map[string]string{
						"filename": "attached-pdf-filename.pdf",
					},
					TransferEncoding: "base64",
					ID:               "",
					Charset:          "ascii",
				},
				Data: []byte{
					37, 80, 68, 70, 45, 49, 46, 13, 116, 114, 97, 105, 108, 101, 114, 60, 60, 47, 82,
					111, 111, 116, 60, 60, 47, 80, 97, 103, 101, 115, 60, 60, 47, 75, 105, 100, 115,
					91, 60, 60, 47, 77, 101, 100, 105, 97, 66, 111, 120, 91, 48, 32, 48, 32, 51, 32,
					51, 93, 62, 62, 93, 62, 62, 62, 62, 62, 62,
				},
			},
			&email.File{
				FileType: "",
				Name:     "attached-pdf-without-disposition.pdf",
				ContentInfo: &email.ContentInfo{
					Type: "application/pdf",
					TypeParams: map[string]string{
						"name": "attached-pdf-without-disposition.pdf",
					},
					Disposition:       "",
					DispositionParams: map[string]string(nil), // p0
					TransferEncoding:  "base64",
					ID:                "",
					Charset:           "ascii",
				},
				Data: []byte{
					37, 80, 68, 70, 45, 49, 46, 13, 116, 114, 97, 105, 108, 101, 114, 60, 60, 47, 82,
					111, 111, 116, 60, 60, 47, 80, 97, 103, 101, 115, 60, 60, 47, 75, 105, 100, 115,
					91, 60, 60, 47, 77, 101, 100, 105, 97, 66, 111, 120, 91, 48, 32, 48, 32, 51, 32,
					51, 93, 62, 62, 93, 62, 62, 62, 62, 62, 62,
				},
			},
			&email.File{
				FileType: "attachment",
				Name:     "attached-json-filename.json",
				ContentInfo: &email.ContentInfo{
					Type: "application/json",
					TypeParams: map[string]string{
						"name": "attached-json-name.json",
					},
					Disposition: "attachment",
					DispositionParams: map[string]string{
						"filename": "attached-json-filename.json",
					},
					TransferEncoding: "7bit",
					ID:               "",
					Charset:          "ascii",
				},
				Data: []byte{
					123, 34, 102, 111, 111, 34, 58, 34, 98, 97, 114, 34, 125,
				},
			},
			&email.File{
				FileType: "attachment",
				Name:     "attached-text-plain-filename.txt",
				ContentInfo: &email.ContentInfo{
					Type: "text/plain",
					TypeParams: map[string]string{
						"name": "attached-text-plain-name.txt",
					},
					Disposition: "attachment",
					DispositionParams: map[string]string{
						"filename": "attached-text-plain-filename.txt",
					},
					TransferEncoding: "base64",
					ID:               "",
					Charset:          "ascii",
				},
				Data: []byte{
					84, 101, 120, 116, 47, 112, 108, 97, 105, 110, 32, 99, 111, 110, 116, 101, 110, 116,
					32, 97, 115, 32, 97, 110, 32, 97, 116, 116, 97, 99, 104, 101, 100, 32, 46, 116, 120,
					116, 32, 102, 105, 108, 101, 46,
				},
			},
			&email.File{
				FileType: "attachment",
				Name:     "attached-text-html-filename.html",
				ContentInfo: &email.ContentInfo{
					Type: "text/html",
					TypeParams: map[string]string{
						"name": "attached-text-html-name.html",
					},
					Disposition: "attachment",
					DispositionParams: map[string]string{
						"filename": "attached-text-html-filename.html",
					},
					TransferEncoding: "base64",
					ID:               "",
					Charset:          "ascii",
				},
				Data: []byte{
					84, 101, 120, 116, 47, 104, 116, 109, 108, 32, 99, 111, 110, 116, 101, 110, 116,
					32, 97, 115, 32, 97, 110, 32, 97, 116, 116, 97, 99, 104, 101, 100, 32, 46, 104, 116,
					109, 108, 32, 102, 105, 108, 101, 46,
				},
			},
		},
	}
	testEmailFromFile(t, fp, expectedEmail)
}

func TestParseEmailEnglishMultipartMixedUtf8Over7bit(t *testing.T) {
	fp := "tests/test_english_multipart_mixed_utf-8_over_7bit.txt"
	expectedEmail := &email.Email{
		Headers: email.Headers{
			Date: time.Time(time.Date(2019, 4, 1, 6, 55, 0, 0, time.UTC)),
			Sender: &mail.Address{
				Name:    "Alice Sender",
				Address: "alice.sender@example.com",
			},
			From: []*mail.Address{
				&mail.Address{
					Name:    "Alice Sender",
					Address: "alice.sender@example.com",
				},
				&mail.Address{
					Name:    "Alice Sender",
					Address: "alice.sender@example.net",
				},
			},
			ReplyTo: []*mail.Address{
				&mail.Address{
					Name:    "Alice Sender",
					Address: "alice.sender@example.net",
				},
			},
			To: []*mail.Address{
				&mail.Address{
					Name:    "Bob Recipient",
					Address: "bob.recipient@example.com",
				},
				&mail.Address{
					Name:    "Carol Recipient",
					Address: "carol.recipient@example.com",
				},
			},
			Cc: []*mail.Address{
				&mail.Address{
					Name:    "Dan Recipient",
					Address: "dan.recipient@example.com",
				},
				&mail.Address{
					Name:    "Eve Recipient",
					Address: "eve.recipient@example.com",
				},
			},
			Bcc: []*mail.Address{
				&mail.Address{
					Name:    "Frank Recipient",
					Address: "frank.recipient@example.com",
				},
				&mail.Address{
					Name:    "Grace Recipient",
					Address: "grace.recipient@example.com",
				},
			},
			MessageID: "Message-Id-1@example.com",
			InReplyTo: []string{
				"Message-Id-0@example.com",
			},
			References: []string{
				"Message-Id-0@example.com",
			},
			Subject:  "📧 Test English Pangrams",
			Comments: "Message Header Comment",
			Keywords: []string{
				"Keyword 1",
				"Keyword 2",
			},
			ResentDate: time.Time(time.Date(2019, 4, 1, 6, 55, 0, 0, time.UTC)),
			ResentFrom: []*mail.Address{
				&mail.Address{
					Name:    "Alice Sender",
					Address: "alice.sender@example.net",
				},
				&mail.Address{
					Name:    "Alice Sender",
					Address: "alice.sender@example.com",
				},
			},
			ResentSender: &mail.Address{
				Name:    "Alice Sender",
				Address: "alice.sender@example.net",
			},
			ResentTo: []*mail.Address{
				&mail.Address{
					Name:    "Bob Recipient",
					Address: "bob.recipient@example.net",
				},
				&mail.Address{
					Name:    "Carol Recipient",
					Address: "carol.recipient@example.net",
				},
			},
			ResentCc: []*mail.Address{
				&mail.Address{
					Name:    "Dan Recipient",
					Address: "dan.recipient@example.net",
				},
				&mail.Address{
					Name:    "Eve Recipient",
					Address: "eve.recipient@example.net",
				},
			},
			ResentBcc: []*mail.Address{
				&mail.Address{
					Name:    "Frank Recipient",
					Address: "frank.recipient@example.net",
				},
				&mail.Address{
					Name:    "Grace Recipient",
					Address: "grace.recipient@example.net",
				},
			},
			ResentMessageID: "Message-Id-1@example.net",
			ExtraHeaders: map[string][]string{
				"X-Clacks-Overhead": []string{
					"GNU Terry Pratchett",
				},
				"X-Script/function/\t !\"#$%&'()*+,-./;<=>?@[\\]^_`{|}~": []string{
					"TEST VALUE 1\t !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_` abcdefghijklmnopqrstuvwxyz{|}~",
					"TEST VALUE 2\t !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_` abcdefghijklmnopqrstuvwxyz{|}~",
				},
			},
			ContentInfo: &email.ContentInfo{
				Type: "multipart/mixed",
				TypeParams: map[string]string{
					"boundary": "MixedBoundaryString",
					"charset":  "utf-8",
				},
				Disposition:       "",
				DispositionParams: map[string]string(nil), // p0
				TransferEncoding:  "7bit",
				ID:                "",
				Charset:           "utf-8",
			},
			Received: nil,
		},
		Text: "The quick brown fox jumps over a lazy dog.\n" +
			"Glib jocks quiz nymph to vex dwarf.\n" +
			"Sphinx of black quartz, judge my vow.\n" +
			"How vexingly quick daft zebras jump!\n" +
			"The five boxing wizards jump quickly.\n" +
			"Jackdaws love my big sphinx of quartz.\n" +
			"Pack my box with five dozen liquor jugs.",
		EnrichedText: "<bold>The quick brown fox jumps over a lazy dog.</bold>\n" +
			"<italic>Glib jocks quiz nymph to vex dwarf.</italic>\n" +
			"<fixed>Sphinx of black quartz, judge my vow.</fixed>\n" +
			"<underline>How vexingly quick daft zebras jump!</underline>\n" +
			"The five boxing wizards jump quickly.\n" +
			"Jackdaws love my big sphinx of quartz.\n" +
			"Pack my box with five dozen liquor jugs.",
		HTML: "<html>\n" +
			"<div dir=\"ltr\">\n" +
			"<p>The quick brown fox jumps over a lazy dog.</p>\n" +
			"<p>Glib jocks quiz nymph to vex dwarf.</p>\n" +
			"<p>Sphinx of black quartz, judge my vow.</p>\n" +
			"<p>How vexingly quick daft zebras jump!</p>\n" +
			"<p>The five boxing wizards jump quickly.</p>\n" +
			"<p>Jackdaws love my big sphinx of quartz.</p>\n" +
			"<p>Pack my box with five dozen liquor jugs.</p>\n" +
			"</div>\n" +
			"</html>",
		Files: []*email.File{
			&email.File{
				FileType: "",
				Name:     "inline-jpg-image-without-disposition.jpg",
				ContentInfo: &email.ContentInfo{
					Type: "image/jpeg",
					TypeParams: map[string]string{
						"name": "inline-jpg-image-without-disposition.jpg",
					},
					Disposition:       "",
					DispositionParams: map[string]string(nil), // p0
					TransferEncoding:  "base64",
					ID:                "",
					Charset:           "utf-8",
				},
				Data: []byte{
					239, 191, 189, 239, 191, 189, 239, 191, 189, 239, 191, 189, 0, 67, 0, 3, 2, 2, 2,
					2, 2, 3, 2, 2, 2, 3, 3, 3, 3, 4, 6, 4, 4, 4, 4, 4, 8, 6, 6, 5, 6, 9, 8, 10, 10, 9,
					8, 9, 9, 10, 12, 15, 12, 10, 11, 14, 11, 9, 9, 13, 17, 13, 14, 15, 16, 16, 17, 16,
					10, 12, 18, 19, 18, 16, 19, 15, 16, 16, 16, 239, 191, 189, 239, 191, 189, 0, 11,
					8, 0, 1, 0, 1, 1, 1, 17, 0, 239, 191, 189, 239, 191, 189, 0, 6, 0, 16, 16, 5, 239,
					191, 189, 239, 191, 189, 0, 8, 1, 1, 0, 0, 63, 0, 239, 191, 189, 239, 191, 189, 32,
					239, 191, 189, 239, 191, 189,
				},
			},
			&email.File{
				FileType: "inline",
				Name:     "inline-jpg-image-filename.jpg",
				ContentInfo: &email.ContentInfo{
					Type: "image/jpeg",
					TypeParams: map[string]string{
						"name": "inline-jpg-image-name.jpg",
					},
					Disposition: "inline",
					DispositionParams: map[string]string{
						"filename": "inline-jpg-image-filename.jpg",
					},
					TransferEncoding: "base64",
					ID:               "inline-jpg-image.jpg@example.com",
					Charset:          "utf-8",
				},
				Data: []byte{
					239, 191, 189, 239, 191, 189, 239, 191, 189, 239, 191, 189, 0, 67, 0, 3, 2, 2, 2,
					2, 2, 3, 2, 2, 2, 3, 3, 3, 3, 4, 6, 4, 4, 4, 4, 4, 8, 6, 6, 5, 6, 9, 8, 10, 10, 9,
					8, 9, 9, 10, 12, 15, 12, 10, 11, 14, 11, 9, 9, 13, 17, 13, 14, 15, 16, 16, 17, 16,
					10, 12, 18, 19, 18, 16, 19, 15, 16, 16, 16, 239, 191, 189, 239, 191, 189, 0, 11,
					8, 0, 1, 0, 1, 1, 1, 17, 0, 239, 191, 189, 239, 191, 189, 0, 6, 0, 16, 16, 5, 239,
					191, 189, 239, 191, 189, 0, 8, 1, 1, 0, 0, 63, 0, 239, 191, 189, 239, 191, 189, 32,
					239, 191, 189, 239, 191, 189,
				},
			},
			&email.File{
				FileType: "attachment",
				Name:     "attached-pdf-filename.pdf",
				ContentInfo: &email.ContentInfo{
					Type: "application/pdf",
					TypeParams: map[string]string{
						"name": "attached-pdf-name.pdf",
					},
					Disposition: "attachment",
					DispositionParams: map[string]string{
						"filename": "attached-pdf-filename.pdf",
					},
					TransferEncoding: "base64",
					ID:               "",
					Charset:          "utf-8",
				},
				Data: []byte{
					37, 80, 68, 70, 45, 49, 46, 13, 116, 114, 97, 105, 108, 101, 114, 60, 60, 47, 82,
					111, 111, 116, 60, 60, 47, 80, 97, 103, 101, 115, 60, 60, 47, 75, 105, 100, 115,
					91, 60, 60, 47, 77, 101, 100, 105, 97, 66, 111, 120, 91, 48, 32, 48, 32, 51, 32,
					51, 93, 62, 62, 93, 62, 62, 62, 62, 62, 62,
				},
			},
			&email.File{
				FileType: "",
				Name:     "attached-pdf-without-disposition.pdf",
				ContentInfo: &email.ContentInfo{
					Type: "application/pdf",
					TypeParams: map[string]string{
						"name": "attached-pdf-without-disposition.pdf",
					},
					Disposition:       "",
					DispositionParams: map[string]string(nil), // p0
					TransferEncoding:  "base64",
					ID:                "",
					Charset:           "utf-8",
				},
				Data: []byte{
					37, 80, 68, 70, 45, 49, 46, 13, 116, 114, 97, 105, 108, 101, 114, 60, 60, 47, 82,
					111, 111, 116, 60, 60, 47, 80, 97, 103, 101, 115, 60, 60, 47, 75, 105, 100, 115,
					91, 60, 60, 47, 77, 101, 100, 105, 97, 66, 111, 120, 91, 48, 32, 48, 32, 51, 32,
					51, 93, 62, 62, 93, 62, 62, 62, 62, 62, 62,
				},
			},
			&email.File{
				FileType: "attachment",
				Name:     "attached-json-filename.json",
				ContentInfo: &email.ContentInfo{
					Type: "application/json",
					TypeParams: map[string]string{
						"name": "attached-json-name.json",
					},
					Disposition: "attachment",
					DispositionParams: map[string]string{
						"filename": "attached-json-filename.json",
					},
					TransferEncoding: "7bit",
					ID:               "",
					Charset:          "utf-8",
				},
				Data: []byte{
					123, 34, 102, 111, 111, 34, 58, 34, 98, 97, 114, 34, 125,
				},
			},
			&email.File{
				FileType: "attachment",
				Name:     "attached-text-plain-filename.txt",
				ContentInfo: &email.ContentInfo{
					Type: "text/plain",
					TypeParams: map[string]string{
						"name": "attached-text-plain-name.txt",
					},
					Disposition: "attachment",
					DispositionParams: map[string]string{
						"filename": "attached-text-plain-filename.txt",
					},
					TransferEncoding: "base64",
					ID:               "",
					Charset:          "utf-8",
				},
				Data: []byte{
					84, 101, 120, 116, 47, 112, 108, 97, 105, 110, 32, 99, 111, 110, 116, 101, 110, 116,
					32, 97, 115, 32, 97, 110, 32, 97, 116, 116, 97, 99, 104, 101, 100, 32, 46, 116, 120,
					116, 32, 102, 105, 108, 101, 46,
				},
			},
			&email.File{
				FileType: "attachment",
				Name:     "attached-text-html-filename.html",
				ContentInfo: &email.ContentInfo{
					Type: "text/html",
					TypeParams: map[string]string{
						"name": "attached-text-html-name.html",
					},
					Disposition: "attachment",
					DispositionParams: map[string]string{
						"filename": "attached-text-html-filename.html",
					},
					TransferEncoding: "base64",
					ID:               "",
					Charset:          "utf-8",
				},
				Data: []byte{
					84, 101, 120, 116, 47, 104, 116, 109, 108, 32, 99, 111, 110, 116, 101, 110, 116,
					32, 97, 115, 32, 97, 110, 32, 97, 116, 116, 97, 99, 104, 101, 100, 32, 46, 104, 116,
					109, 108, 32, 102, 105, 108, 101, 46,
				},
			},
		},
	}
	testEmailFromFile(t, fp, expectedEmail)
}

func TestParseEmailEnglishMultipartMixedUtf8OverBase64(t *testing.T) {
	fp := "tests/test_english_multipart_mixed_utf-8_over_base64.txt"
	expectedEmail := &email.Email{
		Headers: email.Headers{
			Date: time.Time(time.Date(2019, 4, 1, 6, 55, 0, 0, time.UTC)),
			Sender: &mail.Address{
				Name:    "Alice Sender",
				Address: "alice.sender@example.com",
			},
			From: []*mail.Address{
				&mail.Address{
					Name:    "Alice Sender",
					Address: "alice.sender@example.com",
				},
				&mail.Address{
					Name:    "Alice Sender",
					Address: "alice.sender@example.net",
				},
			},
			ReplyTo: []*mail.Address{
				&mail.Address{
					Name:    "Alice Sender",
					Address: "alice.sender@example.net",
				},
			},
			To: []*mail.Address{
				&mail.Address{
					Name:    "Bob Recipient",
					Address: "bob.recipient@example.com",
				},
				&mail.Address{
					Name:    "Carol Recipient",
					Address: "carol.recipient@example.com",
				},
			},
			Cc: []*mail.Address{
				&mail.Address{
					Name:    "Dan Recipient",
					Address: "dan.recipient@example.com",
				},
				&mail.Address{
					Name:    "Eve Recipient",
					Address: "eve.recipient@example.com",
				},
			},
			Bcc: []*mail.Address{
				&mail.Address{
					Name:    "Frank Recipient",
					Address: "frank.recipient@example.com",
				},
				&mail.Address{
					Name:    "Grace Recipient",
					Address: "grace.recipient@example.com",
				},
			},
			MessageID: "Message-Id-1@example.com",
			InReplyTo: []string{
				"Message-Id-0@example.com",
			},
			References: []string{
				"Message-Id-0@example.com",
			},
			Subject:  "📧 Test English Pangrams",
			Comments: "Message Header Comment",
			Keywords: []string{
				"Keyword 1",
				"Keyword 2",
			},
			ResentDate: time.Time(time.Date(2019, 4, 1, 6, 55, 0, 0, time.UTC)),
			ResentFrom: []*mail.Address{
				&mail.Address{
					Name:    "Alice Sender",
					Address: "alice.sender@example.net",
				},
				&mail.Address{
					Name:    "Alice Sender",
					Address: "alice.sender@example.com",
				},
			},
			ResentSender: &mail.Address{
				Name:    "Alice Sender",
				Address: "alice.sender@example.net",
			},
			ResentTo: []*mail.Address{
				&mail.Address{
					Name:    "Bob Recipient",
					Address: "bob.recipient@example.net",
				},
				&mail.Address{
					Name:    "Carol Recipient",
					Address: "carol.recipient@example.net",
				},
			},
			ResentCc: []*mail.Address{
				&mail.Address{
					Name:    "Dan Recipient",
					Address: "dan.recipient@example.net",
				},
				&mail.Address{
					Name:    "Eve Recipient",
					Address: "eve.recipient@example.net",
				},
			},
			ResentBcc: []*mail.Address{
				&mail.Address{
					Name:    "Frank Recipient",
					Address: "frank.recipient@example.net",
				},
				&mail.Address{
					Name:    "Grace Recipient",
					Address: "grace.recipient@example.net",
				},
			},
			ResentMessageID: "Message-Id-1@example.net",
			ExtraHeaders: map[string][]string{
				"X-Clacks-Overhead": []string{
					"GNU Terry Pratchett",
				},
				"X-Script/function/\t !\"#$%&'()*+,-./;<=>?@[\\]^_`{|}~": []string{
					"TEST VALUE 1\t !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_` abcdefghijklmnopqrstuvwxyz{|}~",
					"TEST VALUE 2\t !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_` abcdefghijklmnopqrstuvwxyz{|}~",
				},
			},
			ContentInfo: &email.ContentInfo{
				Type: "multipart/mixed",
				TypeParams: map[string]string{
					"boundary": "MixedBoundaryString",
					"charset":  "utf-8",
				},
				Disposition:       "",
				DispositionParams: map[string]string(nil), // p0
				TransferEncoding:  "base64",
				ID:                "",
				Charset:           "utf-8",
			},
			Received: nil,
		},
		Text: "The quick brown fox jumps over a lazy dog.\n" +
			"Glib jocks quiz nymph to vex dwarf.\n" +
			"Sphinx of black quartz, judge my vow.\n" +
			"How vexingly quick daft zebras jump!\n" +
			"The five boxing wizards jump quickly.\n" +
			"Jackdaws love my big sphinx of quartz.\n" +
			"Pack my box with five dozen liquor jugs.",
		EnrichedText: "<bold>The quick brown fox jumps over a lazy dog.</bold>\n" +
			"<italic>Glib jocks quiz nymph to vex dwarf.</italic>\n" +
			"<fixed>Sphinx of black quartz, judge my vow.</fixed>\n" +
			"<underline>How vexingly quick daft zebras jump!</underline>\n" +
			"The five boxing wizards jump quickly.\n" +
			"Jackdaws love my big sphinx of quartz.\n" +
			"Pack my box with five dozen liquor jugs.",
		HTML: "<html>\n" +
			"<div dir=\"ltr\">\n" +
			"<p>The quick brown fox jumps over a lazy dog.</p>\n" +
			"<p>Glib jocks quiz nymph to vex dwarf.</p>\n" +
			"<p>Sphinx of black quartz, judge my vow.</p>\n" +
			"<p>How vexingly quick daft zebras jump!</p>\n" +
			"<p>The five boxing wizards jump quickly.</p>\n" +
			"<p>Jackdaws love my big sphinx of quartz.</p>\n" +
			"<p>Pack my box with five dozen liquor jugs.</p>\n" +
			"</div>\n" +
			"</html>",
		Files: []*email.File{
			&email.File{
				FileType: "",
				Name:     "inline-jpg-image-without-disposition.jpg",
				ContentInfo: &email.ContentInfo{
					Type: "image/jpeg",
					TypeParams: map[string]string{
						"name": "inline-jpg-image-without-disposition.jpg",
					},
					Disposition:       "",
					DispositionParams: map[string]string(nil), // p0
					TransferEncoding:  "base64",
					ID:                "",
					Charset:           "utf-8",
				},
				Data: []byte{
					239, 191, 189, 239, 191, 189, 239, 191, 189, 239, 191, 189, 0, 67, 0, 3, 2, 2, 2,
					2, 2, 3, 2, 2, 2, 3, 3, 3, 3, 4, 6, 4, 4, 4, 4, 4, 8, 6, 6, 5, 6, 9, 8, 10, 10, 9,
					8, 9, 9, 10, 12, 15, 12, 10, 11, 14, 11, 9, 9, 13, 17, 13, 14, 15, 16, 16, 17, 16,
					10, 12, 18, 19, 18, 16, 19, 15, 16, 16, 16, 239, 191, 189, 239, 191, 189, 0, 11,
					8, 0, 1, 0, 1, 1, 1, 17, 0, 239, 191, 189, 239, 191, 189, 0, 6, 0, 16, 16, 5, 239,
					191, 189, 239, 191, 189, 0, 8, 1, 1, 0, 0, 63, 0, 239, 191, 189, 239, 191, 189, 32,
					239, 191, 189, 239, 191, 189,
				},
			},
			&email.File{
				FileType: "inline",
				Name:     "inline-jpg-image-filename.jpg",
				ContentInfo: &email.ContentInfo{
					Type: "image/jpeg",
					TypeParams: map[string]string{
						"name": "inline-jpg-image-name.jpg",
					},
					Disposition: "inline",
					DispositionParams: map[string]string{
						"filename": "inline-jpg-image-filename.jpg",
					},
					TransferEncoding: "base64",
					ID:               "inline-jpg-image.jpg@example.com",
					Charset:          "utf-8",
				},
				Data: []byte{
					239, 191, 189, 239, 191, 189, 239, 191, 189, 239, 191, 189, 0, 67, 0, 3, 2, 2, 2,
					2, 2, 3, 2, 2, 2, 3, 3, 3, 3, 4, 6, 4, 4, 4, 4, 4, 8, 6, 6, 5, 6, 9, 8, 10, 10, 9,
					8, 9, 9, 10, 12, 15, 12, 10, 11, 14, 11, 9, 9, 13, 17, 13, 14, 15, 16, 16, 17, 16,
					10, 12, 18, 19, 18, 16, 19, 15, 16, 16, 16, 239, 191, 189, 239, 191, 189, 0, 11,
					8, 0, 1, 0, 1, 1, 1, 17, 0, 239, 191, 189, 239, 191, 189, 0, 6, 0, 16, 16, 5, 239,
					191, 189, 239, 191, 189, 0, 8, 1, 1, 0, 0, 63, 0, 239, 191, 189, 239, 191, 189, 32,
					239, 191, 189, 239, 191, 189,
				},
			},
			&email.File{
				FileType: "attachment",
				Name:     "attached-pdf-filename.pdf",
				ContentInfo: &email.ContentInfo{
					Type: "application/pdf",
					TypeParams: map[string]string{
						"name": "attached-pdf-name.pdf",
					},
					Disposition: "attachment",
					DispositionParams: map[string]string{
						"filename": "attached-pdf-filename.pdf",
					},
					TransferEncoding: "base64",
					ID:               "",
					Charset:          "utf-8",
				},
				Data: []byte{
					37, 80, 68, 70, 45, 49, 46, 13, 116, 114, 97, 105, 108, 101, 114, 60, 60, 47, 82,
					111, 111, 116, 60, 60, 47, 80, 97, 103, 101, 115, 60, 60, 47, 75, 105, 100, 115,
					91, 60, 60, 47, 77, 101, 100, 105, 97, 66, 111, 120, 91, 48, 32, 48, 32, 51, 32,
					51, 93, 62, 62, 93, 62, 62, 62, 62, 62, 62,
				},
			},
			&email.File{
				FileType: "",
				Name:     "attached-pdf-without-disposition.pdf",
				ContentInfo: &email.ContentInfo{
					Type: "application/pdf",
					TypeParams: map[string]string{
						"name": "attached-pdf-without-disposition.pdf",
					},
					Disposition:       "",
					DispositionParams: map[string]string(nil), // p0
					TransferEncoding:  "base64",
					ID:                "",
					Charset:           "utf-8",
				},
				Data: []byte{
					37, 80, 68, 70, 45, 49, 46, 13, 116, 114, 97, 105, 108, 101, 114, 60, 60, 47, 82,
					111, 111, 116, 60, 60, 47, 80, 97, 103, 101, 115, 60, 60, 47, 75, 105, 100, 115,
					91, 60, 60, 47, 77, 101, 100, 105, 97, 66, 111, 120, 91, 48, 32, 48, 32, 51, 32,
					51, 93, 62, 62, 93, 62, 62, 62, 62, 62, 62,
				},
			},
			&email.File{
				FileType: "attachment",
				Name:     "attached-json-filename.json",
				ContentInfo: &email.ContentInfo{
					Type: "application/json",
					TypeParams: map[string]string{
						"name": "attached-json-name.json",
					},
					Disposition: "attachment",
					DispositionParams: map[string]string{
						"filename": "attached-json-filename.json",
					},
					TransferEncoding: "7bit",
					ID:               "",
					Charset:          "utf-8",
				},
				Data: []byte{
					123, 34, 102, 111, 111, 34, 58, 34, 98, 97, 114, 34, 125,
				},
			},
			&email.File{
				FileType: "attachment",
				Name:     "attached-text-plain-filename.txt",
				ContentInfo: &email.ContentInfo{
					Type: "text/plain",
					TypeParams: map[string]string{
						"name": "attached-text-plain-name.txt",
					},
					Disposition: "attachment",
					DispositionParams: map[string]string{
						"filename": "attached-text-plain-filename.txt",
					},
					TransferEncoding: "base64",
					ID:               "",
					Charset:          "utf-8",
				},
				Data: []byte{
					84, 101, 120, 116, 47, 112, 108, 97, 105, 110, 32, 99, 111, 110, 116, 101, 110, 116,
					32, 97, 115, 32, 97, 110, 32, 97, 116, 116, 97, 99, 104, 101, 100, 32, 46, 116, 120,
					116, 32, 102, 105, 108, 101, 46,
				},
			},
			&email.File{
				FileType: "attachment",
				Name:     "attached-text-html-filename.html",
				ContentInfo: &email.ContentInfo{
					Type: "text/html",
					TypeParams: map[string]string{
						"name": "attached-text-html-name.html",
					},
					Disposition: "attachment",
					DispositionParams: map[string]string{
						"filename": "attached-text-html-filename.html",
					},
					TransferEncoding: "base64",
					ID:               "",
					Charset:          "utf-8",
				},
				Data: []byte{
					84, 101, 120, 116, 47, 104, 116, 109, 108, 32, 99, 111, 110, 116, 101, 110, 116,
					32, 97, 115, 32, 97, 110, 32, 97, 116, 116, 97, 99, 104, 101, 100, 32, 46, 104, 116,
					109, 108, 32, 102, 105, 108, 101, 46,
				},
			},
		},
	}
	testEmailFromFile(t, fp, expectedEmail)
}

func TestParseEmailEnglishMultipartMixedUtf8OverQuotedprintable(t *testing.T) {
	fp := "tests/test_english_multipart_mixed_utf-8_over_quoted-printable.txt"
	expectedEmail := &email.Email{
		Headers: email.Headers{
			Date: time.Time(time.Date(2019, 4, 1, 6, 55, 0, 0, time.UTC)),
			Sender: &mail.Address{
				Name:    "Alice Sender",
				Address: "alice.sender@example.com",
			},
			From: []*mail.Address{
				&mail.Address{
					Name:    "Alice Sender",
					Address: "alice.sender@example.com",
				},
				&mail.Address{
					Name:    "Alice Sender",
					Address: "alice.sender@example.net",
				},
			},
			ReplyTo: []*mail.Address{
				&mail.Address{
					Name:    "Alice Sender",
					Address: "alice.sender@example.net",
				},
			},
			To: []*mail.Address{
				&mail.Address{
					Name:    "Bob Recipient",
					Address: "bob.recipient@example.com",
				},
				&mail.Address{
					Name:    "Carol Recipient",
					Address: "carol.recipient@example.com",
				},
			},
			Cc: []*mail.Address{
				&mail.Address{
					Name:    "Dan Recipient",
					Address: "dan.recipient@example.com",
				},
				&mail.Address{
					Name:    "Eve Recipient",
					Address: "eve.recipient@example.com",
				},
			},
			Bcc: []*mail.Address{
				&mail.Address{
					Name:    "Frank Recipient",
					Address: "frank.recipient@example.com",
				},
				&mail.Address{
					Name:    "Grace Recipient",
					Address: "grace.recipient@example.com",
				},
			},
			MessageID: "Message-Id-1@example.com",
			InReplyTo: []string{
				"Message-Id-0@example.com",
			},
			References: []string{
				"Message-Id-0@example.com",
			},
			Subject:  "📧 Test English Pangrams",
			Comments: "Message Header Comment",
			Keywords: []string{
				"Keyword 1",
				"Keyword 2",
			},
			ResentDate: time.Time(time.Date(2019, 4, 1, 6, 55, 0, 0, time.UTC)),
			ResentFrom: []*mail.Address{
				&mail.Address{
					Name:    "Alice Sender",
					Address: "alice.sender@example.net",
				},
				&mail.Address{
					Name:    "Alice Sender",
					Address: "alice.sender@example.com",
				},
			},
			ResentSender: &mail.Address{
				Name:    "Alice Sender",
				Address: "alice.sender@example.net",
			},
			ResentTo: []*mail.Address{
				&mail.Address{
					Name:    "Bob Recipient",
					Address: "bob.recipient@example.net",
				},
				&mail.Address{
					Name:    "Carol Recipient",
					Address: "carol.recipient@example.net",
				},
			},
			ResentCc: []*mail.Address{
				&mail.Address{
					Name:    "Dan Recipient",
					Address: "dan.recipient@example.net",
				},
				&mail.Address{
					Name:    "Eve Recipient",
					Address: "eve.recipient@example.net",
				},
			},
			ResentBcc: []*mail.Address{
				&mail.Address{
					Name:    "Frank Recipient",
					Address: "frank.recipient@example.net",
				},
				&mail.Address{
					Name:    "Grace Recipient",
					Address: "grace.recipient@example.net",
				},
			},
			ResentMessageID: "Message-Id-1@example.net",
			ExtraHeaders: map[string][]string{
				"X-Clacks-Overhead": []string{
					"GNU Terry Pratchett",
				},
				"X-Script/function/\t !\"#$%&'()*+,-./;<=>?@[\\]^_`{|}~": []string{
					"TEST VALUE 1\t !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_` abcdefghijklmnopqrstuvwxyz{|}~",
					"TEST VALUE 2\t !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_` abcdefghijklmnopqrstuvwxyz{|}~",
				},
			},
			ContentInfo: &email.ContentInfo{
				Type: "multipart/mixed",
				TypeParams: map[string]string{
					"boundary": "MixedBoundaryString",
					"charset":  "utf-8",
				},
				Disposition:       "",
				DispositionParams: map[string]string(nil), // p0
				TransferEncoding:  "quoted-printable",
				ID:                "",
				Charset:           "utf-8",
			},
			Received: nil,
		},
		Text: "The quick brown fox jumps over a lazy dog.\n" +
			"Glib jocks quiz nymph to vex dwarf.\n" +
			"Sphinx of black quartz, judge my vow.\n" +
			"How vexingly quick daft zebras jump!\n" +
			"The five boxing wizards jump quickly.\n" +
			"Jackdaws love my big sphinx of quartz.\n" +
			"Pack my box with five dozen liquor jugs.",
		EnrichedText: "<bold>The quick brown fox jumps over a lazy dog.</bold>\n" +
			"<italic>Glib jocks quiz nymph to vex dwarf.</italic>\n" +
			"<fixed>Sphinx of black quartz, judge my vow.</fixed>\n" +
			"<underline>How vexingly quick daft zebras jump!</underline>\n" +
			"The five boxing wizards jump quickly.\n" +
			"Jackdaws love my big sphinx of quartz.\n" +
			"Pack my box with five dozen liquor jugs.",
		HTML: "<html>\n" +
			"<div dir=\"ltr\">\n" +
			"<p>The quick brown fox jumps over a lazy dog.</p>\n" +
			"<p>Glib jocks quiz nymph to vex dwarf.</p>\n" +
			"<p>Sphinx of black quartz, judge my vow.</p>\n" +
			"<p>How vexingly quick daft zebras jump!</p>\n" +
			"<p>The five boxing wizards jump quickly.</p>\n" +
			"<p>Jackdaws love my big sphinx of quartz.</p>\n" +
			"<p>Pack my box with five dozen liquor jugs.</p>\n" +
			"</div>\n" +
			"</html>",
		Files: []*email.File{
			&email.File{
				FileType: "",
				Name:     "inline-jpg-image-without-disposition.jpg",
				ContentInfo: &email.ContentInfo{
					Type: "image/jpeg",
					TypeParams: map[string]string{
						"name": "inline-jpg-image-without-disposition.jpg",
					},
					Disposition:       "",
					DispositionParams: map[string]string(nil), // p0
					TransferEncoding:  "base64",
					ID:                "",
					Charset:           "utf-8",
				},
				Data: []byte{
					239, 191, 189, 239, 191, 189, 239, 191, 189, 239, 191, 189, 0, 67, 0, 3, 2, 2, 2,
					2, 2, 3, 2, 2, 2, 3, 3, 3, 3, 4, 6, 4, 4, 4, 4, 4, 8, 6, 6, 5, 6, 9, 8, 10, 10, 9,
					8, 9, 9, 10, 12, 15, 12, 10, 11, 14, 11, 9, 9, 13, 17, 13, 14, 15, 16, 16, 17, 16,
					10, 12, 18, 19, 18, 16, 19, 15, 16, 16, 16, 239, 191, 189, 239, 191, 189, 0, 11,
					8, 0, 1, 0, 1, 1, 1, 17, 0, 239, 191, 189, 239, 191, 189, 0, 6, 0, 16, 16, 5, 239,
					191, 189, 239, 191, 189, 0, 8, 1, 1, 0, 0, 63, 0, 239, 191, 189, 239, 191, 189, 32,
					239, 191, 189, 239, 191, 189,
				},
			},
			&email.File{
				FileType: "inline",
				Name:     "inline-jpg-image-filename.jpg",
				ContentInfo: &email.ContentInfo{
					Type: "image/jpeg",
					TypeParams: map[string]string{
						"name": "inline-jpg-image-name.jpg",
					},
					Disposition: "inline",
					DispositionParams: map[string]string{
						"filename": "inline-jpg-image-filename.jpg",
					},
					TransferEncoding: "base64",
					ID:               "inline-jpg-image.jpg@example.com",
					Charset:          "utf-8",
				},
				Data: []byte{
					239, 191, 189, 239, 191, 189, 239, 191, 189, 239, 191, 189, 0, 67, 0, 3, 2, 2, 2,
					2, 2, 3, 2, 2, 2, 3, 3, 3, 3, 4, 6, 4, 4, 4, 4, 4, 8, 6, 6, 5, 6, 9, 8, 10, 10, 9,
					8, 9, 9, 10, 12, 15, 12, 10, 11, 14, 11, 9, 9, 13, 17, 13, 14, 15, 16, 16, 17, 16,
					10, 12, 18, 19, 18, 16, 19, 15, 16, 16, 16, 239, 191, 189, 239, 191, 189, 0, 11,
					8, 0, 1, 0, 1, 1, 1, 17, 0, 239, 191, 189, 239, 191, 189, 0, 6, 0, 16, 16, 5, 239,
					191, 189, 239, 191, 189, 0, 8, 1, 1, 0, 0, 63, 0, 239, 191, 189, 239, 191, 189, 32,
					239, 191, 189, 239, 191, 189,
				},
			},
			&email.File{
				FileType: "attachment",
				Name:     "attached-pdf-filename.pdf",
				ContentInfo: &email.ContentInfo{
					Type: "application/pdf",
					TypeParams: map[string]string{
						"name": "attached-pdf-name.pdf",
					},
					Disposition: "attachment",
					DispositionParams: map[string]string{
						"filename": "attached-pdf-filename.pdf",
					},
					TransferEncoding: "base64",
					ID:               "",
					Charset:          "utf-8",
				},
				Data: []byte{
					37, 80, 68, 70, 45, 49, 46, 13, 116, 114, 97, 105, 108, 101, 114, 60, 60, 47, 82,
					111, 111, 116, 60, 60, 47, 80, 97, 103, 101, 115, 60, 60, 47, 75, 105, 100, 115,
					91, 60, 60, 47, 77, 101, 100, 105, 97, 66, 111, 120, 91, 48, 32, 48, 32, 51, 32,
					51, 93, 62, 62, 93, 62, 62, 62, 62, 62, 62,
				},
			},
			&email.File{
				FileType: "",
				Name:     "attached-pdf-without-disposition.pdf",
				ContentInfo: &email.ContentInfo{
					Type: "application/pdf",
					TypeParams: map[string]string{
						"name": "attached-pdf-without-disposition.pdf",
					},
					Disposition:       "",
					DispositionParams: map[string]string(nil), // p0
					TransferEncoding:  "base64",
					ID:                "",
					Charset:           "utf-8",
				},
				Data: []byte{
					37, 80, 68, 70, 45, 49, 46, 13, 116, 114, 97, 105, 108, 101, 114, 60, 60, 47, 82,
					111, 111, 116, 60, 60, 47, 80, 97, 103, 101, 115, 60, 60, 47, 75, 105, 100, 115,
					91, 60, 60, 47, 77, 101, 100, 105, 97, 66, 111, 120, 91, 48, 32, 48, 32, 51, 32,
					51, 93, 62, 62, 93, 62, 62, 62, 62, 62, 62,
				},
			},
			&email.File{
				FileType: "attachment",
				Name:     "attached-json-filename.json",
				ContentInfo: &email.ContentInfo{
					Type: "application/json",
					TypeParams: map[string]string{
						"name": "attached-json-name.json",
					},
					Disposition: "attachment",
					DispositionParams: map[string]string{
						"filename": "attached-json-filename.json",
					},
					TransferEncoding: "7bit",
					ID:               "",
					Charset:          "utf-8",
				},
				Data: []byte{
					123, 34, 102, 111, 111, 34, 58, 34, 98, 97, 114, 34, 125,
				},
			},
			&email.File{
				FileType: "attachment",
				Name:     "attached-text-plain-filename.txt",
				ContentInfo: &email.ContentInfo{
					Type: "text/plain",
					TypeParams: map[string]string{
						"name": "attached-text-plain-name.txt",
					},
					Disposition: "attachment",
					DispositionParams: map[string]string{
						"filename": "attached-text-plain-filename.txt",
					},
					TransferEncoding: "base64",
					ID:               "",
					Charset:          "utf-8",
				},
				Data: []byte{
					84, 101, 120, 116, 47, 112, 108, 97, 105, 110, 32, 99, 111, 110, 116, 101, 110, 116,
					32, 97, 115, 32, 97, 110, 32, 97, 116, 116, 97, 99, 104, 101, 100, 32, 46, 116, 120,
					116, 32, 102, 105, 108, 101, 46,
				},
			},
			&email.File{
				FileType: "attachment",
				Name:     "attached-text-html-filename.html",
				ContentInfo: &email.ContentInfo{
					Type: "text/html",
					TypeParams: map[string]string{
						"name": "attached-text-html-name.html",
					},
					Disposition: "attachment",
					DispositionParams: map[string]string{
						"filename": "attached-text-html-filename.html",
					},
					TransferEncoding: "base64",
					ID:               "",
					Charset:          "utf-8",
				},
				Data: []byte{
					84, 101, 120, 116, 47, 104, 116, 109, 108, 32, 99, 111, 110, 116, 101, 110, 116,
					32, 97, 115, 32, 97, 110, 32, 97, 116, 116, 97, 99, 104, 101, 100, 32, 46, 104, 116,
					109, 108, 32, 102, 105, 108, 101, 46,
				},
			},
		},
	}
	testEmailFromFile(t, fp, expectedEmail)
}

func TestParseEmailEnglishMultipartSignedAsciiOver7bit(t *testing.T) {
	fp := "tests/test_english_multipart_signed_ascii_over_7bit.txt"
	expectedEmail := &email.Email{
		Headers: email.Headers{
			Date: time.Time(time.Date(2019, 4, 1, 6, 55, 0, 0, time.UTC)),
			Sender: &mail.Address{
				Name:    "Alice Sender",
				Address: "alice.sender@example.com",
			},
			From: []*mail.Address{
				&mail.Address{
					Name:    "Alice Sender",
					Address: "alice.sender@example.com",
				},
				&mail.Address{
					Name:    "Alice Sender",
					Address: "alice.sender@example.net",
				},
			},
			ReplyTo: []*mail.Address{
				&mail.Address{
					Name:    "Alice Sender",
					Address: "alice.sender@example.net",
				},
			},
			To: []*mail.Address{
				&mail.Address{
					Name:    "Bob Recipient",
					Address: "bob.recipient@example.com",
				},
				&mail.Address{
					Name:    "Carol Recipient",
					Address: "carol.recipient@example.com",
				},
			},
			Cc: []*mail.Address{
				&mail.Address{
					Name:    "Dan Recipient",
					Address: "dan.recipient@example.com",
				},
				&mail.Address{
					Name:    "Eve Recipient",
					Address: "eve.recipient@example.com",
				},
			},
			Bcc: []*mail.Address{
				&mail.Address{
					Name:    "Frank Recipient",
					Address: "frank.recipient@example.com",
				},
				&mail.Address{
					Name:    "Grace Recipient",
					Address: "grace.recipient@example.com",
				},
			},
			MessageID: "Message-Id-1@example.com",
			InReplyTo: []string{
				"Message-Id-0@example.com",
			},
			References: []string{
				"Message-Id-0@example.com",
			},
			Subject:  "📧 Signed Test English Pangrams",
			Comments: "Message Header Comment",
			Keywords: []string{
				"Keyword 1",
				"Keyword 2",
			},
			ResentDate: time.Time(time.Date(2019, 4, 1, 6, 55, 0, 0, time.UTC)),
			ResentFrom: []*mail.Address{
				&mail.Address{
					Name:    "Alice Sender",
					Address: "alice.sender@example.net",
				},
				&mail.Address{
					Name:    "Alice Sender",
					Address: "alice.sender@example.com",
				},
			},
			ResentSender: &mail.Address{
				Name:    "Alice Sender",
				Address: "alice.sender@example.net",
			},
			ResentTo: []*mail.Address{
				&mail.Address{
					Name:    "Bob Recipient",
					Address: "bob.recipient@example.net",
				},
				&mail.Address{
					Name:    "Carol Recipient",
					Address: "carol.recipient@example.net",
				},
			},
			ResentCc: []*mail.Address{
				&mail.Address{
					Name:    "Dan Recipient",
					Address: "dan.recipient@example.net",
				},
				&mail.Address{
					Name:    "Eve Recipient",
					Address: "eve.recipient@example.net",
				},
			},
			ResentBcc: []*mail.Address{
				&mail.Address{
					Name:    "Frank Recipient",
					Address: "frank.recipient@example.net",
				},
				&mail.Address{
					Name:    "Grace Recipient",
					Address: "grace.recipient@example.net",
				},
			},
			ResentMessageID: "Message-Id-1@example.net",
			ExtraHeaders: map[string][]string{
				"X-Clacks-Overhead": []string{
					"GNU Terry Pratchett",
				},
				"X-Script/function/\t !\"#$%&'()*+,-./;<=>?@[\\]^_`{|}~": []string{
					"TEST VALUE 1\t !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_` abcdefghijklmnopqrstuvwxyz{|}~",
					"TEST VALUE 2\t !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_` abcdefghijklmnopqrstuvwxyz{|}~",
				},
			},
			ContentInfo: &email.ContentInfo{
				Type: "multipart/signed",
				TypeParams: map[string]string{
					"boundary": "SignedBoundaryString",
					"charset":  "ascii",
					"micalg":   "sha1",
					"protocol": "application/pkcs7-signature",
				},
				Disposition:       "",
				DispositionParams: map[string]string(nil), // p0
				TransferEncoding:  "7bit",
				ID:                "",
				Charset:           "ascii",
			},
			Received: nil,
		},
		Text: "The quick brown fox jumps over a lazy dog.\n" +
			"Glib jocks quiz nymph to vex dwarf.\n" +
			"Sphinx of black quartz, judge my vow.\n" +
			"How vexingly quick daft zebras jump!\n" +
			"The five boxing wizards jump quickly.\n" +
			"Jackdaws love my big sphinx of quartz.\n" +
			"Pack my box with five dozen liquor jugs.",
		EnrichedText: "",
		HTML:         "",
		Files: []*email.File{
			&email.File{
				FileType: "attachment",
				Name:     "smime.p7s",
				ContentInfo: &email.ContentInfo{
					Type: "application/pkcs7-signature",
					TypeParams: map[string]string{
						"name": "smime.p7s",
					},
					Disposition: "attachment",
					DispositionParams: map[string]string{
						"filename": "smime.p7s",
					},
					TransferEncoding: "base64",
					ID:               "",
					Charset:          "ascii",
				},
				Data: []byte{
					226, 128, 154, 28, 226, 128, 161, 226, 128, 158, 117, 46, 197, 189, 18, 97, 197,
					146, 126, 195, 187, 197, 184, 195, 129, 195, 135, 25, 58, 195, 159, 194, 189, 194,
					185, 195, 163, 195, 175, 197, 190, 194, 173, 108, 31, 71, 27, 226, 128, 166, 80,
					194, 165, 195, 188, 226, 128, 166, 195, 163, 194, 174, 195, 134, 226, 128, 158, 239,
					191, 189, 197, 184, 29, 195, 182, 19, 195, 171, 226, 128, 166, 80, 194, 165, 195,
					188, 226, 128, 166, 195, 163, 194, 174, 195, 134, 226, 128, 158, 239, 191, 189, 197,
					184, 29, 195, 182, 19, 195, 170, 49, 195, 187, 195, 174, 127, 7, 28, 104, 33, 195,
					136, 120, 71, 82, 195, 168, 195, 161, 38, 30, 195, 185, 195, 170, 195, 150, 195,
					129, 195, 180, 113, 226, 128, 156, 194, 173, 195, 187, 195, 155, 197, 190, 57, 195,
					188, 28, 113, 226, 128, 156, 194, 173, 195, 187, 195, 161, 38, 24, 195, 135, 195,
					175, 194, 190, 194, 173, 108, 31, 71, 27, 226, 128, 166, 80, 110, 120, 195, 187,
					195, 167, 194, 174, 195, 134, 226, 128, 158, 239, 191, 189, 197, 184, 29, 195, 182,
					19, 195, 170, 8, 114, 30, 17, 195, 148, 194, 186, 58, 95, 195, 136, 94, 59, 26, 18,
					6, 124, 119, 195, 152, 79, 194, 174, 21, 65, 194, 185, 195, 163, 195, 175, 197, 190,
				},
			},
		},
	}
	testEmailFromFile(t, fp, expectedEmail)
}

func TestParseEmailEnglishMultipartSignedAsciiOverBase64(t *testing.T) {
	fp := "tests/test_english_multipart_signed_ascii_over_base64.txt"
	expectedEmail := &email.Email{
		Headers: email.Headers{
			Date: time.Time(time.Date(2019, 4, 1, 6, 55, 0, 0, time.UTC)),
			Sender: &mail.Address{
				Name:    "Alice Sender",
				Address: "alice.sender@example.com",
			},
			From: []*mail.Address{
				&mail.Address{
					Name:    "Alice Sender",
					Address: "alice.sender@example.com",
				},
				&mail.Address{
					Name:    "Alice Sender",
					Address: "alice.sender@example.net",
				},
			},
			ReplyTo: []*mail.Address{
				&mail.Address{
					Name:    "Alice Sender",
					Address: "alice.sender@example.net",
				},
			},
			To: []*mail.Address{
				&mail.Address{
					Name:    "Bob Recipient",
					Address: "bob.recipient@example.com",
				},
				&mail.Address{
					Name:    "Carol Recipient",
					Address: "carol.recipient@example.com",
				},
			},
			Cc: []*mail.Address{
				&mail.Address{
					Name:    "Dan Recipient",
					Address: "dan.recipient@example.com",
				},
				&mail.Address{
					Name:    "Eve Recipient",
					Address: "eve.recipient@example.com",
				},
			},
			Bcc: []*mail.Address{
				&mail.Address{
					Name:    "Frank Recipient",
					Address: "frank.recipient@example.com",
				},
				&mail.Address{
					Name:    "Grace Recipient",
					Address: "grace.recipient@example.com",
				},
			},
			MessageID: "Message-Id-1@example.com",
			InReplyTo: []string{
				"Message-Id-0@example.com",
			},
			References: []string{
				"Message-Id-0@example.com",
			},
			Subject:  "📧 Signed Test English Pangrams",
			Comments: "Message Header Comment",
			Keywords: []string{
				"Keyword 1",
				"Keyword 2",
			},
			ResentDate: time.Time(time.Date(2019, 4, 1, 6, 55, 0, 0, time.UTC)),
			ResentFrom: []*mail.Address{
				&mail.Address{
					Name:    "Alice Sender",
					Address: "alice.sender@example.net",
				},
				&mail.Address{
					Name:    "Alice Sender",
					Address: "alice.sender@example.com",
				},
			},
			ResentSender: &mail.Address{
				Name:    "Alice Sender",
				Address: "alice.sender@example.net",
			},
			ResentTo: []*mail.Address{
				&mail.Address{
					Name:    "Bob Recipient",
					Address: "bob.recipient@example.net",
				},
				&mail.Address{
					Name:    "Carol Recipient",
					Address: "carol.recipient@example.net",
				},
			},
			ResentCc: []*mail.Address{
				&mail.Address{
					Name:    "Dan Recipient",
					Address: "dan.recipient@example.net",
				},
				&mail.Address{
					Name:    "Eve Recipient",
					Address: "eve.recipient@example.net",
				},
			},
			ResentBcc: []*mail.Address{
				&mail.Address{
					Name:    "Frank Recipient",
					Address: "frank.recipient@example.net",
				},
				&mail.Address{
					Name:    "Grace Recipient",
					Address: "grace.recipient@example.net",
				},
			},
			ResentMessageID: "Message-Id-1@example.net",
			ExtraHeaders: map[string][]string{
				"X-Clacks-Overhead": []string{
					"GNU Terry Pratchett",
				},
				"X-Script/function/\t !\"#$%&'()*+,-./;<=>?@[\\]^_`{|}~": []string{
					"TEST VALUE 1\t !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_` abcdefghijklmnopqrstuvwxyz{|}~",
					"TEST VALUE 2\t !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_` abcdefghijklmnopqrstuvwxyz{|}~",
				},
			},
			ContentInfo: &email.ContentInfo{
				Type: "multipart/signed",
				TypeParams: map[string]string{
					"boundary": "SignedBoundaryString",
					"charset":  "ascii",
					"micalg":   "sha1",
					"protocol": "application/pkcs7-signature",
				},
				Disposition:       "",
				DispositionParams: map[string]string(nil), // p0
				TransferEncoding:  "base64",
				ID:                "",
				Charset:           "ascii",
			},
			Received: nil,
		},
		Text: "The quick brown fox jumps over a lazy dog.\n" +
			"Glib jocks quiz nymph to vex dwarf.\n" +
			"Sphinx of black quartz, judge my vow.\n" +
			"How vexingly quick daft zebras jump!\n" +
			"The five boxing wizards jump quickly.\n" +
			"Jackdaws love my big sphinx of quartz.\n" +
			"Pack my box with five dozen liquor jugs.",
		EnrichedText: "",
		HTML:         "",
		Files: []*email.File{
			&email.File{
				FileType: "attachment",
				Name:     "smime.p7s",
				ContentInfo: &email.ContentInfo{
					Type: "application/pkcs7-signature",
					TypeParams: map[string]string{
						"name": "smime.p7s",
					},
					Disposition: "attachment",
					DispositionParams: map[string]string{
						"filename": "smime.p7s",
					},
					TransferEncoding: "base64",
					ID:               "",
					Charset:          "ascii",
				},
				Data: []byte{
					226, 128, 154, 28, 226, 128, 161, 226, 128, 158, 117, 46, 197, 189, 18, 97, 197,
					146, 126, 195, 187, 197, 184, 195, 129, 195, 135, 25, 58, 195, 159, 194, 189, 194,
					185, 195, 163, 195, 175, 197, 190, 194, 173, 108, 31, 71, 27, 226, 128, 166, 80,
					194, 165, 195, 188, 226, 128, 166, 195, 163, 194, 174, 195, 134, 226, 128, 158, 239,
					191, 189, 197, 184, 29, 195, 182, 19, 195, 171, 226, 128, 166, 80, 194, 165, 195,
					188, 226, 128, 166, 195, 163, 194, 174, 195, 134, 226, 128, 158, 239, 191, 189, 197,
					184, 29, 195, 182, 19, 195, 170, 49, 195, 187, 195, 174, 127, 7, 28, 104, 33, 195,
					136, 120, 71, 82, 195, 168, 195, 161, 38, 30, 195, 185, 195, 170, 195, 150, 195,
					129, 195, 180, 113, 226, 128, 156, 194, 173, 195, 187, 195, 155, 197, 190, 57, 195,
					188, 28, 113, 226, 128, 156, 194, 173, 195, 187, 195, 161, 38, 24, 195, 135, 195,
					175, 194, 190, 194, 173, 108, 31, 71, 27, 226, 128, 166, 80, 110, 120, 195, 187,
					195, 167, 194, 174, 195, 134, 226, 128, 158, 239, 191, 189, 197, 184, 29, 195, 182,
					19, 195, 170, 8, 114, 30, 17, 195, 148, 194, 186, 58, 95, 195, 136, 94, 59, 26, 18,
					6, 124, 119, 195, 152, 79, 194, 174, 21, 65, 194, 185, 195, 163, 195, 175, 197, 190,
				},
			},
		},
	}
	testEmailFromFile(t, fp, expectedEmail)
}

func TestParseEmailEnglishMultipartSignedAsciiOverQuotedprintable(t *testing.T) {
	fp := "tests/test_english_multipart_signed_ascii_over_quoted-printable.txt"
	expectedEmail := &email.Email{
		Headers: email.Headers{
			Date: time.Time(time.Date(2019, 4, 1, 6, 55, 0, 0, time.UTC)),
			Sender: &mail.Address{
				Name:    "Alice Sender",
				Address: "alice.sender@example.com",
			},
			From: []*mail.Address{
				&mail.Address{
					Name:    "Alice Sender",
					Address: "alice.sender@example.com",
				},
				&mail.Address{
					Name:    "Alice Sender",
					Address: "alice.sender@example.net",
				},
			},
			ReplyTo: []*mail.Address{
				&mail.Address{
					Name:    "Alice Sender",
					Address: "alice.sender@example.net",
				},
			},
			To: []*mail.Address{
				&mail.Address{
					Name:    "Bob Recipient",
					Address: "bob.recipient@example.com",
				},
				&mail.Address{
					Name:    "Carol Recipient",
					Address: "carol.recipient@example.com",
				},
			},
			Cc: []*mail.Address{
				&mail.Address{
					Name:    "Dan Recipient",
					Address: "dan.recipient@example.com",
				},
				&mail.Address{
					Name:    "Eve Recipient",
					Address: "eve.recipient@example.com",
				},
			},
			Bcc: []*mail.Address{
				&mail.Address{
					Name:    "Frank Recipient",
					Address: "frank.recipient@example.com",
				},
				&mail.Address{
					Name:    "Grace Recipient",
					Address: "grace.recipient@example.com",
				},
			},
			MessageID: "Message-Id-1@example.com",
			InReplyTo: []string{
				"Message-Id-0@example.com",
			},
			References: []string{
				"Message-Id-0@example.com",
			},
			Subject:  "📧 Signed Test English Pangrams",
			Comments: "Message Header Comment",
			Keywords: []string{
				"Keyword 1",
				"Keyword 2",
			},
			ResentDate: time.Time(time.Date(2019, 4, 1, 6, 55, 0, 0, time.UTC)),
			ResentFrom: []*mail.Address{
				&mail.Address{
					Name:    "Alice Sender",
					Address: "alice.sender@example.net",
				},
				&mail.Address{
					Name:    "Alice Sender",
					Address: "alice.sender@example.com",
				},
			},
			ResentSender: &mail.Address{
				Name:    "Alice Sender",
				Address: "alice.sender@example.net",
			},
			ResentTo: []*mail.Address{
				&mail.Address{
					Name:    "Bob Recipient",
					Address: "bob.recipient@example.net",
				},
				&mail.Address{
					Name:    "Carol Recipient",
					Address: "carol.recipient@example.net",
				},
			},
			ResentCc: []*mail.Address{
				&mail.Address{
					Name:    "Dan Recipient",
					Address: "dan.recipient@example.net",
				},
				&mail.Address{
					Name:    "Eve Recipient",
					Address: "eve.recipient@example.net",
				},
			},
			ResentBcc: []*mail.Address{
				&mail.Address{
					Name:    "Frank Recipient",
					Address: "frank.recipient@example.net",
				},
				&mail.Address{
					Name:    "Grace Recipient",
					Address: "grace.recipient@example.net",
				},
			},
			ResentMessageID: "Message-Id-1@example.net",
			ExtraHeaders: map[string][]string{
				"X-Clacks-Overhead": []string{
					"GNU Terry Pratchett",
				},
				"X-Script/function/\t !\"#$%&'()*+,-./;<=>?@[\\]^_`{|}~": []string{
					"TEST VALUE 1\t !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_` abcdefghijklmnopqrstuvwxyz{|}~",
					"TEST VALUE 2\t !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_` abcdefghijklmnopqrstuvwxyz{|}~",
				},
			},
			ContentInfo: &email.ContentInfo{
				Type: "multipart/signed",
				TypeParams: map[string]string{
					"boundary": "SignedBoundaryString",
					"charset":  "ascii",
					"micalg":   "sha1",
					"protocol": "application/pkcs7-signature",
				},
				Disposition:       "",
				DispositionParams: map[string]string(nil), // p0
				TransferEncoding:  "quoted-printable",
				ID:                "",
				Charset:           "ascii",
			},
			Received: nil,
		},
		Text: "The quick brown fox jumps over a lazy dog.\n" +
			"Glib jocks quiz nymph to vex dwarf.\n" +
			"Sphinx of black quartz, judge my vow.\n" +
			"How vexingly quick daft zebras jump!\n" +
			"The five boxing wizards jump quickly.\n" +
			"Jackdaws love my big sphinx of quartz.\n" +
			"Pack my box with five dozen liquor jugs.",
		EnrichedText: "",
		HTML:         "",
		Files: []*email.File{
			&email.File{
				FileType: "attachment",
				Name:     "smime.p7s",
				ContentInfo: &email.ContentInfo{
					Type: "application/pkcs7-signature",
					TypeParams: map[string]string{
						"name": "smime.p7s",
					},
					Disposition: "attachment",
					DispositionParams: map[string]string{
						"filename": "smime.p7s",
					},
					TransferEncoding: "base64",
					ID:               "",
					Charset:          "ascii",
				},
				Data: []byte{
					226, 128, 154, 28, 226, 128, 161, 226, 128, 158, 117, 46, 197, 189, 18, 97, 197,
					146, 126, 195, 187, 197, 184, 195, 129, 195, 135, 25, 58, 195, 159, 194, 189, 194,
					185, 195, 163, 195, 175, 197, 190, 194, 173, 108, 31, 71, 27, 226, 128, 166, 80,
					194, 165, 195, 188, 226, 128, 166, 195, 163, 194, 174, 195, 134, 226, 128, 158, 239,
					191, 189, 197, 184, 29, 195, 182, 19, 195, 171, 226, 128, 166, 80, 194, 165, 195,
					188, 226, 128, 166, 195, 163, 194, 174, 195, 134, 226, 128, 158, 239, 191, 189, 197,
					184, 29, 195, 182, 19, 195, 170, 49, 195, 187, 195, 174, 127, 7, 28, 104, 33, 195,
					136, 120, 71, 82, 195, 168, 195, 161, 38, 30, 195, 185, 195, 170, 195, 150, 195,
					129, 195, 180, 113, 226, 128, 156, 194, 173, 195, 187, 195, 155, 197, 190, 57, 195,
					188, 28, 113, 226, 128, 156, 194, 173, 195, 187, 195, 161, 38, 24, 195, 135, 195,
					175, 194, 190, 194, 173, 108, 31, 71, 27, 226, 128, 166, 80, 110, 120, 195, 187,
					195, 167, 194, 174, 195, 134, 226, 128, 158, 239, 191, 189, 197, 184, 29, 195, 182,
					19, 195, 170, 8, 114, 30, 17, 195, 148, 194, 186, 58, 95, 195, 136, 94, 59, 26, 18,
					6, 124, 119, 195, 152, 79, 194, 174, 21, 65, 194, 185, 195, 163, 195, 175, 197, 190,
				},
			},
		},
	}
	testEmailFromFile(t, fp, expectedEmail)
}

func TestParseEmailEnglishMultipartSignedUtf8Over7bit(t *testing.T) {
	fp := "tests/test_english_multipart_signed_utf-8_over_7bit.txt"
	expectedEmail := &email.Email{
		Headers: email.Headers{
			Date: time.Time(time.Date(2019, 4, 1, 6, 55, 0, 0, time.UTC)),
			Sender: &mail.Address{
				Name:    "Alice Sender",
				Address: "alice.sender@example.com",
			},
			From: []*mail.Address{
				&mail.Address{
					Name:    "Alice Sender",
					Address: "alice.sender@example.com",
				},
				&mail.Address{
					Name:    "Alice Sender",
					Address: "alice.sender@example.net",
				},
			},
			ReplyTo: []*mail.Address{
				&mail.Address{
					Name:    "Alice Sender",
					Address: "alice.sender@example.net",
				},
			},
			To: []*mail.Address{
				&mail.Address{
					Name:    "Bob Recipient",
					Address: "bob.recipient@example.com",
				},
				&mail.Address{
					Name:    "Carol Recipient",
					Address: "carol.recipient@example.com",
				},
			},
			Cc: []*mail.Address{
				&mail.Address{
					Name:    "Dan Recipient",
					Address: "dan.recipient@example.com",
				},
				&mail.Address{
					Name:    "Eve Recipient",
					Address: "eve.recipient@example.com",
				},
			},
			Bcc: []*mail.Address{
				&mail.Address{
					Name:    "Frank Recipient",
					Address: "frank.recipient@example.com",
				},
				&mail.Address{
					Name:    "Grace Recipient",
					Address: "grace.recipient@example.com",
				},
			},
			MessageID: "Message-Id-1@example.com",
			InReplyTo: []string{
				"Message-Id-0@example.com",
			},
			References: []string{
				"Message-Id-0@example.com",
			},
			Subject:  "📧 Signed Test English Pangrams",
			Comments: "Message Header Comment",
			Keywords: []string{
				"Keyword 1",
				"Keyword 2",
			},
			ResentDate: time.Time(time.Date(2019, 4, 1, 6, 55, 0, 0, time.UTC)),
			ResentFrom: []*mail.Address{
				&mail.Address{
					Name:    "Alice Sender",
					Address: "alice.sender@example.net",
				},
				&mail.Address{
					Name:    "Alice Sender",
					Address: "alice.sender@example.com",
				},
			},
			ResentSender: &mail.Address{
				Name:    "Alice Sender",
				Address: "alice.sender@example.net",
			},
			ResentTo: []*mail.Address{
				&mail.Address{
					Name:    "Bob Recipient",
					Address: "bob.recipient@example.net",
				},
				&mail.Address{
					Name:    "Carol Recipient",
					Address: "carol.recipient@example.net",
				},
			},
			ResentCc: []*mail.Address{
				&mail.Address{
					Name:    "Dan Recipient",
					Address: "dan.recipient@example.net",
				},
				&mail.Address{
					Name:    "Eve Recipient",
					Address: "eve.recipient@example.net",
				},
			},
			ResentBcc: []*mail.Address{
				&mail.Address{
					Name:    "Frank Recipient",
					Address: "frank.recipient@example.net",
				},
				&mail.Address{
					Name:    "Grace Recipient",
					Address: "grace.recipient@example.net",
				},
			},
			ResentMessageID: "Message-Id-1@example.net",
			ExtraHeaders: map[string][]string{
				"X-Clacks-Overhead": []string{
					"GNU Terry Pratchett",
				},
				"X-Script/function/\t !\"#$%&'()*+,-./;<=>?@[\\]^_`{|}~": []string{
					"TEST VALUE 1\t !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_` abcdefghijklmnopqrstuvwxyz{|}~",
					"TEST VALUE 2\t !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_` abcdefghijklmnopqrstuvwxyz{|}~",
				},
			},
			ContentInfo: &email.ContentInfo{
				Type: "multipart/signed",
				TypeParams: map[string]string{
					"boundary": "SignedBoundaryString",
					"charset":  "utf-8",
					"micalg":   "sha1",
					"protocol": "application/pkcs7-signature",
				},
				Disposition:       "",
				DispositionParams: map[string]string(nil), // p0
				TransferEncoding:  "7bit",
				ID:                "",
				Charset:           "utf-8",
			},
			Received: nil,
		},
		Text: "The quick brown fox jumps over a lazy dog.\n" +
			"Glib jocks quiz nymph to vex dwarf.\n" +
			"Sphinx of black quartz, judge my vow.\n" +
			"How vexingly quick daft zebras jump!\n" +
			"The five boxing wizards jump quickly.\n" +
			"Jackdaws love my big sphinx of quartz.\n" +
			"Pack my box with five dozen liquor jugs.",
		EnrichedText: "",
		HTML:         "",
		Files: []*email.File{
			&email.File{
				FileType: "attachment",
				Name:     "smime.p7s",
				ContentInfo: &email.ContentInfo{
					Type: "application/pkcs7-signature",
					TypeParams: map[string]string{
						"name": "smime.p7s",
					},
					Disposition: "attachment",
					DispositionParams: map[string]string{
						"filename": "smime.p7s",
					},
					TransferEncoding: "base64",
					ID:               "",
					Charset:          "utf-8",
				},
				Data: []byte{
					239, 191, 189, 28, 239, 191, 189, 239, 191, 189, 117, 46, 239, 191, 189, 18, 97,
					239, 191, 189, 126, 239, 191, 189, 239, 191, 189, 239, 191, 189, 239, 191, 189, 25,
					58, 223, 189, 239, 191, 189, 239, 191, 189, 239, 158, 173, 108, 31, 71, 27, 239,
					191, 189, 80, 239, 191, 189, 239, 191, 189, 239, 191, 189, 239, 191, 189, 198, 132,
					239, 191, 189, 239, 191, 189, 29, 239, 191, 189, 19, 239, 191, 189, 80, 239, 191,
					189, 239, 191, 189, 239, 191, 189, 239, 191, 189, 198, 132, 239, 191, 189, 239, 191,
					189, 29, 239, 191, 189, 19, 239, 191, 189, 49, 239, 191, 189, 239, 191, 189, 127,
					7, 28, 104, 33, 239, 191, 189, 120, 71, 82, 239, 191, 189, 239, 191, 189, 38, 30,
					239, 191, 189, 239, 191, 189, 239, 191, 189, 239, 191, 189, 239, 191, 189, 113, 239,
					191, 189, 239, 191, 189, 239, 191, 189, 219, 158, 57, 239, 191, 189, 28, 113, 239,
					191, 189, 239, 191, 189, 239, 191, 189, 239, 191, 189, 38, 24, 239, 191, 189, 239,
					190, 173, 108, 31, 71, 27, 239, 191, 189, 80, 110, 120, 239, 191, 189, 239, 191,
					189, 198, 132, 239, 191, 189, 239, 191, 189, 29, 239, 191, 189, 19, 239, 191, 189,
					8, 114, 30, 17, 212, 186, 58, 95, 239, 191, 189, 94, 59, 26, 18, 6, 124, 119, 239,
					191, 189, 79, 239, 191, 189, 21, 65, 239, 191, 189, 239, 191, 189, 239, 191, 189,
				},
			},
		},
	}
	testEmailFromFile(t, fp, expectedEmail)
}

func TestParseEmailEnglishMultipartSignedUtf8OverBase64(t *testing.T) {
	fp := "tests/test_english_multipart_signed_utf-8_over_base64.txt"
	expectedEmail := &email.Email{
		Headers: email.Headers{
			Date: time.Time(time.Date(2019, 4, 1, 6, 55, 0, 0, time.UTC)),
			Sender: &mail.Address{
				Name:    "Alice Sender",
				Address: "alice.sender@example.com",
			},
			From: []*mail.Address{
				&mail.Address{
					Name:    "Alice Sender",
					Address: "alice.sender@example.com",
				},
				&mail.Address{
					Name:    "Alice Sender",
					Address: "alice.sender@example.net",
				},
			},
			ReplyTo: []*mail.Address{
				&mail.Address{
					Name:    "Alice Sender",
					Address: "alice.sender@example.net",
				},
			},
			To: []*mail.Address{
				&mail.Address{
					Name:    "Bob Recipient",
					Address: "bob.recipient@example.com",
				},
				&mail.Address{
					Name:    "Carol Recipient",
					Address: "carol.recipient@example.com",
				},
			},
			Cc: []*mail.Address{
				&mail.Address{
					Name:    "Dan Recipient",
					Address: "dan.recipient@example.com",
				},
				&mail.Address{
					Name:    "Eve Recipient",
					Address: "eve.recipient@example.com",
				},
			},
			Bcc: []*mail.Address{
				&mail.Address{
					Name:    "Frank Recipient",
					Address: "frank.recipient@example.com",
				},
				&mail.Address{
					Name:    "Grace Recipient",
					Address: "grace.recipient@example.com",
				},
			},
			MessageID: "Message-Id-1@example.com",
			InReplyTo: []string{
				"Message-Id-0@example.com",
			},
			References: []string{
				"Message-Id-0@example.com",
			},
			Subject:  "📧 Signed Test English Pangrams",
			Comments: "Message Header Comment",
			Keywords: []string{
				"Keyword 1",
				"Keyword 2",
			},
			ResentDate: time.Time(time.Date(2019, 4, 1, 6, 55, 0, 0, time.UTC)),
			ResentFrom: []*mail.Address{
				&mail.Address{
					Name:    "Alice Sender",
					Address: "alice.sender@example.net",
				},
				&mail.Address{
					Name:    "Alice Sender",
					Address: "alice.sender@example.com",
				},
			},
			ResentSender: &mail.Address{
				Name:    "Alice Sender",
				Address: "alice.sender@example.net",
			},
			ResentTo: []*mail.Address{
				&mail.Address{
					Name:    "Bob Recipient",
					Address: "bob.recipient@example.net",
				},
				&mail.Address{
					Name:    "Carol Recipient",
					Address: "carol.recipient@example.net",
				},
			},
			ResentCc: []*mail.Address{
				&mail.Address{
					Name:    "Dan Recipient",
					Address: "dan.recipient@example.net",
				},
				&mail.Address{
					Name:    "Eve Recipient",
					Address: "eve.recipient@example.net",
				},
			},
			ResentBcc: []*mail.Address{
				&mail.Address{
					Name:    "Frank Recipient",
					Address: "frank.recipient@example.net",
				},
				&mail.Address{
					Name:    "Grace Recipient",
					Address: "grace.recipient@example.net",
				},
			},
			ResentMessageID: "Message-Id-1@example.net",
			ExtraHeaders: map[string][]string{
				"X-Clacks-Overhead": []string{
					"GNU Terry Pratchett",
				},
				"X-Script/function/\t !\"#$%&'()*+,-./;<=>?@[\\]^_`{|}~": []string{
					"TEST VALUE 1\t !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_` abcdefghijklmnopqrstuvwxyz{|}~",
					"TEST VALUE 2\t !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_` abcdefghijklmnopqrstuvwxyz{|}~",
				},
			},
			ContentInfo: &email.ContentInfo{
				Type: "multipart/signed",
				TypeParams: map[string]string{
					"boundary": "SignedBoundaryString",
					"charset":  "utf-8",
					"micalg":   "sha1",
					"protocol": "application/pkcs7-signature",
				},
				Disposition:       "",
				DispositionParams: map[string]string(nil), // p0
				TransferEncoding:  "base64",
				ID:                "",
				Charset:           "utf-8",
			},
			Received: nil,
		},
		Text: "The quick brown fox jumps over a lazy dog.\n" +
			"Glib jocks quiz nymph to vex dwarf.\n" +
			"Sphinx of black quartz, judge my vow.\n" +
			"How vexingly quick daft zebras jump!\n" +
			"The five boxing wizards jump quickly.\n" +
			"Jackdaws love my big sphinx of quartz.\n" +
			"Pack my box with five dozen liquor jugs.",
		EnrichedText: "",
		HTML:         "",
		Files: []*email.File{
			&email.File{
				FileType: "attachment",
				Name:     "smime.p7s",
				ContentInfo: &email.ContentInfo{
					Type: "application/pkcs7-signature",
					TypeParams: map[string]string{
						"name": "smime.p7s",
					},
					Disposition: "attachment",
					DispositionParams: map[string]string{
						"filename": "smime.p7s",
					},
					TransferEncoding: "base64",
					ID:               "",
					Charset:          "utf-8",
				},
				Data: []byte{
					239, 191, 189, 28, 239, 191, 189, 239, 191, 189, 117, 46, 239, 191, 189, 18, 97,
					239, 191, 189, 126, 239, 191, 189, 239, 191, 189, 239, 191, 189, 239, 191, 189, 25,
					58, 223, 189, 239, 191, 189, 239, 191, 189, 239, 158, 173, 108, 31, 71, 27, 239,
					191, 189, 80, 239, 191, 189, 239, 191, 189, 239, 191, 189, 239, 191, 189, 198, 132,
					239, 191, 189, 239, 191, 189, 29, 239, 191, 189, 19, 239, 191, 189, 80, 239, 191,
					189, 239, 191, 189, 239, 191, 189, 239, 191, 189, 198, 132, 239, 191, 189, 239, 191,
					189, 29, 239, 191, 189, 19, 239, 191, 189, 49, 239, 191, 189, 239, 191, 189, 127,
					7, 28, 104, 33, 239, 191, 189, 120, 71, 82, 239, 191, 189, 239, 191, 189, 38, 30,
					239, 191, 189, 239, 191, 189, 239, 191, 189, 239, 191, 189, 239, 191, 189, 113, 239,
					191, 189, 239, 191, 189, 239, 191, 189, 219, 158, 57, 239, 191, 189, 28, 113, 239,
					191, 189, 239, 191, 189, 239, 191, 189, 239, 191, 189, 38, 24, 239, 191, 189, 239,
					190, 173, 108, 31, 71, 27, 239, 191, 189, 80, 110, 120, 239, 191, 189, 239, 191,
					189, 198, 132, 239, 191, 189, 239, 191, 189, 29, 239, 191, 189, 19, 239, 191, 189,
					8, 114, 30, 17, 212, 186, 58, 95, 239, 191, 189, 94, 59, 26, 18, 6, 124, 119, 239,
					191, 189, 79, 239, 191, 189, 21, 65, 239, 191, 189, 239, 191, 189, 239, 191, 189,
				},
			},
		},
	}
	testEmailFromFile(t, fp, expectedEmail)
}

func TestParseEmailEnglishMultipartSignedUtf8OverQuotedprintable(t *testing.T) {
	fp := "tests/test_english_multipart_signed_utf-8_over_quoted-printable.txt"
	expectedEmail := &email.Email{
		Headers: email.Headers{
			Date: time.Time(time.Date(2019, 4, 1, 6, 55, 0, 0, time.UTC)),
			Sender: &mail.Address{
				Name:    "Alice Sender",
				Address: "alice.sender@example.com",
			},
			From: []*mail.Address{
				&mail.Address{
					Name:    "Alice Sender",
					Address: "alice.sender@example.com",
				},
				&mail.Address{
					Name:    "Alice Sender",
					Address: "alice.sender@example.net",
				},
			},
			ReplyTo: []*mail.Address{
				&mail.Address{
					Name:    "Alice Sender",
					Address: "alice.sender@example.net",
				},
			},
			To: []*mail.Address{
				&mail.Address{
					Name:    "Bob Recipient",
					Address: "bob.recipient@example.com",
				},
				&mail.Address{
					Name:    "Carol Recipient",
					Address: "carol.recipient@example.com",
				},
			},
			Cc: []*mail.Address{
				&mail.Address{
					Name:    "Dan Recipient",
					Address: "dan.recipient@example.com",
				},
				&mail.Address{
					Name:    "Eve Recipient",
					Address: "eve.recipient@example.com",
				},
			},
			Bcc: []*mail.Address{
				&mail.Address{
					Name:    "Frank Recipient",
					Address: "frank.recipient@example.com",
				},
				&mail.Address{
					Name:    "Grace Recipient",
					Address: "grace.recipient@example.com",
				},
			},
			MessageID: "Message-Id-1@example.com",
			InReplyTo: []string{
				"Message-Id-0@example.com",
			},
			References: []string{
				"Message-Id-0@example.com",
			},
			Subject:  "📧 Signed Test English Pangrams",
			Comments: "Message Header Comment",
			Keywords: []string{
				"Keyword 1",
				"Keyword 2",
			},
			ResentDate: time.Time(time.Date(2019, 4, 1, 6, 55, 0, 0, time.UTC)),
			ResentFrom: []*mail.Address{
				&mail.Address{
					Name:    "Alice Sender",
					Address: "alice.sender@example.net",
				},
				&mail.Address{
					Name:    "Alice Sender",
					Address: "alice.sender@example.com",
				},
			},
			ResentSender: &mail.Address{
				Name:    "Alice Sender",
				Address: "alice.sender@example.net",
			},
			ResentTo: []*mail.Address{
				&mail.Address{
					Name:    "Bob Recipient",
					Address: "bob.recipient@example.net",
				},
				&mail.Address{
					Name:    "Carol Recipient",
					Address: "carol.recipient@example.net",
				},
			},
			ResentCc: []*mail.Address{
				&mail.Address{
					Name:    "Dan Recipient",
					Address: "dan.recipient@example.net",
				},
				&mail.Address{
					Name:    "Eve Recipient",
					Address: "eve.recipient@example.net",
				},
			},
			ResentBcc: []*mail.Address{
				&mail.Address{
					Name:    "Frank Recipient",
					Address: "frank.recipient@example.net",
				},
				&mail.Address{
					Name:    "Grace Recipient",
					Address: "grace.recipient@example.net",
				},
			},
			ResentMessageID: "Message-Id-1@example.net",
			ExtraHeaders: map[string][]string{
				"X-Clacks-Overhead": []string{
					"GNU Terry Pratchett",
				},
				"X-Script/function/\t !\"#$%&'()*+,-./;<=>?@[\\]^_`{|}~": []string{
					"TEST VALUE 1\t !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_` abcdefghijklmnopqrstuvwxyz{|}~",
					"TEST VALUE 2\t !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_` abcdefghijklmnopqrstuvwxyz{|}~",
				},
			},
			ContentInfo: &email.ContentInfo{
				Type: "multipart/signed",
				TypeParams: map[string]string{
					"boundary": "SignedBoundaryString",
					"charset":  "utf-8",
					"micalg":   "sha1",
					"protocol": "application/pkcs7-signature",
				},
				Disposition:       "",
				DispositionParams: map[string]string(nil), // p0
				TransferEncoding:  "quoted-printable",
				ID:                "",
				Charset:           "utf-8",
			},
			Received: nil,
		},
		Text: "The quick brown fox jumps over a lazy dog.\n" +
			"Glib jocks quiz nymph to vex dwarf.\n" +
			"Sphinx of black quartz, judge my vow.\n" +
			"How vexingly quick daft zebras jump!\n" +
			"The five boxing wizards jump quickly.\n" +
			"Jackdaws love my big sphinx of quartz.\n" +
			"Pack my box with five dozen liquor jugs.",
		EnrichedText: "",
		HTML:         "",
		Files: []*email.File{
			&email.File{
				FileType: "attachment",
				Name:     "smime.p7s",
				ContentInfo: &email.ContentInfo{
					Type: "application/pkcs7-signature",
					TypeParams: map[string]string{
						"name": "smime.p7s",
					},
					Disposition: "attachment",
					DispositionParams: map[string]string{
						"filename": "smime.p7s",
					},
					TransferEncoding: "base64",
					ID:               "",
					Charset:          "utf-8",
				},
				Data: []byte{
					239, 191, 189, 28, 239, 191, 189, 239, 191, 189, 117, 46, 239, 191, 189, 18, 97,
					239, 191, 189, 126, 239, 191, 189, 239, 191, 189, 239, 191, 189, 239, 191, 189, 25,
					58, 223, 189, 239, 191, 189, 239, 191, 189, 239, 158, 173, 108, 31, 71, 27, 239,
					191, 189, 80, 239, 191, 189, 239, 191, 189, 239, 191, 189, 239, 191, 189, 198, 132,
					239, 191, 189, 239, 191, 189, 29, 239, 191, 189, 19, 239, 191, 189, 80, 239, 191,
					189, 239, 191, 189, 239, 191, 189, 239, 191, 189, 198, 132, 239, 191, 189, 239, 191,
					189, 29, 239, 191, 189, 19, 239, 191, 189, 49, 239, 191, 189, 239, 191, 189, 127,
					7, 28, 104, 33, 239, 191, 189, 120, 71, 82, 239, 191, 189, 239, 191, 189, 38, 30,
					239, 191, 189, 239, 191, 189, 239, 191, 189, 239, 191, 189, 239, 191, 189, 113, 239,
					191, 189, 239, 191, 189, 239, 191, 189, 219, 158, 57, 239, 191, 189, 28, 113, 239,
					191, 189, 239, 191, 189, 239, 191, 189, 239, 191, 189, 38, 24, 239, 191, 189, 239,
					190, 173, 108, 31, 71, 27, 239, 191, 189, 80, 110, 120, 239, 191, 189, 239, 191,
					189, 198, 132, 239, 191, 189, 239, 191, 189, 29, 239, 191, 189, 19, 239, 191, 189,
					8, 114, 30, 17, 212, 186, 58, 95, 239, 191, 189, 94, 59, 26, 18, 6, 124, 119, 239,
					191, 189, 79, 239, 191, 189, 21, 65, 239, 191, 189, 239, 191, 189, 239, 191, 189,
				},
			},
		},
	}
	testEmailFromFile(t, fp, expectedEmail)
}

func TestParseEmailChinesePlaintextGb18030OverBase64(t *testing.T) {
	fp := "tests/test_chinese_plaintext_gb18030_over_base64.txt"
	expectedEmail := &email.Email{
		Headers: email.Headers{
			Date: time.Time(time.Date(2019, 3, 31, 23, 55, 0, 0, time.UTC)),
			Sender: &mail.Address{
				Name:    "艾莉絲 发件人",
				Address: "alice.fajianren@example.com",
			},
			From: []*mail.Address{
				&mail.Address{
					Name:    "艾莉絲 发件人",
					Address: "alice.fajianren@example.com",
				},
				&mail.Address{
					Name:    "艾莉絲 发件人",
					Address: "alice.fajianren@example.net",
				},
			},
			ReplyTo: []*mail.Address{
				&mail.Address{
					Name:    "艾莉絲 发件人",
					Address: "alice.fajianren@example.net",
				},
			},
			To: []*mail.Address{
				&mail.Address{
					Name:    "與鮑伯 收件人",
					Address: "bob.shoujianren@example.com",
				},
				&mail.Address{
					Name:    "卡罗尔 收件人",
					Address: "carol.shoujianren@example.com",
				},
			},
			Cc: []*mail.Address{
				&mail.Address{
					Name:    "戴夫 收件人",
					Address: "dave.shoujianren@example.com",
				},
				&mail.Address{
					Name:    "伊夫 收件人",
					Address: "eve.shoujianren@example.com",
				},
			},
			Bcc: []*mail.Address{
				&mail.Address{
					Name:    "艾萨克 伊夫",
					Address: "isaac.shoujianren@example.com",
				},
				&mail.Address{
					Name:    "賈斯汀 伊夫",
					Address: "justin.shoujianren@example.com",
				},
			},
			MessageID: "Message-Id-1@example.com",
			InReplyTo: []string{
				"Message-Id-0@example.com",
			},
			References: []string{
				"Message-Id-0@example.com",
			},
			Subject:  "📧 Test 施氏食狮史",
			Comments: "Message Header Comment",
			Keywords: []string{
				"Keyword 1",
				"Keyword 2",
			},
			ResentDate: time.Time(time.Date(2019, 3, 31, 23, 55, 0, 0, time.UTC)),
			ResentFrom: []*mail.Address{
				&mail.Address{
					Name:    "艾莉絲 发件人",
					Address: "alice.fajianren@example.net",
				},
				&mail.Address{
					Name:    "艾莉絲 发件人",
					Address: "alice.fajianren@example.com",
				},
			},
			ResentSender: &mail.Address{
				Name:    "艾莉絲 发件人",
				Address: "alice.fajianren@example.net",
			},
			ResentTo: []*mail.Address{
				&mail.Address{
					Name:    "與鮑伯 收件人",
					Address: "bob.shoujianren@example.net",
				},
				&mail.Address{
					Name:    "卡罗尔 收件人",
					Address: "carol.shoujianren@example.net",
				},
			},
			ResentCc: []*mail.Address{
				&mail.Address{
					Name:    "戴夫 收件人",
					Address: "dave.shoujianren@example.net",
				},
				&mail.Address{
					Name:    "伊夫 收件人",
					Address: "eve.shoujianren@example.net",
				},
			},
			ResentBcc: []*mail.Address{
				&mail.Address{
					Name:    "艾萨克 伊夫",
					Address: "isaac.shoujianren@example.net",
				},
				&mail.Address{
					Name:    "賈斯汀 伊夫",
					Address: "justin.shoujianren@example.net",
				},
			},
			ResentMessageID: "Message-Id-1@example.net",
			ExtraHeaders: map[string][]string{
				"X-Clacks-Overhead": []string{
					"GNU Terry Pratchett",
				},
				"X-Script/function/\t !\"#$%&'()*+,-./;<=>?@[\\]^_`{|}~": []string{
					"TEST VALUE 1\t !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_` abcdefghijklmnopqrstuvwxyz{|}~",
					"TEST VALUE 2\t !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_` abcdefghijklmnopqrstuvwxyz{|}~",
				},
			},
			ContentInfo: &email.ContentInfo{
				Type: "text/plain",
				TypeParams: map[string]string{
					"charset": "gb18030",
				},
				Disposition:       "",
				DispositionParams: map[string]string(nil),
				TransferEncoding:  "base64",
				ID:                "",
				Charset:           "gb18030",
			},
			Received: nil,
		},
		Text: "石室诗士施氏，嗜狮，誓食十狮。\n" +
			"氏时时适市视狮。\n" +
			"十时，适十狮适市。\n" +
			"是时，适施氏适市。\n" +
			"氏视是十狮，恃矢势，使是十狮逝世。\n" +
			"氏拾是十狮尸，适石室。\n" +
			"石室湿，氏使侍拭石室。\n" +
			"石室拭，氏始试食是十狮。\n" +
			"食时，始识是十狮尸，实十石狮尸。\n" +
			"试释是事。",
		EnrichedText: "",
		HTML:         "",
		Files:        nil,
	}
	testEmailFromFile(t, fp, expectedEmail)
}

func TestParseEmailChinesePlaintextGb18030OverQuotedprintable(t *testing.T) {
	fp := "tests/test_chinese_plaintext_gb18030_over_quoted-printable.txt"
	expectedEmail := &email.Email{
		Headers: email.Headers{
			Date: time.Time(time.Date(2019, 3, 31, 23, 55, 0, 0, time.UTC)),
			Sender: &mail.Address{
				Name:    "艾莉絲 发件人",
				Address: "alice.fajianren@example.com",
			},
			From: []*mail.Address{
				&mail.Address{
					Name:    "艾莉絲 发件人",
					Address: "alice.fajianren@example.com",
				},
				&mail.Address{
					Name:    "艾莉絲 发件人",
					Address: "alice.fajianren@example.net",
				},
			},
			ReplyTo: []*mail.Address{
				&mail.Address{
					Name:    "艾莉絲 发件人",
					Address: "alice.fajianren@example.net",
				},
			},
			To: []*mail.Address{
				&mail.Address{
					Name:    "與鮑伯 收件人",
					Address: "bob.shoujianren@example.com",
				},
				&mail.Address{
					Name:    "卡罗尔 收件人",
					Address: "carol.shoujianren@example.com",
				},
			},
			Cc: []*mail.Address{
				&mail.Address{
					Name:    "戴夫 收件人",
					Address: "dave.shoujianren@example.com",
				},
				&mail.Address{
					Name:    "伊夫 收件人",
					Address: "eve.shoujianren@example.com",
				},
			},
			Bcc: []*mail.Address{
				&mail.Address{
					Name:    "艾萨克 伊夫",
					Address: "isaac.shoujianren@example.com",
				},
				&mail.Address{
					Name:    "賈斯汀 伊夫",
					Address: "justin.shoujianren@example.com",
				},
			},
			MessageID: "Message-Id-1@example.com",
			InReplyTo: []string{
				"Message-Id-0@example.com",
			},
			References: []string{
				"Message-Id-0@example.com",
			},
			Subject:  "📧 Test 施氏食狮史",
			Comments: "Message Header Comment",
			Keywords: []string{
				"Keyword 1",
				"Keyword 2",
			},
			ResentDate: time.Time(time.Date(2019, 3, 31, 23, 55, 0, 0, time.UTC)),
			ResentFrom: []*mail.Address{
				&mail.Address{
					Name:    "艾莉絲 发件人",
					Address: "alice.fajianren@example.net",
				},
				&mail.Address{
					Name:    "艾莉絲 发件人",
					Address: "alice.fajianren@example.com",
				},
			},
			ResentSender: &mail.Address{
				Name:    "艾莉絲 发件人",
				Address: "alice.fajianren@example.net",
			},
			ResentTo: []*mail.Address{
				&mail.Address{
					Name:    "與鮑伯 收件人",
					Address: "bob.shoujianren@example.net",
				},
				&mail.Address{
					Name:    "卡罗尔 收件人",
					Address: "carol.shoujianren@example.net",
				},
			},
			ResentCc: []*mail.Address{
				&mail.Address{
					Name:    "戴夫 收件人",
					Address: "dave.shoujianren@example.net",
				},
				&mail.Address{
					Name:    "伊夫 收件人",
					Address: "eve.shoujianren@example.net",
				},
			},
			ResentBcc: []*mail.Address{
				&mail.Address{
					Name:    "艾萨克 伊夫",
					Address: "isaac.shoujianren@example.net",
				},
				&mail.Address{
					Name:    "賈斯汀 伊夫",
					Address: "justin.shoujianren@example.net",
				},
			},
			ResentMessageID: "Message-Id-1@example.net",
			ExtraHeaders: map[string][]string{
				"X-Clacks-Overhead": []string{
					"GNU Terry Pratchett",
				},
				"X-Script/function/\t !\"#$%&'()*+,-./;<=>?@[\\]^_`{|}~": []string{
					"TEST VALUE 1\t !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_` abcdefghijklmnopqrstuvwxyz{|}~",
					"TEST VALUE 2\t !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_` abcdefghijklmnopqrstuvwxyz{|}~",
				},
			},
			ContentInfo: &email.ContentInfo{
				Type: "text/plain",
				TypeParams: map[string]string{
					"charset": "gb18030",
				},
				Disposition:       "",
				DispositionParams: map[string]string(nil),
				TransferEncoding:  "quoted-printable",
				ID:                "",
				Charset:           "gb18030",
			},
			Received: nil,
		},
		Text: "石室诗士施氏，嗜狮，誓食十狮。\n" +
			"氏时时适市视狮。\n" +
			"十时，适十狮适市。\n" +
			"是时，适施氏适市。\n" +
			"氏视是十狮，恃矢势，使是十狮逝世。\n" +
			"氏拾是十狮尸，适石室。\n" +
			"石室湿，氏使侍拭石室。\n" +
			"石室拭，氏始试食是十狮。\n" +
			"食时，始识是十狮尸，实十石狮尸。\n" +
			"试释是事。",
		EnrichedText: "",
		HTML:         "",
		Files:        nil,
	}
	testEmailFromFile(t, fp, expectedEmail)
}

func TestParseEmailChinesePlaintextGbkOverBase64(t *testing.T) {
	fp := "tests/test_chinese_plaintext_gbk_over_base64.txt"
	expectedEmail := &email.Email{
		Headers: email.Headers{
			Date: time.Time(time.Date(2019, 3, 31, 23, 55, 0, 0, time.UTC)),
			Sender: &mail.Address{
				Name:    "艾莉絲 发件人",
				Address: "alice.fajianren@example.com",
			},
			From: []*mail.Address{
				&mail.Address{
					Name:    "艾莉絲 发件人",
					Address: "alice.fajianren@example.com",
				},
				&mail.Address{
					Name:    "艾莉絲 发件人",
					Address: "alice.fajianren@example.net",
				},
			},
			ReplyTo: []*mail.Address{
				&mail.Address{
					Name:    "艾莉絲 发件人",
					Address: "alice.fajianren@example.net",
				},
			},
			To: []*mail.Address{
				&mail.Address{
					Name:    "與鮑伯 收件人",
					Address: "bob.shoujianren@example.com",
				},
				&mail.Address{
					Name:    "卡罗尔 收件人",
					Address: "carol.shoujianren@example.com",
				},
			},
			Cc: []*mail.Address{
				&mail.Address{
					Name:    "戴夫 收件人",
					Address: "dave.shoujianren@example.com",
				},
				&mail.Address{
					Name:    "伊夫 收件人",
					Address: "eve.shoujianren@example.com",
				},
			},
			Bcc: []*mail.Address{
				&mail.Address{
					Name:    "艾萨克 伊夫",
					Address: "isaac.shoujianren@example.com",
				},
				&mail.Address{
					Name:    "賈斯汀 伊夫",
					Address: "justin.shoujianren@example.com",
				},
			},
			MessageID: "Message-Id-1@example.com",
			InReplyTo: []string{
				"Message-Id-0@example.com",
			},
			References: []string{
				"Message-Id-0@example.com",
			},
			Subject:  "📧 Test 施氏食狮史",
			Comments: "Message Header Comment",
			Keywords: []string{
				"Keyword 1",
				"Keyword 2",
			},
			ResentDate: time.Time(time.Date(2019, 3, 31, 23, 55, 0, 0, time.UTC)),
			ResentFrom: []*mail.Address{
				&mail.Address{
					Name:    "艾莉絲 发件人",
					Address: "alice.fajianren@example.net",
				},
				&mail.Address{
					Name:    "艾莉絲 发件人",
					Address: "alice.fajianren@example.com",
				},
			},
			ResentSender: &mail.Address{
				Name:    "艾莉絲 发件人",
				Address: "alice.fajianren@example.net",
			},
			ResentTo: []*mail.Address{
				&mail.Address{
					Name:    "與鮑伯 收件人",
					Address: "bob.shoujianren@example.net",
				},
				&mail.Address{
					Name:    "卡罗尔 收件人",
					Address: "carol.shoujianren@example.net",
				},
			},
			ResentCc: []*mail.Address{
				&mail.Address{
					Name:    "戴夫 收件人",
					Address: "dave.shoujianren@example.net",
				},
				&mail.Address{
					Name:    "伊夫 收件人",
					Address: "eve.shoujianren@example.net",
				},
			},
			ResentBcc: []*mail.Address{
				&mail.Address{
					Name:    "艾萨克 伊夫",
					Address: "isaac.shoujianren@example.net",
				},
				&mail.Address{
					Name:    "賈斯汀 伊夫",
					Address: "justin.shoujianren@example.net",
				},
			},
			ResentMessageID: "Message-Id-1@example.net",
			ExtraHeaders: map[string][]string{
				"X-Clacks-Overhead": []string{
					"GNU Terry Pratchett",
				},
				"X-Script/function/\t !\"#$%&'()*+,-./;<=>?@[\\]^_`{|}~": []string{
					"TEST VALUE 1\t !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_` abcdefghijklmnopqrstuvwxyz{|}~",
					"TEST VALUE 2\t !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_` abcdefghijklmnopqrstuvwxyz{|}~",
				},
			},
			ContentInfo: &email.ContentInfo{
				Type: "text/plain",
				TypeParams: map[string]string{
					"charset": "gbk",
				},
				Disposition:       "",
				DispositionParams: map[string]string(nil),
				TransferEncoding:  "base64",
				ID:                "",
				Charset:           "gbk",
			},
			Received: nil,
		},
		Text: "石室诗士施氏，嗜狮，誓食十狮。\n" +
			"氏时时适市视狮。\n" +
			"十时，适十狮适市。\n" +
			"是时，适施氏适市。\n" +
			"氏视是十狮，恃矢势，使是十狮逝世。\n" +
			"氏拾是十狮尸，适石室。\n" +
			"石室湿，氏使侍拭石室。\n" +
			"石室拭，氏始试食是十狮。\n" +
			"食时，始识是十狮尸，实十石狮尸。\n" +
			"试释是事。",
		EnrichedText: "",
		HTML:         "",
		Files:        nil,
	}
	testEmailFromFile(t, fp, expectedEmail)
}

func TestParseEmailChinesePlaintextGbkOverQuotedprintable(t *testing.T) {
	fp := "tests/test_chinese_plaintext_gbk_over_quoted-printable.txt"
	expectedEmail := &email.Email{
		Headers: email.Headers{
			Date: time.Time(time.Date(2019, 3, 31, 23, 55, 0, 0, time.UTC)),
			Sender: &mail.Address{
				Name:    "艾莉絲 发件人",
				Address: "alice.fajianren@example.com",
			},
			From: []*mail.Address{
				&mail.Address{
					Name:    "艾莉絲 发件人",
					Address: "alice.fajianren@example.com",
				},
				&mail.Address{
					Name:    "艾莉絲 发件人",
					Address: "alice.fajianren@example.net",
				},
			},
			ReplyTo: []*mail.Address{
				&mail.Address{
					Name:    "艾莉絲 发件人",
					Address: "alice.fajianren@example.net",
				},
			},
			To: []*mail.Address{
				&mail.Address{
					Name:    "與鮑伯 收件人",
					Address: "bob.shoujianren@example.com",
				},
				&mail.Address{
					Name:    "卡罗尔 收件人",
					Address: "carol.shoujianren@example.com",
				},
			},
			Cc: []*mail.Address{
				&mail.Address{
					Name:    "戴夫 收件人",
					Address: "dave.shoujianren@example.com",
				},
				&mail.Address{
					Name:    "伊夫 收件人",
					Address: "eve.shoujianren@example.com",
				},
			},
			Bcc: []*mail.Address{
				&mail.Address{
					Name:    "艾萨克 伊夫",
					Address: "isaac.shoujianren@example.com",
				},
				&mail.Address{
					Name:    "賈斯汀 伊夫",
					Address: "justin.shoujianren@example.com",
				},
			},
			MessageID: "Message-Id-1@example.com",
			InReplyTo: []string{
				"Message-Id-0@example.com",
			},
			References: []string{
				"Message-Id-0@example.com",
			},
			Subject:  "📧 Test 施氏食狮史",
			Comments: "Message Header Comment",
			Keywords: []string{
				"Keyword 1",
				"Keyword 2",
			},
			ResentDate: time.Time(time.Date(2019, 3, 31, 23, 55, 0, 0, time.UTC)),
			ResentFrom: []*mail.Address{
				&mail.Address{
					Name:    "艾莉絲 发件人",
					Address: "alice.fajianren@example.net",
				},
				&mail.Address{
					Name:    "艾莉絲 发件人",
					Address: "alice.fajianren@example.com",
				},
			},
			ResentSender: &mail.Address{
				Name:    "艾莉絲 发件人",
				Address: "alice.fajianren@example.net",
			},
			ResentTo: []*mail.Address{
				&mail.Address{
					Name:    "與鮑伯 收件人",
					Address: "bob.shoujianren@example.net",
				},
				&mail.Address{
					Name:    "卡罗尔 收件人",
					Address: "carol.shoujianren@example.net",
				},
			},
			ResentCc: []*mail.Address{
				&mail.Address{
					Name:    "戴夫 收件人",
					Address: "dave.shoujianren@example.net",
				},
				&mail.Address{
					Name:    "伊夫 收件人",
					Address: "eve.shoujianren@example.net",
				},
			},
			ResentBcc: []*mail.Address{
				&mail.Address{
					Name:    "艾萨克 伊夫",
					Address: "isaac.shoujianren@example.net",
				},
				&mail.Address{
					Name:    "賈斯汀 伊夫",
					Address: "justin.shoujianren@example.net",
				},
			},
			ResentMessageID: "Message-Id-1@example.net",
			ExtraHeaders: map[string][]string{
				"X-Clacks-Overhead": []string{
					"GNU Terry Pratchett",
				},
				"X-Script/function/\t !\"#$%&'()*+,-./;<=>?@[\\]^_`{|}~": []string{
					"TEST VALUE 1\t !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_` abcdefghijklmnopqrstuvwxyz{|}~",
					"TEST VALUE 2\t !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_` abcdefghijklmnopqrstuvwxyz{|}~",
				},
			},
			ContentInfo: &email.ContentInfo{
				Type: "text/plain",
				TypeParams: map[string]string{
					"charset": "gbk",
				},
				Disposition:       "",
				DispositionParams: map[string]string(nil),
				TransferEncoding:  "quoted-printable",
				ID:                "",
				Charset:           "gbk",
			},
			Received: nil,
		},
		Text: "石室诗士施氏，嗜狮，誓食十狮。\n" +
			"氏时时适市视狮。\n" +
			"十时，适十狮适市。\n" +
			"是时，适施氏适市。\n" +
			"氏视是十狮，恃矢势，使是十狮逝世。\n" +
			"氏拾是十狮尸，适石室。\n" +
			"石室湿，氏使侍拭石室。\n" +
			"石室拭，氏始试食是十狮。\n" +
			"食时，始识是十狮尸，实十石狮尸。\n" +
			"试释是事。",
		EnrichedText: "",
		HTML:         "",
		Files:        nil,
	}
	testEmailFromFile(t, fp, expectedEmail)
}

func TestParseEmailChineseMultipartRelatedGb18030OverBase64(t *testing.T) {
	fp := "tests/test_chinese_multipart_related_gb18030_over_base64.txt"
	expectedEmail := &email.Email{
		Headers: email.Headers{
			Date: time.Time(time.Date(2019, 3, 31, 23, 55, 0, 0, time.UTC)),
			Sender: &mail.Address{
				Name:    "艾莉絲 发件人",
				Address: "alice.fajianren@example.com",
			},
			From: []*mail.Address{
				&mail.Address{
					Name:    "艾莉絲 发件人",
					Address: "alice.fajianren@example.com",
				},
				&mail.Address{
					Name:    "艾莉絲 发件人",
					Address: "alice.fajianren@example.net",
				},
			},
			ReplyTo: []*mail.Address{
				&mail.Address{
					Name:    "艾莉絲 发件人",
					Address: "alice.fajianren@example.net",
				},
			},
			To: []*mail.Address{
				&mail.Address{
					Name:    "與鮑伯 收件人",
					Address: "bob.shoujianren@example.com",
				},
				&mail.Address{
					Name:    "卡罗尔 收件人",
					Address: "carol.shoujianren@example.com",
				},
			},
			Cc: []*mail.Address{
				&mail.Address{
					Name:    "戴夫 收件人",
					Address: "dave.shoujianren@example.com",
				},
				&mail.Address{
					Name:    "伊夫 收件人",
					Address: "eve.shoujianren@example.com",
				},
			},
			Bcc: []*mail.Address{
				&mail.Address{
					Name:    "艾萨克 伊夫",
					Address: "isaac.shoujianren@example.com",
				},
				&mail.Address{
					Name:    "賈斯汀 伊夫",
					Address: "justin.shoujianren@example.com",
				},
			},
			MessageID: "Message-Id-1@example.com",
			InReplyTo: []string{
				"Message-Id-0@example.com",
			},
			References: []string{
				"Message-Id-0@example.com",
			},
			Subject:  "📧 Test 施氏食狮史",
			Comments: "Message Header Comment",
			Keywords: []string{
				"Keyword 1",
				"Keyword 2",
			},
			ResentDate: time.Time(time.Date(2019, 3, 31, 23, 55, 0, 0, time.UTC)),
			ResentFrom: []*mail.Address{
				&mail.Address{
					Name:    "艾莉絲 发件人",
					Address: "alice.fajianren@example.net",
				},
				&mail.Address{
					Name:    "艾莉絲 发件人",
					Address: "alice.fajianren@example.com",
				},
			},
			ResentSender: &mail.Address{
				Name:    "艾莉絲 发件人",
				Address: "alice.fajianren@example.net",
			},
			ResentTo: []*mail.Address{
				&mail.Address{
					Name:    "與鮑伯 收件人",
					Address: "bob.shoujianren@example.net",
				},
				&mail.Address{
					Name:    "卡罗尔 收件人",
					Address: "carol.shoujianren@example.net",
				},
			},
			ResentCc: []*mail.Address{
				&mail.Address{
					Name:    "戴夫 收件人",
					Address: "dave.shoujianren@example.net",
				},
				&mail.Address{
					Name:    "伊夫 收件人",
					Address: "eve.shoujianren@example.net",
				},
			},
			ResentBcc: []*mail.Address{
				&mail.Address{
					Name:    "艾萨克 伊夫",
					Address: "isaac.shoujianren@example.net",
				},
				&mail.Address{
					Name:    "賈斯汀 伊夫",
					Address: "justin.shoujianren@example.net",
				},
			},
			ResentMessageID: "Message-Id-1@example.net",
			ExtraHeaders: map[string][]string{
				"X-Clacks-Overhead": []string{
					"GNU Terry Pratchett",
				},
				"X-Script/function/\t !\"#$%&'()*+,-./;<=>?@[\\]^_`{|}~": []string{
					"TEST VALUE 1\t !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_` abcdefghijklmnopqrstuvwxyz{|}~",
					"TEST VALUE 2\t !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_` abcdefghijklmnopqrstuvwxyz{|}~",
				},
			},
			ContentInfo: &email.ContentInfo{
				Type: "multipart/related",
				TypeParams: map[string]string{
					"boundary": "RelatedBoundaryString",
					"charset":  "gb18030",
				},
				Disposition:       "",
				DispositionParams: map[string]string(nil), // p0
				TransferEncoding:  "base64",
				ID:                "",
				Charset:           "gb18030",
			},
			Received: nil,
		},
		Text: "石室诗士施氏，嗜狮，誓食十狮。\n" +
			"氏时时适市视狮。\n" +
			"十时，适十狮适市。\n" +
			"是时，适施氏适市。\n" +
			"氏视是十狮，恃矢势，使是十狮逝世。\n" +
			"氏拾是十狮尸，适石室。\n" +
			"石室湿，氏使侍拭石室。\n" +
			"石室拭，氏始试食是十狮。\n" +
			"食时，始识是十狮尸，实十石狮尸。\n" +
			"试释是事。",
		EnrichedText: "<bold>石室诗士施氏，嗜狮，誓食十狮。</bold>\n" +
			"<italic>氏时时适市视狮。</italic>\n" +
			"<fixed>十时，适十狮适市。</fixed>\n" +
			"<underline>是时，适施氏适市。</underline>\n" +
			"氏视是十狮，恃矢势，使是十狮逝世。\n" +
			"氏拾是十狮尸，适石室。\n" +
			"石室湿，氏使侍拭石室。\n" +
			"石室拭，氏始试食是十狮。\n" +
			"食时，始识是十狮尸，实十石狮尸。\n" +
			"试释是事。",
		HTML: "<html>\n" +
			"<div dir=\"ltr\">\n" +
			"<p>石室诗士施氏，嗜狮，誓食十狮。<br />\n" +
			"氏时时适市视狮。<br />\n" +
			"十时，适十狮适市。<br />\n" +
			"是时，适施氏适市。<br />\n" +
			"氏视是十狮，恃矢势，使是十狮逝世。<br />\n" +
			"氏拾是十狮尸，适石室。<br />\n" +
			"石室湿，氏使侍拭石室。<br />\n" +
			"石室拭，氏始试食是十狮。<br />\n" +
			"食时，始识是十狮尸，实十石狮尸。<br />\n" +
			"试释是事。</p>\n" +
			"</div>\n" +
			"</html>",
		Files: []*email.File{
			&email.File{
				FileType: "inline",
				Name:     "inline-jpg-image-filename.jpg",
				ContentInfo: &email.ContentInfo{
					Type: "image/jpeg",
					TypeParams: map[string]string{
						"name": "inline-jpg-image-name.jpg",
					},
					Disposition: "inline",
					DispositionParams: map[string]string{
						"filename": "inline-jpg-image-filename.jpg",
					},
					TransferEncoding: "base64",
					ID:               "inline-jpg-image.jpg@example.com",
					Charset:          "gb18030",
				},
				Data: []byte{
					239, 191, 189, 239, 191, 189, 239, 191, 189, 239, 191, 189, 0, 67, 0, 3, 2, 2, 2,
					2, 2, 3, 2, 2, 2, 3, 3, 3, 3, 4, 6, 4, 4, 4, 4, 4, 8, 6, 6, 5, 6, 9, 8, 10, 10, 9,
					8, 9, 9, 10, 12, 15, 12, 10, 11, 14, 11, 9, 9, 13, 17, 13, 14, 15, 16, 16, 17, 16,
					10, 12, 18, 19, 18, 16, 19, 15, 16, 16, 16, 239, 191, 189, 239, 191, 189, 0, 11,
					8, 0, 1, 0, 1, 1, 1, 17, 0, 239, 191, 189, 239, 191, 189, 0, 6, 0, 16, 16, 5, 239,
					191, 189, 239, 191, 189, 0, 8, 1, 1, 0, 0, 63, 0, 232, 154, 129, 32, 239, 191, 189,
					239, 191, 189,
				},
			},
		},
	}
	testEmailFromFile(t, fp, expectedEmail)
}

func TestParseEmailChineseMultipartRelatedGb18030OverQuotedprintable(t *testing.T) {
	fp := "tests/test_chinese_multipart_related_gb18030_over_quoted-printable.txt"
	expectedEmail := &email.Email{
		Headers: email.Headers{
			Date: time.Time(time.Date(2019, 3, 31, 23, 55, 0, 0, time.UTC)),
			Sender: &mail.Address{
				Name:    "艾莉絲 发件人",
				Address: "alice.fajianren@example.com",
			},
			From: []*mail.Address{
				&mail.Address{
					Name:    "艾莉絲 发件人",
					Address: "alice.fajianren@example.com",
				},
				&mail.Address{
					Name:    "艾莉絲 发件人",
					Address: "alice.fajianren@example.net",
				},
			},
			ReplyTo: []*mail.Address{
				&mail.Address{
					Name:    "艾莉絲 发件人",
					Address: "alice.fajianren@example.net",
				},
			},
			To: []*mail.Address{
				&mail.Address{
					Name:    "與鮑伯 收件人",
					Address: "bob.shoujianren@example.com",
				},
				&mail.Address{
					Name:    "卡罗尔 收件人",
					Address: "carol.shoujianren@example.com",
				},
			},
			Cc: []*mail.Address{
				&mail.Address{
					Name:    "戴夫 收件人",
					Address: "dave.shoujianren@example.com",
				},
				&mail.Address{
					Name:    "伊夫 收件人",
					Address: "eve.shoujianren@example.com",
				},
			},
			Bcc: []*mail.Address{
				&mail.Address{
					Name:    "艾萨克 伊夫",
					Address: "isaac.shoujianren@example.com",
				},
				&mail.Address{
					Name:    "賈斯汀 伊夫",
					Address: "justin.shoujianren@example.com",
				},
			},
			MessageID: "Message-Id-1@example.com",
			InReplyTo: []string{
				"Message-Id-0@example.com",
			},
			References: []string{
				"Message-Id-0@example.com",
			},
			Subject:  "📧 Test 施氏食狮史",
			Comments: "Message Header Comment",
			Keywords: []string{
				"Keyword 1",
				"Keyword 2",
			},
			ResentDate: time.Time(time.Date(2019, 3, 31, 23, 55, 0, 0, time.UTC)),
			ResentFrom: []*mail.Address{
				&mail.Address{
					Name:    "艾莉絲 发件人",
					Address: "alice.fajianren@example.net",
				},
				&mail.Address{
					Name:    "艾莉絲 发件人",
					Address: "alice.fajianren@example.com",
				},
			},
			ResentSender: &mail.Address{
				Name:    "艾莉絲 发件人",
				Address: "alice.fajianren@example.net",
			},
			ResentTo: []*mail.Address{
				&mail.Address{
					Name:    "與鮑伯 收件人",
					Address: "bob.shoujianren@example.net",
				},
				&mail.Address{
					Name:    "卡罗尔 收件人",
					Address: "carol.shoujianren@example.net",
				},
			},
			ResentCc: []*mail.Address{
				&mail.Address{
					Name:    "戴夫 收件人",
					Address: "dave.shoujianren@example.net",
				},
				&mail.Address{
					Name:    "伊夫 收件人",
					Address: "eve.shoujianren@example.net",
				},
			},
			ResentBcc: []*mail.Address{
				&mail.Address{
					Name:    "艾萨克 伊夫",
					Address: "isaac.shoujianren@example.net",
				},
				&mail.Address{
					Name:    "賈斯汀 伊夫",
					Address: "justin.shoujianren@example.net",
				},
			},
			ResentMessageID: "Message-Id-1@example.net",
			ExtraHeaders: map[string][]string{
				"X-Clacks-Overhead": []string{
					"GNU Terry Pratchett",
				},
				"X-Script/function/\t !\"#$%&'()*+,-./;<=>?@[\\]^_`{|}~": []string{
					"TEST VALUE 1\t !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_` abcdefghijklmnopqrstuvwxyz{|}~",
					"TEST VALUE 2\t !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_` abcdefghijklmnopqrstuvwxyz{|}~",
				},
			},
			ContentInfo: &email.ContentInfo{
				Type: "multipart/related",
				TypeParams: map[string]string{
					"boundary": "RelatedBoundaryString",
					"charset":  "gb18030",
				},
				Disposition:       "",
				DispositionParams: map[string]string(nil), // p0
				TransferEncoding:  "quoted-printable",
				ID:                "",
				Charset:           "gb18030",
			},
			Received: nil,
		},
		Text: "石室诗士施氏，嗜狮，誓食十狮。\n" +
			"氏时时适市视狮。\n" +
			"十时，适十狮适市。\n" +
			"是时，适施氏适市。\n" +
			"氏视是十狮，恃矢势，使是十狮逝世。\n" +
			"氏拾是十狮尸，适石室。\n" +
			"石室湿，氏使侍拭石室。\n" +
			"石室拭，氏始试食是十狮。\n" +
			"食时，始识是十狮尸，实十石狮尸。\n" +
			"试释是事。",
		EnrichedText: "<bold>石室诗士施氏，嗜狮，誓食十狮。</bold>\n" +
			"<italic>氏时时适市视狮。</italic>\n" +
			"<fixed>十时，适十狮适市。</fixed>\n" +
			"<underline>是时，适施氏适市。</underline>\n" +
			"氏视是十狮，恃矢势，使是十狮逝世。\n" +
			"氏拾是十狮尸，适石室。\n" +
			"石室湿，氏使侍拭石室。\n" +
			"石室拭，氏始试食是十狮。\n" +
			"食时，始识是十狮尸，实十石狮尸。\n" +
			"试释是事。",
		HTML: "<html>\n" +
			"<div dir=\"ltr\">\n" +
			"<p>石室诗士施氏，嗜狮，誓食十狮。<br />\n" +
			"氏时时适市视狮。<br />\n" +
			"十时，适十狮适市。<br />\n" +
			"是时，适施氏适市。<br />\n" +
			"氏视是十狮，恃矢势，使是十狮逝世。<br />\n" +
			"氏拾是十狮尸，适石室。<br />\n" +
			"石室湿，氏使侍拭石室。<br />\n" +
			"石室拭，氏始试食是十狮。<br />\n" +
			"食时，始识是十狮尸，实十石狮尸。<br />\n" +
			"试释是事。</p>\n" +
			"</div>\n" +
			"</html>",
		Files: []*email.File{
			&email.File{
				FileType: "inline",
				Name:     "inline-jpg-image-filename.jpg",
				ContentInfo: &email.ContentInfo{
					Type: "image/jpeg",
					TypeParams: map[string]string{
						"name": "inline-jpg-image-name.jpg",
					},
					Disposition: "inline",
					DispositionParams: map[string]string{
						"filename": "inline-jpg-image-filename.jpg",
					},
					TransferEncoding: "base64",
					ID:               "inline-jpg-image.jpg@example.com",
					Charset:          "gb18030",
				},
				Data: []byte{
					239, 191, 189, 239, 191, 189, 239, 191, 189, 239, 191, 189, 0, 67, 0, 3, 2, 2, 2,
					2, 2, 3, 2, 2, 2, 3, 3, 3, 3, 4, 6, 4, 4, 4, 4, 4, 8, 6, 6, 5, 6, 9, 8, 10, 10, 9,
					8, 9, 9, 10, 12, 15, 12, 10, 11, 14, 11, 9, 9, 13, 17, 13, 14, 15, 16, 16, 17, 16,
					10, 12, 18, 19, 18, 16, 19, 15, 16, 16, 16, 239, 191, 189, 239, 191, 189, 0, 11,
					8, 0, 1, 0, 1, 1, 1, 17, 0, 239, 191, 189, 239, 191, 189, 0, 6, 0, 16, 16, 5, 239,
					191, 189, 239, 191, 189, 0, 8, 1, 1, 0, 0, 63, 0, 232, 154, 129, 32, 239, 191, 189,
					239, 191, 189,
				},
			},
		},
	}
	testEmailFromFile(t, fp, expectedEmail)
}

func TestParseEmailChineseMultipartRelatedGbkOverBase64(t *testing.T) {
	fp := "tests/test_chinese_multipart_related_gbk_over_base64.txt"
	expectedEmail := &email.Email{
		Headers: email.Headers{
			Date: time.Time(time.Date(2019, 3, 31, 23, 55, 0, 0, time.UTC)),
			Sender: &mail.Address{
				Name:    "艾莉絲 发件人",
				Address: "alice.fajianren@example.com",
			},
			From: []*mail.Address{
				&mail.Address{
					Name:    "艾莉絲 发件人",
					Address: "alice.fajianren@example.com",
				},
				&mail.Address{
					Name:    "艾莉絲 发件人",
					Address: "alice.fajianren@example.net",
				},
			},
			ReplyTo: []*mail.Address{
				&mail.Address{
					Name:    "艾莉絲 发件人",
					Address: "alice.fajianren@example.net",
				},
			},
			To: []*mail.Address{
				&mail.Address{
					Name:    "與鮑伯 收件人",
					Address: "bob.shoujianren@example.com",
				},
				&mail.Address{
					Name:    "卡罗尔 收件人",
					Address: "carol.shoujianren@example.com",
				},
			},
			Cc: []*mail.Address{
				&mail.Address{
					Name:    "戴夫 收件人",
					Address: "dave.shoujianren@example.com",
				},
				&mail.Address{
					Name:    "伊夫 收件人",
					Address: "eve.shoujianren@example.com",
				},
			},
			Bcc: []*mail.Address{
				&mail.Address{
					Name:    "艾萨克 伊夫",
					Address: "isaac.shoujianren@example.com",
				},
				&mail.Address{
					Name:    "賈斯汀 伊夫",
					Address: "justin.shoujianren@example.com",
				},
			},
			MessageID: "Message-Id-1@example.com",
			InReplyTo: []string{
				"Message-Id-0@example.com",
			},
			References: []string{
				"Message-Id-0@example.com",
			},
			Subject:  "📧 Test 施氏食狮史",
			Comments: "Message Header Comment",
			Keywords: []string{
				"Keyword 1",
				"Keyword 2",
			},
			ResentDate: time.Time(time.Date(2019, 3, 31, 23, 55, 0, 0, time.UTC)),
			ResentFrom: []*mail.Address{
				&mail.Address{
					Name:    "艾莉絲 发件人",
					Address: "alice.fajianren@example.net",
				},
				&mail.Address{
					Name:    "艾莉絲 发件人",
					Address: "alice.fajianren@example.com",
				},
			},
			ResentSender: &mail.Address{
				Name:    "艾莉絲 发件人",
				Address: "alice.fajianren@example.net",
			},
			ResentTo: []*mail.Address{
				&mail.Address{
					Name:    "與鮑伯 收件人",
					Address: "bob.shoujianren@example.net",
				},
				&mail.Address{
					Name:    "卡罗尔 收件人",
					Address: "carol.shoujianren@example.net",
				},
			},
			ResentCc: []*mail.Address{
				&mail.Address{
					Name:    "戴夫 收件人",
					Address: "dave.shoujianren@example.net",
				},
				&mail.Address{
					Name:    "伊夫 收件人",
					Address: "eve.shoujianren@example.net",
				},
			},
			ResentBcc: []*mail.Address{
				&mail.Address{
					Name:    "艾萨克 伊夫",
					Address: "isaac.shoujianren@example.net",
				},
				&mail.Address{
					Name:    "賈斯汀 伊夫",
					Address: "justin.shoujianren@example.net",
				},
			},
			ResentMessageID: "Message-Id-1@example.net",
			ExtraHeaders: map[string][]string{
				"X-Clacks-Overhead": []string{
					"GNU Terry Pratchett",
				},
				"X-Script/function/\t !\"#$%&'()*+,-./;<=>?@[\\]^_`{|}~": []string{
					"TEST VALUE 1\t !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_` abcdefghijklmnopqrstuvwxyz{|}~",
					"TEST VALUE 2\t !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_` abcdefghijklmnopqrstuvwxyz{|}~",
				},
			},
			ContentInfo: &email.ContentInfo{
				Type: "multipart/related",
				TypeParams: map[string]string{
					"boundary": "RelatedBoundaryString",
					"charset":  "gbk",
				},
				Disposition:       "",
				DispositionParams: map[string]string(nil), // p0
				TransferEncoding:  "base64",
				ID:                "",
				Charset:           "gbk",
			},
			Received: nil,
		},
		Text: "石室诗士施氏，嗜狮，誓食十狮。\n" +
			"氏时时适市视狮。\n" +
			"十时，适十狮适市。\n" +
			"是时，适施氏适市。\n" +
			"氏视是十狮，恃矢势，使是十狮逝世。\n" +
			"氏拾是十狮尸，适石室。\n" +
			"石室湿，氏使侍拭石室。\n" +
			"石室拭，氏始试食是十狮。\n" +
			"食时，始识是十狮尸，实十石狮尸。\n" +
			"试释是事。",
		EnrichedText: "<bold>石室诗士施氏，嗜狮，誓食十狮。</bold>\n" +
			"<italic>氏时时适市视狮。</italic>\n" +
			"<fixed>十时，适十狮适市。</fixed>\n" +
			"<underline>是时，适施氏适市。</underline>\n" +
			"氏视是十狮，恃矢势，使是十狮逝世。\n" +
			"氏拾是十狮尸，适石室。\n" +
			"石室湿，氏使侍拭石室。\n" +
			"石室拭，氏始试食是十狮。\n" +
			"食时，始识是十狮尸，实十石狮尸。\n" +
			"试释是事。",
		HTML: "<html>\n" +
			"<div dir=\"ltr\">\n" +
			"<p>石室诗士施氏，嗜狮，誓食十狮。<br />\n" +
			"氏时时适市视狮。<br />\n" +
			"十时，适十狮适市。<br />\n" +
			"是时，适施氏适市。<br />\n" +
			"氏视是十狮，恃矢势，使是十狮逝世。<br />\n" +
			"氏拾是十狮尸，适石室。<br />\n" +
			"石室湿，氏使侍拭石室。<br />\n" +
			"石室拭，氏始试食是十狮。<br />\n" +
			"食时，始识是十狮尸，实十石狮尸。<br />\n" +
			"试释是事。</p>\n" +
			"</div>\n" +
			"</html>",
		Files: []*email.File{
			&email.File{
				FileType: "inline",
				Name:     "inline-jpg-image-filename.jpg",
				ContentInfo: &email.ContentInfo{
					Type: "image/jpeg",
					TypeParams: map[string]string{
						"name": "inline-jpg-image-name.jpg",
					},
					Disposition: "inline",
					DispositionParams: map[string]string{
						"filename": "inline-jpg-image-filename.jpg",
					},
					TransferEncoding: "base64",
					ID:               "inline-jpg-image.jpg@example.com",
					Charset:          "gbk",
				},
				Data: []byte{
					239, 191, 189, 239, 191, 189, 239, 191, 189, 239, 191, 189, 0, 67, 0, 3, 2, 2, 2,
					2, 2, 3, 2, 2, 2, 3, 3, 3, 3, 4, 6, 4, 4, 4, 4, 4, 8, 6, 6, 5, 6, 9, 8, 10, 10, 9,
					8, 9, 9, 10, 12, 15, 12, 10, 11, 14, 11, 9, 9, 13, 17, 13, 14, 15, 16, 16, 17, 16,
					10, 12, 18, 19, 18, 16, 19, 15, 16, 16, 16, 239, 191, 189, 239, 191, 189, 0, 11,
					8, 0, 1, 0, 1, 1, 1, 17, 0, 239, 191, 189, 239, 191, 189, 0, 6, 0, 16, 16, 5, 239,
					191, 189, 239, 191, 189, 0, 8, 1, 1, 0, 0, 63, 0, 232, 154, 129, 32, 239, 191, 189,
					239, 191, 189,
				},
			},
		},
	}
	testEmailFromFile(t, fp, expectedEmail)
}

func TestParseEmailChineseMultipartRelatedGbkOverQuotedprintable(t *testing.T) {
	fp := "tests/test_chinese_multipart_related_gbk_over_quoted-printable.txt"
	expectedEmail := &email.Email{
		Headers: email.Headers{
			Date: time.Time(time.Date(2019, 3, 31, 23, 55, 0, 0, time.UTC)),
			Sender: &mail.Address{
				Name:    "艾莉絲 发件人",
				Address: "alice.fajianren@example.com",
			},
			From: []*mail.Address{
				&mail.Address{
					Name:    "艾莉絲 发件人",
					Address: "alice.fajianren@example.com",
				},
				&mail.Address{
					Name:    "艾莉絲 发件人",
					Address: "alice.fajianren@example.net",
				},
			},
			ReplyTo: []*mail.Address{
				&mail.Address{
					Name:    "艾莉絲 发件人",
					Address: "alice.fajianren@example.net",
				},
			},
			To: []*mail.Address{
				&mail.Address{
					Name:    "與鮑伯 收件人",
					Address: "bob.shoujianren@example.com",
				},
				&mail.Address{
					Name:    "卡罗尔 收件人",
					Address: "carol.shoujianren@example.com",
				},
			},
			Cc: []*mail.Address{
				&mail.Address{
					Name:    "戴夫 收件人",
					Address: "dave.shoujianren@example.com",
				},
				&mail.Address{
					Name:    "伊夫 收件人",
					Address: "eve.shoujianren@example.com",
				},
			},
			Bcc: []*mail.Address{
				&mail.Address{
					Name:    "艾萨克 伊夫",
					Address: "isaac.shoujianren@example.com",
				},
				&mail.Address{
					Name:    "賈斯汀 伊夫",
					Address: "justin.shoujianren@example.com",
				},
			},
			MessageID: "Message-Id-1@example.com",
			InReplyTo: []string{
				"Message-Id-0@example.com",
			},
			References: []string{
				"Message-Id-0@example.com",
			},
			Subject:  "📧 Test 施氏食狮史",
			Comments: "Message Header Comment",
			Keywords: []string{
				"Keyword 1",
				"Keyword 2",
			},
			ResentDate: time.Time(time.Date(2019, 3, 31, 23, 55, 0, 0, time.UTC)),
			ResentFrom: []*mail.Address{
				&mail.Address{
					Name:    "艾莉絲 发件人",
					Address: "alice.fajianren@example.net",
				},
				&mail.Address{
					Name:    "艾莉絲 发件人",
					Address: "alice.fajianren@example.com",
				},
			},
			ResentSender: &mail.Address{
				Name:    "艾莉絲 发件人",
				Address: "alice.fajianren@example.net",
			},
			ResentTo: []*mail.Address{
				&mail.Address{
					Name:    "與鮑伯 收件人",
					Address: "bob.shoujianren@example.net",
				},
				&mail.Address{
					Name:    "卡罗尔 收件人",
					Address: "carol.shoujianren@example.net",
				},
			},
			ResentCc: []*mail.Address{
				&mail.Address{
					Name:    "戴夫 收件人",
					Address: "dave.shoujianren@example.net",
				},
				&mail.Address{
					Name:    "伊夫 收件人",
					Address: "eve.shoujianren@example.net",
				},
			},
			ResentBcc: []*mail.Address{
				&mail.Address{
					Name:    "艾萨克 伊夫",
					Address: "isaac.shoujianren@example.net",
				},
				&mail.Address{
					Name:    "賈斯汀 伊夫",
					Address: "justin.shoujianren@example.net",
				},
			},
			ResentMessageID: "Message-Id-1@example.net",
			ExtraHeaders: map[string][]string{
				"X-Clacks-Overhead": []string{
					"GNU Terry Pratchett",
				},
				"X-Script/function/\t !\"#$%&'()*+,-./;<=>?@[\\]^_`{|}~": []string{
					"TEST VALUE 1\t !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_` abcdefghijklmnopqrstuvwxyz{|}~",
					"TEST VALUE 2\t !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_` abcdefghijklmnopqrstuvwxyz{|}~",
				},
			},
			ContentInfo: &email.ContentInfo{
				Type: "multipart/related",
				TypeParams: map[string]string{
					"boundary": "RelatedBoundaryString",
					"charset":  "gbk",
				},
				Disposition:       "",
				DispositionParams: map[string]string(nil), // p0
				TransferEncoding:  "quoted-printable",
				ID:                "",
				Charset:           "gbk",
			},
			Received: nil,
		},
		Text: "石室诗士施氏，嗜狮，誓食十狮。\n" +
			"氏时时适市视狮。\n" +
			"十时，适十狮适市。\n" +
			"是时，适施氏适市。\n" +
			"氏视是十狮，恃矢势，使是十狮逝世。\n" +
			"氏拾是十狮尸，适石室。\n" +
			"石室湿，氏使侍拭石室。\n" +
			"石室拭，氏始试食是十狮。\n" +
			"食时，始识是十狮尸，实十石狮尸。\n" +
			"试释是事。",
		EnrichedText: "<bold>石室诗士施氏，嗜狮，誓食十狮。</bold>\n" +
			"<italic>氏时时适市视狮。</italic>\n" +
			"<fixed>十时，适十狮适市。</fixed>\n" +
			"<underline>是时，适施氏适市。</underline>\n" +
			"氏视是十狮，恃矢势，使是十狮逝世。\n" +
			"氏拾是十狮尸，适石室。\n" +
			"石室湿，氏使侍拭石室。\n" +
			"石室拭，氏始试食是十狮。\n" +
			"食时，始识是十狮尸，实十石狮尸。\n" +
			"试释是事。",
		HTML: "<html>\n" +
			"<div dir=\"ltr\">\n" +
			"<p>石室诗士施氏，嗜狮，誓食十狮。<br />\n" +
			"氏时时适市视狮。<br />\n" +
			"十时，适十狮适市。<br />\n" +
			"是时，适施氏适市。<br />\n" +
			"氏视是十狮，恃矢势，使是十狮逝世。<br />\n" +
			"氏拾是十狮尸，适石室。<br />\n" +
			"石室湿，氏使侍拭石室。<br />\n" +
			"石室拭，氏始试食是十狮。<br />\n" +
			"食时，始识是十狮尸，实十石狮尸。<br />\n" +
			"试释是事。</p>\n" +
			"</div>\n" +
			"</html>",
		Files: []*email.File{
			&email.File{
				FileType: "inline",
				Name:     "inline-jpg-image-filename.jpg",
				ContentInfo: &email.ContentInfo{
					Type: "image/jpeg",
					TypeParams: map[string]string{
						"name": "inline-jpg-image-name.jpg",
					},
					Disposition: "inline",
					DispositionParams: map[string]string{
						"filename": "inline-jpg-image-filename.jpg",
					},
					TransferEncoding: "base64",
					ID:               "inline-jpg-image.jpg@example.com",
					Charset:          "gbk",
				},
				Data: []byte{
					239, 191, 189, 239, 191, 189, 239, 191, 189, 239, 191, 189, 0, 67, 0, 3, 2, 2, 2,
					2, 2, 3, 2, 2, 2, 3, 3, 3, 3, 4, 6, 4, 4, 4, 4, 4, 8, 6, 6, 5, 6, 9, 8, 10, 10, 9,
					8, 9, 9, 10, 12, 15, 12, 10, 11, 14, 11, 9, 9, 13, 17, 13, 14, 15, 16, 16, 17, 16,
					10, 12, 18, 19, 18, 16, 19, 15, 16, 16, 16, 239, 191, 189, 239, 191, 189, 0, 11,
					8, 0, 1, 0, 1, 1, 1, 17, 0, 239, 191, 189, 239, 191, 189, 0, 6, 0, 16, 16, 5, 239,
					191, 189, 239, 191, 189, 0, 8, 1, 1, 0, 0, 63, 0, 232, 154, 129, 32, 239, 191, 189,
					239, 191, 189,
				},
			},
		},
	}
	testEmailFromFile(t, fp, expectedEmail)
}

func TestParseEmailChineseMultipartMixedGb18030OverBase64(t *testing.T) {
	fp := "tests/test_chinese_multipart_mixed_gb18030_over_base64.txt"
	expectedEmail := &email.Email{
		Headers: email.Headers{
			Date: time.Time(time.Date(2019, 3, 31, 23, 55, 0, 0, time.UTC)),
			Sender: &mail.Address{
				Name:    "艾莉絲 发件人",
				Address: "alice.fajianren@example.com",
			},
			From: []*mail.Address{
				&mail.Address{
					Name:    "艾莉絲 发件人",
					Address: "alice.fajianren@example.com",
				},
				&mail.Address{
					Name:    "艾莉絲 发件人",
					Address: "alice.fajianren@example.net",
				},
			},
			ReplyTo: []*mail.Address{
				&mail.Address{
					Name:    "艾莉絲 发件人",
					Address: "alice.fajianren@example.net",
				},
			},
			To: []*mail.Address{
				&mail.Address{
					Name:    "與鮑伯 收件人",
					Address: "bob.shoujianren@example.com",
				},
				&mail.Address{
					Name:    "卡罗尔 收件人",
					Address: "carol.shoujianren@example.com",
				},
			},
			Cc: []*mail.Address{
				&mail.Address{
					Name:    "戴夫 收件人",
					Address: "dave.shoujianren@example.com",
				},
				&mail.Address{
					Name:    "伊夫 收件人",
					Address: "eve.shoujianren@example.com",
				},
			},
			Bcc: []*mail.Address{
				&mail.Address{
					Name:    "艾萨克 伊夫",
					Address: "isaac.shoujianren@example.com",
				},
				&mail.Address{
					Name:    "賈斯汀 伊夫",
					Address: "justin.shoujianren@example.com",
				},
			},
			MessageID: "Message-Id-1@example.com",
			InReplyTo: []string{
				"Message-Id-0@example.com",
			},
			References: []string{
				"Message-Id-0@example.com",
			},
			Subject:  "📧 Test 施氏食狮史",
			Comments: "Message Header Comment",
			Keywords: []string{
				"Keyword 1",
				"Keyword 2",
			},
			ResentDate: time.Time(time.Date(2019, 3, 31, 23, 55, 0, 0, time.UTC)),
			ResentFrom: []*mail.Address{
				&mail.Address{
					Name:    "艾莉絲 发件人",
					Address: "alice.fajianren@example.net",
				},
				&mail.Address{
					Name:    "艾莉絲 发件人",
					Address: "alice.fajianren@example.com",
				},
			},
			ResentSender: &mail.Address{
				Name:    "艾莉絲 发件人",
				Address: "alice.fajianren@example.net",
			},
			ResentTo: []*mail.Address{
				&mail.Address{
					Name:    "與鮑伯 收件人",
					Address: "bob.shoujianren@example.net",
				},
				&mail.Address{
					Name:    "卡罗尔 收件人",
					Address: "carol.shoujianren@example.net",
				},
			},
			ResentCc: []*mail.Address{
				&mail.Address{
					Name:    "戴夫 收件人",
					Address: "dave.shoujianren@example.net",
				},
				&mail.Address{
					Name:    "伊夫 收件人",
					Address: "eve.shoujianren@example.net",
				},
			},
			ResentBcc: []*mail.Address{
				&mail.Address{
					Name:    "艾萨克 伊夫",
					Address: "isaac.shoujianren@example.net",
				},
				&mail.Address{
					Name:    "賈斯汀 伊夫",
					Address: "justin.shoujianren@example.net",
				},
			},
			ResentMessageID: "Message-Id-1@example.net",
			ExtraHeaders: map[string][]string{
				"X-Clacks-Overhead": []string{
					"GNU Terry Pratchett",
				},
				"X-Script/function/\t !\"#$%&'()*+,-./;<=>?@[\\]^_`{|}~": []string{
					"TEST VALUE 1\t !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_` abcdefghijklmnopqrstuvwxyz{|}~",
					"TEST VALUE 2\t !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_` abcdefghijklmnopqrstuvwxyz{|}~",
				},
			},
			ContentInfo: &email.ContentInfo{
				Type: "multipart/mixed",
				TypeParams: map[string]string{
					"boundary": "MixedBoundaryString",
					"charset":  "gb18030",
				},
				Disposition:       "",
				DispositionParams: map[string]string(nil), // p0
				TransferEncoding:  "base64",
				ID:                "",
				Charset:           "gb18030",
			},
			Received: nil,
		},
		Text: "石室诗士施氏，嗜狮，誓食十狮。\n" +
			"氏时时适市视狮。\n" +
			"十时，适十狮适市。\n" +
			"是时，适施氏适市。\n" +
			"氏视是十狮，恃矢势，使是十狮逝世。\n" +
			"氏拾是十狮尸，适石室。\n" +
			"石室湿，氏使侍拭石室。\n" +
			"石室拭，氏始试食是十狮。\n" +
			"食时，始识是十狮尸，实十石狮尸。\n" +
			"试释是事。",
		EnrichedText: "<bold>石室诗士施氏，嗜狮，誓食十狮。</bold>\n" +
			"<italic>氏时时适市视狮。</italic>\n" +
			"<fixed>十时，适十狮适市。</fixed>\n" +
			"<underline>是时，适施氏适市。</underline>\n" +
			"氏视是十狮，恃矢势，使是十狮逝世。\n" +
			"氏拾是十狮尸，适石室。\n" +
			"石室湿，氏使侍拭石室。\n" +
			"石室拭，氏始试食是十狮。\n" +
			"食时，始识是十狮尸，实十石狮尸。\n" +
			"试释是事。",
		HTML: "<html>\n" +
			"<div dir=\"ltr\">\n" +
			"<p>石室诗士施氏，嗜狮，誓食十狮。<br />\n" +
			"氏时时适市视狮。<br />\n" +
			"十时，适十狮适市。<br />\n" +
			"是时，适施氏适市。<br />\n" +
			"氏视是十狮，恃矢势，使是十狮逝世。<br />\n" +
			"氏拾是十狮尸，适石室。<br />\n" +
			"石室湿，氏使侍拭石室。<br />\n" +
			"石室拭，氏始试食是十狮。<br />\n" +
			"食时，始识是十狮尸，实十石狮尸。<br />\n" +
			"试释是事。</p>\n" +
			"</div>\n" +
			"</html>",
		Files: []*email.File{
			&email.File{
				FileType: "",
				Name:     "inline-jpg-image-without-disposition.jpg",
				ContentInfo: &email.ContentInfo{
					Type: "image/jpeg",
					TypeParams: map[string]string{
						"name": "inline-jpg-image-without-disposition.jpg",
					},
					Disposition:       "",
					DispositionParams: map[string]string(nil), // p0
					TransferEncoding:  "base64",
					ID:                "",
					Charset:           "gb18030",
				},
				Data: []byte{
					239, 191, 189, 239, 191, 189, 239, 191, 189, 239, 191, 189, 0, 67, 0, 3, 2, 2, 2,
					2, 2, 3, 2, 2, 2, 3, 3, 3, 3, 4, 6, 4, 4, 4, 4, 4, 8, 6, 6, 5, 6, 9, 8, 10, 10, 9,
					8, 9, 9, 10, 12, 15, 12, 10, 11, 14, 11, 9, 9, 13, 17, 13, 14, 15, 16, 16, 17, 16,
					10, 12, 18, 19, 18, 16, 19, 15, 16, 16, 16, 239, 191, 189, 239, 191, 189, 0, 11,
					8, 0, 1, 0, 1, 1, 1, 17, 0, 239, 191, 189, 239, 191, 189, 0, 6, 0, 16, 16, 5, 239,
					191, 189, 239, 191, 189, 0, 8, 1, 1, 0, 0, 63, 0, 232, 154, 129, 32, 239, 191, 189,
					239, 191, 189,
				},
			},
			&email.File{
				FileType: "inline",
				Name:     "inline-jpg-image-filename.jpg",
				ContentInfo: &email.ContentInfo{
					Type: "image/jpeg",
					TypeParams: map[string]string{
						"name": "inline-jpg-image-name.jpg",
					},
					Disposition: "inline",
					DispositionParams: map[string]string{
						"filename": "inline-jpg-image-filename.jpg",
					},
					TransferEncoding: "base64",
					ID:               "inline-jpg-image.jpg@example.com",
					Charset:          "gb18030",
				},
				Data: []byte{
					239, 191, 189, 239, 191, 189, 239, 191, 189, 239, 191, 189, 0, 67, 0, 3, 2, 2, 2,
					2, 2, 3, 2, 2, 2, 3, 3, 3, 3, 4, 6, 4, 4, 4, 4, 4, 8, 6, 6, 5, 6, 9, 8, 10, 10, 9,
					8, 9, 9, 10, 12, 15, 12, 10, 11, 14, 11, 9, 9, 13, 17, 13, 14, 15, 16, 16, 17, 16,
					10, 12, 18, 19, 18, 16, 19, 15, 16, 16, 16, 239, 191, 189, 239, 191, 189, 0, 11,
					8, 0, 1, 0, 1, 1, 1, 17, 0, 239, 191, 189, 239, 191, 189, 0, 6, 0, 16, 16, 5, 239,
					191, 189, 239, 191, 189, 0, 8, 1, 1, 0, 0, 63, 0, 232, 154, 129, 32, 239, 191, 189,
					239, 191, 189,
				},
			},
			&email.File{
				FileType: "attachment",
				Name:     "attached-pdf-filename.pdf",
				ContentInfo: &email.ContentInfo{
					Type: "application/pdf",
					TypeParams: map[string]string{
						"name": "attached-pdf-name.pdf",
					},
					Disposition: "attachment",
					DispositionParams: map[string]string{
						"filename": "attached-pdf-filename.pdf",
					},
					TransferEncoding: "base64",
					ID:               "",
					Charset:          "gb18030",
				},
				Data: []byte{
					37, 80, 68, 70, 45, 49, 46, 13, 116, 114, 97, 105, 108, 101, 114, 60, 60, 47, 82,
					111, 111, 116, 60, 60, 47, 80, 97, 103, 101, 115, 60, 60, 47, 75, 105, 100, 115,
					91, 60, 60, 47, 77, 101, 100, 105, 97, 66, 111, 120, 91, 48, 32, 48, 32, 51, 32,
					51, 93, 62, 62, 93, 62, 62, 62, 62, 62, 62,
				},
			},
			&email.File{
				FileType: "",
				Name:     "attached-pdf-without-disposition.pdf",
				ContentInfo: &email.ContentInfo{
					Type: "application/pdf",
					TypeParams: map[string]string{
						"name": "attached-pdf-without-disposition.pdf",
					},
					Disposition:       "",
					DispositionParams: map[string]string(nil), // p0
					TransferEncoding:  "base64",
					ID:                "",
					Charset:           "gb18030",
				},
				Data: []byte{
					37, 80, 68, 70, 45, 49, 46, 13, 116, 114, 97, 105, 108, 101, 114, 60, 60, 47, 82,
					111, 111, 116, 60, 60, 47, 80, 97, 103, 101, 115, 60, 60, 47, 75, 105, 100, 115,
					91, 60, 60, 47, 77, 101, 100, 105, 97, 66, 111, 120, 91, 48, 32, 48, 32, 51, 32,
					51, 93, 62, 62, 93, 62, 62, 62, 62, 62, 62,
				},
			},
			&email.File{
				FileType: "attachment",
				Name:     "attached-json-filename.json",
				ContentInfo: &email.ContentInfo{
					Type: "application/json",
					TypeParams: map[string]string{
						"name": "attached-json-name.json",
					},
					Disposition: "attachment",
					DispositionParams: map[string]string{
						"filename": "attached-json-filename.json",
					},
					TransferEncoding: "7bit",
					ID:               "",
					Charset:          "gb18030",
				},
				Data: []byte{
					123, 34, 102, 111, 111, 34, 58, 34, 98, 97, 114, 34, 125,
				},
			},
			&email.File{
				FileType: "attachment",
				Name:     "attached-text-plain-filename.txt",
				ContentInfo: &email.ContentInfo{
					Type: "text/plain",
					TypeParams: map[string]string{
						"name": "attached-text-plain-name.txt",
					},
					Disposition: "attachment",
					DispositionParams: map[string]string{
						"filename": "attached-text-plain-filename.txt",
					},
					TransferEncoding: "base64",
					ID:               "",
					Charset:          "gb18030",
				},
				Data: []byte{
					84, 101, 120, 116, 47, 112, 108, 97, 105, 110, 32, 99, 111, 110, 116, 101, 110, 116,
					32, 97, 115, 32, 97, 110, 32, 97, 116, 116, 97, 99, 104, 101, 100, 32, 46, 116, 120,
					116, 32, 102, 105, 108, 101, 46,
				},
			},
			&email.File{
				FileType: "attachment",
				Name:     "attached-text-html-filename.html",
				ContentInfo: &email.ContentInfo{
					Type: "text/html",
					TypeParams: map[string]string{
						"name": "attached-text-html-name.html",
					},
					Disposition: "attachment",
					DispositionParams: map[string]string{
						"filename": "attached-text-html-filename.html",
					},
					TransferEncoding: "base64",
					ID:               "",
					Charset:          "gb18030",
				},
				Data: []byte{
					84, 101, 120, 116, 47, 104, 116, 109, 108, 32, 99, 111, 110, 116, 101, 110, 116,
					32, 97, 115, 32, 97, 110, 32, 97, 116, 116, 97, 99, 104, 101, 100, 32, 46, 104, 116,
					109, 108, 32, 102, 105, 108, 101, 46,
				},
			},
		},
	}
	testEmailFromFile(t, fp, expectedEmail)
}

func TestParseEmailChineseMultipartMixedGb18030OverQuotedprintable(t *testing.T) {
	fp := "tests/test_chinese_multipart_mixed_gb18030_over_quoted-printable.txt"
	expectedEmail := &email.Email{
		Headers: email.Headers{
			Date: time.Time(time.Date(2019, 3, 31, 23, 55, 0, 0, time.UTC)),
			Sender: &mail.Address{
				Name:    "艾莉絲 发件人",
				Address: "alice.fajianren@example.com",
			},
			From: []*mail.Address{
				&mail.Address{
					Name:    "艾莉絲 发件人",
					Address: "alice.fajianren@example.com",
				},
				&mail.Address{
					Name:    "艾莉絲 发件人",
					Address: "alice.fajianren@example.net",
				},
			},
			ReplyTo: []*mail.Address{
				&mail.Address{
					Name:    "艾莉絲 发件人",
					Address: "alice.fajianren@example.net",
				},
			},
			To: []*mail.Address{
				&mail.Address{
					Name:    "與鮑伯 收件人",
					Address: "bob.shoujianren@example.com",
				},
				&mail.Address{
					Name:    "卡罗尔 收件人",
					Address: "carol.shoujianren@example.com",
				},
			},
			Cc: []*mail.Address{
				&mail.Address{
					Name:    "戴夫 收件人",
					Address: "dave.shoujianren@example.com",
				},
				&mail.Address{
					Name:    "伊夫 收件人",
					Address: "eve.shoujianren@example.com",
				},
			},
			Bcc: []*mail.Address{
				&mail.Address{
					Name:    "艾萨克 伊夫",
					Address: "isaac.shoujianren@example.com",
				},
				&mail.Address{
					Name:    "賈斯汀 伊夫",
					Address: "justin.shoujianren@example.com",
				},
			},
			MessageID: "Message-Id-1@example.com",
			InReplyTo: []string{
				"Message-Id-0@example.com",
			},
			References: []string{
				"Message-Id-0@example.com",
			},
			Subject:  "📧 Test 施氏食狮史",
			Comments: "Message Header Comment",
			Keywords: []string{
				"Keyword 1",
				"Keyword 2",
			},
			ResentDate: time.Time(time.Date(2019, 3, 31, 23, 55, 0, 0, time.UTC)),
			ResentFrom: []*mail.Address{
				&mail.Address{
					Name:    "艾莉絲 发件人",
					Address: "alice.fajianren@example.net",
				},
				&mail.Address{
					Name:    "艾莉絲 发件人",
					Address: "alice.fajianren@example.com",
				},
			},
			ResentSender: &mail.Address{
				Name:    "艾莉絲 发件人",
				Address: "alice.fajianren@example.net",
			},
			ResentTo: []*mail.Address{
				&mail.Address{
					Name:    "與鮑伯 收件人",
					Address: "bob.shoujianren@example.net",
				},
				&mail.Address{
					Name:    "卡罗尔 收件人",
					Address: "carol.shoujianren@example.net",
				},
			},
			ResentCc: []*mail.Address{
				&mail.Address{
					Name:    "戴夫 收件人",
					Address: "dave.shoujianren@example.net",
				},
				&mail.Address{
					Name:    "伊夫 收件人",
					Address: "eve.shoujianren@example.net",
				},
			},
			ResentBcc: []*mail.Address{
				&mail.Address{
					Name:    "艾萨克 伊夫",
					Address: "isaac.shoujianren@example.net",
				},
				&mail.Address{
					Name:    "賈斯汀 伊夫",
					Address: "justin.shoujianren@example.net",
				},
			},
			ResentMessageID: "Message-Id-1@example.net",
			ExtraHeaders: map[string][]string{
				"X-Clacks-Overhead": []string{
					"GNU Terry Pratchett",
				},
				"X-Script/function/\t !\"#$%&'()*+,-./;<=>?@[\\]^_`{|}~": []string{
					"TEST VALUE 1\t !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_` abcdefghijklmnopqrstuvwxyz{|}~",
					"TEST VALUE 2\t !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_` abcdefghijklmnopqrstuvwxyz{|}~",
				},
			},
			ContentInfo: &email.ContentInfo{
				Type: "multipart/mixed",
				TypeParams: map[string]string{
					"boundary": "MixedBoundaryString",
					"charset":  "gb18030",
				},
				Disposition:       "",
				DispositionParams: map[string]string(nil), // p0
				TransferEncoding:  "quoted-printable",
				ID:                "",
				Charset:           "gb18030",
			},
			Received: nil,
		},
		Text: "石室诗士施氏，嗜狮，誓食十狮。\n" +
			"氏时时适市视狮。\n" +
			"十时，适十狮适市。\n" +
			"是时，适施氏适市。\n" +
			"氏视是十狮，恃矢势，使是十狮逝世。\n" +
			"氏拾是十狮尸，适石室。\n" +
			"石室湿，氏使侍拭石室。\n" +
			"石室拭，氏始试食是十狮。\n" +
			"食时，始识是十狮尸，实十石狮尸。\n" +
			"试释是事。",
		EnrichedText: "<bold>石室诗士施氏，嗜狮，誓食十狮。</bold>\n" +
			"<italic>氏时时适市视狮。</italic>\n" +
			"<fixed>十时，适十狮适市。</fixed>\n" +
			"<underline>是时，适施氏适市。</underline>\n" +
			"氏视是十狮，恃矢势，使是十狮逝世。\n" +
			"氏拾是十狮尸，适石室。\n" +
			"石室湿，氏使侍拭石室。\n" +
			"石室拭，氏始试食是十狮。\n" +
			"食时，始识是十狮尸，实十石狮尸。\n" +
			"试释是事。",
		HTML: "<html>\n" +
			"<div dir=\"ltr\">\n" +
			"<p>石室诗士施氏，嗜狮，誓食十狮。<br />\n" +
			"氏时时适市视狮。<br />\n" +
			"十时，适十狮适市。<br />\n" +
			"是时，适施氏适市。<br />\n" +
			"氏视是十狮，恃矢势，使是十狮逝世。<br />\n" +
			"氏拾是十狮尸，适石室。<br />\n" +
			"石室湿，氏使侍拭石室。<br />\n" +
			"石室拭，氏始试食是十狮。<br />\n" +
			"食时，始识是十狮尸，实十石狮尸。<br />\n" +
			"试释是事。</p>\n" +
			"</div>\n" +
			"</html>",
		Files: []*email.File{
			&email.File{
				FileType: "",
				Name:     "inline-jpg-image-without-disposition.jpg",
				ContentInfo: &email.ContentInfo{
					Type: "image/jpeg",
					TypeParams: map[string]string{
						"name": "inline-jpg-image-without-disposition.jpg",
					},
					Disposition:       "",
					DispositionParams: map[string]string(nil), // p0
					TransferEncoding:  "base64",
					ID:                "",
					Charset:           "gb18030",
				},
				Data: []byte{
					239, 191, 189, 239, 191, 189, 239, 191, 189, 239, 191, 189, 0, 67, 0, 3, 2, 2, 2,
					2, 2, 3, 2, 2, 2, 3, 3, 3, 3, 4, 6, 4, 4, 4, 4, 4, 8, 6, 6, 5, 6, 9, 8, 10, 10, 9,
					8, 9, 9, 10, 12, 15, 12, 10, 11, 14, 11, 9, 9, 13, 17, 13, 14, 15, 16, 16, 17, 16,
					10, 12, 18, 19, 18, 16, 19, 15, 16, 16, 16, 239, 191, 189, 239, 191, 189, 0, 11,
					8, 0, 1, 0, 1, 1, 1, 17, 0, 239, 191, 189, 239, 191, 189, 0, 6, 0, 16, 16, 5, 239,
					191, 189, 239, 191, 189, 0, 8, 1, 1, 0, 0, 63, 0, 232, 154, 129, 32, 239, 191, 189,
					239, 191, 189,
				},
			},
			&email.File{
				FileType: "inline",
				Name:     "inline-jpg-image-filename.jpg",
				ContentInfo: &email.ContentInfo{
					Type: "image/jpeg",
					TypeParams: map[string]string{
						"name": "inline-jpg-image-name.jpg",
					},
					Disposition: "inline",
					DispositionParams: map[string]string{
						"filename": "inline-jpg-image-filename.jpg",
					},
					TransferEncoding: "base64",
					ID:               "inline-jpg-image.jpg@example.com",
					Charset:          "gb18030",
				},
				Data: []byte{
					239, 191, 189, 239, 191, 189, 239, 191, 189, 239, 191, 189, 0, 67, 0, 3, 2, 2, 2,
					2, 2, 3, 2, 2, 2, 3, 3, 3, 3, 4, 6, 4, 4, 4, 4, 4, 8, 6, 6, 5, 6, 9, 8, 10, 10, 9,
					8, 9, 9, 10, 12, 15, 12, 10, 11, 14, 11, 9, 9, 13, 17, 13, 14, 15, 16, 16, 17, 16,
					10, 12, 18, 19, 18, 16, 19, 15, 16, 16, 16, 239, 191, 189, 239, 191, 189, 0, 11,
					8, 0, 1, 0, 1, 1, 1, 17, 0, 239, 191, 189, 239, 191, 189, 0, 6, 0, 16, 16, 5, 239,
					191, 189, 239, 191, 189, 0, 8, 1, 1, 0, 0, 63, 0, 232, 154, 129, 32, 239, 191, 189,
					239, 191, 189,
				},
			},
			&email.File{
				FileType: "attachment",
				Name:     "attached-pdf-filename.pdf",
				ContentInfo: &email.ContentInfo{
					Type: "application/pdf",
					TypeParams: map[string]string{
						"name": "attached-pdf-name.pdf",
					},
					Disposition: "attachment",
					DispositionParams: map[string]string{
						"filename": "attached-pdf-filename.pdf",
					},
					TransferEncoding: "base64",
					ID:               "",
					Charset:          "gb18030",
				},
				Data: []byte{
					37, 80, 68, 70, 45, 49, 46, 13, 116, 114, 97, 105, 108, 101, 114, 60, 60, 47, 82,
					111, 111, 116, 60, 60, 47, 80, 97, 103, 101, 115, 60, 60, 47, 75, 105, 100, 115,
					91, 60, 60, 47, 77, 101, 100, 105, 97, 66, 111, 120, 91, 48, 32, 48, 32, 51, 32,
					51, 93, 62, 62, 93, 62, 62, 62, 62, 62, 62,
				},
			},
			&email.File{
				FileType: "",
				Name:     "attached-pdf-without-disposition.pdf",
				ContentInfo: &email.ContentInfo{
					Type: "application/pdf",
					TypeParams: map[string]string{
						"name": "attached-pdf-without-disposition.pdf",
					},
					Disposition:       "",
					DispositionParams: map[string]string(nil), // p0
					TransferEncoding:  "base64",
					ID:                "",
					Charset:           "gb18030",
				},
				Data: []byte{
					37, 80, 68, 70, 45, 49, 46, 13, 116, 114, 97, 105, 108, 101, 114, 60, 60, 47, 82,
					111, 111, 116, 60, 60, 47, 80, 97, 103, 101, 115, 60, 60, 47, 75, 105, 100, 115,
					91, 60, 60, 47, 77, 101, 100, 105, 97, 66, 111, 120, 91, 48, 32, 48, 32, 51, 32,
					51, 93, 62, 62, 93, 62, 62, 62, 62, 62, 62,
				},
			},
			&email.File{
				FileType: "attachment",
				Name:     "attached-json-filename.json",
				ContentInfo: &email.ContentInfo{
					Type: "application/json",
					TypeParams: map[string]string{
						"name": "attached-json-name.json",
					},
					Disposition: "attachment",
					DispositionParams: map[string]string{
						"filename": "attached-json-filename.json",
					},
					TransferEncoding: "7bit",
					ID:               "",
					Charset:          "gb18030",
				},
				Data: []byte{
					123, 34, 102, 111, 111, 34, 58, 34, 98, 97, 114, 34, 125,
				},
			},
			&email.File{
				FileType: "attachment",
				Name:     "attached-text-plain-filename.txt",
				ContentInfo: &email.ContentInfo{
					Type: "text/plain",
					TypeParams: map[string]string{
						"name": "attached-text-plain-name.txt",
					},
					Disposition: "attachment",
					DispositionParams: map[string]string{
						"filename": "attached-text-plain-filename.txt",
					},
					TransferEncoding: "base64",
					ID:               "",
					Charset:          "gb18030",
				},
				Data: []byte{
					84, 101, 120, 116, 47, 112, 108, 97, 105, 110, 32, 99, 111, 110, 116, 101, 110, 116,
					32, 97, 115, 32, 97, 110, 32, 97, 116, 116, 97, 99, 104, 101, 100, 32, 46, 116, 120,
					116, 32, 102, 105, 108, 101, 46,
				},
			},
			&email.File{
				FileType: "attachment",
				Name:     "attached-text-html-filename.html",
				ContentInfo: &email.ContentInfo{
					Type: "text/html",
					TypeParams: map[string]string{
						"name": "attached-text-html-name.html",
					},
					Disposition: "attachment",
					DispositionParams: map[string]string{
						"filename": "attached-text-html-filename.html",
					},
					TransferEncoding: "base64",
					ID:               "",
					Charset:          "gb18030",
				},
				Data: []byte{
					84, 101, 120, 116, 47, 104, 116, 109, 108, 32, 99, 111, 110, 116, 101, 110, 116,
					32, 97, 115, 32, 97, 110, 32, 97, 116, 116, 97, 99, 104, 101, 100, 32, 46, 104, 116,
					109, 108, 32, 102, 105, 108, 101, 46,
				},
			},
		},
	}
	testEmailFromFile(t, fp, expectedEmail)
}

func TestParseEmailChineseMultipartMixedGbkOverBase64(t *testing.T) {
	fp := "tests/test_chinese_multipart_mixed_gbk_over_base64.txt"
	expectedEmail := &email.Email{
		Headers: email.Headers{
			Date: time.Time(time.Date(2019, 3, 31, 23, 55, 0, 0, time.UTC)),
			Sender: &mail.Address{
				Name:    "艾莉絲 发件人",
				Address: "alice.fajianren@example.com",
			},
			From: []*mail.Address{
				&mail.Address{
					Name:    "艾莉絲 发件人",
					Address: "alice.fajianren@example.com",
				},
				&mail.Address{
					Name:    "艾莉絲 发件人",
					Address: "alice.fajianren@example.net",
				},
			},
			ReplyTo: []*mail.Address{
				&mail.Address{
					Name:    "艾莉絲 发件人",
					Address: "alice.fajianren@example.net",
				},
			},
			To: []*mail.Address{
				&mail.Address{
					Name:    "與鮑伯 收件人",
					Address: "bob.shoujianren@example.com",
				},
				&mail.Address{
					Name:    "卡罗尔 收件人",
					Address: "carol.shoujianren@example.com",
				},
			},
			Cc: []*mail.Address{
				&mail.Address{
					Name:    "戴夫 收件人",
					Address: "dave.shoujianren@example.com",
				},
				&mail.Address{
					Name:    "伊夫 收件人",
					Address: "eve.shoujianren@example.com",
				},
			},
			Bcc: []*mail.Address{
				&mail.Address{
					Name:    "艾萨克 伊夫",
					Address: "isaac.shoujianren@example.com",
				},
				&mail.Address{
					Name:    "賈斯汀 伊夫",
					Address: "justin.shoujianren@example.com",
				},
			},
			MessageID: "Message-Id-1@example.com",
			InReplyTo: []string{
				"Message-Id-0@example.com",
			},
			References: []string{
				"Message-Id-0@example.com",
			},
			Subject:  "📧 Test 施氏食狮史",
			Comments: "Message Header Comment",
			Keywords: []string{
				"Keyword 1",
				"Keyword 2",
			},
			ResentDate: time.Time(time.Date(2019, 3, 31, 23, 55, 0, 0, time.UTC)),
			ResentFrom: []*mail.Address{
				&mail.Address{
					Name:    "艾莉絲 发件人",
					Address: "alice.fajianren@example.net",
				},
				&mail.Address{
					Name:    "艾莉絲 发件人",
					Address: "alice.fajianren@example.com",
				},
			},
			ResentSender: &mail.Address{
				Name:    "艾莉絲 发件人",
				Address: "alice.fajianren@example.net",
			},
			ResentTo: []*mail.Address{
				&mail.Address{
					Name:    "與鮑伯 收件人",
					Address: "bob.shoujianren@example.net",
				},
				&mail.Address{
					Name:    "卡罗尔 收件人",
					Address: "carol.shoujianren@example.net",
				},
			},
			ResentCc: []*mail.Address{
				&mail.Address{
					Name:    "戴夫 收件人",
					Address: "dave.shoujianren@example.net",
				},
				&mail.Address{
					Name:    "伊夫 收件人",
					Address: "eve.shoujianren@example.net",
				},
			},
			ResentBcc: []*mail.Address{
				&mail.Address{
					Name:    "艾萨克 伊夫",
					Address: "isaac.shoujianren@example.net",
				},
				&mail.Address{
					Name:    "賈斯汀 伊夫",
					Address: "justin.shoujianren@example.net",
				},
			},
			ResentMessageID: "Message-Id-1@example.net",
			ExtraHeaders: map[string][]string{
				"X-Clacks-Overhead": []string{
					"GNU Terry Pratchett",
				},
				"X-Script/function/\t !\"#$%&'()*+,-./;<=>?@[\\]^_`{|}~": []string{
					"TEST VALUE 1\t !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_` abcdefghijklmnopqrstuvwxyz{|}~",
					"TEST VALUE 2\t !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_` abcdefghijklmnopqrstuvwxyz{|}~",
				},
			},
			ContentInfo: &email.ContentInfo{
				Type: "multipart/mixed",
				TypeParams: map[string]string{
					"boundary": "MixedBoundaryString",
					"charset":  "gbk",
				},
				Disposition:       "",
				DispositionParams: map[string]string(nil), // p0
				TransferEncoding:  "base64",
				ID:                "",
				Charset:           "gbk",
			},
			Received: nil,
		},
		Text: "石室诗士施氏，嗜狮，誓食十狮。\n" +
			"氏时时适市视狮。\n" +
			"十时，适十狮适市。\n" +
			"是时，适施氏适市。\n" +
			"氏视是十狮，恃矢势，使是十狮逝世。\n" +
			"氏拾是十狮尸，适石室。\n" +
			"石室湿，氏使侍拭石室。\n" +
			"石室拭，氏始试食是十狮。\n" +
			"食时，始识是十狮尸，实十石狮尸。\n" +
			"试释是事。",
		EnrichedText: "<bold>石室诗士施氏，嗜狮，誓食十狮。</bold>\n" +
			"<italic>氏时时适市视狮。</italic>\n" +
			"<fixed>十时，适十狮适市。</fixed>\n" +
			"<underline>是时，适施氏适市。</underline>\n" +
			"氏视是十狮，恃矢势，使是十狮逝世。\n" +
			"氏拾是十狮尸，适石室。\n" +
			"石室湿，氏使侍拭石室。\n" +
			"石室拭，氏始试食是十狮。\n" +
			"食时，始识是十狮尸，实十石狮尸。\n" +
			"试释是事。",
		HTML: "<html>\n" +
			"<div dir=\"ltr\">\n" +
			"<p>石室诗士施氏，嗜狮，誓食十狮。<br />\n" +
			"氏时时适市视狮。<br />\n" +
			"十时，适十狮适市。<br />\n" +
			"是时，适施氏适市。<br />\n" +
			"氏视是十狮，恃矢势，使是十狮逝世。<br />\n" +
			"氏拾是十狮尸，适石室。<br />\n" +
			"石室湿，氏使侍拭石室。<br />\n" +
			"石室拭，氏始试食是十狮。<br />\n" +
			"食时，始识是十狮尸，实十石狮尸。<br />\n" +
			"试释是事。</p>\n" +
			"</div>\n" +
			"</html>",
		Files: []*email.File{
			&email.File{
				FileType: "",
				Name:     "inline-jpg-image-without-disposition.jpg",
				ContentInfo: &email.ContentInfo{
					Type: "image/jpeg",
					TypeParams: map[string]string{
						"name": "inline-jpg-image-without-disposition.jpg",
					},
					Disposition:       "",
					DispositionParams: map[string]string(nil), // p0
					TransferEncoding:  "base64",
					ID:                "",
					Charset:           "gbk",
				},
				Data: []byte{
					239, 191, 189, 239, 191, 189, 239, 191, 189, 239, 191, 189, 0, 67, 0, 3, 2, 2, 2,
					2, 2, 3, 2, 2, 2, 3, 3, 3, 3, 4, 6, 4, 4, 4, 4, 4, 8, 6, 6, 5, 6, 9, 8, 10, 10, 9,
					8, 9, 9, 10, 12, 15, 12, 10, 11, 14, 11, 9, 9, 13, 17, 13, 14, 15, 16, 16, 17, 16,
					10, 12, 18, 19, 18, 16, 19, 15, 16, 16, 16, 239, 191, 189, 239, 191, 189, 0, 11,
					8, 0, 1, 0, 1, 1, 1, 17, 0, 239, 191, 189, 239, 191, 189, 0, 6, 0, 16, 16, 5, 239,
					191, 189, 239, 191, 189, 0, 8, 1, 1, 0, 0, 63, 0, 232, 154, 129, 32, 239, 191, 189,
					239, 191, 189,
				},
			},
			&email.File{
				FileType: "inline",
				Name:     "inline-jpg-image-filename.jpg",
				ContentInfo: &email.ContentInfo{
					Type: "image/jpeg",
					TypeParams: map[string]string{
						"name": "inline-jpg-image-name.jpg",
					},
					Disposition: "inline",
					DispositionParams: map[string]string{
						"filename": "inline-jpg-image-filename.jpg",
					},
					TransferEncoding: "base64",
					ID:               "inline-jpg-image.jpg@example.com",
					Charset:          "gbk",
				},
				Data: []byte{
					239, 191, 189, 239, 191, 189, 239, 191, 189, 239, 191, 189, 0, 67, 0, 3, 2, 2, 2,
					2, 2, 3, 2, 2, 2, 3, 3, 3, 3, 4, 6, 4, 4, 4, 4, 4, 8, 6, 6, 5, 6, 9, 8, 10, 10, 9,
					8, 9, 9, 10, 12, 15, 12, 10, 11, 14, 11, 9, 9, 13, 17, 13, 14, 15, 16, 16, 17, 16,
					10, 12, 18, 19, 18, 16, 19, 15, 16, 16, 16, 239, 191, 189, 239, 191, 189, 0, 11,
					8, 0, 1, 0, 1, 1, 1, 17, 0, 239, 191, 189, 239, 191, 189, 0, 6, 0, 16, 16, 5, 239,
					191, 189, 239, 191, 189, 0, 8, 1, 1, 0, 0, 63, 0, 232, 154, 129, 32, 239, 191, 189,
					239, 191, 189,
				},
			},
			&email.File{
				FileType: "attachment",
				Name:     "attached-pdf-filename.pdf",
				ContentInfo: &email.ContentInfo{
					Type: "application/pdf",
					TypeParams: map[string]string{
						"name": "attached-pdf-name.pdf",
					},
					Disposition: "attachment",
					DispositionParams: map[string]string{
						"filename": "attached-pdf-filename.pdf",
					},
					TransferEncoding: "base64",
					ID:               "",
					Charset:          "gbk",
				},
				Data: []byte{
					37, 80, 68, 70, 45, 49, 46, 13, 116, 114, 97, 105, 108, 101, 114, 60, 60, 47, 82,
					111, 111, 116, 60, 60, 47, 80, 97, 103, 101, 115, 60, 60, 47, 75, 105, 100, 115,
					91, 60, 60, 47, 77, 101, 100, 105, 97, 66, 111, 120, 91, 48, 32, 48, 32, 51, 32,
					51, 93, 62, 62, 93, 62, 62, 62, 62, 62, 62,
				},
			},
			&email.File{
				FileType: "",
				Name:     "attached-pdf-without-disposition.pdf",
				ContentInfo: &email.ContentInfo{
					Type: "application/pdf",
					TypeParams: map[string]string{
						"name": "attached-pdf-without-disposition.pdf",
					},
					Disposition:       "",
					DispositionParams: map[string]string(nil), // p0
					TransferEncoding:  "base64",
					ID:                "",
					Charset:           "gbk",
				},
				Data: []byte{
					37, 80, 68, 70, 45, 49, 46, 13, 116, 114, 97, 105, 108, 101, 114, 60, 60, 47, 82,
					111, 111, 116, 60, 60, 47, 80, 97, 103, 101, 115, 60, 60, 47, 75, 105, 100, 115,
					91, 60, 60, 47, 77, 101, 100, 105, 97, 66, 111, 120, 91, 48, 32, 48, 32, 51, 32,
					51, 93, 62, 62, 93, 62, 62, 62, 62, 62, 62,
				},
			},
			&email.File{
				FileType: "attachment",
				Name:     "attached-json-filename.json",
				ContentInfo: &email.ContentInfo{
					Type: "application/json",
					TypeParams: map[string]string{
						"name": "attached-json-name.json",
					},
					Disposition: "attachment",
					DispositionParams: map[string]string{
						"filename": "attached-json-filename.json",
					},
					TransferEncoding: "7bit",
					ID:               "",
					Charset:          "gbk",
				},
				Data: []byte{
					123, 34, 102, 111, 111, 34, 58, 34, 98, 97, 114, 34, 125,
				},
			},
			&email.File{
				FileType: "attachment",
				Name:     "attached-text-plain-filename.txt",
				ContentInfo: &email.ContentInfo{
					Type: "text/plain",
					TypeParams: map[string]string{
						"name": "attached-text-plain-name.txt",
					},
					Disposition: "attachment",
					DispositionParams: map[string]string{
						"filename": "attached-text-plain-filename.txt",
					},
					TransferEncoding: "base64",
					ID:               "",
					Charset:          "gbk",
				},
				Data: []byte{
					84, 101, 120, 116, 47, 112, 108, 97, 105, 110, 32, 99, 111, 110, 116, 101, 110, 116,
					32, 97, 115, 32, 97, 110, 32, 97, 116, 116, 97, 99, 104, 101, 100, 32, 46, 116, 120,
					116, 32, 102, 105, 108, 101, 46,
				},
			},
			&email.File{
				FileType: "attachment",
				Name:     "attached-text-html-filename.html",
				ContentInfo: &email.ContentInfo{
					Type: "text/html",
					TypeParams: map[string]string{
						"name": "attached-text-html-name.html",
					},
					Disposition: "attachment",
					DispositionParams: map[string]string{
						"filename": "attached-text-html-filename.html",
					},
					TransferEncoding: "base64",
					ID:               "",
					Charset:          "gbk",
				},
				Data: []byte{
					84, 101, 120, 116, 47, 104, 116, 109, 108, 32, 99, 111, 110, 116, 101, 110, 116,
					32, 97, 115, 32, 97, 110, 32, 97, 116, 116, 97, 99, 104, 101, 100, 32, 46, 104, 116,
					109, 108, 32, 102, 105, 108, 101, 46,
				},
			},
		},
	}
	testEmailFromFile(t, fp, expectedEmail)
}

func TestParseEmailChineseMultipartMixedGbkOverQuotedprintable(t *testing.T) {
	fp := "tests/test_chinese_multipart_mixed_gbk_over_quoted-printable.txt"
	expectedEmail := &email.Email{
		Headers: email.Headers{
			Date: time.Time(time.Date(2019, 3, 31, 23, 55, 0, 0, time.UTC)),
			Sender: &mail.Address{
				Name:    "艾莉絲 发件人",
				Address: "alice.fajianren@example.com",
			},
			From: []*mail.Address{
				&mail.Address{
					Name:    "艾莉絲 发件人",
					Address: "alice.fajianren@example.com",
				},
				&mail.Address{
					Name:    "艾莉絲 发件人",
					Address: "alice.fajianren@example.net",
				},
			},
			ReplyTo: []*mail.Address{
				&mail.Address{
					Name:    "艾莉絲 发件人",
					Address: "alice.fajianren@example.net",
				},
			},
			To: []*mail.Address{
				&mail.Address{
					Name:    "與鮑伯 收件人",
					Address: "bob.shoujianren@example.com",
				},
				&mail.Address{
					Name:    "卡罗尔 收件人",
					Address: "carol.shoujianren@example.com",
				},
			},
			Cc: []*mail.Address{
				&mail.Address{
					Name:    "戴夫 收件人",
					Address: "dave.shoujianren@example.com",
				},
				&mail.Address{
					Name:    "伊夫 收件人",
					Address: "eve.shoujianren@example.com",
				},
			},
			Bcc: []*mail.Address{
				&mail.Address{
					Name:    "艾萨克 伊夫",
					Address: "isaac.shoujianren@example.com",
				},
				&mail.Address{
					Name:    "賈斯汀 伊夫",
					Address: "justin.shoujianren@example.com",
				},
			},
			MessageID: "Message-Id-1@example.com",
			InReplyTo: []string{
				"Message-Id-0@example.com",
			},
			References: []string{
				"Message-Id-0@example.com",
			},
			Subject:  "📧 Test 施氏食狮史",
			Comments: "Message Header Comment",
			Keywords: []string{
				"Keyword 1",
				"Keyword 2",
			},
			ResentDate: time.Time(time.Date(2019, 3, 31, 23, 55, 0, 0, time.UTC)),
			ResentFrom: []*mail.Address{
				&mail.Address{
					Name:    "艾莉絲 发件人",
					Address: "alice.fajianren@example.net",
				},
				&mail.Address{
					Name:    "艾莉絲 发件人",
					Address: "alice.fajianren@example.com",
				},
			},
			ResentSender: &mail.Address{
				Name:    "艾莉絲 发件人",
				Address: "alice.fajianren@example.net",
			},
			ResentTo: []*mail.Address{
				&mail.Address{
					Name:    "與鮑伯 收件人",
					Address: "bob.shoujianren@example.net",
				},
				&mail.Address{
					Name:    "卡罗尔 收件人",
					Address: "carol.shoujianren@example.net",
				},
			},
			ResentCc: []*mail.Address{
				&mail.Address{
					Name:    "戴夫 收件人",
					Address: "dave.shoujianren@example.net",
				},
				&mail.Address{
					Name:    "伊夫 收件人",
					Address: "eve.shoujianren@example.net",
				},
			},
			ResentBcc: []*mail.Address{
				&mail.Address{
					Name:    "艾萨克 伊夫",
					Address: "isaac.shoujianren@example.net",
				},
				&mail.Address{
					Name:    "賈斯汀 伊夫",
					Address: "justin.shoujianren@example.net",
				},
			},
			ResentMessageID: "Message-Id-1@example.net",
			ExtraHeaders: map[string][]string{
				"X-Clacks-Overhead": []string{
					"GNU Terry Pratchett",
				},
				"X-Script/function/\t !\"#$%&'()*+,-./;<=>?@[\\]^_`{|}~": []string{
					"TEST VALUE 1\t !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_` abcdefghijklmnopqrstuvwxyz{|}~",
					"TEST VALUE 2\t !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_` abcdefghijklmnopqrstuvwxyz{|}~",
				},
			},
			ContentInfo: &email.ContentInfo{
				Type: "multipart/mixed",
				TypeParams: map[string]string{
					"boundary": "MixedBoundaryString",
					"charset":  "gbk",
				},
				Disposition:       "",
				DispositionParams: map[string]string(nil), // p0
				TransferEncoding:  "quoted-printable",
				ID:                "",
				Charset:           "gbk",
			},
			Received: nil,
		},
		Text: "石室诗士施氏，嗜狮，誓食十狮。\n" +
			"氏时时适市视狮。\n" +
			"十时，适十狮适市。\n" +
			"是时，适施氏适市。\n" +
			"氏视是十狮，恃矢势，使是十狮逝世。\n" +
			"氏拾是十狮尸，适石室。\n" +
			"石室湿，氏使侍拭石室。\n" +
			"石室拭，氏始试食是十狮。\n" +
			"食时，始识是十狮尸，实十石狮尸。\n" +
			"试释是事。",
		EnrichedText: "<bold>石室诗士施氏，嗜狮，誓食十狮。</bold>\n" +
			"<italic>氏时时适市视狮。</italic>\n" +
			"<fixed>十时，适十狮适市。</fixed>\n" +
			"<underline>是时，适施氏适市。</underline>\n" +
			"氏视是十狮，恃矢势，使是十狮逝世。\n" +
			"氏拾是十狮尸，适石室。\n" +
			"石室湿，氏使侍拭石室。\n" +
			"石室拭，氏始试食是十狮。\n" +
			"食时，始识是十狮尸，实十石狮尸。\n" +
			"试释是事。",
		HTML: "<html>\n" +
			"<div dir=\"ltr\">\n" +
			"<p>石室诗士施氏，嗜狮，誓食十狮。<br />\n" +
			"氏时时适市视狮。<br />\n" +
			"十时，适十狮适市。<br />\n" +
			"是时，适施氏适市。<br />\n" +
			"氏视是十狮，恃矢势，使是十狮逝世。<br />\n" +
			"氏拾是十狮尸，适石室。<br />\n" +
			"石室湿，氏使侍拭石室。<br />\n" +
			"石室拭，氏始试食是十狮。<br />\n" +
			"食时，始识是十狮尸，实十石狮尸。<br />\n" +
			"试释是事。</p>\n" +
			"</div>\n" +
			"</html>",
		Files: []*email.File{
			&email.File{
				FileType: "",
				Name:     "inline-jpg-image-without-disposition.jpg",
				ContentInfo: &email.ContentInfo{
					Type: "image/jpeg",
					TypeParams: map[string]string{
						"name": "inline-jpg-image-without-disposition.jpg",
					},
					Disposition:       "",
					DispositionParams: map[string]string(nil), // p0
					TransferEncoding:  "base64",
					ID:                "",
					Charset:           "gbk",
				},
				Data: []byte{
					239, 191, 189, 239, 191, 189, 239, 191, 189, 239, 191, 189, 0, 67, 0, 3, 2, 2, 2,
					2, 2, 3, 2, 2, 2, 3, 3, 3, 3, 4, 6, 4, 4, 4, 4, 4, 8, 6, 6, 5, 6, 9, 8, 10, 10, 9,
					8, 9, 9, 10, 12, 15, 12, 10, 11, 14, 11, 9, 9, 13, 17, 13, 14, 15, 16, 16, 17, 16,
					10, 12, 18, 19, 18, 16, 19, 15, 16, 16, 16, 239, 191, 189, 239, 191, 189, 0, 11,
					8, 0, 1, 0, 1, 1, 1, 17, 0, 239, 191, 189, 239, 191, 189, 0, 6, 0, 16, 16, 5, 239,
					191, 189, 239, 191, 189, 0, 8, 1, 1, 0, 0, 63, 0, 232, 154, 129, 32, 239, 191, 189,
					239, 191, 189,
				},
			},
			&email.File{
				FileType: "inline",
				Name:     "inline-jpg-image-filename.jpg",
				ContentInfo: &email.ContentInfo{
					Type: "image/jpeg",
					TypeParams: map[string]string{
						"name": "inline-jpg-image-name.jpg",
					},
					Disposition: "inline",
					DispositionParams: map[string]string{
						"filename": "inline-jpg-image-filename.jpg",
					},
					TransferEncoding: "base64",
					ID:               "inline-jpg-image.jpg@example.com",
					Charset:          "gbk",
				},
				Data: []byte{
					239, 191, 189, 239, 191, 189, 239, 191, 189, 239, 191, 189, 0, 67, 0, 3, 2, 2, 2,
					2, 2, 3, 2, 2, 2, 3, 3, 3, 3, 4, 6, 4, 4, 4, 4, 4, 8, 6, 6, 5, 6, 9, 8, 10, 10, 9,
					8, 9, 9, 10, 12, 15, 12, 10, 11, 14, 11, 9, 9, 13, 17, 13, 14, 15, 16, 16, 17, 16,
					10, 12, 18, 19, 18, 16, 19, 15, 16, 16, 16, 239, 191, 189, 239, 191, 189, 0, 11,
					8, 0, 1, 0, 1, 1, 1, 17, 0, 239, 191, 189, 239, 191, 189, 0, 6, 0, 16, 16, 5, 239,
					191, 189, 239, 191, 189, 0, 8, 1, 1, 0, 0, 63, 0, 232, 154, 129, 32, 239, 191, 189,
					239, 191, 189,
				},
			},
			&email.File{
				FileType: "attachment",
				Name:     "attached-pdf-filename.pdf",
				ContentInfo: &email.ContentInfo{
					Type: "application/pdf",
					TypeParams: map[string]string{
						"name": "attached-pdf-name.pdf",
					},
					Disposition: "attachment",
					DispositionParams: map[string]string{
						"filename": "attached-pdf-filename.pdf",
					},
					TransferEncoding: "base64",
					ID:               "",
					Charset:          "gbk",
				},
				Data: []byte{
					37, 80, 68, 70, 45, 49, 46, 13, 116, 114, 97, 105, 108, 101, 114, 60, 60, 47, 82,
					111, 111, 116, 60, 60, 47, 80, 97, 103, 101, 115, 60, 60, 47, 75, 105, 100, 115,
					91, 60, 60, 47, 77, 101, 100, 105, 97, 66, 111, 120, 91, 48, 32, 48, 32, 51, 32,
					51, 93, 62, 62, 93, 62, 62, 62, 62, 62, 62,
				},
			},
			&email.File{
				FileType: "",
				Name:     "attached-pdf-without-disposition.pdf",
				ContentInfo: &email.ContentInfo{
					Type: "application/pdf",
					TypeParams: map[string]string{
						"name": "attached-pdf-without-disposition.pdf",
					},
					Disposition:       "",
					DispositionParams: map[string]string(nil), // p0
					TransferEncoding:  "base64",
					ID:                "",
					Charset:           "gbk",
				},
				Data: []byte{
					37, 80, 68, 70, 45, 49, 46, 13, 116, 114, 97, 105, 108, 101, 114, 60, 60, 47, 82,
					111, 111, 116, 60, 60, 47, 80, 97, 103, 101, 115, 60, 60, 47, 75, 105, 100, 115,
					91, 60, 60, 47, 77, 101, 100, 105, 97, 66, 111, 120, 91, 48, 32, 48, 32, 51, 32,
					51, 93, 62, 62, 93, 62, 62, 62, 62, 62, 62,
				},
			},
			&email.File{
				FileType: "attachment",
				Name:     "attached-json-filename.json",
				ContentInfo: &email.ContentInfo{
					Type: "application/json",
					TypeParams: map[string]string{
						"name": "attached-json-name.json",
					},
					Disposition: "attachment",
					DispositionParams: map[string]string{
						"filename": "attached-json-filename.json",
					},
					TransferEncoding: "7bit",
					ID:               "",
					Charset:          "gbk",
				},
				Data: []byte{
					123, 34, 102, 111, 111, 34, 58, 34, 98, 97, 114, 34, 125,
				},
			},
			&email.File{
				FileType: "attachment",
				Name:     "attached-text-plain-filename.txt",
				ContentInfo: &email.ContentInfo{
					Type: "text/plain",
					TypeParams: map[string]string{
						"name": "attached-text-plain-name.txt",
					},
					Disposition: "attachment",
					DispositionParams: map[string]string{
						"filename": "attached-text-plain-filename.txt",
					},
					TransferEncoding: "base64",
					ID:               "",
					Charset:          "gbk",
				},
				Data: []byte{
					84, 101, 120, 116, 47, 112, 108, 97, 105, 110, 32, 99, 111, 110, 116, 101, 110, 116,
					32, 97, 115, 32, 97, 110, 32, 97, 116, 116, 97, 99, 104, 101, 100, 32, 46, 116, 120,
					116, 32, 102, 105, 108, 101, 46,
				},
			},
			&email.File{
				FileType: "attachment",
				Name:     "attached-text-html-filename.html",
				ContentInfo: &email.ContentInfo{
					Type: "text/html",
					TypeParams: map[string]string{
						"name": "attached-text-html-name.html",
					},
					Disposition: "attachment",
					DispositionParams: map[string]string{
						"filename": "attached-text-html-filename.html",
					},
					TransferEncoding: "base64",
					ID:               "",
					Charset:          "gbk",
				},
				Data: []byte{
					84, 101, 120, 116, 47, 104, 116, 109, 108, 32, 99, 111, 110, 116, 101, 110, 116,
					32, 97, 115, 32, 97, 110, 32, 97, 116, 116, 97, 99, 104, 101, 100, 32, 46, 104, 116,
					109, 108, 32, 102, 105, 108, 101, 46,
				},
			},
		},
	}
	testEmailFromFile(t, fp, expectedEmail)
}

func TestParseEmailChineseMultipartSignedGb18030OverBase64(t *testing.T) {
	fp := "tests/test_chinese_multipart_signed_gb18030_over_base64.txt"
	expectedEmail := &email.Email{
		Headers: email.Headers{
			Date: time.Time(time.Date(2019, 3, 31, 23, 55, 0, 0, time.UTC)),
			Sender: &mail.Address{
				Name:    "艾莉絲 发件人",
				Address: "alice.fajianren@example.com",
			},
			From: []*mail.Address{
				&mail.Address{
					Name:    "艾莉絲 发件人",
					Address: "alice.fajianren@example.com",
				},
				&mail.Address{
					Name:    "艾莉絲 发件人",
					Address: "alice.fajianren@example.net",
				},
			},
			ReplyTo: []*mail.Address{
				&mail.Address{
					Name:    "艾莉絲 发件人",
					Address: "alice.fajianren@example.net",
				},
			},
			To: []*mail.Address{
				&mail.Address{
					Name:    "與鮑伯 收件人",
					Address: "bob.shoujianren@example.com",
				},
				&mail.Address{
					Name:    "卡罗尔 收件人",
					Address: "carol.shoujianren@example.com",
				},
			},
			Cc: []*mail.Address{
				&mail.Address{
					Name:    "戴夫 收件人",
					Address: "dave.shoujianren@example.com",
				},
				&mail.Address{
					Name:    "伊夫 收件人",
					Address: "eve.shoujianren@example.com",
				},
			},
			Bcc: []*mail.Address{
				&mail.Address{
					Name:    "艾萨克 伊夫",
					Address: "isaac.shoujianren@example.com",
				},
				&mail.Address{
					Name:    "賈斯汀 伊夫",
					Address: "justin.shoujianren@example.com",
				},
			},
			MessageID: "Message-Id-1@example.com",
			InReplyTo: []string{
				"Message-Id-0@example.com",
			},
			References: []string{
				"Message-Id-0@example.com",
			},
			Subject:  "📧 Signed Test 施氏食狮史",
			Comments: "Message Header Comment",
			Keywords: []string{
				"Keyword 1",
				"Keyword 2",
			},
			ResentDate: time.Time(time.Date(2019, 3, 31, 23, 55, 0, 0, time.UTC)),
			ResentFrom: []*mail.Address{
				&mail.Address{
					Name:    "艾莉絲 发件人",
					Address: "alice.fajianren@example.net",
				},
				&mail.Address{
					Name:    "艾莉絲 发件人",
					Address: "alice.fajianren@example.com",
				},
			},
			ResentSender: &mail.Address{
				Name:    "艾莉絲 发件人",
				Address: "alice.fajianren@example.net",
			},
			ResentTo: []*mail.Address{
				&mail.Address{
					Name:    "與鮑伯 收件人",
					Address: "bob.shoujianren@example.net",
				},
				&mail.Address{
					Name:    "卡罗尔 收件人",
					Address: "carol.shoujianren@example.net",
				},
			},
			ResentCc: []*mail.Address{
				&mail.Address{
					Name:    "戴夫 收件人",
					Address: "dave.shoujianren@example.net",
				},
				&mail.Address{
					Name:    "伊夫 收件人",
					Address: "eve.shoujianren@example.net",
				},
			},
			ResentBcc: []*mail.Address{
				&mail.Address{
					Name:    "艾萨克 伊夫",
					Address: "isaac.shoujianren@example.net",
				},
				&mail.Address{
					Name:    "賈斯汀 伊夫",
					Address: "justin.shoujianren@example.net",
				},
			},
			ResentMessageID: "Message-Id-1@example.net",
			ExtraHeaders: map[string][]string{
				"X-Clacks-Overhead": []string{
					"GNU Terry Pratchett",
				},
				"X-Script/function/\t !\"#$%&'()*+,-./;<=>?@[\\]^_`{|}~": []string{
					"TEST VALUE 1\t !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_` abcdefghijklmnopqrstuvwxyz{|}~",
					"TEST VALUE 2\t !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_` abcdefghijklmnopqrstuvwxyz{|}~",
				},
			},
			ContentInfo: &email.ContentInfo{
				Type: "multipart/signed",
				TypeParams: map[string]string{
					"boundary": "SignedBoundaryString",
					"charset":  "gb18030",
					"micalg":   "sha1",
					"protocol": "application/pkcs7-signature",
				},
				Disposition:       "",
				DispositionParams: map[string]string(nil), // p0
				TransferEncoding:  "base64",
				ID:                "",
				Charset:           "gb18030",
			},
			Received: nil,
		},
		Text: "石室诗士施氏，嗜狮，誓食十狮。\n" +
			"氏时时适市视狮。\n" +
			"十时，适十狮适市。\n" +
			"是时，适施氏适市。\n" +
			"氏视是十狮，恃矢势，使是十狮逝世。\n" +
			"氏拾是十狮尸，适石室。\n" +
			"石室湿，氏使侍拭石室。\n" +
			"石室拭，氏始试食是十狮。\n" +
			"食时，始识是十狮尸，实十石狮尸。\n" +
			"试释是事。",
		EnrichedText: "",
		HTML:         "",
		Files: []*email.File{
			&email.File{
				FileType: "attachment",
				Name:     "smime.p7s",
				ContentInfo: &email.ContentInfo{
					Type: "application/pkcs7-signature",
					TypeParams: map[string]string{
						"name": "smime.p7s",
					},
					Disposition: "attachment",
					DispositionParams: map[string]string{
						"filename": "smime.p7s",
					},
					TransferEncoding: "base64",
					ID:               "",
					Charset:          "gb18030",
				},
				Data: []byte{
					239, 191, 189, 28, 229, 153, 173, 117, 46, 239, 191, 189, 18, 97, 229, 175, 143,
					233, 186, 169, 231, 135, 142, 25, 58, 229, 145, 147, 229, 185, 191, 233, 164, 133,
					231, 146, 180, 31, 71, 27, 229, 140, 172, 239, 191, 189, 229, 145, 171, 239, 191,
					189, 229, 137, 154, 239, 191, 189, 29, 239, 191, 189, 19, 233, 155, 178, 80, 239,
					191, 189, 229, 145, 171, 239, 191, 189, 229, 137, 154, 239, 191, 189, 29, 239, 191,
					189, 19, 239, 191, 189, 49, 239, 191, 189, 127, 7, 28, 104, 33, 232, 145, 130, 71,
					82, 230, 160, 179, 38, 30, 239, 191, 189, 232, 135, 179, 233, 173, 134, 230, 145,
					165, 239, 191, 189, 239, 191, 189, 57, 239, 191, 189, 28, 113, 230, 145, 165, 239,
					191, 189, 38, 24, 231, 167, 139, 231, 187, 143, 108, 31, 71, 27, 229, 140, 172, 110,
					120, 239, 191, 189, 239, 191, 189, 229, 137, 154, 239, 191, 189, 29, 239, 191, 189,
					19, 239, 191, 189, 8, 114, 30, 17, 233, 153, 162, 58, 95, 232, 144, 159, 59, 26,
					18, 6, 124, 119, 232, 177, 139, 239, 191, 189, 21, 65, 229, 185, 191, 233, 164, 133,
				},
			},
		},
	}
	testEmailFromFile(t, fp, expectedEmail)
}

func TestParseEmailChineseMultipartSignedGb18030OverQuotedprintable(t *testing.T) {
	fp := "tests/test_chinese_multipart_signed_gb18030_over_quoted-printable.txt"
	expectedEmail := &email.Email{
		Headers: email.Headers{
			Date: time.Time(time.Date(2019, 3, 31, 23, 55, 0, 0, time.UTC)),
			Sender: &mail.Address{
				Name:    "艾莉絲 发件人",
				Address: "alice.fajianren@example.com",
			},
			From: []*mail.Address{
				&mail.Address{
					Name:    "艾莉絲 发件人",
					Address: "alice.fajianren@example.com",
				},
				&mail.Address{
					Name:    "艾莉絲 发件人",
					Address: "alice.fajianren@example.net",
				},
			},
			ReplyTo: []*mail.Address{
				&mail.Address{
					Name:    "艾莉絲 发件人",
					Address: "alice.fajianren@example.net",
				},
			},
			To: []*mail.Address{
				&mail.Address{
					Name:    "與鮑伯 收件人",
					Address: "bob.shoujianren@example.com",
				},
				&mail.Address{
					Name:    "卡罗尔 收件人",
					Address: "carol.shoujianren@example.com",
				},
			},
			Cc: []*mail.Address{
				&mail.Address{
					Name:    "戴夫 收件人",
					Address: "dave.shoujianren@example.com",
				},
				&mail.Address{
					Name:    "伊夫 收件人",
					Address: "eve.shoujianren@example.com",
				},
			},
			Bcc: []*mail.Address{
				&mail.Address{
					Name:    "艾萨克 伊夫",
					Address: "isaac.shoujianren@example.com",
				},
				&mail.Address{
					Name:    "賈斯汀 伊夫",
					Address: "justin.shoujianren@example.com",
				},
			},
			MessageID: "Message-Id-1@example.com",
			InReplyTo: []string{
				"Message-Id-0@example.com",
			},
			References: []string{
				"Message-Id-0@example.com",
			},
			Subject:  "📧 Signed Test 施氏食狮史",
			Comments: "Message Header Comment",
			Keywords: []string{
				"Keyword 1",
				"Keyword 2",
			},
			ResentDate: time.Time(time.Date(2019, 3, 31, 23, 55, 0, 0, time.UTC)),
			ResentFrom: []*mail.Address{
				&mail.Address{
					Name:    "艾莉絲 发件人",
					Address: "alice.fajianren@example.net",
				},
				&mail.Address{
					Name:    "艾莉絲 发件人",
					Address: "alice.fajianren@example.com",
				},
			},
			ResentSender: &mail.Address{
				Name:    "艾莉絲 发件人",
				Address: "alice.fajianren@example.net",
			},
			ResentTo: []*mail.Address{
				&mail.Address{
					Name:    "與鮑伯 收件人",
					Address: "bob.shoujianren@example.net",
				},
				&mail.Address{
					Name:    "卡罗尔 收件人",
					Address: "carol.shoujianren@example.net",
				},
			},
			ResentCc: []*mail.Address{
				&mail.Address{
					Name:    "戴夫 收件人",
					Address: "dave.shoujianren@example.net",
				},
				&mail.Address{
					Name:    "伊夫 收件人",
					Address: "eve.shoujianren@example.net",
				},
			},
			ResentBcc: []*mail.Address{
				&mail.Address{
					Name:    "艾萨克 伊夫",
					Address: "isaac.shoujianren@example.net",
				},
				&mail.Address{
					Name:    "賈斯汀 伊夫",
					Address: "justin.shoujianren@example.net",
				},
			},
			ResentMessageID: "Message-Id-1@example.net",
			ExtraHeaders: map[string][]string{
				"X-Clacks-Overhead": []string{
					"GNU Terry Pratchett",
				},
				"X-Script/function/\t !\"#$%&'()*+,-./;<=>?@[\\]^_`{|}~": []string{
					"TEST VALUE 1\t !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_` abcdefghijklmnopqrstuvwxyz{|}~",
					"TEST VALUE 2\t !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_` abcdefghijklmnopqrstuvwxyz{|}~",
				},
			},
			ContentInfo: &email.ContentInfo{
				Type: "multipart/signed",
				TypeParams: map[string]string{
					"boundary": "SignedBoundaryString",
					"charset":  "gb18030",
					"micalg":   "sha1",
					"protocol": "application/pkcs7-signature",
				},
				Disposition:       "",
				DispositionParams: map[string]string(nil), // p0
				TransferEncoding:  "quoted-printable",
				ID:                "",
				Charset:           "gb18030",
			},
			Received: nil,
		},
		Text: "石室诗士施氏，嗜狮，誓食十狮。\n" +
			"氏时时适市视狮。\n" +
			"十时，适十狮适市。\n" +
			"是时，适施氏适市。\n" +
			"氏视是十狮，恃矢势，使是十狮逝世。\n" +
			"氏拾是十狮尸，适石室。\n" +
			"石室湿，氏使侍拭石室。\n" +
			"石室拭，氏始试食是十狮。\n" +
			"食时，始识是十狮尸，实十石狮尸。\n" +
			"试释是事。",
		EnrichedText: "",
		HTML:         "",
		Files: []*email.File{
			&email.File{
				FileType: "attachment",
				Name:     "smime.p7s",
				ContentInfo: &email.ContentInfo{
					Type: "application/pkcs7-signature",
					TypeParams: map[string]string{
						"name": "smime.p7s",
					},
					Disposition: "attachment",
					DispositionParams: map[string]string{
						"filename": "smime.p7s",
					},
					TransferEncoding: "base64",
					ID:               "",
					Charset:          "gb18030",
				},
				Data: []byte{
					239, 191, 189, 28, 229, 153, 173, 117, 46, 239, 191, 189, 18, 97, 229, 175, 143,
					233, 186, 169, 231, 135, 142, 25, 58, 229, 145, 147, 229, 185, 191, 233, 164, 133,
					231, 146, 180, 31, 71, 27, 229, 140, 172, 239, 191, 189, 229, 145, 171, 239, 191,
					189, 229, 137, 154, 239, 191, 189, 29, 239, 191, 189, 19, 233, 155, 178, 80, 239,
					191, 189, 229, 145, 171, 239, 191, 189, 229, 137, 154, 239, 191, 189, 29, 239, 191,
					189, 19, 239, 191, 189, 49, 239, 191, 189, 127, 7, 28, 104, 33, 232, 145, 130, 71,
					82, 230, 160, 179, 38, 30, 239, 191, 189, 232, 135, 179, 233, 173, 134, 230, 145,
					165, 239, 191, 189, 239, 191, 189, 57, 239, 191, 189, 28, 113, 230, 145, 165, 239,
					191, 189, 38, 24, 231, 167, 139, 231, 187, 143, 108, 31, 71, 27, 229, 140, 172, 110,
					120, 239, 191, 189, 239, 191, 189, 229, 137, 154, 239, 191, 189, 29, 239, 191, 189,
					19, 239, 191, 189, 8, 114, 30, 17, 233, 153, 162, 58, 95, 232, 144, 159, 59, 26,
					18, 6, 124, 119, 232, 177, 139, 239, 191, 189, 21, 65, 229, 185, 191, 233, 164, 133,
				},
			},
		},
	}
	testEmailFromFile(t, fp, expectedEmail)
}

func TestParseEmailChineseMultipartSignedGbkOverBase64(t *testing.T) {
	fp := "tests/test_chinese_multipart_signed_gbk_over_base64.txt"
	expectedEmail := &email.Email{
		Headers: email.Headers{
			Date: time.Time(time.Date(2019, 3, 31, 23, 55, 0, 0, time.UTC)),
			Sender: &mail.Address{
				Name:    "艾莉絲 发件人",
				Address: "alice.fajianren@example.com",
			},
			From: []*mail.Address{
				&mail.Address{
					Name:    "艾莉絲 发件人",
					Address: "alice.fajianren@example.com",
				},
				&mail.Address{
					Name:    "艾莉絲 发件人",
					Address: "alice.fajianren@example.net",
				},
			},
			ReplyTo: []*mail.Address{
				&mail.Address{
					Name:    "艾莉絲 发件人",
					Address: "alice.fajianren@example.net",
				},
			},
			To: []*mail.Address{
				&mail.Address{
					Name:    "與鮑伯 收件人",
					Address: "bob.shoujianren@example.com",
				},
				&mail.Address{
					Name:    "卡罗尔 收件人",
					Address: "carol.shoujianren@example.com",
				},
			},
			Cc: []*mail.Address{
				&mail.Address{
					Name:    "戴夫 收件人",
					Address: "dave.shoujianren@example.com",
				},
				&mail.Address{
					Name:    "伊夫 收件人",
					Address: "eve.shoujianren@example.com",
				},
			},
			Bcc: []*mail.Address{
				&mail.Address{
					Name:    "艾萨克 伊夫",
					Address: "isaac.shoujianren@example.com",
				},
				&mail.Address{
					Name:    "賈斯汀 伊夫",
					Address: "justin.shoujianren@example.com",
				},
			},
			MessageID: "Message-Id-1@example.com",
			InReplyTo: []string{
				"Message-Id-0@example.com",
			},
			References: []string{
				"Message-Id-0@example.com",
			},
			Subject:  "📧 Signed Test 施氏食狮史",
			Comments: "Message Header Comment",
			Keywords: []string{
				"Keyword 1",
				"Keyword 2",
			},
			ResentDate: time.Time(time.Date(2019, 3, 31, 23, 55, 0, 0, time.UTC)),
			ResentFrom: []*mail.Address{
				&mail.Address{
					Name:    "艾莉絲 发件人",
					Address: "alice.fajianren@example.net",
				},
				&mail.Address{
					Name:    "艾莉絲 发件人",
					Address: "alice.fajianren@example.com",
				},
			},
			ResentSender: &mail.Address{
				Name:    "艾莉絲 发件人",
				Address: "alice.fajianren@example.net",
			},
			ResentTo: []*mail.Address{
				&mail.Address{
					Name:    "與鮑伯 收件人",
					Address: "bob.shoujianren@example.net",
				},
				&mail.Address{
					Name:    "卡罗尔 收件人",
					Address: "carol.shoujianren@example.net",
				},
			},
			ResentCc: []*mail.Address{
				&mail.Address{
					Name:    "戴夫 收件人",
					Address: "dave.shoujianren@example.net",
				},
				&mail.Address{
					Name:    "伊夫 收件人",
					Address: "eve.shoujianren@example.net",
				},
			},
			ResentBcc: []*mail.Address{
				&mail.Address{
					Name:    "艾萨克 伊夫",
					Address: "isaac.shoujianren@example.net",
				},
				&mail.Address{
					Name:    "賈斯汀 伊夫",
					Address: "justin.shoujianren@example.net",
				},
			},
			ResentMessageID: "Message-Id-1@example.net",
			ExtraHeaders: map[string][]string{
				"X-Clacks-Overhead": []string{
					"GNU Terry Pratchett",
				},
				"X-Script/function/\t !\"#$%&'()*+,-./;<=>?@[\\]^_`{|}~": []string{
					"TEST VALUE 1\t !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_` abcdefghijklmnopqrstuvwxyz{|}~",
					"TEST VALUE 2\t !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_` abcdefghijklmnopqrstuvwxyz{|}~",
				},
			},
			ContentInfo: &email.ContentInfo{
				Type: "multipart/signed",
				TypeParams: map[string]string{
					"boundary": "SignedBoundaryString",
					"charset":  "gbk",
					"micalg":   "sha1",
					"protocol": "application/pkcs7-signature",
				},
				Disposition:       "",
				DispositionParams: map[string]string(nil), // p0
				TransferEncoding:  "base64",
				ID:                "",
				Charset:           "gbk",
			},
			Received: nil,
		},
		Text: "石室诗士施氏，嗜狮，誓食十狮。\n" +
			"氏时时适市视狮。\n" +
			"十时，适十狮适市。\n" +
			"是时，适施氏适市。\n" +
			"氏视是十狮，恃矢势，使是十狮逝世。\n" +
			"氏拾是十狮尸，适石室。\n" +
			"石室湿，氏使侍拭石室。\n" +
			"石室拭，氏始试食是十狮。\n" +
			"食时，始识是十狮尸，实十石狮尸。\n" +
			"试释是事。",
		EnrichedText: "",
		HTML:         "",
		Files: []*email.File{
			&email.File{
				FileType: "attachment",
				Name:     "smime.p7s",
				ContentInfo: &email.ContentInfo{
					Type: "application/pkcs7-signature",
					TypeParams: map[string]string{
						"name": "smime.p7s",
					},
					Disposition: "attachment",
					DispositionParams: map[string]string{
						"filename": "smime.p7s",
					},
					TransferEncoding: "base64",
					ID:               "",
					Charset:          "gbk",
				},
				Data: []byte{
					239, 191, 189, 28, 229, 153, 173, 117, 46, 239, 191, 189, 18, 97, 229, 175, 143,
					233, 186, 169, 231, 135, 142, 25, 58, 229, 145, 147, 229, 185, 191, 233, 164, 133,
					231, 146, 180, 31, 71, 27, 229, 140, 172, 239, 191, 189, 229, 145, 171, 239, 191,
					189, 229, 137, 154, 239, 191, 189, 29, 239, 191, 189, 19, 233, 155, 178, 80, 239,
					191, 189, 229, 145, 171, 239, 191, 189, 229, 137, 154, 239, 191, 189, 29, 239, 191,
					189, 19, 239, 191, 189, 49, 239, 191, 189, 127, 7, 28, 104, 33, 232, 145, 130, 71,
					82, 230, 160, 179, 38, 30, 239, 191, 189, 232, 135, 179, 233, 173, 134, 230, 145,
					165, 239, 191, 189, 239, 191, 189, 57, 239, 191, 189, 28, 113, 230, 145, 165, 239,
					191, 189, 38, 24, 231, 167, 139, 231, 187, 143, 108, 31, 71, 27, 229, 140, 172, 110,
					120, 239, 191, 189, 239, 191, 189, 229, 137, 154, 239, 191, 189, 29, 239, 191, 189,
					19, 239, 191, 189, 8, 114, 30, 17, 233, 153, 162, 58, 95, 232, 144, 159, 59, 26,
					18, 6, 124, 119, 232, 177, 139, 239, 191, 189, 21, 65, 229, 185, 191, 233, 164, 133,
				},
			},
		},
	}
	testEmailFromFile(t, fp, expectedEmail)
}

func TestParseEmailChineseMultipartSignedGbkOverQuotedprintable(t *testing.T) {
	fp := "tests/test_chinese_multipart_signed_gbk_over_quoted-printable.txt"
	expectedEmail := &email.Email{
		Headers: email.Headers{
			Date: time.Time(time.Date(2019, 3, 31, 23, 55, 0, 0, time.UTC)),
			Sender: &mail.Address{
				Name:    "艾莉絲 发件人",
				Address: "alice.fajianren@example.com",
			},
			From: []*mail.Address{
				&mail.Address{
					Name:    "艾莉絲 发件人",
					Address: "alice.fajianren@example.com",
				},
				&mail.Address{
					Name:    "艾莉絲 发件人",
					Address: "alice.fajianren@example.net",
				},
			},
			ReplyTo: []*mail.Address{
				&mail.Address{
					Name:    "艾莉絲 发件人",
					Address: "alice.fajianren@example.net",
				},
			},
			To: []*mail.Address{
				&mail.Address{
					Name:    "與鮑伯 收件人",
					Address: "bob.shoujianren@example.com",
				},
				&mail.Address{
					Name:    "卡罗尔 收件人",
					Address: "carol.shoujianren@example.com",
				},
			},
			Cc: []*mail.Address{
				&mail.Address{
					Name:    "戴夫 收件人",
					Address: "dave.shoujianren@example.com",
				},
				&mail.Address{
					Name:    "伊夫 收件人",
					Address: "eve.shoujianren@example.com",
				},
			},
			Bcc: []*mail.Address{
				&mail.Address{
					Name:    "艾萨克 伊夫",
					Address: "isaac.shoujianren@example.com",
				},
				&mail.Address{
					Name:    "賈斯汀 伊夫",
					Address: "justin.shoujianren@example.com",
				},
			},
			MessageID: "Message-Id-1@example.com",
			InReplyTo: []string{
				"Message-Id-0@example.com",
			},
			References: []string{
				"Message-Id-0@example.com",
			},
			Subject:  "📧 Signed Test 施氏食狮史",
			Comments: "Message Header Comment",
			Keywords: []string{
				"Keyword 1",
				"Keyword 2",
			},
			ResentDate: time.Time(time.Date(2019, 3, 31, 23, 55, 0, 0, time.UTC)),
			ResentFrom: []*mail.Address{
				&mail.Address{
					Name:    "艾莉絲 发件人",
					Address: "alice.fajianren@example.net",
				},
				&mail.Address{
					Name:    "艾莉絲 发件人",
					Address: "alice.fajianren@example.com",
				},
			},
			ResentSender: &mail.Address{
				Name:    "艾莉絲 发件人",
				Address: "alice.fajianren@example.net",
			},
			ResentTo: []*mail.Address{
				&mail.Address{
					Name:    "與鮑伯 收件人",
					Address: "bob.shoujianren@example.net",
				},
				&mail.Address{
					Name:    "卡罗尔 收件人",
					Address: "carol.shoujianren@example.net",
				},
			},
			ResentCc: []*mail.Address{
				&mail.Address{
					Name:    "戴夫 收件人",
					Address: "dave.shoujianren@example.net",
				},
				&mail.Address{
					Name:    "伊夫 收件人",
					Address: "eve.shoujianren@example.net",
				},
			},
			ResentBcc: []*mail.Address{
				&mail.Address{
					Name:    "艾萨克 伊夫",
					Address: "isaac.shoujianren@example.net",
				},
				&mail.Address{
					Name:    "賈斯汀 伊夫",
					Address: "justin.shoujianren@example.net",
				},
			},
			ResentMessageID: "Message-Id-1@example.net",
			ExtraHeaders: map[string][]string{
				"X-Clacks-Overhead": []string{
					"GNU Terry Pratchett",
				},
				"X-Script/function/\t !\"#$%&'()*+,-./;<=>?@[\\]^_`{|}~": []string{
					"TEST VALUE 1\t !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_` abcdefghijklmnopqrstuvwxyz{|}~",
					"TEST VALUE 2\t !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_` abcdefghijklmnopqrstuvwxyz{|}~",
				},
			},
			ContentInfo: &email.ContentInfo{
				Type: "multipart/signed",
				TypeParams: map[string]string{
					"boundary": "SignedBoundaryString",
					"charset":  "gbk",
					"micalg":   "sha1",
					"protocol": "application/pkcs7-signature",
				},
				Disposition:       "",
				DispositionParams: map[string]string(nil), // p0
				TransferEncoding:  "quoted-printable",
				ID:                "",
				Charset:           "gbk",
			},
			Received: nil,
		},
		Text: "石室诗士施氏，嗜狮，誓食十狮。\n" +
			"氏时时适市视狮。\n" +
			"十时，适十狮适市。\n" +
			"是时，适施氏适市。\n" +
			"氏视是十狮，恃矢势，使是十狮逝世。\n" +
			"氏拾是十狮尸，适石室。\n" +
			"石室湿，氏使侍拭石室。\n" +
			"石室拭，氏始试食是十狮。\n" +
			"食时，始识是十狮尸，实十石狮尸。\n" +
			"试释是事。",
		EnrichedText: "",
		HTML:         "",
		Files: []*email.File{
			&email.File{
				FileType: "attachment",
				Name:     "smime.p7s",
				ContentInfo: &email.ContentInfo{
					Type: "application/pkcs7-signature",
					TypeParams: map[string]string{
						"name": "smime.p7s",
					},
					Disposition: "attachment",
					DispositionParams: map[string]string{
						"filename": "smime.p7s",
					},
					TransferEncoding: "base64",
					ID:               "",
					Charset:          "gbk",
				},
				Data: []byte{
					239, 191, 189, 28, 229, 153, 173, 117, 46, 239, 191, 189, 18, 97, 229, 175, 143,
					233, 186, 169, 231, 135, 142, 25, 58, 229, 145, 147, 229, 185, 191, 233, 164, 133,
					231, 146, 180, 31, 71, 27, 229, 140, 172, 239, 191, 189, 229, 145, 171, 239, 191,
					189, 229, 137, 154, 239, 191, 189, 29, 239, 191, 189, 19, 233, 155, 178, 80, 239,
					191, 189, 229, 145, 171, 239, 191, 189, 229, 137, 154, 239, 191, 189, 29, 239, 191,
					189, 19, 239, 191, 189, 49, 239, 191, 189, 127, 7, 28, 104, 33, 232, 145, 130, 71,
					82, 230, 160, 179, 38, 30, 239, 191, 189, 232, 135, 179, 233, 173, 134, 230, 145,
					165, 239, 191, 189, 239, 191, 189, 57, 239, 191, 189, 28, 113, 230, 145, 165, 239,
					191, 189, 38, 24, 231, 167, 139, 231, 187, 143, 108, 31, 71, 27, 229, 140, 172, 110,
					120, 239, 191, 189, 239, 191, 189, 229, 137, 154, 239, 191, 189, 29, 239, 191, 189,
					19, 239, 191, 189, 8, 114, 30, 17, 233, 153, 162, 58, 95, 232, 144, 159, 59, 26,
					18, 6, 124, 119, 232, 177, 139, 239, 191, 189, 21, 65, 229, 185, 191, 233, 164, 133,
				},
			},
		},
	}
	testEmailFromFile(t, fp, expectedEmail)
}

func TestParseEmailFinnishPlaintextUtf8OverBase64(t *testing.T) {
	fp := "tests/test_finnish_plaintext_utf-8_over_base64.txt"
	expectedEmail := &email.Email{
		Headers: email.Headers{
			Date: time.Time(time.Date(2019, 4, 1, 4, 55, 0, 0, time.UTC)),
			Sender: &mail.Address{
				Name:    "Alice Lähettäjä",
				Address: "alice.lahettaja@example.com",
			},
			From: []*mail.Address{
				&mail.Address{
					Name:    "Alice Lähettäjä",
					Address: "alice.lahettaja@example.com",
				},
				&mail.Address{
					Name:    "Alice Lähettäjä",
					Address: "alice.lahettaja@example.net",
				},
			},
			ReplyTo: []*mail.Address{
				&mail.Address{
					Name:    "Alice Lähettäjä",
					Address: "alice.lahettaja@example.net",
				},
			},
			To: []*mail.Address{
				&mail.Address{
					Name:    "Bob Vastaanottaja",
					Address: "bob.vastaanottaja@exaple.com",
				},
				&mail.Address{
					Name:    "Carol Vastaanottaja",
					Address: "carol.vastaanottaja@example.com",
				},
			},
			Cc: []*mail.Address{
				&mail.Address{
					Name:    "Dan Vastaanottaja",
					Address: "dan.vastaanottaja@example.com",
				},
				&mail.Address{
					Name:    "Eve Vastaanottaja",
					Address: "eve.vastaanottaja@example.com",
				},
			},
			Bcc: []*mail.Address{
				&mail.Address{
					Name:    "Frank Vastaanottaja",
					Address: "frank.vastaanottaja@example.com",
				},
				&mail.Address{
					Name:    "Grace Vastaanottaja",
					Address: "grace.vastaanottaja@example.com",
				},
			},
			MessageID: "Message-Id-1@example.com",
			InReplyTo: []string{
				"Message-Id-0@example.com",
			},
			References: []string{
				"Message-Id-0@example.com",
			},
			Subject:  "📧 Test Suomenkieliset pangrammit",
			Comments: "Message Header Comment",
			Keywords: []string{
				"Keyword 1",
				"Keyword 2",
			},
			ResentDate: time.Time(time.Date(2019, 4, 1, 4, 55, 0, 0, time.UTC)),
			ResentFrom: []*mail.Address{
				&mail.Address{
					Name:    "Alice Lähettäjä",
					Address: "alice.lahettaja@example.net",
				},
				&mail.Address{
					Name:    "Alice Lähettäjä",
					Address: "alice.lahettaja@example.com",
				},
			},
			ResentSender: &mail.Address{
				Name:    "Alice Lähettäjä",
				Address: "alice.lahettaja@example.net",
			},
			ResentTo: []*mail.Address{
				&mail.Address{
					Name:    "Bob Vastaanottaja",
					Address: "bob.vastaanottaja@exaple.com",
				},
				&mail.Address{
					Name:    "Carol Vastaanottaja",
					Address: "carol.vastaanottaja@example.net",
				},
			},
			ResentCc: []*mail.Address{
				&mail.Address{
					Name:    "Dan Vastaanottaja",
					Address: "dan.vastaanottaja@example.net",
				},
				&mail.Address{
					Name:    "Eve Vastaanottaja",
					Address: "eve.vastaanottaja@example.net",
				},
			},
			ResentBcc: []*mail.Address{
				&mail.Address{
					Name:    "Frank Vastaanottaja",
					Address: "frank.vastaanottaja@example.net",
				},
				&mail.Address{
					Name:    "Grace Vastaanottaja",
					Address: "grace.vastaanottaja@example.net",
				},
			},
			ResentMessageID: "Message-Id-1@example.net",
			ExtraHeaders: map[string][]string{
				"X-Clacks-Overhead": []string{
					"GNU Terry Pratchett",
				},
				"X-Script/function/\t !\"#$%&'()*+,-./;<=>?@[\\]^_`{|}~": []string{
					"TEST VALUE 1\t !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_` abcdefghijklmnopqrstuvwxyz{|}~",
					"TEST VALUE 2\t !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_` abcdefghijklmnopqrstuvwxyz{|}~",
				},
			},
			ContentInfo: &email.ContentInfo{
				Type: "text/plain",
				TypeParams: map[string]string{
					"charset": "utf-8",
				},
				Disposition:       "",
				DispositionParams: map[string]string(nil),
				TransferEncoding:  "base64",
				ID:                "",
				Charset:           "utf-8",
			},
			Received: nil,
		},
		Text: "Albert osti fagotin ja töräytti puhkuvan melodian.\n" +
			"Lorun sangen pieneksi hyödyksi jäivät suomen kirjaimet.\n" +
			"Hyvän lorun sangen pieneksi hyödyksi jäi suomen kirjaimet.\n" +
			"Fahrenheit ja Celsius yrjösivät Åsan backgammon-peliin, Volkswagenissa, daiquirin ja ZX81:n yhteisvaikutuksesta.\n" +
			"Charles Darwin jammaili Åken hevixylofonilla Qatarin yöpub Zeligissä.\n" +
			"Wieniläinen sioux:ta puhuva ökyzombie diggaa Åsan roquefort-tacoja.",
		EnrichedText: "",
		HTML:         "",
		Files:        nil,
	}
	testEmailFromFile(t, fp, expectedEmail)
}

func TestParseEmailFinnishPlaintextUtf8OverQuotedprintable(t *testing.T) {
	fp := "tests/test_finnish_plaintext_utf-8_over_quoted-printable.txt"
	expectedEmail := &email.Email{
		Headers: email.Headers{
			Date: time.Time(time.Date(2019, 4, 1, 4, 55, 0, 0, time.UTC)),
			Sender: &mail.Address{
				Name:    "Alice Lähettäjä",
				Address: "alice.lahettaja@example.com",
			},
			From: []*mail.Address{
				&mail.Address{
					Name:    "Alice Lähettäjä",
					Address: "alice.lahettaja@example.com",
				},
				&mail.Address{
					Name:    "Alice Lähettäjä",
					Address: "alice.lahettaja@example.net",
				},
			},
			ReplyTo: []*mail.Address{
				&mail.Address{
					Name:    "Alice Lähettäjä",
					Address: "alice.lahettaja@example.net",
				},
			},
			To: []*mail.Address{
				&mail.Address{
					Name:    "Bob Vastaanottaja",
					Address: "bob.vastaanottaja@exaple.com",
				},
				&mail.Address{
					Name:    "Carol Vastaanottaja",
					Address: "carol.vastaanottaja@example.com",
				},
			},
			Cc: []*mail.Address{
				&mail.Address{
					Name:    "Dan Vastaanottaja",
					Address: "dan.vastaanottaja@example.com",
				},
				&mail.Address{
					Name:    "Eve Vastaanottaja",
					Address: "eve.vastaanottaja@example.com",
				},
			},
			Bcc: []*mail.Address{
				&mail.Address{
					Name:    "Frank Vastaanottaja",
					Address: "frank.vastaanottaja@example.com",
				},
				&mail.Address{
					Name:    "Grace Vastaanottaja",
					Address: "grace.vastaanottaja@example.com",
				},
			},
			MessageID: "Message-Id-1@example.com",
			InReplyTo: []string{
				"Message-Id-0@example.com",
			},
			References: []string{
				"Message-Id-0@example.com",
			},
			Subject:  "📧 Test Suomenkieliset pangrammit",
			Comments: "Message Header Comment",
			Keywords: []string{
				"Keyword 1",
				"Keyword 2",
			},
			ResentDate: time.Time(time.Date(2019, 4, 1, 4, 55, 0, 0, time.UTC)),
			ResentFrom: []*mail.Address{
				&mail.Address{
					Name:    "Alice Lähettäjä",
					Address: "alice.lahettaja@example.net",
				},
				&mail.Address{
					Name:    "Alice Lähettäjä",
					Address: "alice.lahettaja@example.com",
				},
			},
			ResentSender: &mail.Address{
				Name:    "Alice Lähettäjä",
				Address: "alice.lahettaja@example.net",
			},
			ResentTo: []*mail.Address{
				&mail.Address{
					Name:    "Bob Vastaanottaja",
					Address: "bob.vastaanottaja@exaple.com",
				},
				&mail.Address{
					Name:    "Carol Vastaanottaja",
					Address: "carol.vastaanottaja@example.net",
				},
			},
			ResentCc: []*mail.Address{
				&mail.Address{
					Name:    "Dan Vastaanottaja",
					Address: "dan.vastaanottaja@example.net",
				},
				&mail.Address{
					Name:    "Eve Vastaanottaja",
					Address: "eve.vastaanottaja@example.net",
				},
			},
			ResentBcc: []*mail.Address{
				&mail.Address{
					Name:    "Frank Vastaanottaja",
					Address: "frank.vastaanottaja@example.net",
				},
				&mail.Address{
					Name:    "Grace Vastaanottaja",
					Address: "grace.vastaanottaja@example.net",
				},
			},
			ResentMessageID: "Message-Id-1@example.net",
			ExtraHeaders: map[string][]string{
				"X-Clacks-Overhead": []string{
					"GNU Terry Pratchett",
				},
				"X-Script/function/\t !\"#$%&'()*+,-./;<=>?@[\\]^_`{|}~": []string{
					"TEST VALUE 1\t !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_` abcdefghijklmnopqrstuvwxyz{|}~",
					"TEST VALUE 2\t !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_` abcdefghijklmnopqrstuvwxyz{|}~",
				},
			},
			ContentInfo: &email.ContentInfo{
				Type: "text/plain",
				TypeParams: map[string]string{
					"charset": "utf-8",
				},
				Disposition:       "",
				DispositionParams: map[string]string(nil),
				TransferEncoding:  "quoted-printable",
				ID:                "",
				Charset:           "utf-8",
			},
			Received: nil,
		},
		Text: "Albert osti fagotin ja töräytti puhkuvan melodian.\n" +
			"Lorun sangen pieneksi hyödyksi jäivät suomen kirjaimet.\n" +
			"Hyvän lorun sangen pieneksi hyödyksi jäi suomen kirjaimet.\n" +
			"Fahrenheit ja Celsius yrjösivät Åsan backgammon-peliin, Volkswagenissa, daiquirin ja ZX81:n yhteisvaikutuksesta.\n" +
			"Charles Darwin jammaili Åken hevixylofonilla Qatarin yöpub Zeligissä.\n" +
			"Wieniläinen sioux:ta puhuva ökyzombie diggaa Åsan roquefort-tacoja.",
		EnrichedText: "",
		HTML:         "",
		Files:        nil,
	}
	testEmailFromFile(t, fp, expectedEmail)
}

func TestParseEmailFinnishPlaintextIso885915OverBase64(t *testing.T) {
	fp := "tests/test_finnish_plaintext_iso-8859-15_over_base64.txt"
	expectedEmail := &email.Email{
		Headers: email.Headers{
			Date: time.Time(time.Date(2019, 4, 1, 4, 55, 0, 0, time.UTC)),
			Sender: &mail.Address{
				Name:    "Alice Lähettäjä",
				Address: "alice.lahettaja@example.com",
			},
			From: []*mail.Address{
				&mail.Address{
					Name:    "Alice Lähettäjä",
					Address: "alice.lahettaja@example.com",
				},
				&mail.Address{
					Name:    "Alice Lähettäjä",
					Address: "alice.lahettaja@example.net",
				},
			},
			ReplyTo: []*mail.Address{
				&mail.Address{
					Name:    "Alice Lähettäjä",
					Address: "alice.lahettaja@example.net",
				},
			},
			To: []*mail.Address{
				&mail.Address{
					Name:    "Bob Vastaanottaja",
					Address: "bob.vastaanottaja@exaple.com",
				},
				&mail.Address{
					Name:    "Carol Vastaanottaja",
					Address: "carol.vastaanottaja@example.com",
				},
			},
			Cc: []*mail.Address{
				&mail.Address{
					Name:    "Dan Vastaanottaja",
					Address: "dan.vastaanottaja@example.com",
				},
				&mail.Address{
					Name:    "Eve Vastaanottaja",
					Address: "eve.vastaanottaja@example.com",
				},
			},
			Bcc: []*mail.Address{
				&mail.Address{
					Name:    "Frank Vastaanottaja",
					Address: "frank.vastaanottaja@example.com",
				},
				&mail.Address{
					Name:    "Grace Vastaanottaja",
					Address: "grace.vastaanottaja@example.com",
				},
			},
			MessageID: "Message-Id-1@example.com",
			InReplyTo: []string{
				"Message-Id-0@example.com",
			},
			References: []string{
				"Message-Id-0@example.com",
			},
			Subject:  "📧 Test Suomenkieliset pangrammit",
			Comments: "Message Header Comment",
			Keywords: []string{
				"Keyword 1",
				"Keyword 2",
			},
			ResentDate: time.Time(time.Date(2019, 4, 1, 4, 55, 0, 0, time.UTC)),
			ResentFrom: []*mail.Address{
				&mail.Address{
					Name:    "Alice Lähettäjä",
					Address: "alice.lahettaja@example.net",
				},
				&mail.Address{
					Name:    "Alice Lähettäjä",
					Address: "alice.lahettaja@example.com",
				},
			},
			ResentSender: &mail.Address{
				Name:    "Alice Lähettäjä",
				Address: "alice.lahettaja@example.net",
			},
			ResentTo: []*mail.Address{
				&mail.Address{
					Name:    "Bob Vastaanottaja",
					Address: "bob.vastaanottaja@exaple.com",
				},
				&mail.Address{
					Name:    "Carol Vastaanottaja",
					Address: "carol.vastaanottaja@example.net",
				},
			},
			ResentCc: []*mail.Address{
				&mail.Address{
					Name:    "Dan Vastaanottaja",
					Address: "dan.vastaanottaja@example.net",
				},
				&mail.Address{
					Name:    "Eve Vastaanottaja",
					Address: "eve.vastaanottaja@example.net",
				},
			},
			ResentBcc: []*mail.Address{
				&mail.Address{
					Name:    "Frank Vastaanottaja",
					Address: "frank.vastaanottaja@example.net",
				},
				&mail.Address{
					Name:    "Grace Vastaanottaja",
					Address: "grace.vastaanottaja@example.net",
				},
			},
			ResentMessageID: "Message-Id-1@example.net",
			ExtraHeaders: map[string][]string{
				"X-Clacks-Overhead": []string{
					"GNU Terry Pratchett",
				},
				"X-Script/function/\t !\"#$%&'()*+,-./;<=>?@[\\]^_`{|}~": []string{
					"TEST VALUE 1\t !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_` abcdefghijklmnopqrstuvwxyz{|}~",
					"TEST VALUE 2\t !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_` abcdefghijklmnopqrstuvwxyz{|}~",
				},
			},
			ContentInfo: &email.ContentInfo{
				Type: "text/plain",
				TypeParams: map[string]string{
					"charset": "iso-8859-15",
				},
				Disposition:       "",
				DispositionParams: map[string]string(nil),
				TransferEncoding:  "base64",
				ID:                "",
				Charset:           "iso-8859-15",
			},
			Received: nil,
		},
		Text: "Albert osti fagotin ja töräytti puhkuvan melodian.\n" +
			"Lorun sangen pieneksi hyödyksi jäivät suomen kirjaimet.\n" +
			"Hyvän lorun sangen pieneksi hyödyksi jäi suomen kirjaimet.\n" +
			"Fahrenheit ja Celsius yrjösivät Åsan backgammon-peliin, Volkswagenissa, daiquirin ja ZX81:n yhteisvaikutuksesta.\n" +
			"Charles Darwin jammaili Åken hevixylofonilla Qatarin yöpub Zeligissä.\n" +
			"Wieniläinen sioux:ta puhuva ökyzombie diggaa Åsan roquefort-tacoja.",
		EnrichedText: "",
		HTML:         "",
		Files:        nil,
	}
	testEmailFromFile(t, fp, expectedEmail)
}

func TestParseEmailFinnishPlaintextIso885915OverQuotedprintable(t *testing.T) {
	fp := "tests/test_finnish_plaintext_iso-8859-15_over_quoted-printable.txt"
	expectedEmail := &email.Email{
		Headers: email.Headers{
			Date: time.Time(time.Date(2019, 4, 1, 4, 55, 0, 0, time.UTC)),
			Sender: &mail.Address{
				Name:    "Alice Lähettäjä",
				Address: "alice.lahettaja@example.com",
			},
			From: []*mail.Address{
				&mail.Address{
					Name:    "Alice Lähettäjä",
					Address: "alice.lahettaja@example.com",
				},
				&mail.Address{
					Name:    "Alice Lähettäjä",
					Address: "alice.lahettaja@example.net",
				},
			},
			ReplyTo: []*mail.Address{
				&mail.Address{
					Name:    "Alice Lähettäjä",
					Address: "alice.lahettaja@example.net",
				},
			},
			To: []*mail.Address{
				&mail.Address{
					Name:    "Bob Vastaanottaja",
					Address: "bob.vastaanottaja@exaple.com",
				},
				&mail.Address{
					Name:    "Carol Vastaanottaja",
					Address: "carol.vastaanottaja@example.com",
				},
			},
			Cc: []*mail.Address{
				&mail.Address{
					Name:    "Dan Vastaanottaja",
					Address: "dan.vastaanottaja@example.com",
				},
				&mail.Address{
					Name:    "Eve Vastaanottaja",
					Address: "eve.vastaanottaja@example.com",
				},
			},
			Bcc: []*mail.Address{
				&mail.Address{
					Name:    "Frank Vastaanottaja",
					Address: "frank.vastaanottaja@example.com",
				},
				&mail.Address{
					Name:    "Grace Vastaanottaja",
					Address: "grace.vastaanottaja@example.com",
				},
			},
			MessageID: "Message-Id-1@example.com",
			InReplyTo: []string{
				"Message-Id-0@example.com",
			},
			References: []string{
				"Message-Id-0@example.com",
			},
			Subject:  "📧 Test Suomenkieliset pangrammit",
			Comments: "Message Header Comment",
			Keywords: []string{
				"Keyword 1",
				"Keyword 2",
			},
			ResentDate: time.Time(time.Date(2019, 4, 1, 4, 55, 0, 0, time.UTC)),
			ResentFrom: []*mail.Address{
				&mail.Address{
					Name:    "Alice Lähettäjä",
					Address: "alice.lahettaja@example.net",
				},
				&mail.Address{
					Name:    "Alice Lähettäjä",
					Address: "alice.lahettaja@example.com",
				},
			},
			ResentSender: &mail.Address{
				Name:    "Alice Lähettäjä",
				Address: "alice.lahettaja@example.net",
			},
			ResentTo: []*mail.Address{
				&mail.Address{
					Name:    "Bob Vastaanottaja",
					Address: "bob.vastaanottaja@exaple.com",
				},
				&mail.Address{
					Name:    "Carol Vastaanottaja",
					Address: "carol.vastaanottaja@example.net",
				},
			},
			ResentCc: []*mail.Address{
				&mail.Address{
					Name:    "Dan Vastaanottaja",
					Address: "dan.vastaanottaja@example.net",
				},
				&mail.Address{
					Name:    "Eve Vastaanottaja",
					Address: "eve.vastaanottaja@example.net",
				},
			},
			ResentBcc: []*mail.Address{
				&mail.Address{
					Name:    "Frank Vastaanottaja",
					Address: "frank.vastaanottaja@example.net",
				},
				&mail.Address{
					Name:    "Grace Vastaanottaja",
					Address: "grace.vastaanottaja@example.net",
				},
			},
			ResentMessageID: "Message-Id-1@example.net",
			ExtraHeaders: map[string][]string{
				"X-Clacks-Overhead": []string{
					"GNU Terry Pratchett",
				},
				"X-Script/function/\t !\"#$%&'()*+,-./;<=>?@[\\]^_`{|}~": []string{
					"TEST VALUE 1\t !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_` abcdefghijklmnopqrstuvwxyz{|}~",
					"TEST VALUE 2\t !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_` abcdefghijklmnopqrstuvwxyz{|}~",
				},
			},
			ContentInfo: &email.ContentInfo{
				Type: "text/plain",
				TypeParams: map[string]string{
					"charset": "iso-8859-15",
				},
				Disposition:       "",
				DispositionParams: map[string]string(nil),
				TransferEncoding:  "quoted-printable",
				ID:                "",
				Charset:           "iso-8859-15",
			},
			Received: nil,
		},
		Text: "Albert osti fagotin ja töräytti puhkuvan melodian.\n" +
			"Lorun sangen pieneksi hyödyksi jäivät suomen kirjaimet.\n" +
			"Hyvän lorun sangen pieneksi hyödyksi jäi suomen kirjaimet.\n" +
			"Fahrenheit ja Celsius yrjösivät Åsan backgammon-peliin, Volkswagenissa, daiquirin ja ZX81:n yhteisvaikutuksesta.\n" +
			"Charles Darwin jammaili Åken hevixylofonilla Qatarin yöpub Zeligissä.\n" +
			"Wieniläinen sioux:ta puhuva ökyzombie diggaa Åsan roquefort-tacoja.",
		EnrichedText: "",
		HTML:         "",
		Files:        nil,
	}
	testEmailFromFile(t, fp, expectedEmail)
}

func TestParseEmailFinnishMultipartRelatedUtf8OverBase64(t *testing.T) {
	fp := "tests/test_finnish_multipart_related_utf-8_over_base64.txt"
	expectedEmail := &email.Email{
		Headers: email.Headers{
			Date: time.Time(time.Date(2019, 4, 1, 4, 55, 0, 0, time.UTC)),
			Sender: &mail.Address{
				Name:    "Alice Lähettäjä",
				Address: "alice.lahettaja@example.com",
			},
			From: []*mail.Address{
				&mail.Address{
					Name:    "Alice Lähettäjä",
					Address: "alice.lahettaja@example.com",
				},
				&mail.Address{
					Name:    "Alice Lähettäjä",
					Address: "alice.lahettaja@example.net",
				},
			},
			ReplyTo: []*mail.Address{
				&mail.Address{
					Name:    "Alice Lähettäjä",
					Address: "alice.lahettaja@example.net",
				},
			},
			To: []*mail.Address{
				&mail.Address{
					Name:    "Bob Vastaanottaja",
					Address: "bob.vastaanottaja@exaple.com",
				},
				&mail.Address{
					Name:    "Carol Vastaanottaja",
					Address: "carol.vastaanottaja@example.com",
				},
			},
			Cc: []*mail.Address{
				&mail.Address{
					Name:    "Dan Vastaanottaja",
					Address: "dan.vastaanottaja@example.com",
				},
				&mail.Address{
					Name:    "Eve Vastaanottaja",
					Address: "eve.vastaanottaja@example.com",
				},
			},
			Bcc: []*mail.Address{
				&mail.Address{
					Name:    "Frank Vastaanottaja",
					Address: "frank.vastaanottaja@example.com",
				},
				&mail.Address{
					Name:    "Grace Vastaanottaja",
					Address: "grace.vastaanottaja@example.com",
				},
			},
			MessageID: "Message-Id-1@example.com",
			InReplyTo: []string{
				"Message-Id-0@example.com",
			},
			References: []string{
				"Message-Id-0@example.com",
			},
			Subject:  "📧 Test Suomenkieliset pangrammit",
			Comments: "Message Header Comment",
			Keywords: []string{
				"Keyword 1",
				"Keyword 2",
			},
			ResentDate: time.Time(time.Date(2019, 4, 1, 4, 55, 0, 0, time.UTC)),
			ResentFrom: []*mail.Address{
				&mail.Address{
					Name:    "Alice Lähettäjä",
					Address: "alice.lahettaja@example.net",
				},
				&mail.Address{
					Name:    "Alice Lähettäjä",
					Address: "alice.lahettaja@example.com",
				},
			},
			ResentSender: &mail.Address{
				Name:    "Alice Lähettäjä",
				Address: "alice.lahettaja@example.net",
			},
			ResentTo: []*mail.Address{
				&mail.Address{
					Name:    "Bob Vastaanottaja",
					Address: "bob.vastaanottaja@exaple.com",
				},
				&mail.Address{
					Name:    "Carol Vastaanottaja",
					Address: "carol.vastaanottaja@example.net",
				},
			},
			ResentCc: []*mail.Address{
				&mail.Address{
					Name:    "Dan Vastaanottaja",
					Address: "dan.vastaanottaja@example.net",
				},
				&mail.Address{
					Name:    "Eve Vastaanottaja",
					Address: "eve.vastaanottaja@example.net",
				},
			},
			ResentBcc: []*mail.Address{
				&mail.Address{
					Name:    "Frank Vastaanottaja",
					Address: "frank.vastaanottaja@example.net",
				},
				&mail.Address{
					Name:    "Grace Vastaanottaja",
					Address: "grace.vastaanottaja@example.net",
				},
			},
			ResentMessageID: "Message-Id-1@example.net",
			ExtraHeaders: map[string][]string{
				"X-Clacks-Overhead": []string{
					"GNU Terry Pratchett",
				},
				"X-Script/function/\t !\"#$%&'()*+,-./;<=>?@[\\]^_`{|}~": []string{
					"TEST VALUE 1\t !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_` abcdefghijklmnopqrstuvwxyz{|}~",
					"TEST VALUE 2\t !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_` abcdefghijklmnopqrstuvwxyz{|}~",
				},
			},
			ContentInfo: &email.ContentInfo{
				Type: "multipart/related",
				TypeParams: map[string]string{
					"boundary": "RelatedBoundaryString",
					"charset":  "utf-8",
				},
				Disposition:       "",
				DispositionParams: map[string]string(nil), // p0
				TransferEncoding:  "base64",
				ID:                "",
				Charset:           "utf-8",
			},
			Received: nil,
		},
		Text: "Albert osti fagotin ja töräytti puhkuvan melodian.\n" +
			"Lorun sangen pieneksi hyödyksi jäivät suomen kirjaimet.\n" +
			"Hyvän lorun sangen pieneksi hyödyksi jäi suomen kirjaimet.\n" +
			"Fahrenheit ja Celsius yrjösivät Åsan backgammon-peliin, Volkswagenissa, daiquirin ja ZX81:n yhteisvaikutuksesta.\n" +
			"Charles Darwin jammaili Åken hevixylofonilla Qatarin yöpub Zeligissä.\n" +
			"Wieniläinen sioux:ta puhuva ökyzombie diggaa Åsan roquefort-tacoja.",
		EnrichedText: "<bold>Albert osti fagotin ja töräytti puhkuvan melodian.</bold>\n" +
			"<italic>Lorun sangen pieneksi hyödyksi jäivät suomen kirjaimet.</italic>\n" +
			"<fixed>Hyvän lorun sangen pieneksi hyödyksi jäi suomen kirjaimet.</fixed>\n" +
			"<underline>Fahrenheit ja Celsius yrjösivät Åsan backgammon-peliin, Volkswagenissa, daiquirin ja ZX81:n yhteisvaikutuksesta.</underline>\n" +
			"Charles Darwin jammaili Åken hevixylofonilla Qatarin yöpub Zeligissä.\n" +
			"Wieniläinen sioux:ta puhuva ökyzombie diggaa Åsan roquefort-tacoja.",
		HTML: "<html>\n" +
			"<div dir=\"ltr\">\n" +
			"<p>Albert osti fagotin ja töräytti puhkuvan melodian.</p>\n" +
			"<p>Lorun sangen pieneksi hyödyksi jäivät suomen kirjaimet.</p>\n" +
			"<p>Hyvän lorun sangen pieneksi hyödyksi jäi suomen kirjaimet.</p>\n" +
			"<p>Fahrenheit ja Celsius yrjösivät Åsan backgammon-peliin, Volkswagenissa, daiquirin ja ZX81:n yhteisvaikutuksesta.</p>\n" +
			"<p>Charles Darwin jammaili Åken hevixylofonilla Qatarin yöpub Zeligissä.</p>\n" +
			"<p>Wieniläinen sioux:ta puhuva ökyzombie diggaa Åsan roquefort-tacoja.</p>\n" +
			"</div>\n" +
			"</html>",
		Files: []*email.File{
			&email.File{
				FileType: "inline",
				Name:     "inline-jpg-image-filename.jpg",
				ContentInfo: &email.ContentInfo{
					Type: "image/jpeg",
					TypeParams: map[string]string{
						"name": "inline-jpg-image-name.jpg",
					},
					Disposition: "inline",
					DispositionParams: map[string]string{
						"filename": "inline-jpg-image-filename.jpg",
					},
					TransferEncoding: "base64",
					ID:               "inline-jpg-image.jpg@example.com",
					Charset:          "utf-8",
				},
				Data: []byte{
					239, 191, 189, 239, 191, 189, 239, 191, 189, 239, 191, 189, 0, 67, 0, 3, 2, 2, 2,
					2, 2, 3, 2, 2, 2, 3, 3, 3, 3, 4, 6, 4, 4, 4, 4, 4, 8, 6, 6, 5, 6, 9, 8, 10, 10, 9,
					8, 9, 9, 10, 12, 15, 12, 10, 11, 14, 11, 9, 9, 13, 17, 13, 14, 15, 16, 16, 17, 16,
					10, 12, 18, 19, 18, 16, 19, 15, 16, 16, 16, 239, 191, 189, 239, 191, 189, 0, 11,
					8, 0, 1, 0, 1, 1, 1, 17, 0, 239, 191, 189, 239, 191, 189, 0, 6, 0, 16, 16, 5, 239,
					191, 189, 239, 191, 189, 0, 8, 1, 1, 0, 0, 63, 0, 239, 191, 189, 239, 191, 189, 32,
					239, 191, 189, 239, 191, 189,
				},
			},
		},
	}
	testEmailFromFile(t, fp, expectedEmail)
}

func TestParseEmailFinnishMultipartRelatedUtf8OverQuotedprintable(t *testing.T) {
	fp := "tests/test_finnish_multipart_related_utf-8_over_quoted-printable.txt"
	expectedEmail := &email.Email{
		Headers: email.Headers{
			Date: time.Time(time.Date(2019, 4, 1, 4, 55, 0, 0, time.UTC)),
			Sender: &mail.Address{
				Name:    "Alice Lähettäjä",
				Address: "alice.lahettaja@example.com",
			},
			From: []*mail.Address{
				&mail.Address{
					Name:    "Alice Lähettäjä",
					Address: "alice.lahettaja@example.com",
				},
				&mail.Address{
					Name:    "Alice Lähettäjä",
					Address: "alice.lahettaja@example.net",
				},
			},
			ReplyTo: []*mail.Address{
				&mail.Address{
					Name:    "Alice Lähettäjä",
					Address: "alice.lahettaja@example.net",
				},
			},
			To: []*mail.Address{
				&mail.Address{
					Name:    "Bob Vastaanottaja",
					Address: "bob.vastaanottaja@exaple.com",
				},
				&mail.Address{
					Name:    "Carol Vastaanottaja",
					Address: "carol.vastaanottaja@example.com",
				},
			},
			Cc: []*mail.Address{
				&mail.Address{
					Name:    "Dan Vastaanottaja",
					Address: "dan.vastaanottaja@example.com",
				},
				&mail.Address{
					Name:    "Eve Vastaanottaja",
					Address: "eve.vastaanottaja@example.com",
				},
			},
			Bcc: []*mail.Address{
				&mail.Address{
					Name:    "Frank Vastaanottaja",
					Address: "frank.vastaanottaja@example.com",
				},
				&mail.Address{
					Name:    "Grace Vastaanottaja",
					Address: "grace.vastaanottaja@example.com",
				},
			},
			MessageID: "Message-Id-1@example.com",
			InReplyTo: []string{
				"Message-Id-0@example.com",
			},
			References: []string{
				"Message-Id-0@example.com",
			},
			Subject:  "📧 Test Suomenkieliset pangrammit",
			Comments: "Message Header Comment",
			Keywords: []string{
				"Keyword 1",
				"Keyword 2",
			},
			ResentDate: time.Time(time.Date(2019, 4, 1, 4, 55, 0, 0, time.UTC)),
			ResentFrom: []*mail.Address{
				&mail.Address{
					Name:    "Alice Lähettäjä",
					Address: "alice.lahettaja@example.net",
				},
				&mail.Address{
					Name:    "Alice Lähettäjä",
					Address: "alice.lahettaja@example.com",
				},
			},
			ResentSender: &mail.Address{
				Name:    "Alice Lähettäjä",
				Address: "alice.lahettaja@example.net",
			},
			ResentTo: []*mail.Address{
				&mail.Address{
					Name:    "Bob Vastaanottaja",
					Address: "bob.vastaanottaja@exaple.com",
				},
				&mail.Address{
					Name:    "Carol Vastaanottaja",
					Address: "carol.vastaanottaja@example.net",
				},
			},
			ResentCc: []*mail.Address{
				&mail.Address{
					Name:    "Dan Vastaanottaja",
					Address: "dan.vastaanottaja@example.net",
				},
				&mail.Address{
					Name:    "Eve Vastaanottaja",
					Address: "eve.vastaanottaja@example.net",
				},
			},
			ResentBcc: []*mail.Address{
				&mail.Address{
					Name:    "Frank Vastaanottaja",
					Address: "frank.vastaanottaja@example.net",
				},
				&mail.Address{
					Name:    "Grace Vastaanottaja",
					Address: "grace.vastaanottaja@example.net",
				},
			},
			ResentMessageID: "Message-Id-1@example.net",
			ExtraHeaders: map[string][]string{
				"X-Clacks-Overhead": []string{
					"GNU Terry Pratchett",
				},
				"X-Script/function/\t !\"#$%&'()*+,-./;<=>?@[\\]^_`{|}~": []string{
					"TEST VALUE 1\t !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_` abcdefghijklmnopqrstuvwxyz{|}~",
					"TEST VALUE 2\t !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_` abcdefghijklmnopqrstuvwxyz{|}~",
				},
			},
			ContentInfo: &email.ContentInfo{
				Type: "multipart/related",
				TypeParams: map[string]string{
					"boundary": "RelatedBoundaryString",
					"charset":  "utf-8",
				},
				Disposition:       "",
				DispositionParams: map[string]string(nil), // p0
				TransferEncoding:  "quoted-printable",
				ID:                "",
				Charset:           "utf-8",
			},
			Received: nil,
		},
		Text: "Albert osti fagotin ja töräytti puhkuvan melodian.\n" +
			"Lorun sangen pieneksi hyödyksi jäivät suomen kirjaimet.\n" +
			"Hyvän lorun sangen pieneksi hyödyksi jäi suomen kirjaimet.\n" +
			"Fahrenheit ja Celsius yrjösivät Åsan backgammon-peliin, Volkswagenissa, daiquirin ja ZX81:n yhteisvaikutuksesta.\n" +
			"Charles Darwin jammaili Åken hevixylofonilla Qatarin yöpub Zeligissä.\n" +
			"Wieniläinen sioux:ta puhuva ökyzombie diggaa Åsan roquefort-tacoja.",
		EnrichedText: "<bold>Albert osti fagotin ja töräytti puhkuvan melodian.</bold>\n" +
			"<italic>Lorun sangen pieneksi hyödyksi jäivät suomen kirjaimet.</italic>\n" +
			"<fixed>Hyvän lorun sangen pieneksi hyödyksi jäi suomen kirjaimet.</fixed>\n" +
			"<underline>Fahrenheit ja Celsius yrjösivät Åsan backgammon-peliin, Volkswagenissa, daiquirin ja ZX81:n yhteisvaikutuksesta.</underline>\n" +
			"Charles Darwin jammaili Åken hevixylofonilla Qatarin yöpub Zeligissä.\n" +
			"Wieniläinen sioux:ta puhuva ökyzombie diggaa Åsan roquefort-tacoja.",
		HTML: "<html>\n" +
			"<div dir=\"ltr\">\n" +
			"<p>Albert osti fagotin ja töräytti puhkuvan melodian.</p>\n" +
			"<p>Lorun sangen pieneksi hyödyksi jäivät suomen kirjaimet.</p>\n" +
			"<p>Hyvän lorun sangen pieneksi hyödyksi jäi suomen kirjaimet.</p>\n" +
			"<p>Fahrenheit ja Celsius yrjösivät Åsan backgammon-peliin, Volkswagenissa, daiquirin ja ZX81:n yhteisvaikutuksesta.</p>\n" +
			"<p>Charles Darwin jammaili Åken hevixylofonilla Qatarin yöpub Zeligissä.</p>\n" +
			"<p>Wieniläinen sioux:ta puhuva ökyzombie diggaa Åsan roquefort-tacoja.</p>\n" +
			"</div>\n" +
			"</html>",
		Files: []*email.File{
			&email.File{
				FileType: "inline",
				Name:     "inline-jpg-image-filename.jpg",
				ContentInfo: &email.ContentInfo{
					Type: "image/jpeg",
					TypeParams: map[string]string{
						"name": "inline-jpg-image-name.jpg",
					},
					Disposition: "inline",
					DispositionParams: map[string]string{
						"filename": "inline-jpg-image-filename.jpg",
					},
					TransferEncoding: "base64",
					ID:               "inline-jpg-image.jpg@example.com",
					Charset:          "utf-8",
				},
				Data: []byte{
					239, 191, 189, 239, 191, 189, 239, 191, 189, 239, 191, 189, 0, 67, 0, 3, 2, 2, 2,
					2, 2, 3, 2, 2, 2, 3, 3, 3, 3, 4, 6, 4, 4, 4, 4, 4, 8, 6, 6, 5, 6, 9, 8, 10, 10, 9,
					8, 9, 9, 10, 12, 15, 12, 10, 11, 14, 11, 9, 9, 13, 17, 13, 14, 15, 16, 16, 17, 16,
					10, 12, 18, 19, 18, 16, 19, 15, 16, 16, 16, 239, 191, 189, 239, 191, 189, 0, 11,
					8, 0, 1, 0, 1, 1, 1, 17, 0, 239, 191, 189, 239, 191, 189, 0, 6, 0, 16, 16, 5, 239,
					191, 189, 239, 191, 189, 0, 8, 1, 1, 0, 0, 63, 0, 239, 191, 189, 239, 191, 189, 32,
					239, 191, 189, 239, 191, 189,
				},
			},
		},
	}
	testEmailFromFile(t, fp, expectedEmail)
}

func TestParseEmailFinnishMultipartRelatedIso885915OverBase64(t *testing.T) {
	fp := "tests/test_finnish_multipart_related_iso-8859-15_over_base64.txt"
	expectedEmail := &email.Email{
		Headers: email.Headers{
			Date: time.Time(time.Date(2019, 4, 1, 4, 55, 0, 0, time.UTC)),
			Sender: &mail.Address{
				Name:    "Alice Lähettäjä",
				Address: "alice.lahettaja@example.com",
			},
			From: []*mail.Address{
				&mail.Address{
					Name:    "Alice Lähettäjä",
					Address: "alice.lahettaja@example.com",
				},
				&mail.Address{
					Name:    "Alice Lähettäjä",
					Address: "alice.lahettaja@example.net",
				},
			},
			ReplyTo: []*mail.Address{
				&mail.Address{
					Name:    "Alice Lähettäjä",
					Address: "alice.lahettaja@example.net",
				},
			},
			To: []*mail.Address{
				&mail.Address{
					Name:    "Bob Vastaanottaja",
					Address: "bob.vastaanottaja@exaple.com",
				},
				&mail.Address{
					Name:    "Carol Vastaanottaja",
					Address: "carol.vastaanottaja@example.com",
				},
			},
			Cc: []*mail.Address{
				&mail.Address{
					Name:    "Dan Vastaanottaja",
					Address: "dan.vastaanottaja@example.com",
				},
				&mail.Address{
					Name:    "Eve Vastaanottaja",
					Address: "eve.vastaanottaja@example.com",
				},
			},
			Bcc: []*mail.Address{
				&mail.Address{
					Name:    "Frank Vastaanottaja",
					Address: "frank.vastaanottaja@example.com",
				},
				&mail.Address{
					Name:    "Grace Vastaanottaja",
					Address: "grace.vastaanottaja@example.com",
				},
			},
			MessageID: "Message-Id-1@example.com",
			InReplyTo: []string{
				"Message-Id-0@example.com",
			},
			References: []string{
				"Message-Id-0@example.com",
			},
			Subject:  "📧 Test Suomenkieliset pangrammit",
			Comments: "Message Header Comment",
			Keywords: []string{
				"Keyword 1",
				"Keyword 2",
			},
			ResentDate: time.Time(time.Date(2019, 4, 1, 4, 55, 0, 0, time.UTC)),
			ResentFrom: []*mail.Address{
				&mail.Address{
					Name:    "Alice Lähettäjä",
					Address: "alice.lahettaja@example.net",
				},
				&mail.Address{
					Name:    "Alice Lähettäjä",
					Address: "alice.lahettaja@example.com",
				},
			},
			ResentSender: &mail.Address{
				Name:    "Alice Lähettäjä",
				Address: "alice.lahettaja@example.net",
			},
			ResentTo: []*mail.Address{
				&mail.Address{
					Name:    "Bob Vastaanottaja",
					Address: "bob.vastaanottaja@exaple.com",
				},
				&mail.Address{
					Name:    "Carol Vastaanottaja",
					Address: "carol.vastaanottaja@example.net",
				},
			},
			ResentCc: []*mail.Address{
				&mail.Address{
					Name:    "Dan Vastaanottaja",
					Address: "dan.vastaanottaja@example.net",
				},
				&mail.Address{
					Name:    "Eve Vastaanottaja",
					Address: "eve.vastaanottaja@example.net",
				},
			},
			ResentBcc: []*mail.Address{
				&mail.Address{
					Name:    "Frank Vastaanottaja",
					Address: "frank.vastaanottaja@example.net",
				},
				&mail.Address{
					Name:    "Grace Vastaanottaja",
					Address: "grace.vastaanottaja@example.net",
				},
			},
			ResentMessageID: "Message-Id-1@example.net",
			ExtraHeaders: map[string][]string{
				"X-Clacks-Overhead": []string{
					"GNU Terry Pratchett",
				},
				"X-Script/function/\t !\"#$%&'()*+,-./;<=>?@[\\]^_`{|}~": []string{
					"TEST VALUE 1\t !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_` abcdefghijklmnopqrstuvwxyz{|}~",
					"TEST VALUE 2\t !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_` abcdefghijklmnopqrstuvwxyz{|}~",
				},
			},
			ContentInfo: &email.ContentInfo{
				Type: "multipart/related",
				TypeParams: map[string]string{
					"boundary": "RelatedBoundaryString",
					"charset":  "iso-8859-15",
				},
				Disposition:       "",
				DispositionParams: map[string]string(nil), // p0
				TransferEncoding:  "base64",
				ID:                "",
				Charset:           "iso-8859-15",
			},
			Received: nil,
		},
		Text: "Albert osti fagotin ja töräytti puhkuvan melodian.\n" +
			"Lorun sangen pieneksi hyödyksi jäivät suomen kirjaimet.\n" +
			"Hyvän lorun sangen pieneksi hyödyksi jäi suomen kirjaimet.\n" +
			"Fahrenheit ja Celsius yrjösivät Åsan backgammon-peliin, Volkswagenissa, daiquirin ja ZX81:n yhteisvaikutuksesta.\n" +
			"Charles Darwin jammaili Åken hevixylofonilla Qatarin yöpub Zeligissä.\n" +
			"Wieniläinen sioux:ta puhuva ökyzombie diggaa Åsan roquefort-tacoja.",
		EnrichedText: "<bold>Albert osti fagotin ja töräytti puhkuvan melodian.</bold>\n" +
			"<italic>Lorun sangen pieneksi hyödyksi jäivät suomen kirjaimet.</italic>\n" +
			"<fixed>Hyvän lorun sangen pieneksi hyödyksi jäi suomen kirjaimet.</fixed>\n" +
			"<underline>Fahrenheit ja Celsius yrjösivät Åsan backgammon-peliin, Volkswagenissa, daiquirin ja ZX81:n yhteisvaikutuksesta.</underline>\n" +
			"Charles Darwin jammaili Åken hevixylofonilla Qatarin yöpub Zeligissä.\n" +
			"Wieniläinen sioux:ta puhuva ökyzombie diggaa Åsan roquefort-tacoja.",
		HTML: "<html>\n" +
			"<div dir=\"ltr\">\n" +
			"<p>Albert osti fagotin ja töräytti puhkuvan melodian.</p>\n" +
			"<p>Lorun sangen pieneksi hyödyksi jäivät suomen kirjaimet.</p>\n" +
			"<p>Hyvän lorun sangen pieneksi hyödyksi jäi suomen kirjaimet.</p>\n" +
			"<p>Fahrenheit ja Celsius yrjösivät Åsan backgammon-peliin, Volkswagenissa, daiquirin ja ZX81:n yhteisvaikutuksesta.</p>\n" +
			"<p>Charles Darwin jammaili Åken hevixylofonilla Qatarin yöpub Zeligissä.</p>\n" +
			"<p>Wieniläinen sioux:ta puhuva ökyzombie diggaa Åsan roquefort-tacoja.</p>\n" +
			"</div>\n" +
			"</html>",
		Files: []*email.File{
			&email.File{
				FileType: "inline",
				Name:     "inline-jpg-image-filename.jpg",
				ContentInfo: &email.ContentInfo{
					Type: "image/jpeg",
					TypeParams: map[string]string{
						"name": "inline-jpg-image-name.jpg",
					},
					Disposition: "inline",
					DispositionParams: map[string]string{
						"filename": "inline-jpg-image-filename.jpg",
					},
					TransferEncoding: "base64",
					ID:               "inline-jpg-image.jpg@example.com",
					Charset:          "iso-8859-15",
				},
				Data: []byte{
					195, 191, 195, 152, 195, 191, 195, 155, 0, 67, 0, 3, 2, 2, 2, 2, 2, 3, 2, 2, 2, 3,
					3, 3, 3, 4, 6, 4, 4, 4, 4, 4, 8, 6, 6, 5, 6, 9, 8, 10, 10, 9, 8, 9, 9, 10, 12, 15,
					12, 10, 11, 14, 11, 9, 9, 13, 17, 13, 14, 15, 16, 16, 17, 16, 10, 12, 18, 19, 18,
					16, 19, 15, 16, 16, 16, 195, 191, 195, 137, 0, 11, 8, 0, 1, 0, 1, 1, 1, 17, 0, 195,
					191, 195, 140, 0, 6, 0, 16, 16, 5, 195, 191, 195, 154, 0, 8, 1, 1, 0, 0, 63, 0, 195,
					146, 195, 143, 32, 195, 191, 195, 153,
				},
			},
		},
	}
	testEmailFromFile(t, fp, expectedEmail)
}

func TestParseEmailFinnishMultipartRelatedIso885915OverQuotedprintable(t *testing.T) {
	fp := "tests/test_finnish_multipart_related_iso-8859-15_over_quoted-printable.txt"
	expectedEmail := &email.Email{
		Headers: email.Headers{
			Date: time.Time(time.Date(2019, 4, 1, 4, 55, 0, 0, time.UTC)),
			Sender: &mail.Address{
				Name:    "Alice Lähettäjä",
				Address: "alice.lahettaja@example.com",
			},
			From: []*mail.Address{
				&mail.Address{
					Name:    "Alice Lähettäjä",
					Address: "alice.lahettaja@example.com",
				},
				&mail.Address{
					Name:    "Alice Lähettäjä",
					Address: "alice.lahettaja@example.net",
				},
			},
			ReplyTo: []*mail.Address{
				&mail.Address{
					Name:    "Alice Lähettäjä",
					Address: "alice.lahettaja@example.net",
				},
			},
			To: []*mail.Address{
				&mail.Address{
					Name:    "Bob Vastaanottaja",
					Address: "bob.vastaanottaja@exaple.com",
				},
				&mail.Address{
					Name:    "Carol Vastaanottaja",
					Address: "carol.vastaanottaja@example.com",
				},
			},
			Cc: []*mail.Address{
				&mail.Address{
					Name:    "Dan Vastaanottaja",
					Address: "dan.vastaanottaja@example.com",
				},
				&mail.Address{
					Name:    "Eve Vastaanottaja",
					Address: "eve.vastaanottaja@example.com",
				},
			},
			Bcc: []*mail.Address{
				&mail.Address{
					Name:    "Frank Vastaanottaja",
					Address: "frank.vastaanottaja@example.com",
				},
				&mail.Address{
					Name:    "Grace Vastaanottaja",
					Address: "grace.vastaanottaja@example.com",
				},
			},
			MessageID: "Message-Id-1@example.com",
			InReplyTo: []string{
				"Message-Id-0@example.com",
			},
			References: []string{
				"Message-Id-0@example.com",
			},
			Subject:  "📧 Test Suomenkieliset pangrammit",
			Comments: "Message Header Comment",
			Keywords: []string{
				"Keyword 1",
				"Keyword 2",
			},
			ResentDate: time.Time(time.Date(2019, 4, 1, 4, 55, 0, 0, time.UTC)),
			ResentFrom: []*mail.Address{
				&mail.Address{
					Name:    "Alice Lähettäjä",
					Address: "alice.lahettaja@example.net",
				},
				&mail.Address{
					Name:    "Alice Lähettäjä",
					Address: "alice.lahettaja@example.com",
				},
			},
			ResentSender: &mail.Address{
				Name:    "Alice Lähettäjä",
				Address: "alice.lahettaja@example.net",
			},
			ResentTo: []*mail.Address{
				&mail.Address{
					Name:    "Bob Vastaanottaja",
					Address: "bob.vastaanottaja@exaple.com",
				},
				&mail.Address{
					Name:    "Carol Vastaanottaja",
					Address: "carol.vastaanottaja@example.net",
				},
			},
			ResentCc: []*mail.Address{
				&mail.Address{
					Name:    "Dan Vastaanottaja",
					Address: "dan.vastaanottaja@example.net",
				},
				&mail.Address{
					Name:    "Eve Vastaanottaja",
					Address: "eve.vastaanottaja@example.net",
				},
			},
			ResentBcc: []*mail.Address{
				&mail.Address{
					Name:    "Frank Vastaanottaja",
					Address: "frank.vastaanottaja@example.net",
				},
				&mail.Address{
					Name:    "Grace Vastaanottaja",
					Address: "grace.vastaanottaja@example.net",
				},
			},
			ResentMessageID: "Message-Id-1@example.net",
			ExtraHeaders: map[string][]string{
				"X-Clacks-Overhead": []string{
					"GNU Terry Pratchett",
				},
				"X-Script/function/\t !\"#$%&'()*+,-./;<=>?@[\\]^_`{|}~": []string{
					"TEST VALUE 1\t !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_` abcdefghijklmnopqrstuvwxyz{|}~",
					"TEST VALUE 2\t !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_` abcdefghijklmnopqrstuvwxyz{|}~",
				},
			},
			ContentInfo: &email.ContentInfo{
				Type: "multipart/related",
				TypeParams: map[string]string{
					"boundary": "RelatedBoundaryString",
					"charset":  "iso-8859-15",
				},
				Disposition:       "",
				DispositionParams: map[string]string(nil), // p0
				TransferEncoding:  "quoted-printable",
				ID:                "",
				Charset:           "iso-8859-15",
			},
			Received: nil,
		},
		Text: "Albert osti fagotin ja töräytti puhkuvan melodian.\n" +
			"Lorun sangen pieneksi hyödyksi jäivät suomen kirjaimet.\n" +
			"Hyvän lorun sangen pieneksi hyödyksi jäi suomen kirjaimet.\n" +
			"Fahrenheit ja Celsius yrjösivät Åsan backgammon-peliin, Volkswagenissa, daiquirin ja ZX81:n yhteisvaikutuksesta.\n" +
			"Charles Darwin jammaili Åken hevixylofonilla Qatarin yöpub Zeligissä.\n" +
			"Wieniläinen sioux:ta puhuva ökyzombie diggaa Åsan roquefort-tacoja.",
		EnrichedText: "<bold>Albert osti fagotin ja töräytti puhkuvan melodian.</bold>\n" +
			"<italic>Lorun sangen pieneksi hyödyksi jäivät suomen kirjaimet.</italic>\n" +
			"<fixed>Hyvän lorun sangen pieneksi hyödyksi jäi suomen kirjaimet.</fixed>\n" +
			"<underline>Fahrenheit ja Celsius yrjösivät Åsan backgammon-peliin, Volkswagenissa, daiquirin ja ZX81:n yhteisvaikutuksesta.</underline>\n" +
			"Charles Darwin jammaili Åken hevixylofonilla Qatarin yöpub Zeligissä.\n" +
			"Wieniläinen sioux:ta puhuva ökyzombie diggaa Åsan roquefort-tacoja.",
		HTML: "<html>\n" +
			"<div dir=\"ltr\">\n" +
			"<p>Albert osti fagotin ja töräytti puhkuvan melodian.</p>\n" +
			"<p>Lorun sangen pieneksi hyödyksi jäivät suomen kirjaimet.</p>\n" +
			"<p>Hyvän lorun sangen pieneksi hyödyksi jäi suomen kirjaimet.</p>\n" +
			"<p>Fahrenheit ja Celsius yrjösivät Åsan backgammon-peliin, Volkswagenissa, daiquirin ja ZX81:n yhteisvaikutuksesta.</p>\n" +
			"<p>Charles Darwin jammaili Åken hevixylofonilla Qatarin yöpub Zeligissä.</p>\n" +
			"<p>Wieniläinen sioux:ta puhuva ökyzombie diggaa Åsan roquefort-tacoja.</p>\n" +
			"</div>\n" +
			"</html>",
		Files: []*email.File{
			&email.File{
				FileType: "inline",
				Name:     "inline-jpg-image-filename.jpg",
				ContentInfo: &email.ContentInfo{
					Type: "image/jpeg",
					TypeParams: map[string]string{
						"name": "inline-jpg-image-name.jpg",
					},
					Disposition: "inline",
					DispositionParams: map[string]string{
						"filename": "inline-jpg-image-filename.jpg",
					},
					TransferEncoding: "base64",
					ID:               "inline-jpg-image.jpg@example.com",
					Charset:          "iso-8859-15",
				},
				Data: []byte{
					195, 191, 195, 152, 195, 191, 195, 155, 0, 67, 0, 3, 2, 2, 2, 2, 2, 3, 2, 2, 2, 3,
					3, 3, 3, 4, 6, 4, 4, 4, 4, 4, 8, 6, 6, 5, 6, 9, 8, 10, 10, 9, 8, 9, 9, 10, 12, 15,
					12, 10, 11, 14, 11, 9, 9, 13, 17, 13, 14, 15, 16, 16, 17, 16, 10, 12, 18, 19, 18,
					16, 19, 15, 16, 16, 16, 195, 191, 195, 137, 0, 11, 8, 0, 1, 0, 1, 1, 1, 17, 0, 195,
					191, 195, 140, 0, 6, 0, 16, 16, 5, 195, 191, 195, 154, 0, 8, 1, 1, 0, 0, 63, 0, 195,
					146, 195, 143, 32, 195, 191, 195, 153,
				},
			},
		},
	}
	testEmailFromFile(t, fp, expectedEmail)
}

func TestParseEmailFinnishMultipartMixedUtf8OverBase64(t *testing.T) {
	fp := "tests/test_finnish_multipart_mixed_utf-8_over_base64.txt"
	expectedEmail := &email.Email{
		Headers: email.Headers{
			Date: time.Time(time.Date(2019, 4, 1, 4, 55, 0, 0, time.UTC)),
			Sender: &mail.Address{
				Name:    "Alice Lähettäjä",
				Address: "alice.lahettaja@example.com",
			},
			From: []*mail.Address{
				&mail.Address{
					Name:    "Alice Lähettäjä",
					Address: "alice.lahettaja@example.com",
				},
				&mail.Address{
					Name:    "Alice Lähettäjä",
					Address: "alice.lahettaja@example.net",
				},
			},
			ReplyTo: []*mail.Address{
				&mail.Address{
					Name:    "Alice Lähettäjä",
					Address: "alice.lahettaja@example.net",
				},
			},
			To: []*mail.Address{
				&mail.Address{
					Name:    "Bob Vastaanottaja",
					Address: "bob.vastaanottaja@exaple.com",
				},
				&mail.Address{
					Name:    "Carol Vastaanottaja",
					Address: "carol.vastaanottaja@example.com",
				},
			},
			Cc: []*mail.Address{
				&mail.Address{
					Name:    "Dan Vastaanottaja",
					Address: "dan.vastaanottaja@example.com",
				},
				&mail.Address{
					Name:    "Eve Vastaanottaja",
					Address: "eve.vastaanottaja@example.com",
				},
			},
			Bcc: []*mail.Address{
				&mail.Address{
					Name:    "Frank Vastaanottaja",
					Address: "frank.vastaanottaja@example.com",
				},
				&mail.Address{
					Name:    "Grace Vastaanottaja",
					Address: "grace.vastaanottaja@example.com",
				},
			},
			MessageID: "Message-Id-1@example.com",
			InReplyTo: []string{
				"Message-Id-0@example.com",
			},
			References: []string{
				"Message-Id-0@example.com",
			},
			Subject:  "📧 Test Suomenkieliset pangrammit",
			Comments: "Message Header Comment",
			Keywords: []string{
				"Keyword 1",
				"Keyword 2",
			},
			ResentDate: time.Time(time.Date(2019, 4, 1, 4, 55, 0, 0, time.UTC)),
			ResentFrom: []*mail.Address{
				&mail.Address{
					Name:    "Alice Lähettäjä",
					Address: "alice.lahettaja@example.net",
				},
				&mail.Address{
					Name:    "Alice Lähettäjä",
					Address: "alice.lahettaja@example.com",
				},
			},
			ResentSender: &mail.Address{
				Name:    "Alice Lähettäjä",
				Address: "alice.lahettaja@example.net",
			},
			ResentTo: []*mail.Address{
				&mail.Address{
					Name:    "Bob Vastaanottaja",
					Address: "bob.vastaanottaja@exaple.com",
				},
				&mail.Address{
					Name:    "Carol Vastaanottaja",
					Address: "carol.vastaanottaja@example.net",
				},
			},
			ResentCc: []*mail.Address{
				&mail.Address{
					Name:    "Dan Vastaanottaja",
					Address: "dan.vastaanottaja@example.net",
				},
				&mail.Address{
					Name:    "Eve Vastaanottaja",
					Address: "eve.vastaanottaja@example.net",
				},
			},
			ResentBcc: []*mail.Address{
				&mail.Address{
					Name:    "Frank Vastaanottaja",
					Address: "frank.vastaanottaja@example.net",
				},
				&mail.Address{
					Name:    "Grace Vastaanottaja",
					Address: "grace.vastaanottaja@example.net",
				},
			},
			ResentMessageID: "Message-Id-1@example.net",
			ExtraHeaders: map[string][]string{
				"X-Clacks-Overhead": []string{
					"GNU Terry Pratchett",
				},
				"X-Script/function/\t !\"#$%&'()*+,-./;<=>?@[\\]^_`{|}~": []string{
					"TEST VALUE 1\t !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_` abcdefghijklmnopqrstuvwxyz{|}~",
					"TEST VALUE 2\t !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_` abcdefghijklmnopqrstuvwxyz{|}~",
				},
			},
			ContentInfo: &email.ContentInfo{
				Type: "multipart/mixed",
				TypeParams: map[string]string{
					"boundary": "MixedBoundaryString",
					"charset":  "utf-8",
				},
				Disposition:       "",
				DispositionParams: map[string]string(nil), // p0
				TransferEncoding:  "base64",
				ID:                "",
				Charset:           "utf-8",
			},
			Received: nil,
		},
		Text: "Albert osti fagotin ja töräytti puhkuvan melodian.\n" +
			"Lorun sangen pieneksi hyödyksi jäivät suomen kirjaimet.\n" +
			"Hyvän lorun sangen pieneksi hyödyksi jäi suomen kirjaimet.\n" +
			"Fahrenheit ja Celsius yrjösivät Åsan backgammon-peliin, Volkswagenissa, daiquirin ja ZX81:n yhteisvaikutuksesta.\n" +
			"Charles Darwin jammaili Åken hevixylofonilla Qatarin yöpub Zeligissä.\n" +
			"Wieniläinen sioux:ta puhuva ökyzombie diggaa Åsan roquefort-tacoja.",
		EnrichedText: "<bold>Albert osti fagotin ja töräytti puhkuvan melodian.</bold>\n" +
			"<italic>Lorun sangen pieneksi hyödyksi jäivät suomen kirjaimet.</italic>\n" +
			"<fixed>Hyvän lorun sangen pieneksi hyödyksi jäi suomen kirjaimet.</fixed>\n" +
			"<underline>Fahrenheit ja Celsius yrjösivät Åsan backgammon-peliin, Volkswagenissa, daiquirin ja ZX81:n yhteisvaikutuksesta.</underline>\n" +
			"Charles Darwin jammaili Åken hevixylofonilla Qatarin yöpub Zeligissä.\n" +
			"Wieniläinen sioux:ta puhuva ökyzombie diggaa Åsan roquefort-tacoja.",
		HTML: "<html>\n" +
			"<div dir=\"ltr\">\n" +
			"<p>Albert osti fagotin ja töräytti puhkuvan melodian.</p>\n" +
			"<p>Lorun sangen pieneksi hyödyksi jäivät suomen kirjaimet.</p>\n" +
			"<p>Hyvän lorun sangen pieneksi hyödyksi jäi suomen kirjaimet.</p>\n" +
			"<p>Fahrenheit ja Celsius yrjösivät Åsan backgammon-peliin, Volkswagenissa, daiquirin ja ZX81:n yhteisvaikutuksesta.</p>\n" +
			"<p>Charles Darwin jammaili Åken hevixylofonilla Qatarin yöpub Zeligissä.</p>\n" +
			"<p>Wieniläinen sioux:ta puhuva ökyzombie diggaa Åsan roquefort-tacoja.</p>\n" +
			"</div>\n" +
			"</html>",
		Files: []*email.File{
			&email.File{
				FileType: "",
				Name:     "inline-jpg-image-without-disposition.jpg",
				ContentInfo: &email.ContentInfo{
					Type: "image/jpeg",
					TypeParams: map[string]string{
						"name": "inline-jpg-image-without-disposition.jpg",
					},
					Disposition:       "",
					DispositionParams: map[string]string(nil), // p0
					TransferEncoding:  "base64",
					ID:                "",
					Charset:           "utf-8",
				},
				Data: []byte{
					239, 191, 189, 239, 191, 189, 239, 191, 189, 239, 191, 189, 0, 67, 0, 3, 2, 2, 2,
					2, 2, 3, 2, 2, 2, 3, 3, 3, 3, 4, 6, 4, 4, 4, 4, 4, 8, 6, 6, 5, 6, 9, 8, 10, 10, 9,
					8, 9, 9, 10, 12, 15, 12, 10, 11, 14, 11, 9, 9, 13, 17, 13, 14, 15, 16, 16, 17, 16,
					10, 12, 18, 19, 18, 16, 19, 15, 16, 16, 16, 239, 191, 189, 239, 191, 189, 0, 11,
					8, 0, 1, 0, 1, 1, 1, 17, 0, 239, 191, 189, 239, 191, 189, 0, 6, 0, 16, 16, 5, 239,
					191, 189, 239, 191, 189, 0, 8, 1, 1, 0, 0, 63, 0, 239, 191, 189, 239, 191, 189, 32,
					239, 191, 189, 239, 191, 189,
				},
			},
			&email.File{
				FileType: "inline",
				Name:     "inline-jpg-image-filename.jpg",
				ContentInfo: &email.ContentInfo{
					Type: "image/jpeg",
					TypeParams: map[string]string{
						"name": "inline-jpg-image-name.jpg",
					},
					Disposition: "inline",
					DispositionParams: map[string]string{
						"filename": "inline-jpg-image-filename.jpg",
					},
					TransferEncoding: "base64",
					ID:               "inline-jpg-image.jpg@example.com",
					Charset:          "utf-8",
				},
				Data: []byte{
					239, 191, 189, 239, 191, 189, 239, 191, 189, 239, 191, 189, 0, 67, 0, 3, 2, 2, 2,
					2, 2, 3, 2, 2, 2, 3, 3, 3, 3, 4, 6, 4, 4, 4, 4, 4, 8, 6, 6, 5, 6, 9, 8, 10, 10, 9,
					8, 9, 9, 10, 12, 15, 12, 10, 11, 14, 11, 9, 9, 13, 17, 13, 14, 15, 16, 16, 17, 16,
					10, 12, 18, 19, 18, 16, 19, 15, 16, 16, 16, 239, 191, 189, 239, 191, 189, 0, 11,
					8, 0, 1, 0, 1, 1, 1, 17, 0, 239, 191, 189, 239, 191, 189, 0, 6, 0, 16, 16, 5, 239,
					191, 189, 239, 191, 189, 0, 8, 1, 1, 0, 0, 63, 0, 239, 191, 189, 239, 191, 189, 32,
					239, 191, 189, 239, 191, 189,
				},
			},
			&email.File{
				FileType: "attachment",
				Name:     "attached-pdf-filename.pdf",
				ContentInfo: &email.ContentInfo{
					Type: "application/pdf",
					TypeParams: map[string]string{
						"name": "attached-pdf-name.pdf",
					},
					Disposition: "attachment",
					DispositionParams: map[string]string{
						"filename": "attached-pdf-filename.pdf",
					},
					TransferEncoding: "base64",
					ID:               "",
					Charset:          "utf-8",
				},
				Data: []byte{
					37, 80, 68, 70, 45, 49, 46, 13, 116, 114, 97, 105, 108, 101, 114, 60, 60, 47, 82,
					111, 111, 116, 60, 60, 47, 80, 97, 103, 101, 115, 60, 60, 47, 75, 105, 100, 115,
					91, 60, 60, 47, 77, 101, 100, 105, 97, 66, 111, 120, 91, 48, 32, 48, 32, 51, 32,
					51, 93, 62, 62, 93, 62, 62, 62, 62, 62, 62,
				},
			},
			&email.File{
				FileType: "",
				Name:     "attached-pdf-without-disposition.pdf",
				ContentInfo: &email.ContentInfo{
					Type: "application/pdf",
					TypeParams: map[string]string{
						"name": "attached-pdf-without-disposition.pdf",
					},
					Disposition:       "",
					DispositionParams: map[string]string(nil), // p0
					TransferEncoding:  "base64",
					ID:                "",
					Charset:           "utf-8",
				},
				Data: []byte{
					37, 80, 68, 70, 45, 49, 46, 13, 116, 114, 97, 105, 108, 101, 114, 60, 60, 47, 82,
					111, 111, 116, 60, 60, 47, 80, 97, 103, 101, 115, 60, 60, 47, 75, 105, 100, 115,
					91, 60, 60, 47, 77, 101, 100, 105, 97, 66, 111, 120, 91, 48, 32, 48, 32, 51, 32,
					51, 93, 62, 62, 93, 62, 62, 62, 62, 62, 62,
				},
			},
			&email.File{
				FileType: "attachment",
				Name:     "attached-json-filename.json",
				ContentInfo: &email.ContentInfo{
					Type: "application/json",
					TypeParams: map[string]string{
						"name": "attached-json-name.json",
					},
					Disposition: "attachment",
					DispositionParams: map[string]string{
						"filename": "attached-json-filename.json",
					},
					TransferEncoding: "7bit",
					ID:               "",
					Charset:          "utf-8",
				},
				Data: []byte{
					123, 34, 102, 111, 111, 34, 58, 34, 98, 97, 114, 34, 125,
				},
			},
			&email.File{
				FileType: "attachment",
				Name:     "attached-text-plain-filename.txt",
				ContentInfo: &email.ContentInfo{
					Type: "text/plain",
					TypeParams: map[string]string{
						"name": "attached-text-plain-name.txt",
					},
					Disposition: "attachment",
					DispositionParams: map[string]string{
						"filename": "attached-text-plain-filename.txt",
					},
					TransferEncoding: "base64",
					ID:               "",
					Charset:          "utf-8",
				},
				Data: []byte{
					84, 101, 120, 116, 47, 112, 108, 97, 105, 110, 32, 99, 111, 110, 116, 101, 110, 116,
					32, 97, 115, 32, 97, 110, 32, 97, 116, 116, 97, 99, 104, 101, 100, 32, 46, 116, 120,
					116, 32, 102, 105, 108, 101, 46,
				},
			},
			&email.File{
				FileType: "attachment",
				Name:     "attached-text-html-filename.html",
				ContentInfo: &email.ContentInfo{
					Type: "text/html",
					TypeParams: map[string]string{
						"name": "attached-text-html-name.html",
					},
					Disposition: "attachment",
					DispositionParams: map[string]string{
						"filename": "attached-text-html-filename.html",
					},
					TransferEncoding: "base64",
					ID:               "",
					Charset:          "utf-8",
				},
				Data: []byte{
					84, 101, 120, 116, 47, 104, 116, 109, 108, 32, 99, 111, 110, 116, 101, 110, 116,
					32, 97, 115, 32, 97, 110, 32, 97, 116, 116, 97, 99, 104, 101, 100, 32, 46, 104, 116,
					109, 108, 32, 102, 105, 108, 101, 46,
				},
			},
		},
	}
	testEmailFromFile(t, fp, expectedEmail)
}

func TestParseEmailFinnishMultipartMixedUtf8OverQuotedprintable(t *testing.T) {
	fp := "tests/test_finnish_multipart_mixed_utf-8_over_quoted-printable.txt"
	expectedEmail := &email.Email{
		Headers: email.Headers{
			Date: time.Time(time.Date(2019, 4, 1, 4, 55, 0, 0, time.UTC)),
			Sender: &mail.Address{
				Name:    "Alice Lähettäjä",
				Address: "alice.lahettaja@example.com",
			},
			From: []*mail.Address{
				&mail.Address{
					Name:    "Alice Lähettäjä",
					Address: "alice.lahettaja@example.com",
				},
				&mail.Address{
					Name:    "Alice Lähettäjä",
					Address: "alice.lahettaja@example.net",
				},
			},
			ReplyTo: []*mail.Address{
				&mail.Address{
					Name:    "Alice Lähettäjä",
					Address: "alice.lahettaja@example.net",
				},
			},
			To: []*mail.Address{
				&mail.Address{
					Name:    "Bob Vastaanottaja",
					Address: "bob.vastaanottaja@exaple.com",
				},
				&mail.Address{
					Name:    "Carol Vastaanottaja",
					Address: "carol.vastaanottaja@example.com",
				},
			},
			Cc: []*mail.Address{
				&mail.Address{
					Name:    "Dan Vastaanottaja",
					Address: "dan.vastaanottaja@example.com",
				},
				&mail.Address{
					Name:    "Eve Vastaanottaja",
					Address: "eve.vastaanottaja@example.com",
				},
			},
			Bcc: []*mail.Address{
				&mail.Address{
					Name:    "Frank Vastaanottaja",
					Address: "frank.vastaanottaja@example.com",
				},
				&mail.Address{
					Name:    "Grace Vastaanottaja",
					Address: "grace.vastaanottaja@example.com",
				},
			},
			MessageID: "Message-Id-1@example.com",
			InReplyTo: []string{
				"Message-Id-0@example.com",
			},
			References: []string{
				"Message-Id-0@example.com",
			},
			Subject:  "📧 Test Suomenkieliset pangrammit",
			Comments: "Message Header Comment",
			Keywords: []string{
				"Keyword 1",
				"Keyword 2",
			},
			ResentDate: time.Time(time.Date(2019, 4, 1, 4, 55, 0, 0, time.UTC)),
			ResentFrom: []*mail.Address{
				&mail.Address{
					Name:    "Alice Lähettäjä",
					Address: "alice.lahettaja@example.net",
				},
				&mail.Address{
					Name:    "Alice Lähettäjä",
					Address: "alice.lahettaja@example.com",
				},
			},
			ResentSender: &mail.Address{
				Name:    "Alice Lähettäjä",
				Address: "alice.lahettaja@example.net",
			},
			ResentTo: []*mail.Address{
				&mail.Address{
					Name:    "Bob Vastaanottaja",
					Address: "bob.vastaanottaja@exaple.com",
				},
				&mail.Address{
					Name:    "Carol Vastaanottaja",
					Address: "carol.vastaanottaja@example.net",
				},
			},
			ResentCc: []*mail.Address{
				&mail.Address{
					Name:    "Dan Vastaanottaja",
					Address: "dan.vastaanottaja@example.net",
				},
				&mail.Address{
					Name:    "Eve Vastaanottaja",
					Address: "eve.vastaanottaja@example.net",
				},
			},
			ResentBcc: []*mail.Address{
				&mail.Address{
					Name:    "Frank Vastaanottaja",
					Address: "frank.vastaanottaja@example.net",
				},
				&mail.Address{
					Name:    "Grace Vastaanottaja",
					Address: "grace.vastaanottaja@example.net",
				},
			},
			ResentMessageID: "Message-Id-1@example.net",
			ExtraHeaders: map[string][]string{
				"X-Clacks-Overhead": []string{
					"GNU Terry Pratchett",
				},
				"X-Script/function/\t !\"#$%&'()*+,-./;<=>?@[\\]^_`{|}~": []string{
					"TEST VALUE 1\t !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_` abcdefghijklmnopqrstuvwxyz{|}~",
					"TEST VALUE 2\t !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_` abcdefghijklmnopqrstuvwxyz{|}~",
				},
			},
			ContentInfo: &email.ContentInfo{
				Type: "multipart/mixed",
				TypeParams: map[string]string{
					"boundary": "MixedBoundaryString",
					"charset":  "utf-8",
				},
				Disposition:       "",
				DispositionParams: map[string]string(nil), // p0
				TransferEncoding:  "quoted-printable",
				ID:                "",
				Charset:           "utf-8",
			},
			Received: nil,
		},
		Text: "Albert osti fagotin ja töräytti puhkuvan melodian.\n" +
			"Lorun sangen pieneksi hyödyksi jäivät suomen kirjaimet.\n" +
			"Hyvän lorun sangen pieneksi hyödyksi jäi suomen kirjaimet.\n" +
			"Fahrenheit ja Celsius yrjösivät Åsan backgammon-peliin, Volkswagenissa, daiquirin ja ZX81:n yhteisvaikutuksesta.\n" +
			"Charles Darwin jammaili Åken hevixylofonilla Qatarin yöpub Zeligissä.\n" +
			"Wieniläinen sioux:ta puhuva ökyzombie diggaa Åsan roquefort-tacoja.",
		EnrichedText: "<bold>Albert osti fagotin ja töräytti puhkuvan melodian.</bold>\n" +
			"<italic>Lorun sangen pieneksi hyödyksi jäivät suomen kirjaimet.</italic>\n" +
			"<fixed>Hyvän lorun sangen pieneksi hyödyksi jäi suomen kirjaimet.</fixed>\n" +
			"<underline>Fahrenheit ja Celsius yrjösivät Åsan backgammon-peliin, Volkswagenissa, daiquirin ja ZX81:n yhteisvaikutuksesta.</underline>\n" +
			"Charles Darwin jammaili Åken hevixylofonilla Qatarin yöpub Zeligissä.\n" +
			"Wieniläinen sioux:ta puhuva ökyzombie diggaa Åsan roquefort-tacoja.",
		HTML: "<html>\n" +
			"<div dir=\"ltr\">\n" +
			"<p>Albert osti fagotin ja töräytti puhkuvan melodian.</p>\n" +
			"<p>Lorun sangen pieneksi hyödyksi jäivät suomen kirjaimet.</p>\n" +
			"<p>Hyvän lorun sangen pieneksi hyödyksi jäi suomen kirjaimet.</p>\n" +
			"<p>Fahrenheit ja Celsius yrjösivät Åsan backgammon-peliin, Volkswagenissa, daiquirin ja ZX81:n yhteisvaikutuksesta.</p>\n" +
			"<p>Charles Darwin jammaili Åken hevixylofonilla Qatarin yöpub Zeligissä.</p>\n" +
			"<p>Wieniläinen sioux:ta puhuva ökyzombie diggaa Åsan roquefort-tacoja.</p>\n" +
			"</div>\n" +
			"</html>",
		Files: []*email.File{
			&email.File{
				FileType: "",
				Name:     "inline-jpg-image-without-disposition.jpg",
				ContentInfo: &email.ContentInfo{
					Type: "image/jpeg",
					TypeParams: map[string]string{
						"name": "inline-jpg-image-without-disposition.jpg",
					},
					Disposition:       "",
					DispositionParams: map[string]string(nil), // p0
					TransferEncoding:  "base64",
					ID:                "",
					Charset:           "utf-8",
				},
				Data: []byte{
					239, 191, 189, 239, 191, 189, 239, 191, 189, 239, 191, 189, 0, 67, 0, 3, 2, 2, 2,
					2, 2, 3, 2, 2, 2, 3, 3, 3, 3, 4, 6, 4, 4, 4, 4, 4, 8, 6, 6, 5, 6, 9, 8, 10, 10, 9,
					8, 9, 9, 10, 12, 15, 12, 10, 11, 14, 11, 9, 9, 13, 17, 13, 14, 15, 16, 16, 17, 16,
					10, 12, 18, 19, 18, 16, 19, 15, 16, 16, 16, 239, 191, 189, 239, 191, 189, 0, 11,
					8, 0, 1, 0, 1, 1, 1, 17, 0, 239, 191, 189, 239, 191, 189, 0, 6, 0, 16, 16, 5, 239,
					191, 189, 239, 191, 189, 0, 8, 1, 1, 0, 0, 63, 0, 239, 191, 189, 239, 191, 189, 32,
					239, 191, 189, 239, 191, 189,
				},
			},
			&email.File{
				FileType: "inline",
				Name:     "inline-jpg-image-filename.jpg",
				ContentInfo: &email.ContentInfo{
					Type: "image/jpeg",
					TypeParams: map[string]string{
						"name": "inline-jpg-image-name.jpg",
					},
					Disposition: "inline",
					DispositionParams: map[string]string{
						"filename": "inline-jpg-image-filename.jpg",
					},
					TransferEncoding: "base64",
					ID:               "inline-jpg-image.jpg@example.com",
					Charset:          "utf-8",
				},
				Data: []byte{
					239, 191, 189, 239, 191, 189, 239, 191, 189, 239, 191, 189, 0, 67, 0, 3, 2, 2, 2,
					2, 2, 3, 2, 2, 2, 3, 3, 3, 3, 4, 6, 4, 4, 4, 4, 4, 8, 6, 6, 5, 6, 9, 8, 10, 10, 9,
					8, 9, 9, 10, 12, 15, 12, 10, 11, 14, 11, 9, 9, 13, 17, 13, 14, 15, 16, 16, 17, 16,
					10, 12, 18, 19, 18, 16, 19, 15, 16, 16, 16, 239, 191, 189, 239, 191, 189, 0, 11,
					8, 0, 1, 0, 1, 1, 1, 17, 0, 239, 191, 189, 239, 191, 189, 0, 6, 0, 16, 16, 5, 239,
					191, 189, 239, 191, 189, 0, 8, 1, 1, 0, 0, 63, 0, 239, 191, 189, 239, 191, 189, 32,
					239, 191, 189, 239, 191, 189,
				},
			},
			&email.File{
				FileType: "attachment",
				Name:     "attached-pdf-filename.pdf",
				ContentInfo: &email.ContentInfo{
					Type: "application/pdf",
					TypeParams: map[string]string{
						"name": "attached-pdf-name.pdf",
					},
					Disposition: "attachment",
					DispositionParams: map[string]string{
						"filename": "attached-pdf-filename.pdf",
					},
					TransferEncoding: "base64",
					ID:               "",
					Charset:          "utf-8",
				},
				Data: []byte{
					37, 80, 68, 70, 45, 49, 46, 13, 116, 114, 97, 105, 108, 101, 114, 60, 60, 47, 82,
					111, 111, 116, 60, 60, 47, 80, 97, 103, 101, 115, 60, 60, 47, 75, 105, 100, 115,
					91, 60, 60, 47, 77, 101, 100, 105, 97, 66, 111, 120, 91, 48, 32, 48, 32, 51, 32,
					51, 93, 62, 62, 93, 62, 62, 62, 62, 62, 62,
				},
			},
			&email.File{
				FileType: "",
				Name:     "attached-pdf-without-disposition.pdf",
				ContentInfo: &email.ContentInfo{
					Type: "application/pdf",
					TypeParams: map[string]string{
						"name": "attached-pdf-without-disposition.pdf",
					},
					Disposition:       "",
					DispositionParams: map[string]string(nil), // p0
					TransferEncoding:  "base64",
					ID:                "",
					Charset:           "utf-8",
				},
				Data: []byte{
					37, 80, 68, 70, 45, 49, 46, 13, 116, 114, 97, 105, 108, 101, 114, 60, 60, 47, 82,
					111, 111, 116, 60, 60, 47, 80, 97, 103, 101, 115, 60, 60, 47, 75, 105, 100, 115,
					91, 60, 60, 47, 77, 101, 100, 105, 97, 66, 111, 120, 91, 48, 32, 48, 32, 51, 32,
					51, 93, 62, 62, 93, 62, 62, 62, 62, 62, 62,
				},
			},
			&email.File{
				FileType: "attachment",
				Name:     "attached-json-filename.json",
				ContentInfo: &email.ContentInfo{
					Type: "application/json",
					TypeParams: map[string]string{
						"name": "attached-json-name.json",
					},
					Disposition: "attachment",
					DispositionParams: map[string]string{
						"filename": "attached-json-filename.json",
					},
					TransferEncoding: "7bit",
					ID:               "",
					Charset:          "utf-8",
				},
				Data: []byte{
					123, 34, 102, 111, 111, 34, 58, 34, 98, 97, 114, 34, 125,
				},
			},
			&email.File{
				FileType: "attachment",
				Name:     "attached-text-plain-filename.txt",
				ContentInfo: &email.ContentInfo{
					Type: "text/plain",
					TypeParams: map[string]string{
						"name": "attached-text-plain-name.txt",
					},
					Disposition: "attachment",
					DispositionParams: map[string]string{
						"filename": "attached-text-plain-filename.txt",
					},
					TransferEncoding: "base64",
					ID:               "",
					Charset:          "utf-8",
				},
				Data: []byte{
					84, 101, 120, 116, 47, 112, 108, 97, 105, 110, 32, 99, 111, 110, 116, 101, 110, 116,
					32, 97, 115, 32, 97, 110, 32, 97, 116, 116, 97, 99, 104, 101, 100, 32, 46, 116, 120,
					116, 32, 102, 105, 108, 101, 46,
				},
			},
			&email.File{
				FileType: "attachment",
				Name:     "attached-text-html-filename.html",
				ContentInfo: &email.ContentInfo{
					Type: "text/html",
					TypeParams: map[string]string{
						"name": "attached-text-html-name.html",
					},
					Disposition: "attachment",
					DispositionParams: map[string]string{
						"filename": "attached-text-html-filename.html",
					},
					TransferEncoding: "base64",
					ID:               "",
					Charset:          "utf-8",
				},
				Data: []byte{
					84, 101, 120, 116, 47, 104, 116, 109, 108, 32, 99, 111, 110, 116, 101, 110, 116,
					32, 97, 115, 32, 97, 110, 32, 97, 116, 116, 97, 99, 104, 101, 100, 32, 46, 104, 116,
					109, 108, 32, 102, 105, 108, 101, 46,
				},
			},
		},
	}
	testEmailFromFile(t, fp, expectedEmail)
}

func TestParseEmailFinnishMultipartMixedIso885915OverBase64(t *testing.T) {
	fp := "tests/test_finnish_multipart_mixed_iso-8859-15_over_base64.txt"
	expectedEmail := &email.Email{
		Headers: email.Headers{
			Date: time.Time(time.Date(2019, 4, 1, 4, 55, 0, 0, time.UTC)),
			Sender: &mail.Address{
				Name:    "Alice Lähettäjä",
				Address: "alice.lahettaja@example.com",
			},
			From: []*mail.Address{
				&mail.Address{
					Name:    "Alice Lähettäjä",
					Address: "alice.lahettaja@example.com",
				},
				&mail.Address{
					Name:    "Alice Lähettäjä",
					Address: "alice.lahettaja@example.net",
				},
			},
			ReplyTo: []*mail.Address{
				&mail.Address{
					Name:    "Alice Lähettäjä",
					Address: "alice.lahettaja@example.net",
				},
			},
			To: []*mail.Address{
				&mail.Address{
					Name:    "Bob Vastaanottaja",
					Address: "bob.vastaanottaja@exaple.com",
				},
				&mail.Address{
					Name:    "Carol Vastaanottaja",
					Address: "carol.vastaanottaja@example.com",
				},
			},
			Cc: []*mail.Address{
				&mail.Address{
					Name:    "Dan Vastaanottaja",
					Address: "dan.vastaanottaja@example.com",
				},
				&mail.Address{
					Name:    "Eve Vastaanottaja",
					Address: "eve.vastaanottaja@example.com",
				},
			},
			Bcc: []*mail.Address{
				&mail.Address{
					Name:    "Frank Vastaanottaja",
					Address: "frank.vastaanottaja@example.com",
				},
				&mail.Address{
					Name:    "Grace Vastaanottaja",
					Address: "grace.vastaanottaja@example.com",
				},
			},
			MessageID: "Message-Id-1@example.com",
			InReplyTo: []string{
				"Message-Id-0@example.com",
			},
			References: []string{
				"Message-Id-0@example.com",
			},
			Subject:  "📧 Test Suomenkieliset pangrammit",
			Comments: "Message Header Comment",
			Keywords: []string{
				"Keyword 1",
				"Keyword 2",
			},
			ResentDate: time.Time(time.Date(2019, 4, 1, 4, 55, 0, 0, time.UTC)),
			ResentFrom: []*mail.Address{
				&mail.Address{
					Name:    "Alice Lähettäjä",
					Address: "alice.lahettaja@example.net",
				},
				&mail.Address{
					Name:    "Alice Lähettäjä",
					Address: "alice.lahettaja@example.com",
				},
			},
			ResentSender: &mail.Address{
				Name:    "Alice Lähettäjä",
				Address: "alice.lahettaja@example.net",
			},
			ResentTo: []*mail.Address{
				&mail.Address{
					Name:    "Bob Vastaanottaja",
					Address: "bob.vastaanottaja@exaple.com",
				},
				&mail.Address{
					Name:    "Carol Vastaanottaja",
					Address: "carol.vastaanottaja@example.net",
				},
			},
			ResentCc: []*mail.Address{
				&mail.Address{
					Name:    "Dan Vastaanottaja",
					Address: "dan.vastaanottaja@example.net",
				},
				&mail.Address{
					Name:    "Eve Vastaanottaja",
					Address: "eve.vastaanottaja@example.net",
				},
			},
			ResentBcc: []*mail.Address{
				&mail.Address{
					Name:    "Frank Vastaanottaja",
					Address: "frank.vastaanottaja@example.net",
				},
				&mail.Address{
					Name:    "Grace Vastaanottaja",
					Address: "grace.vastaanottaja@example.net",
				},
			},
			ResentMessageID: "Message-Id-1@example.net",
			ExtraHeaders: map[string][]string{
				"X-Clacks-Overhead": []string{
					"GNU Terry Pratchett",
				},
				"X-Script/function/\t !\"#$%&'()*+,-./;<=>?@[\\]^_`{|}~": []string{
					"TEST VALUE 1\t !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_` abcdefghijklmnopqrstuvwxyz{|}~",
					"TEST VALUE 2\t !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_` abcdefghijklmnopqrstuvwxyz{|}~",
				},
			},
			ContentInfo: &email.ContentInfo{
				Type: "multipart/mixed",
				TypeParams: map[string]string{
					"boundary": "MixedBoundaryString",
					"charset":  "iso-8859-15",
				},
				Disposition:       "",
				DispositionParams: map[string]string(nil), // p0
				TransferEncoding:  "base64",
				ID:                "",
				Charset:           "iso-8859-15",
			},
			Received: nil,
		},
		Text: "Albert osti fagotin ja töräytti puhkuvan melodian.\n" +
			"Lorun sangen pieneksi hyödyksi jäivät suomen kirjaimet.\n" +
			"Hyvän lorun sangen pieneksi hyödyksi jäi suomen kirjaimet.\n" +
			"Fahrenheit ja Celsius yrjösivät Åsan backgammon-peliin, Volkswagenissa, daiquirin ja ZX81:n yhteisvaikutuksesta.\n" +
			"Charles Darwin jammaili Åken hevixylofonilla Qatarin yöpub Zeligissä.\n" +
			"Wieniläinen sioux:ta puhuva ökyzombie diggaa Åsan roquefort-tacoja.",
		EnrichedText: "<bold>Albert osti fagotin ja töräytti puhkuvan melodian.</bold>\n" +
			"<italic>Lorun sangen pieneksi hyödyksi jäivät suomen kirjaimet.</italic>\n" +
			"<fixed>Hyvän lorun sangen pieneksi hyödyksi jäi suomen kirjaimet.</fixed>\n" +
			"<underline>Fahrenheit ja Celsius yrjösivät Åsan backgammon-peliin, Volkswagenissa, daiquirin ja ZX81:n yhteisvaikutuksesta.</underline>\n" +
			"Charles Darwin jammaili Åken hevixylofonilla Qatarin yöpub Zeligissä.\n" +
			"Wieniläinen sioux:ta puhuva ökyzombie diggaa Åsan roquefort-tacoja.",
		HTML: "<html>\n" +
			"<div dir=\"ltr\">\n" +
			"<p>Albert osti fagotin ja töräytti puhkuvan melodian.</p>\n" +
			"<p>Lorun sangen pieneksi hyödyksi jäivät suomen kirjaimet.</p>\n" +
			"<p>Hyvän lorun sangen pieneksi hyödyksi jäi suomen kirjaimet.</p>\n" +
			"<p>Fahrenheit ja Celsius yrjösivät Åsan backgammon-peliin, Volkswagenissa, daiquirin ja ZX81:n yhteisvaikutuksesta.</p>\n" +
			"<p>Charles Darwin jammaili Åken hevixylofonilla Qatarin yöpub Zeligissä.</p>\n" +
			"<p>Wieniläinen sioux:ta puhuva ökyzombie diggaa Åsan roquefort-tacoja.</p>\n" +
			"</div>\n" +
			"</html>",
		Files: []*email.File{
			&email.File{
				FileType: "",
				Name:     "inline-jpg-image-without-disposition.jpg",
				ContentInfo: &email.ContentInfo{
					Type: "image/jpeg",
					TypeParams: map[string]string{
						"name": "inline-jpg-image-without-disposition.jpg",
					},
					Disposition:       "",
					DispositionParams: map[string]string(nil), // p0
					TransferEncoding:  "base64",
					ID:                "",
					Charset:           "iso-8859-15",
				},
				Data: []byte{
					195, 191, 195, 152, 195, 191, 195, 155, 0, 67, 0, 3, 2, 2, 2, 2, 2, 3, 2, 2, 2, 3,
					3, 3, 3, 4, 6, 4, 4, 4, 4, 4, 8, 6, 6, 5, 6, 9, 8, 10, 10, 9, 8, 9, 9, 10, 12, 15,
					12, 10, 11, 14, 11, 9, 9, 13, 17, 13, 14, 15, 16, 16, 17, 16, 10, 12, 18, 19, 18,
					16, 19, 15, 16, 16, 16, 195, 191, 195, 137, 0, 11, 8, 0, 1, 0, 1, 1, 1, 17, 0, 195,
					191, 195, 140, 0, 6, 0, 16, 16, 5, 195, 191, 195, 154, 0, 8, 1, 1, 0, 0, 63, 0, 195,
					146, 195, 143, 32, 195, 191, 195, 153,
				},
			},
			&email.File{
				FileType: "inline",
				Name:     "inline-jpg-image-filename.jpg",
				ContentInfo: &email.ContentInfo{
					Type: "image/jpeg",
					TypeParams: map[string]string{
						"name": "inline-jpg-image-name.jpg",
					},
					Disposition: "inline",
					DispositionParams: map[string]string{
						"filename": "inline-jpg-image-filename.jpg",
					},
					TransferEncoding: "base64",
					ID:               "inline-jpg-image.jpg@example.com",
					Charset:          "iso-8859-15",
				},
				Data: []byte{
					195, 191, 195, 152, 195, 191, 195, 155, 0, 67, 0, 3, 2, 2, 2, 2, 2, 3, 2, 2, 2, 3,
					3, 3, 3, 4, 6, 4, 4, 4, 4, 4, 8, 6, 6, 5, 6, 9, 8, 10, 10, 9, 8, 9, 9, 10, 12, 15,
					12, 10, 11, 14, 11, 9, 9, 13, 17, 13, 14, 15, 16, 16, 17, 16, 10, 12, 18, 19, 18,
					16, 19, 15, 16, 16, 16, 195, 191, 195, 137, 0, 11, 8, 0, 1, 0, 1, 1, 1, 17, 0, 195,
					191, 195, 140, 0, 6, 0, 16, 16, 5, 195, 191, 195, 154, 0, 8, 1, 1, 0, 0, 63, 0, 195,
					146, 195, 143, 32, 195, 191, 195, 153,
				},
			},
			&email.File{
				FileType: "attachment",
				Name:     "attached-pdf-filename.pdf",
				ContentInfo: &email.ContentInfo{
					Type: "application/pdf",
					TypeParams: map[string]string{
						"name": "attached-pdf-name.pdf",
					},
					Disposition: "attachment",
					DispositionParams: map[string]string{
						"filename": "attached-pdf-filename.pdf",
					},
					TransferEncoding: "base64",
					ID:               "",
					Charset:          "iso-8859-15",
				},
				Data: []byte{
					37, 80, 68, 70, 45, 49, 46, 13, 116, 114, 97, 105, 108, 101, 114, 60, 60, 47, 82,
					111, 111, 116, 60, 60, 47, 80, 97, 103, 101, 115, 60, 60, 47, 75, 105, 100, 115,
					91, 60, 60, 47, 77, 101, 100, 105, 97, 66, 111, 120, 91, 48, 32, 48, 32, 51, 32,
					51, 93, 62, 62, 93, 62, 62, 62, 62, 62, 62,
				},
			},
			&email.File{
				FileType: "",
				Name:     "attached-pdf-without-disposition.pdf",
				ContentInfo: &email.ContentInfo{
					Type: "application/pdf",
					TypeParams: map[string]string{
						"name": "attached-pdf-without-disposition.pdf",
					},
					Disposition:       "",
					DispositionParams: map[string]string(nil), // p0
					TransferEncoding:  "base64",
					ID:                "",
					Charset:           "iso-8859-15",
				},
				Data: []byte{
					37, 80, 68, 70, 45, 49, 46, 13, 116, 114, 97, 105, 108, 101, 114, 60, 60, 47, 82,
					111, 111, 116, 60, 60, 47, 80, 97, 103, 101, 115, 60, 60, 47, 75, 105, 100, 115,
					91, 60, 60, 47, 77, 101, 100, 105, 97, 66, 111, 120, 91, 48, 32, 48, 32, 51, 32,
					51, 93, 62, 62, 93, 62, 62, 62, 62, 62, 62,
				},
			},
			&email.File{
				FileType: "attachment",
				Name:     "attached-json-filename.json",
				ContentInfo: &email.ContentInfo{
					Type: "application/json",
					TypeParams: map[string]string{
						"name": "attached-json-name.json",
					},
					Disposition: "attachment",
					DispositionParams: map[string]string{
						"filename": "attached-json-filename.json",
					},
					TransferEncoding: "7bit",
					ID:               "",
					Charset:          "iso-8859-15",
				},
				Data: []byte{
					123, 34, 102, 111, 111, 34, 58, 34, 98, 97, 114, 34, 125,
				},
			},
			&email.File{
				FileType: "attachment",
				Name:     "attached-text-plain-filename.txt",
				ContentInfo: &email.ContentInfo{
					Type: "text/plain",
					TypeParams: map[string]string{
						"name": "attached-text-plain-name.txt",
					},
					Disposition: "attachment",
					DispositionParams: map[string]string{
						"filename": "attached-text-plain-filename.txt",
					},
					TransferEncoding: "base64",
					ID:               "",
					Charset:          "iso-8859-15",
				},
				Data: []byte{
					84, 101, 120, 116, 47, 112, 108, 97, 105, 110, 32, 99, 111, 110, 116, 101, 110, 116,
					32, 97, 115, 32, 97, 110, 32, 97, 116, 116, 97, 99, 104, 101, 100, 32, 46, 116, 120,
					116, 32, 102, 105, 108, 101, 46,
				},
			},
			&email.File{
				FileType: "attachment",
				Name:     "attached-text-html-filename.html",
				ContentInfo: &email.ContentInfo{
					Type: "text/html",
					TypeParams: map[string]string{
						"name": "attached-text-html-name.html",
					},
					Disposition: "attachment",
					DispositionParams: map[string]string{
						"filename": "attached-text-html-filename.html",
					},
					TransferEncoding: "base64",
					ID:               "",
					Charset:          "iso-8859-15",
				},
				Data: []byte{
					84, 101, 120, 116, 47, 104, 116, 109, 108, 32, 99, 111, 110, 116, 101, 110, 116,
					32, 97, 115, 32, 97, 110, 32, 97, 116, 116, 97, 99, 104, 101, 100, 32, 46, 104, 116,
					109, 108, 32, 102, 105, 108, 101, 46,
				},
			},
		},
	}
	testEmailFromFile(t, fp, expectedEmail)
}

func TestParseEmailFinnishMultipartMixedIso885915OverQuotedprintable(t *testing.T) {
	fp := "tests/test_finnish_multipart_mixed_iso-8859-15_over_quoted-printable.txt"
	expectedEmail := &email.Email{
		Headers: email.Headers{
			Date: time.Time(time.Date(2019, 4, 1, 4, 55, 0, 0, time.UTC)),
			Sender: &mail.Address{
				Name:    "Alice Lähettäjä",
				Address: "alice.lahettaja@example.com",
			},
			From: []*mail.Address{
				&mail.Address{
					Name:    "Alice Lähettäjä",
					Address: "alice.lahettaja@example.com",
				},
				&mail.Address{
					Name:    "Alice Lähettäjä",
					Address: "alice.lahettaja@example.net",
				},
			},
			ReplyTo: []*mail.Address{
				&mail.Address{
					Name:    "Alice Lähettäjä",
					Address: "alice.lahettaja@example.net",
				},
			},
			To: []*mail.Address{
				&mail.Address{
					Name:    "Bob Vastaanottaja",
					Address: "bob.vastaanottaja@exaple.com",
				},
				&mail.Address{
					Name:    "Carol Vastaanottaja",
					Address: "carol.vastaanottaja@example.com",
				},
			},
			Cc: []*mail.Address{
				&mail.Address{
					Name:    "Dan Vastaanottaja",
					Address: "dan.vastaanottaja@example.com",
				},
				&mail.Address{
					Name:    "Eve Vastaanottaja",
					Address: "eve.vastaanottaja@example.com",
				},
			},
			Bcc: []*mail.Address{
				&mail.Address{
					Name:    "Frank Vastaanottaja",
					Address: "frank.vastaanottaja@example.com",
				},
				&mail.Address{
					Name:    "Grace Vastaanottaja",
					Address: "grace.vastaanottaja@example.com",
				},
			},
			MessageID: "Message-Id-1@example.com",
			InReplyTo: []string{
				"Message-Id-0@example.com",
			},
			References: []string{
				"Message-Id-0@example.com",
			},
			Subject:  "📧 Test Suomenkieliset pangrammit",
			Comments: "Message Header Comment",
			Keywords: []string{
				"Keyword 1",
				"Keyword 2",
			},
			ResentDate: time.Time(time.Date(2019, 4, 1, 4, 55, 0, 0, time.UTC)),
			ResentFrom: []*mail.Address{
				&mail.Address{
					Name:    "Alice Lähettäjä",
					Address: "alice.lahettaja@example.net",
				},
				&mail.Address{
					Name:    "Alice Lähettäjä",
					Address: "alice.lahettaja@example.com",
				},
			},
			ResentSender: &mail.Address{
				Name:    "Alice Lähettäjä",
				Address: "alice.lahettaja@example.net",
			},
			ResentTo: []*mail.Address{
				&mail.Address{
					Name:    "Bob Vastaanottaja",
					Address: "bob.vastaanottaja@exaple.com",
				},
				&mail.Address{
					Name:    "Carol Vastaanottaja",
					Address: "carol.vastaanottaja@example.net",
				},
			},
			ResentCc: []*mail.Address{
				&mail.Address{
					Name:    "Dan Vastaanottaja",
					Address: "dan.vastaanottaja@example.net",
				},
				&mail.Address{
					Name:    "Eve Vastaanottaja",
					Address: "eve.vastaanottaja@example.net",
				},
			},
			ResentBcc: []*mail.Address{
				&mail.Address{
					Name:    "Frank Vastaanottaja",
					Address: "frank.vastaanottaja@example.net",
				},
				&mail.Address{
					Name:    "Grace Vastaanottaja",
					Address: "grace.vastaanottaja@example.net",
				},
			},
			ResentMessageID: "Message-Id-1@example.net",
			ExtraHeaders: map[string][]string{
				"X-Clacks-Overhead": []string{
					"GNU Terry Pratchett",
				},
				"X-Script/function/\t !\"#$%&'()*+,-./;<=>?@[\\]^_`{|}~": []string{
					"TEST VALUE 1\t !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_` abcdefghijklmnopqrstuvwxyz{|}~",
					"TEST VALUE 2\t !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_` abcdefghijklmnopqrstuvwxyz{|}~",
				},
			},
			ContentInfo: &email.ContentInfo{
				Type: "multipart/mixed",
				TypeParams: map[string]string{
					"boundary": "MixedBoundaryString",
					"charset":  "iso-8859-15",
				},
				Disposition:       "",
				DispositionParams: map[string]string(nil), // p0
				TransferEncoding:  "quoted-printable",
				ID:                "",
				Charset:           "iso-8859-15",
			},
			Received: nil,
		},
		Text: "Albert osti fagotin ja töräytti puhkuvan melodian.\n" +
			"Lorun sangen pieneksi hyödyksi jäivät suomen kirjaimet.\n" +
			"Hyvän lorun sangen pieneksi hyödyksi jäi suomen kirjaimet.\n" +
			"Fahrenheit ja Celsius yrjösivät Åsan backgammon-peliin, Volkswagenissa, daiquirin ja ZX81:n yhteisvaikutuksesta.\n" +
			"Charles Darwin jammaili Åken hevixylofonilla Qatarin yöpub Zeligissä.\n" +
			"Wieniläinen sioux:ta puhuva ökyzombie diggaa Åsan roquefort-tacoja.",
		EnrichedText: "<bold>Albert osti fagotin ja töräytti puhkuvan melodian.</bold>\n" +
			"<italic>Lorun sangen pieneksi hyödyksi jäivät suomen kirjaimet.</italic>\n" +
			"<fixed>Hyvän lorun sangen pieneksi hyödyksi jäi suomen kirjaimet.</fixed>\n" +
			"<underline>Fahrenheit ja Celsius yrjösivät Åsan backgammon-peliin, Volkswagenissa, daiquirin ja ZX81:n yhteisvaikutuksesta.</underline>\n" +
			"Charles Darwin jammaili Åken hevixylofonilla Qatarin yöpub Zeligissä.\n" +
			"Wieniläinen sioux:ta puhuva ökyzombie diggaa Åsan roquefort-tacoja.",
		HTML: "<html>\n" +
			"<div dir=\"ltr\">\n" +
			"<p>Albert osti fagotin ja töräytti puhkuvan melodian.</p>\n" +
			"<p>Lorun sangen pieneksi hyödyksi jäivät suomen kirjaimet.</p>\n" +
			"<p>Hyvän lorun sangen pieneksi hyödyksi jäi suomen kirjaimet.</p>\n" +
			"<p>Fahrenheit ja Celsius yrjösivät Åsan backgammon-peliin, Volkswagenissa, daiquirin ja ZX81:n yhteisvaikutuksesta.</p>\n" +
			"<p>Charles Darwin jammaili Åken hevixylofonilla Qatarin yöpub Zeligissä.</p>\n" +
			"<p>Wieniläinen sioux:ta puhuva ökyzombie diggaa Åsan roquefort-tacoja.</p>\n" +
			"</div>\n" +
			"</html>",
		Files: []*email.File{
			&email.File{
				FileType: "",
				Name:     "inline-jpg-image-without-disposition.jpg",
				ContentInfo: &email.ContentInfo{
					Type: "image/jpeg",
					TypeParams: map[string]string{
						"name": "inline-jpg-image-without-disposition.jpg",
					},
					Disposition:       "",
					DispositionParams: map[string]string(nil), // p0
					TransferEncoding:  "base64",
					ID:                "",
					Charset:           "iso-8859-15",
				},
				Data: []byte{
					195, 191, 195, 152, 195, 191, 195, 155, 0, 67, 0, 3, 2, 2, 2, 2, 2, 3, 2, 2, 2, 3,
					3, 3, 3, 4, 6, 4, 4, 4, 4, 4, 8, 6, 6, 5, 6, 9, 8, 10, 10, 9, 8, 9, 9, 10, 12, 15,
					12, 10, 11, 14, 11, 9, 9, 13, 17, 13, 14, 15, 16, 16, 17, 16, 10, 12, 18, 19, 18,
					16, 19, 15, 16, 16, 16, 195, 191, 195, 137, 0, 11, 8, 0, 1, 0, 1, 1, 1, 17, 0, 195,
					191, 195, 140, 0, 6, 0, 16, 16, 5, 195, 191, 195, 154, 0, 8, 1, 1, 0, 0, 63, 0, 195,
					146, 195, 143, 32, 195, 191, 195, 153,
				},
			},
			&email.File{
				FileType: "inline",
				Name:     "inline-jpg-image-filename.jpg",
				ContentInfo: &email.ContentInfo{
					Type: "image/jpeg",
					TypeParams: map[string]string{
						"name": "inline-jpg-image-name.jpg",
					},
					Disposition: "inline",
					DispositionParams: map[string]string{
						"filename": "inline-jpg-image-filename.jpg",
					},
					TransferEncoding: "base64",
					ID:               "inline-jpg-image.jpg@example.com",
					Charset:          "iso-8859-15",
				},
				Data: []byte{
					195, 191, 195, 152, 195, 191, 195, 155, 0, 67, 0, 3, 2, 2, 2, 2, 2, 3, 2, 2, 2, 3,
					3, 3, 3, 4, 6, 4, 4, 4, 4, 4, 8, 6, 6, 5, 6, 9, 8, 10, 10, 9, 8, 9, 9, 10, 12, 15,
					12, 10, 11, 14, 11, 9, 9, 13, 17, 13, 14, 15, 16, 16, 17, 16, 10, 12, 18, 19, 18,
					16, 19, 15, 16, 16, 16, 195, 191, 195, 137, 0, 11, 8, 0, 1, 0, 1, 1, 1, 17, 0, 195,
					191, 195, 140, 0, 6, 0, 16, 16, 5, 195, 191, 195, 154, 0, 8, 1, 1, 0, 0, 63, 0, 195,
					146, 195, 143, 32, 195, 191, 195, 153,
				},
			},
			&email.File{
				FileType: "attachment",
				Name:     "attached-pdf-filename.pdf",
				ContentInfo: &email.ContentInfo{
					Type: "application/pdf",
					TypeParams: map[string]string{
						"name": "attached-pdf-name.pdf",
					},
					Disposition: "attachment",
					DispositionParams: map[string]string{
						"filename": "attached-pdf-filename.pdf",
					},
					TransferEncoding: "base64",
					ID:               "",
					Charset:          "iso-8859-15",
				},
				Data: []byte{
					37, 80, 68, 70, 45, 49, 46, 13, 116, 114, 97, 105, 108, 101, 114, 60, 60, 47, 82,
					111, 111, 116, 60, 60, 47, 80, 97, 103, 101, 115, 60, 60, 47, 75, 105, 100, 115,
					91, 60, 60, 47, 77, 101, 100, 105, 97, 66, 111, 120, 91, 48, 32, 48, 32, 51, 32,
					51, 93, 62, 62, 93, 62, 62, 62, 62, 62, 62,
				},
			},
			&email.File{
				FileType: "",
				Name:     "attached-pdf-without-disposition.pdf",
				ContentInfo: &email.ContentInfo{
					Type: "application/pdf",
					TypeParams: map[string]string{
						"name": "attached-pdf-without-disposition.pdf",
					},
					Disposition:       "",
					DispositionParams: map[string]string(nil), // p0
					TransferEncoding:  "base64",
					ID:                "",
					Charset:           "iso-8859-15",
				},
				Data: []byte{
					37, 80, 68, 70, 45, 49, 46, 13, 116, 114, 97, 105, 108, 101, 114, 60, 60, 47, 82,
					111, 111, 116, 60, 60, 47, 80, 97, 103, 101, 115, 60, 60, 47, 75, 105, 100, 115,
					91, 60, 60, 47, 77, 101, 100, 105, 97, 66, 111, 120, 91, 48, 32, 48, 32, 51, 32,
					51, 93, 62, 62, 93, 62, 62, 62, 62, 62, 62,
				},
			},
			&email.File{
				FileType: "attachment",
				Name:     "attached-json-filename.json",
				ContentInfo: &email.ContentInfo{
					Type: "application/json",
					TypeParams: map[string]string{
						"name": "attached-json-name.json",
					},
					Disposition: "attachment",
					DispositionParams: map[string]string{
						"filename": "attached-json-filename.json",
					},
					TransferEncoding: "7bit",
					ID:               "",
					Charset:          "iso-8859-15",
				},
				Data: []byte{
					123, 34, 102, 111, 111, 34, 58, 34, 98, 97, 114, 34, 125,
				},
			},
			&email.File{
				FileType: "attachment",
				Name:     "attached-text-plain-filename.txt",
				ContentInfo: &email.ContentInfo{
					Type: "text/plain",
					TypeParams: map[string]string{
						"name": "attached-text-plain-name.txt",
					},
					Disposition: "attachment",
					DispositionParams: map[string]string{
						"filename": "attached-text-plain-filename.txt",
					},
					TransferEncoding: "base64",
					ID:               "",
					Charset:          "iso-8859-15",
				},
				Data: []byte{
					84, 101, 120, 116, 47, 112, 108, 97, 105, 110, 32, 99, 111, 110, 116, 101, 110, 116,
					32, 97, 115, 32, 97, 110, 32, 97, 116, 116, 97, 99, 104, 101, 100, 32, 46, 116, 120,
					116, 32, 102, 105, 108, 101, 46,
				},
			},
			&email.File{
				FileType: "attachment",
				Name:     "attached-text-html-filename.html",
				ContentInfo: &email.ContentInfo{
					Type: "text/html",
					TypeParams: map[string]string{
						"name": "attached-text-html-name.html",
					},
					Disposition: "attachment",
					DispositionParams: map[string]string{
						"filename": "attached-text-html-filename.html",
					},
					TransferEncoding: "base64",
					ID:               "",
					Charset:          "iso-8859-15",
				},
				Data: []byte{
					84, 101, 120, 116, 47, 104, 116, 109, 108, 32, 99, 111, 110, 116, 101, 110, 116,
					32, 97, 115, 32, 97, 110, 32, 97, 116, 116, 97, 99, 104, 101, 100, 32, 46, 104, 116,
					109, 108, 32, 102, 105, 108, 101, 46,
				},
			},
		},
	}
	testEmailFromFile(t, fp, expectedEmail)
}

func TestParseEmailFinnishMultipartSignedUtf8OverBase64(t *testing.T) {
	fp := "tests/test_finnish_multipart_signed_utf-8_over_base64.txt"
	expectedEmail := &email.Email{
		Headers: email.Headers{
			Date: time.Time(time.Date(2019, 4, 1, 4, 55, 0, 0, time.UTC)),
			Sender: &mail.Address{
				Name:    "Alice Lähettäjä",
				Address: "alice.lahettaja@example.com",
			},
			From: []*mail.Address{
				&mail.Address{
					Name:    "Alice Lähettäjä",
					Address: "alice.lahettaja@example.com",
				},
				&mail.Address{
					Name:    "Alice Lähettäjä",
					Address: "alice.lahettaja@example.net",
				},
			},
			ReplyTo: []*mail.Address{
				&mail.Address{
					Name:    "Alice Lähettäjä",
					Address: "alice.lahettaja@example.net",
				},
			},
			To: []*mail.Address{
				&mail.Address{
					Name:    "Bob Vastaanottaja",
					Address: "bob.vastaanottaja@exaple.com",
				},
				&mail.Address{
					Name:    "Carol Vastaanottaja",
					Address: "carol.vastaanottaja@example.com",
				},
			},
			Cc: []*mail.Address{
				&mail.Address{
					Name:    "Dan Vastaanottaja",
					Address: "dan.vastaanottaja@example.com",
				},
				&mail.Address{
					Name:    "Eve Vastaanottaja",
					Address: "eve.vastaanottaja@example.com",
				},
			},
			Bcc: []*mail.Address{
				&mail.Address{
					Name:    "Frank Vastaanottaja",
					Address: "frank.vastaanottaja@example.com",
				},
				&mail.Address{
					Name:    "Grace Vastaanottaja",
					Address: "grace.vastaanottaja@example.com",
				},
			},
			MessageID: "Message-Id-1@example.com",
			InReplyTo: []string{
				"Message-Id-0@example.com",
			},
			References: []string{
				"Message-Id-0@example.com",
			},
			Subject:  "📧 Signed Test Suomenkieliset pangrammit",
			Comments: "Message Header Comment",
			Keywords: []string{
				"Keyword 1",
				"Keyword 2",
			},
			ResentDate: time.Time(time.Date(2019, 4, 1, 4, 55, 0, 0, time.UTC)),
			ResentFrom: []*mail.Address{
				&mail.Address{
					Name:    "Alice Lähettäjä",
					Address: "alice.lahettaja@example.net",
				},
				&mail.Address{
					Name:    "Alice Lähettäjä",
					Address: "alice.lahettaja@example.com",
				},
			},
			ResentSender: &mail.Address{
				Name:    "Alice Lähettäjä",
				Address: "alice.lahettaja@example.net",
			},
			ResentTo: []*mail.Address{
				&mail.Address{
					Name:    "Bob Vastaanottaja",
					Address: "bob.vastaanottaja@exaple.com",
				},
				&mail.Address{
					Name:    "Carol Vastaanottaja",
					Address: "carol.vastaanottaja@example.net",
				},
			},
			ResentCc: []*mail.Address{
				&mail.Address{
					Name:    "Dan Vastaanottaja",
					Address: "dan.vastaanottaja@example.net",
				},
				&mail.Address{
					Name:    "Eve Vastaanottaja",
					Address: "eve.vastaanottaja@example.net",
				},
			},
			ResentBcc: []*mail.Address{
				&mail.Address{
					Name:    "Frank Vastaanottaja",
					Address: "frank.vastaanottaja@example.net",
				},
				&mail.Address{
					Name:    "Grace Vastaanottaja",
					Address: "grace.vastaanottaja@example.net",
				},
			},
			ResentMessageID: "Message-Id-1@example.net",
			ExtraHeaders: map[string][]string{
				"X-Clacks-Overhead": []string{
					"GNU Terry Pratchett",
				},
				"X-Script/function/\t !\"#$%&'()*+,-./;<=>?@[\\]^_`{|}~": []string{
					"TEST VALUE 1\t !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_` abcdefghijklmnopqrstuvwxyz{|}~",
					"TEST VALUE 2\t !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_` abcdefghijklmnopqrstuvwxyz{|}~",
				},
			},
			ContentInfo: &email.ContentInfo{
				Type: "multipart/signed",
				TypeParams: map[string]string{
					"boundary": "SignedBoundaryString",
					"charset":  "utf-8",
					"micalg":   "sha1",
					"protocol": "application/pkcs7-signature",
				},
				Disposition:       "",
				DispositionParams: map[string]string(nil), // p0
				TransferEncoding:  "base64",
				ID:                "",
				Charset:           "utf-8",
			},
			Received: nil,
		},
		Text: "Albert osti fagotin ja töräytti puhkuvan melodian.\n" +
			"Lorun sangen pieneksi hyödyksi jäivät suomen kirjaimet.\n" +
			"Hyvän lorun sangen pieneksi hyödyksi jäi suomen kirjaimet.\n" +
			"Fahrenheit ja Celsius yrjösivät Åsan backgammon-peliin, Volkswagenissa, daiquirin ja ZX81:n yhteisvaikutuksesta.\n" +
			"Charles Darwin jammaili Åken hevixylofonilla Qatarin yöpub Zeligissä.\n" +
			"Wieniläinen sioux:ta puhuva ökyzombie diggaa Åsan roquefort-tacoja.",
		EnrichedText: "",
		HTML:         "",
		Files: []*email.File{
			&email.File{
				FileType: "attachment",
				Name:     "smime.p7s",
				ContentInfo: &email.ContentInfo{
					Type: "application/pkcs7-signature",
					TypeParams: map[string]string{
						"name": "smime.p7s",
					},
					Disposition: "attachment",
					DispositionParams: map[string]string{
						"filename": "smime.p7s",
					},
					TransferEncoding: "base64",
					ID:               "",
					Charset:          "utf-8",
				},
				Data: []byte{
					239, 191, 189, 28, 239, 191, 189, 239, 191, 189, 117, 46, 239, 191, 189, 18, 97,
					239, 191, 189, 126, 239, 191, 189, 239, 191, 189, 239, 191, 189, 239, 191, 189, 25,
					58, 223, 189, 239, 191, 189, 239, 191, 189, 239, 158, 173, 108, 31, 71, 27, 239,
					191, 189, 80, 239, 191, 189, 239, 191, 189, 239, 191, 189, 239, 191, 189, 198, 132,
					239, 191, 189, 239, 191, 189, 29, 239, 191, 189, 19, 239, 191, 189, 80, 239, 191,
					189, 239, 191, 189, 239, 191, 189, 239, 191, 189, 198, 132, 239, 191, 189, 239, 191,
					189, 29, 239, 191, 189, 19, 239, 191, 189, 49, 239, 191, 189, 239, 191, 189, 127,
					7, 28, 104, 33, 239, 191, 189, 120, 71, 82, 239, 191, 189, 239, 191, 189, 38, 30,
					239, 191, 189, 239, 191, 189, 239, 191, 189, 239, 191, 189, 239, 191, 189, 113, 239,
					191, 189, 239, 191, 189, 239, 191, 189, 219, 158, 57, 239, 191, 189, 28, 113, 239,
					191, 189, 239, 191, 189, 239, 191, 189, 239, 191, 189, 38, 24, 239, 191, 189, 239,
					190, 173, 108, 31, 71, 27, 239, 191, 189, 80, 110, 120, 239, 191, 189, 239, 191,
					189, 198, 132, 239, 191, 189, 239, 191, 189, 29, 239, 191, 189, 19, 239, 191, 189,
					8, 114, 30, 17, 212, 186, 58, 95, 239, 191, 189, 94, 59, 26, 18, 6, 124, 119, 239,
					191, 189, 79, 239, 191, 189, 21, 65, 239, 191, 189, 239, 191, 189, 239, 191, 189,
				},
			},
		},
	}
	testEmailFromFile(t, fp, expectedEmail)
}

func TestParseEmailFinnishMultipartSignedUtf8OverQuotedprintable(t *testing.T) {
	fp := "tests/test_finnish_multipart_signed_utf-8_over_quoted-printable.txt"
	expectedEmail := &email.Email{
		Headers: email.Headers{
			Date: time.Time(time.Date(2019, 4, 1, 4, 55, 0, 0, time.UTC)),
			Sender: &mail.Address{
				Name:    "Alice Lähettäjä",
				Address: "alice.lahettaja@example.com",
			},
			From: []*mail.Address{
				&mail.Address{
					Name:    "Alice Lähettäjä",
					Address: "alice.lahettaja@example.com",
				},
				&mail.Address{
					Name:    "Alice Lähettäjä",
					Address: "alice.lahettaja@example.net",
				},
			},
			ReplyTo: []*mail.Address{
				&mail.Address{
					Name:    "Alice Lähettäjä",
					Address: "alice.lahettaja@example.net",
				},
			},
			To: []*mail.Address{
				&mail.Address{
					Name:    "Bob Vastaanottaja",
					Address: "bob.vastaanottaja@exaple.com",
				},
				&mail.Address{
					Name:    "Carol Vastaanottaja",
					Address: "carol.vastaanottaja@example.com",
				},
			},
			Cc: []*mail.Address{
				&mail.Address{
					Name:    "Dan Vastaanottaja",
					Address: "dan.vastaanottaja@example.com",
				},
				&mail.Address{
					Name:    "Eve Vastaanottaja",
					Address: "eve.vastaanottaja@example.com",
				},
			},
			Bcc: []*mail.Address{
				&mail.Address{
					Name:    "Frank Vastaanottaja",
					Address: "frank.vastaanottaja@example.com",
				},
				&mail.Address{
					Name:    "Grace Vastaanottaja",
					Address: "grace.vastaanottaja@example.com",
				},
			},
			MessageID: "Message-Id-1@example.com",
			InReplyTo: []string{
				"Message-Id-0@example.com",
			},
			References: []string{
				"Message-Id-0@example.com",
			},
			Subject:  "📧 Signed Test Suomenkieliset pangrammit",
			Comments: "Message Header Comment",
			Keywords: []string{
				"Keyword 1",
				"Keyword 2",
			},
			ResentDate: time.Time(time.Date(2019, 4, 1, 4, 55, 0, 0, time.UTC)),
			ResentFrom: []*mail.Address{
				&mail.Address{
					Name:    "Alice Lähettäjä",
					Address: "alice.lahettaja@example.net",
				},
				&mail.Address{
					Name:    "Alice Lähettäjä",
					Address: "alice.lahettaja@example.com",
				},
			},
			ResentSender: &mail.Address{
				Name:    "Alice Lähettäjä",
				Address: "alice.lahettaja@example.net",
			},
			ResentTo: []*mail.Address{
				&mail.Address{
					Name:    "Bob Vastaanottaja",
					Address: "bob.vastaanottaja@exaple.com",
				},
				&mail.Address{
					Name:    "Carol Vastaanottaja",
					Address: "carol.vastaanottaja@example.net",
				},
			},
			ResentCc: []*mail.Address{
				&mail.Address{
					Name:    "Dan Vastaanottaja",
					Address: "dan.vastaanottaja@example.net",
				},
				&mail.Address{
					Name:    "Eve Vastaanottaja",
					Address: "eve.vastaanottaja@example.net",
				},
			},
			ResentBcc: []*mail.Address{
				&mail.Address{
					Name:    "Frank Vastaanottaja",
					Address: "frank.vastaanottaja@example.net",
				},
				&mail.Address{
					Name:    "Grace Vastaanottaja",
					Address: "grace.vastaanottaja@example.net",
				},
			},
			ResentMessageID: "Message-Id-1@example.net",
			ExtraHeaders: map[string][]string{
				"X-Clacks-Overhead": []string{
					"GNU Terry Pratchett",
				},
				"X-Script/function/\t !\"#$%&'()*+,-./;<=>?@[\\]^_`{|}~": []string{
					"TEST VALUE 1\t !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_` abcdefghijklmnopqrstuvwxyz{|}~",
					"TEST VALUE 2\t !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_` abcdefghijklmnopqrstuvwxyz{|}~",
				},
			},
			ContentInfo: &email.ContentInfo{
				Type: "multipart/signed",
				TypeParams: map[string]string{
					"boundary": "SignedBoundaryString",
					"charset":  "utf-8",
					"micalg":   "sha1",
					"protocol": "application/pkcs7-signature",
				},
				Disposition:       "",
				DispositionParams: map[string]string(nil), // p0
				TransferEncoding:  "quoted-printable",
				ID:                "",
				Charset:           "utf-8",
			},
			Received: nil,
		},
		Text: "Albert osti fagotin ja töräytti puhkuvan melodian.\n" +
			"Lorun sangen pieneksi hyödyksi jäivät suomen kirjaimet.\n" +
			"Hyvän lorun sangen pieneksi hyödyksi jäi suomen kirjaimet.\n" +
			"Fahrenheit ja Celsius yrjösivät Åsan backgammon-peliin, Volkswagenissa, daiquirin ja ZX81:n yhteisvaikutuksesta.\n" +
			"Charles Darwin jammaili Åken hevixylofonilla Qatarin yöpub Zeligissä.\n" +
			"Wieniläinen sioux:ta puhuva ökyzombie diggaa Åsan roquefort-tacoja.",
		EnrichedText: "",
		HTML:         "",
		Files: []*email.File{
			&email.File{
				FileType: "attachment",
				Name:     "smime.p7s",
				ContentInfo: &email.ContentInfo{
					Type: "application/pkcs7-signature",
					TypeParams: map[string]string{
						"name": "smime.p7s",
					},
					Disposition: "attachment",
					DispositionParams: map[string]string{
						"filename": "smime.p7s",
					},
					TransferEncoding: "base64",
					ID:               "",
					Charset:          "utf-8",
				},
				Data: []byte{
					239, 191, 189, 28, 239, 191, 189, 239, 191, 189, 117, 46, 239, 191, 189, 18, 97,
					239, 191, 189, 126, 239, 191, 189, 239, 191, 189, 239, 191, 189, 239, 191, 189, 25,
					58, 223, 189, 239, 191, 189, 239, 191, 189, 239, 158, 173, 108, 31, 71, 27, 239,
					191, 189, 80, 239, 191, 189, 239, 191, 189, 239, 191, 189, 239, 191, 189, 198, 132,
					239, 191, 189, 239, 191, 189, 29, 239, 191, 189, 19, 239, 191, 189, 80, 239, 191,
					189, 239, 191, 189, 239, 191, 189, 239, 191, 189, 198, 132, 239, 191, 189, 239, 191,
					189, 29, 239, 191, 189, 19, 239, 191, 189, 49, 239, 191, 189, 239, 191, 189, 127,
					7, 28, 104, 33, 239, 191, 189, 120, 71, 82, 239, 191, 189, 239, 191, 189, 38, 30,
					239, 191, 189, 239, 191, 189, 239, 191, 189, 239, 191, 189, 239, 191, 189, 113, 239,
					191, 189, 239, 191, 189, 239, 191, 189, 219, 158, 57, 239, 191, 189, 28, 113, 239,
					191, 189, 239, 191, 189, 239, 191, 189, 239, 191, 189, 38, 24, 239, 191, 189, 239,
					190, 173, 108, 31, 71, 27, 239, 191, 189, 80, 110, 120, 239, 191, 189, 239, 191,
					189, 198, 132, 239, 191, 189, 239, 191, 189, 29, 239, 191, 189, 19, 239, 191, 189,
					8, 114, 30, 17, 212, 186, 58, 95, 239, 191, 189, 94, 59, 26, 18, 6, 124, 119, 239,
					191, 189, 79, 239, 191, 189, 21, 65, 239, 191, 189, 239, 191, 189, 239, 191, 189,
				},
			},
		},
	}
	testEmailFromFile(t, fp, expectedEmail)
}

func TestParseEmailFinnishMultipartSignedIso885915OverBase64(t *testing.T) {
	fp := "tests/test_finnish_multipart_signed_iso-8859-15_over_base64.txt"
	expectedEmail := &email.Email{
		Headers: email.Headers{
			Date: time.Time(time.Date(2019, 4, 1, 4, 55, 0, 0, time.UTC)),
			Sender: &mail.Address{
				Name:    "Alice Lähettäjä",
				Address: "alice.lahettaja@example.com",
			},
			From: []*mail.Address{
				&mail.Address{
					Name:    "Alice Lähettäjä",
					Address: "alice.lahettaja@example.com",
				},
				&mail.Address{
					Name:    "Alice Lähettäjä",
					Address: "alice.lahettaja@example.net",
				},
			},
			ReplyTo: []*mail.Address{
				&mail.Address{
					Name:    "Alice Lähettäjä",
					Address: "alice.lahettaja@example.net",
				},
			},
			To: []*mail.Address{
				&mail.Address{
					Name:    "Bob Vastaanottaja",
					Address: "bob.vastaanottaja@exaple.com",
				},
				&mail.Address{
					Name:    "Carol Vastaanottaja",
					Address: "carol.vastaanottaja@example.com",
				},
			},
			Cc: []*mail.Address{
				&mail.Address{
					Name:    "Dan Vastaanottaja",
					Address: "dan.vastaanottaja@example.com",
				},
				&mail.Address{
					Name:    "Eve Vastaanottaja",
					Address: "eve.vastaanottaja@example.com",
				},
			},
			Bcc: []*mail.Address{
				&mail.Address{
					Name:    "Frank Vastaanottaja",
					Address: "frank.vastaanottaja@example.com",
				},
				&mail.Address{
					Name:    "Grace Vastaanottaja",
					Address: "grace.vastaanottaja@example.com",
				},
			},
			MessageID: "Message-Id-1@example.com",
			InReplyTo: []string{
				"Message-Id-0@example.com",
			},
			References: []string{
				"Message-Id-0@example.com",
			},
			Subject:  "📧 Signed Test Suomenkieliset pangrammit",
			Comments: "Message Header Comment",
			Keywords: []string{
				"Keyword 1",
				"Keyword 2",
			},
			ResentDate: time.Time(time.Date(2019, 4, 1, 4, 55, 0, 0, time.UTC)),
			ResentFrom: []*mail.Address{
				&mail.Address{
					Name:    "Alice Lähettäjä",
					Address: "alice.lahettaja@example.net",
				},
				&mail.Address{
					Name:    "Alice Lähettäjä",
					Address: "alice.lahettaja@example.com",
				},
			},
			ResentSender: &mail.Address{
				Name:    "Alice Lähettäjä",
				Address: "alice.lahettaja@example.net",
			},
			ResentTo: []*mail.Address{
				&mail.Address{
					Name:    "Bob Vastaanottaja",
					Address: "bob.vastaanottaja@exaple.com",
				},
				&mail.Address{
					Name:    "Carol Vastaanottaja",
					Address: "carol.vastaanottaja@example.net",
				},
			},
			ResentCc: []*mail.Address{
				&mail.Address{
					Name:    "Dan Vastaanottaja",
					Address: "dan.vastaanottaja@example.net",
				},
				&mail.Address{
					Name:    "Eve Vastaanottaja",
					Address: "eve.vastaanottaja@example.net",
				},
			},
			ResentBcc: []*mail.Address{
				&mail.Address{
					Name:    "Frank Vastaanottaja",
					Address: "frank.vastaanottaja@example.net",
				},
				&mail.Address{
					Name:    "Grace Vastaanottaja",
					Address: "grace.vastaanottaja@example.net",
				},
			},
			ResentMessageID: "Message-Id-1@example.net",
			ExtraHeaders: map[string][]string{
				"X-Clacks-Overhead": []string{
					"GNU Terry Pratchett",
				},
				"X-Script/function/\t !\"#$%&'()*+,-./;<=>?@[\\]^_`{|}~": []string{
					"TEST VALUE 1\t !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_` abcdefghijklmnopqrstuvwxyz{|}~",
					"TEST VALUE 2\t !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_` abcdefghijklmnopqrstuvwxyz{|}~",
				},
			},
			ContentInfo: &email.ContentInfo{
				Type: "multipart/signed",
				TypeParams: map[string]string{
					"boundary": "SignedBoundaryString",
					"charset":  "iso-8859-15",
					"micalg":   "sha1",
					"protocol": "application/pkcs7-signature",
				},
				Disposition:       "",
				DispositionParams: map[string]string(nil), // p0
				TransferEncoding:  "base64",
				ID:                "",
				Charset:           "iso-8859-15",
			},
			Received: nil,
		},
		Text: "Albert osti fagotin ja töräytti puhkuvan melodian.\n" +
			"Lorun sangen pieneksi hyödyksi jäivät suomen kirjaimet.\n" +
			"Hyvän lorun sangen pieneksi hyödyksi jäi suomen kirjaimet.\n" +
			"Fahrenheit ja Celsius yrjösivät Åsan backgammon-peliin, Volkswagenissa, daiquirin ja ZX81:n yhteisvaikutuksesta.\n" +
			"Charles Darwin jammaili Åken hevixylofonilla Qatarin yöpub Zeligissä.\n" +
			"Wieniläinen sioux:ta puhuva ökyzombie diggaa Åsan roquefort-tacoja.",
		EnrichedText: "",
		HTML:         "",
		Files: []*email.File{
			&email.File{
				FileType: "attachment",
				Name:     "smime.p7s",
				ContentInfo: &email.ContentInfo{
					Type: "application/pkcs7-signature",
					TypeParams: map[string]string{
						"name": "smime.p7s",
					},
					Disposition: "attachment",
					DispositionParams: map[string]string{
						"filename": "smime.p7s",
					},
					TransferEncoding: "base64",
					ID:               "",
					Charset:          "iso-8859-15",
				},
				Data: []byte{
					239, 191, 189, 28, 239, 191, 189, 239, 191, 189, 117, 46, 239, 191, 189, 18, 97,
					239, 191, 189, 126, 195, 187, 239, 191, 189, 195, 129, 195, 135, 25, 58, 195, 159,
					197, 147, 194, 185, 195, 163, 195, 175, 239, 191, 189, 194, 173, 108, 31, 71, 27,
					239, 191, 189, 80, 194, 165, 195, 188, 239, 191, 189, 195, 163, 194, 174, 195, 134,
					239, 191, 189, 239, 191, 189, 239, 191, 189, 29, 195, 182, 19, 195, 171, 239, 191,
					189, 80, 194, 165, 195, 188, 239, 191, 189, 195, 163, 194, 174, 195, 134, 239, 191,
					189, 239, 191, 189, 239, 191, 189, 29, 195, 182, 19, 195, 170, 49, 195, 187, 195,
					174, 127, 7, 28, 104, 33, 195, 136, 120, 71, 82, 195, 168, 195, 161, 38, 30, 195,
					185, 195, 170, 195, 150, 195, 129, 195, 180, 113, 239, 191, 189, 194, 173, 195, 187,
					195, 155, 239, 191, 189, 57, 195, 188, 28, 113, 239, 191, 189, 194, 173, 195, 187,
					195, 161, 38, 24, 195, 135, 195, 175, 197, 184, 194, 173, 108, 31, 71, 27, 239, 191,
					189, 80, 110, 120, 195, 187, 195, 167, 194, 174, 195, 134, 239, 191, 189, 239, 191,
					189, 239, 191, 189, 29, 195, 182, 19, 195, 170, 8, 114, 30, 17, 195, 148, 194, 186,
					58, 95, 195, 136, 94, 59, 26, 18, 6, 124, 119, 195, 152, 79, 194, 174, 21, 65, 194,
					185, 195, 163, 195, 175, 239, 191, 189,
				},
			},
		},
	}
	testEmailFromFile(t, fp, expectedEmail)
}

func TestParseEmailFinnishMultipartSignedIso885915OverQuotedprintable(t *testing.T) {
	fp := "tests/test_finnish_multipart_signed_iso-8859-15_over_quoted-printable.txt"
	expectedEmail := &email.Email{
		Headers: email.Headers{
			Date: time.Time(time.Date(2019, 4, 1, 4, 55, 0, 0, time.UTC)),
			Sender: &mail.Address{
				Name:    "Alice Lähettäjä",
				Address: "alice.lahettaja@example.com",
			},
			From: []*mail.Address{
				&mail.Address{
					Name:    "Alice Lähettäjä",
					Address: "alice.lahettaja@example.com",
				},
				&mail.Address{
					Name:    "Alice Lähettäjä",
					Address: "alice.lahettaja@example.net",
				},
			},
			ReplyTo: []*mail.Address{
				&mail.Address{
					Name:    "Alice Lähettäjä",
					Address: "alice.lahettaja@example.net",
				},
			},
			To: []*mail.Address{
				&mail.Address{
					Name:    "Bob Vastaanottaja",
					Address: "bob.vastaanottaja@exaple.com",
				},
				&mail.Address{
					Name:    "Carol Vastaanottaja",
					Address: "carol.vastaanottaja@example.com",
				},
			},
			Cc: []*mail.Address{
				&mail.Address{
					Name:    "Dan Vastaanottaja",
					Address: "dan.vastaanottaja@example.com",
				},
				&mail.Address{
					Name:    "Eve Vastaanottaja",
					Address: "eve.vastaanottaja@example.com",
				},
			},
			Bcc: []*mail.Address{
				&mail.Address{
					Name:    "Frank Vastaanottaja",
					Address: "frank.vastaanottaja@example.com",
				},
				&mail.Address{
					Name:    "Grace Vastaanottaja",
					Address: "grace.vastaanottaja@example.com",
				},
			},
			MessageID: "Message-Id-1@example.com",
			InReplyTo: []string{
				"Message-Id-0@example.com",
			},
			References: []string{
				"Message-Id-0@example.com",
			},
			Subject:  "📧 Signed Test Suomenkieliset pangrammit",
			Comments: "Message Header Comment",
			Keywords: []string{
				"Keyword 1",
				"Keyword 2",
			},
			ResentDate: time.Time(time.Date(2019, 4, 1, 4, 55, 0, 0, time.UTC)),
			ResentFrom: []*mail.Address{
				&mail.Address{
					Name:    "Alice Lähettäjä",
					Address: "alice.lahettaja@example.net",
				},
				&mail.Address{
					Name:    "Alice Lähettäjä",
					Address: "alice.lahettaja@example.com",
				},
			},
			ResentSender: &mail.Address{
				Name:    "Alice Lähettäjä",
				Address: "alice.lahettaja@example.net",
			},
			ResentTo: []*mail.Address{
				&mail.Address{
					Name:    "Bob Vastaanottaja",
					Address: "bob.vastaanottaja@exaple.com",
				},
				&mail.Address{
					Name:    "Carol Vastaanottaja",
					Address: "carol.vastaanottaja@example.net",
				},
			},
			ResentCc: []*mail.Address{
				&mail.Address{
					Name:    "Dan Vastaanottaja",
					Address: "dan.vastaanottaja@example.net",
				},
				&mail.Address{
					Name:    "Eve Vastaanottaja",
					Address: "eve.vastaanottaja@example.net",
				},
			},
			ResentBcc: []*mail.Address{
				&mail.Address{
					Name:    "Frank Vastaanottaja",
					Address: "frank.vastaanottaja@example.net",
				},
				&mail.Address{
					Name:    "Grace Vastaanottaja",
					Address: "grace.vastaanottaja@example.net",
				},
			},
			ResentMessageID: "Message-Id-1@example.net",
			ExtraHeaders: map[string][]string{
				"X-Clacks-Overhead": []string{
					"GNU Terry Pratchett",
				},
				"X-Script/function/\t !\"#$%&'()*+,-./;<=>?@[\\]^_`{|}~": []string{
					"TEST VALUE 1\t !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_` abcdefghijklmnopqrstuvwxyz{|}~",
					"TEST VALUE 2\t !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_` abcdefghijklmnopqrstuvwxyz{|}~",
				},
			},
			ContentInfo: &email.ContentInfo{
				Type: "multipart/signed",
				TypeParams: map[string]string{
					"boundary": "SignedBoundaryString",
					"charset":  "iso-8859-15",
					"micalg":   "sha1",
					"protocol": "application/pkcs7-signature",
				},
				Disposition:       "",
				DispositionParams: map[string]string(nil), // p0
				TransferEncoding:  "quoted-printable",
				ID:                "",
				Charset:           "iso-8859-15",
			},
			Received: nil,
		},
		Text: "Albert osti fagotin ja töräytti puhkuvan melodian.\n" +
			"Lorun sangen pieneksi hyödyksi jäivät suomen kirjaimet.\n" +
			"Hyvän lorun sangen pieneksi hyödyksi jäi suomen kirjaimet.\n" +
			"Fahrenheit ja Celsius yrjösivät Åsan backgammon-peliin, Volkswagenissa, daiquirin ja ZX81:n yhteisvaikutuksesta.\n" +
			"Charles Darwin jammaili Åken hevixylofonilla Qatarin yöpub Zeligissä.\n" +
			"Wieniläinen sioux:ta puhuva ökyzombie diggaa Åsan roquefort-tacoja.",
		EnrichedText: "",
		HTML:         "",
		Files: []*email.File{
			&email.File{
				FileType: "attachment",
				Name:     "smime.p7s",
				ContentInfo: &email.ContentInfo{
					Type: "application/pkcs7-signature",
					TypeParams: map[string]string{
						"name": "smime.p7s",
					},
					Disposition: "attachment",
					DispositionParams: map[string]string{
						"filename": "smime.p7s",
					},
					TransferEncoding: "base64",
					ID:               "",
					Charset:          "iso-8859-15",
				},
				Data: []byte{
					239, 191, 189, 28, 239, 191, 189, 239, 191, 189, 117, 46, 239, 191, 189, 18, 97,
					239, 191, 189, 126, 195, 187, 239, 191, 189, 195, 129, 195, 135, 25, 58, 195, 159,
					197, 147, 194, 185, 195, 163, 195, 175, 239, 191, 189, 194, 173, 108, 31, 71, 27,
					239, 191, 189, 80, 194, 165, 195, 188, 239, 191, 189, 195, 163, 194, 174, 195, 134,
					239, 191, 189, 239, 191, 189, 239, 191, 189, 29, 195, 182, 19, 195, 171, 239, 191,
					189, 80, 194, 165, 195, 188, 239, 191, 189, 195, 163, 194, 174, 195, 134, 239, 191,
					189, 239, 191, 189, 239, 191, 189, 29, 195, 182, 19, 195, 170, 49, 195, 187, 195,
					174, 127, 7, 28, 104, 33, 195, 136, 120, 71, 82, 195, 168, 195, 161, 38, 30, 195,
					185, 195, 170, 195, 150, 195, 129, 195, 180, 113, 239, 191, 189, 194, 173, 195, 187,
					195, 155, 239, 191, 189, 57, 195, 188, 28, 113, 239, 191, 189, 194, 173, 195, 187,
					195, 161, 38, 24, 195, 135, 195, 175, 197, 184, 194, 173, 108, 31, 71, 27, 239, 191,
					189, 80, 110, 120, 195, 187, 195, 167, 194, 174, 195, 134, 239, 191, 189, 239, 191,
					189, 239, 191, 189, 29, 195, 182, 19, 195, 170, 8, 114, 30, 17, 195, 148, 194, 186,
					58, 95, 195, 136, 94, 59, 26, 18, 6, 124, 119, 195, 152, 79, 194, 174, 21, 65, 194,
					185, 195, 163, 195, 175, 239, 191, 189,
				},
			},
		},
	}
	testEmailFromFile(t, fp, expectedEmail)
}

func TestParseEmailIcelandicPlaintextUtf8OverBase64(t *testing.T) {
	fp := "tests/test_icelandic_plaintext_utf-8_over_base64.txt"
	expectedEmail := &email.Email{
		Headers: email.Headers{
			Date: time.Time(time.Date(2019, 4, 1, 7, 55, 0, 0, time.UTC)),
			Sender: &mail.Address{
				Name:    "Alice Sendandidóttir",
				Address: "alice.sendandidottir@example.com",
			},
			From: []*mail.Address{
				&mail.Address{
					Name:    "Alice Sendandidóttir",
					Address: "alice.sendandidottir@example.com",
				},
				&mail.Address{
					Name:    "Alice Sendandidóttir",
					Address: "alice.sendandidottir@example.net",
				},
			},
			ReplyTo: []*mail.Address{
				&mail.Address{
					Name:    "Alice Sendandidóttir",
					Address: "alice.sendandidottir@example.net",
				},
			},
			To: []*mail.Address{
				&mail.Address{
					Name:    "Bob Viðtakandison",
					Address: "bob.didtakandison@example.com",
				},
				&mail.Address{
					Name:    "Carol Viðtakandidóttir",
					Address: "carol.didtakandidottir@example.com",
				},
			},
			Cc: []*mail.Address{
				&mail.Address{
					Name:    "Dan Viðtakandison",
					Address: "dan.vidtakandison@example.com",
				},
				&mail.Address{
					Name:    "Eve Viðtakandidóttir",
					Address: "eve.vidtakandidottir@example.com",
				},
			},
			Bcc: []*mail.Address{
				&mail.Address{
					Name:    "Frank Viðtakandison",
					Address: "frank.vidtakandison@example.com",
				},
				&mail.Address{
					Name:    "Grace Viðtakandidóttir",
					Address: "grace.vidtakandidottir@example.com",
				},
			},
			MessageID: "Message-Id-1@example.com",
			InReplyTo: []string{
				"Message-Id-0@example.com",
			},
			References: []string{
				"Message-Id-0@example.com",
			},
			Subject:  "📧 Test Íslenskt pangram",
			Comments: "Message Header Comment",
			Keywords: []string{
				"Keyword 1",
				"Keyword 2",
			},
			ResentDate: time.Time(time.Date(2019, 4, 1, 7, 55, 0, 0, time.UTC)),
			ResentFrom: []*mail.Address{
				&mail.Address{
					Name:    "Alice Sendandidóttir",
					Address: "alice.sendandidottir@example.net",
				},
				&mail.Address{
					Name:    "Alice Sendandidóttir",
					Address: "alice.sendandidottir@example.com",
				},
			},
			ResentSender: &mail.Address{
				Name:    "Alice Sendandidóttir",
				Address: "alice.sendandidottir@example.net",
			},
			ResentTo: []*mail.Address{
				&mail.Address{
					Name:    "Bob Viðtakandison",
					Address: "bob.didtakandison@example.net",
				},
				&mail.Address{
					Name:    "Carol Viðtakandidóttir",
					Address: "carol.didtakandidottir@example.net",
				},
			},
			ResentCc: []*mail.Address{
				&mail.Address{
					Name:    "Dan Viðtakandison",
					Address: "dan.vidtakandison@example.net",
				},
				&mail.Address{
					Name:    "Eve Viðtakandidóttir",
					Address: "eve.vidtakandidottir@example.net",
				},
			},
			ResentBcc: []*mail.Address{
				&mail.Address{
					Name:    "Frank Viðtakandison",
					Address: "frank.vidtakandison@example.net",
				},
				&mail.Address{
					Name:    "Grace Viðtakandidóttir",
					Address: "grace.vidtakandidottir@example.net",
				},
			},
			ResentMessageID: "Message-Id-1@example.net",
			ExtraHeaders: map[string][]string{
				"X-Clacks-Overhead": []string{
					"GNU Terry Pratchett",
				},
				"X-Script/function/\t !\"#$%&'()*+,-./;<=>?@[\\]^_`{|}~": []string{
					"TEST VALUE 1\t !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_` abcdefghijklmnopqrstuvwxyz{|}~",
					"TEST VALUE 2\t !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_` abcdefghijklmnopqrstuvwxyz{|}~",
				},
			},
			ContentInfo: &email.ContentInfo{
				Type: "text/plain",
				TypeParams: map[string]string{
					"charset": "utf-8",
				},
				Disposition:       "",
				DispositionParams: map[string]string(nil),
				TransferEncoding:  "base64",
				ID:                "",
				Charset:           "utf-8",
			},
			Received: nil,
		},
		Text: "Kæmi ný öxi hér, ykist þjófum nú bæði víl og ádrepa.\n" +
			"Svo hölt, yxna kýr þegði jú um dóp í fé á bæ.\n" +
			"Þú dazt á hnéð í vök og yfir blóm sexý pæju.",
		EnrichedText: "",
		HTML:         "",
		Files:        nil,
	}
	testEmailFromFile(t, fp, expectedEmail)
}

func TestParseEmailIcelandicPlaintextUtf8OverQuotedprintable(t *testing.T) {
	fp := "tests/test_icelandic_plaintext_utf-8_over_quoted-printable.txt"
	expectedEmail := &email.Email{
		Headers: email.Headers{
			Date: time.Time(time.Date(2019, 4, 1, 7, 55, 0, 0, time.UTC)),
			Sender: &mail.Address{
				Name:    "Alice Sendandidóttir",
				Address: "alice.sendandidottir@example.com",
			},
			From: []*mail.Address{
				&mail.Address{
					Name:    "Alice Sendandidóttir",
					Address: "alice.sendandidottir@example.com",
				},
				&mail.Address{
					Name:    "Alice Sendandidóttir",
					Address: "alice.sendandidottir@example.net",
				},
			},
			ReplyTo: []*mail.Address{
				&mail.Address{
					Name:    "Alice Sendandidóttir",
					Address: "alice.sendandidottir@example.net",
				},
			},
			To: []*mail.Address{
				&mail.Address{
					Name:    "Bob Viðtakandison",
					Address: "bob.didtakandison@example.com",
				},
				&mail.Address{
					Name:    "Carol Viðtakandidóttir",
					Address: "carol.didtakandidottir@example.com",
				},
			},
			Cc: []*mail.Address{
				&mail.Address{
					Name:    "Dan Viðtakandison",
					Address: "dan.vidtakandison@example.com",
				},
				&mail.Address{
					Name:    "Eve Viðtakandidóttir",
					Address: "eve.vidtakandidottir@example.com",
				},
			},
			Bcc: []*mail.Address{
				&mail.Address{
					Name:    "Frank Viðtakandison",
					Address: "frank.vidtakandison@example.com",
				},
				&mail.Address{
					Name:    "Grace Viðtakandidóttir",
					Address: "grace.vidtakandidottir@example.com",
				},
			},
			MessageID: "Message-Id-1@example.com",
			InReplyTo: []string{
				"Message-Id-0@example.com",
			},
			References: []string{
				"Message-Id-0@example.com",
			},
			Subject:  "📧 Test Íslenskt pangram",
			Comments: "Message Header Comment",
			Keywords: []string{
				"Keyword 1",
				"Keyword 2",
			},
			ResentDate: time.Time(time.Date(2019, 4, 1, 7, 55, 0, 0, time.UTC)),
			ResentFrom: []*mail.Address{
				&mail.Address{
					Name:    "Alice Sendandidóttir",
					Address: "alice.sendandidottir@example.net",
				},
				&mail.Address{
					Name:    "Alice Sendandidóttir",
					Address: "alice.sendandidottir@example.com",
				},
			},
			ResentSender: &mail.Address{
				Name:    "Alice Sendandidóttir",
				Address: "alice.sendandidottir@example.net",
			},
			ResentTo: []*mail.Address{
				&mail.Address{
					Name:    "Bob Viðtakandison",
					Address: "bob.didtakandison@example.net",
				},
				&mail.Address{
					Name:    "Carol Viðtakandidóttir",
					Address: "carol.didtakandidottir@example.net",
				},
			},
			ResentCc: []*mail.Address{
				&mail.Address{
					Name:    "Dan Viðtakandison",
					Address: "dan.vidtakandison@example.net",
				},
				&mail.Address{
					Name:    "Eve Viðtakandidóttir",
					Address: "eve.vidtakandidottir@example.net",
				},
			},
			ResentBcc: []*mail.Address{
				&mail.Address{
					Name:    "Frank Viðtakandison",
					Address: "frank.vidtakandison@example.net",
				},
				&mail.Address{
					Name:    "Grace Viðtakandidóttir",
					Address: "grace.vidtakandidottir@example.net",
				},
			},
			ResentMessageID: "Message-Id-1@example.net",
			ExtraHeaders: map[string][]string{
				"X-Clacks-Overhead": []string{
					"GNU Terry Pratchett",
				},
				"X-Script/function/\t !\"#$%&'()*+,-./;<=>?@[\\]^_`{|}~": []string{
					"TEST VALUE 1\t !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_` abcdefghijklmnopqrstuvwxyz{|}~",
					"TEST VALUE 2\t !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_` abcdefghijklmnopqrstuvwxyz{|}~",
				},
			},
			ContentInfo: &email.ContentInfo{
				Type: "text/plain",
				TypeParams: map[string]string{
					"charset": "utf-8",
				},
				Disposition:       "",
				DispositionParams: map[string]string(nil),
				TransferEncoding:  "quoted-printable",
				ID:                "",
				Charset:           "utf-8",
			},
			Received: nil,
		},
		Text: "Kæmi ný öxi hér, ykist þjófum nú bæði víl og ádrepa.\n" +
			"Svo hölt, yxna kýr þegði jú um dóp í fé á bæ.\n" +
			"Þú dazt á hnéð í vök og yfir blóm sexý pæju.",
		EnrichedText: "",
		HTML:         "",
		Files:        nil,
	}
	testEmailFromFile(t, fp, expectedEmail)
}

func TestParseEmailIcelandicPlaintextIso88591OverBase64(t *testing.T) {
	fp := "tests/test_icelandic_plaintext_iso-8859-1_over_base64.txt"
	expectedEmail := &email.Email{
		Headers: email.Headers{
			Date: time.Time(time.Date(2019, 4, 1, 7, 55, 0, 0, time.UTC)),
			Sender: &mail.Address{
				Name:    "Alice Sendandidóttir",
				Address: "alice.sendandidottir@example.com",
			},
			From: []*mail.Address{
				&mail.Address{
					Name:    "Alice Sendandidóttir",
					Address: "alice.sendandidottir@example.com",
				},
				&mail.Address{
					Name:    "Alice Sendandidóttir",
					Address: "alice.sendandidottir@example.net",
				},
			},
			ReplyTo: []*mail.Address{
				&mail.Address{
					Name:    "Alice Sendandidóttir",
					Address: "alice.sendandidottir@example.net",
				},
			},
			To: []*mail.Address{
				&mail.Address{
					Name:    "Bob Viðtakandison",
					Address: "bob.didtakandison@example.com",
				},
				&mail.Address{
					Name:    "Carol Viðtakandidóttir",
					Address: "carol.didtakandidottir@example.com",
				},
			},
			Cc: []*mail.Address{
				&mail.Address{
					Name:    "Dan Viðtakandison",
					Address: "dan.vidtakandison@example.com",
				},
				&mail.Address{
					Name:    "Eve Viðtakandidóttir",
					Address: "eve.vidtakandidottir@example.com",
				},
			},
			Bcc: []*mail.Address{
				&mail.Address{
					Name:    "Frank Viðtakandison",
					Address: "frank.vidtakandison@example.com",
				},
				&mail.Address{
					Name:    "Grace Viðtakandidóttir",
					Address: "grace.vidtakandidottir@example.com",
				},
			},
			MessageID: "Message-Id-1@example.com",
			InReplyTo: []string{
				"Message-Id-0@example.com",
			},
			References: []string{
				"Message-Id-0@example.com",
			},
			Subject:  "📧 Test Íslenskt pangram",
			Comments: "Message Header Comment",
			Keywords: []string{
				"Keyword 1",
				"Keyword 2",
			},
			ResentDate: time.Time(time.Date(2019, 4, 1, 7, 55, 0, 0, time.UTC)),
			ResentFrom: []*mail.Address{
				&mail.Address{
					Name:    "Alice Sendandidóttir",
					Address: "alice.sendandidottir@example.net",
				},
				&mail.Address{
					Name:    "Alice Sendandidóttir",
					Address: "alice.sendandidottir@example.com",
				},
			},
			ResentSender: &mail.Address{
				Name:    "Alice Sendandidóttir",
				Address: "alice.sendandidottir@example.net",
			},
			ResentTo: []*mail.Address{
				&mail.Address{
					Name:    "Bob Viðtakandison",
					Address: "bob.didtakandison@example.net",
				},
				&mail.Address{
					Name:    "Carol Viðtakandidóttir",
					Address: "carol.didtakandidottir@example.net",
				},
			},
			ResentCc: []*mail.Address{
				&mail.Address{
					Name:    "Dan Viðtakandison",
					Address: "dan.vidtakandison@example.net",
				},
				&mail.Address{
					Name:    "Eve Viðtakandidóttir",
					Address: "eve.vidtakandidottir@example.net",
				},
			},
			ResentBcc: []*mail.Address{
				&mail.Address{
					Name:    "Frank Viðtakandison",
					Address: "frank.vidtakandison@example.net",
				},
				&mail.Address{
					Name:    "Grace Viðtakandidóttir",
					Address: "grace.vidtakandidottir@example.net",
				},
			},
			ResentMessageID: "Message-Id-1@example.net",
			ExtraHeaders: map[string][]string{
				"X-Clacks-Overhead": []string{
					"GNU Terry Pratchett",
				},
				"X-Script/function/\t !\"#$%&'()*+,-./;<=>?@[\\]^_`{|}~": []string{
					"TEST VALUE 1\t !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_` abcdefghijklmnopqrstuvwxyz{|}~",
					"TEST VALUE 2\t !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_` abcdefghijklmnopqrstuvwxyz{|}~",
				},
			},
			ContentInfo: &email.ContentInfo{
				Type: "text/plain",
				TypeParams: map[string]string{
					"charset": "iso-8859-1",
				},
				Disposition:       "",
				DispositionParams: map[string]string(nil),
				TransferEncoding:  "base64",
				ID:                "",
				Charset:           "iso-8859-1",
			},
			Received: nil,
		},
		Text: "Kæmi ný öxi hér, ykist þjófum nú bæði víl og ádrepa.\n" +
			"Svo hölt, yxna kýr þegði jú um dóp í fé á bæ.\n" +
			"Þú dazt á hnéð í vök og yfir blóm sexý pæju.",
		EnrichedText: "",
		HTML:         "",
		Files:        nil,
	}
	testEmailFromFile(t, fp, expectedEmail)
}

func TestParseEmailIcelandicPlaintextIso88591OverQuotedprintable(t *testing.T) {
	fp := "tests/test_icelandic_plaintext_iso-8859-1_over_quoted-printable.txt"
	expectedEmail := &email.Email{
		Headers: email.Headers{
			Date: time.Time(time.Date(2019, 4, 1, 7, 55, 0, 0, time.UTC)),
			Sender: &mail.Address{
				Name:    "Alice Sendandidóttir",
				Address: "alice.sendandidottir@example.com",
			},
			From: []*mail.Address{
				&mail.Address{
					Name:    "Alice Sendandidóttir",
					Address: "alice.sendandidottir@example.com",
				},
				&mail.Address{
					Name:    "Alice Sendandidóttir",
					Address: "alice.sendandidottir@example.net",
				},
			},
			ReplyTo: []*mail.Address{
				&mail.Address{
					Name:    "Alice Sendandidóttir",
					Address: "alice.sendandidottir@example.net",
				},
			},
			To: []*mail.Address{
				&mail.Address{
					Name:    "Bob Viðtakandison",
					Address: "bob.didtakandison@example.com",
				},
				&mail.Address{
					Name:    "Carol Viðtakandidóttir",
					Address: "carol.didtakandidottir@example.com",
				},
			},
			Cc: []*mail.Address{
				&mail.Address{
					Name:    "Dan Viðtakandison",
					Address: "dan.vidtakandison@example.com",
				},
				&mail.Address{
					Name:    "Eve Viðtakandidóttir",
					Address: "eve.vidtakandidottir@example.com",
				},
			},
			Bcc: []*mail.Address{
				&mail.Address{
					Name:    "Frank Viðtakandison",
					Address: "frank.vidtakandison@example.com",
				},
				&mail.Address{
					Name:    "Grace Viðtakandidóttir",
					Address: "grace.vidtakandidottir@example.com",
				},
			},
			MessageID: "Message-Id-1@example.com",
			InReplyTo: []string{
				"Message-Id-0@example.com",
			},
			References: []string{
				"Message-Id-0@example.com",
			},
			Subject:  "📧 Test Íslenskt pangram",
			Comments: "Message Header Comment",
			Keywords: []string{
				"Keyword 1",
				"Keyword 2",
			},
			ResentDate: time.Time(time.Date(2019, 4, 1, 7, 55, 0, 0, time.UTC)),
			ResentFrom: []*mail.Address{
				&mail.Address{
					Name:    "Alice Sendandidóttir",
					Address: "alice.sendandidottir@example.net",
				},
				&mail.Address{
					Name:    "Alice Sendandidóttir",
					Address: "alice.sendandidottir@example.com",
				},
			},
			ResentSender: &mail.Address{
				Name:    "Alice Sendandidóttir",
				Address: "alice.sendandidottir@example.net",
			},
			ResentTo: []*mail.Address{
				&mail.Address{
					Name:    "Bob Viðtakandison",
					Address: "bob.didtakandison@example.net",
				},
				&mail.Address{
					Name:    "Carol Viðtakandidóttir",
					Address: "carol.didtakandidottir@example.net",
				},
			},
			ResentCc: []*mail.Address{
				&mail.Address{
					Name:    "Dan Viðtakandison",
					Address: "dan.vidtakandison@example.net",
				},
				&mail.Address{
					Name:    "Eve Viðtakandidóttir",
					Address: "eve.vidtakandidottir@example.net",
				},
			},
			ResentBcc: []*mail.Address{
				&mail.Address{
					Name:    "Frank Viðtakandison",
					Address: "frank.vidtakandison@example.net",
				},
				&mail.Address{
					Name:    "Grace Viðtakandidóttir",
					Address: "grace.vidtakandidottir@example.net",
				},
			},
			ResentMessageID: "Message-Id-1@example.net",
			ExtraHeaders: map[string][]string{
				"X-Clacks-Overhead": []string{
					"GNU Terry Pratchett",
				},
				"X-Script/function/\t !\"#$%&'()*+,-./;<=>?@[\\]^_`{|}~": []string{
					"TEST VALUE 1\t !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_` abcdefghijklmnopqrstuvwxyz{|}~",
					"TEST VALUE 2\t !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_` abcdefghijklmnopqrstuvwxyz{|}~",
				},
			},
			ContentInfo: &email.ContentInfo{
				Type: "text/plain",
				TypeParams: map[string]string{
					"charset": "iso-8859-1",
				},
				Disposition:       "",
				DispositionParams: map[string]string(nil),
				TransferEncoding:  "quoted-printable",
				ID:                "",
				Charset:           "iso-8859-1",
			},
			Received: nil,
		},
		Text: "Kæmi ný öxi hér, ykist þjófum nú bæði víl og ádrepa.\n" +
			"Svo hölt, yxna kýr þegði jú um dóp í fé á bæ.\n" +
			"Þú dazt á hnéð í vök og yfir blóm sexý pæju.",
		EnrichedText: "",
		HTML:         "",
		Files:        nil,
	}
	testEmailFromFile(t, fp, expectedEmail)
}

func TestParseEmailIcelandicMultipartRelatedUtf8OverBase64(t *testing.T) {
	fp := "tests/test_icelandic_multipart_related_utf-8_over_base64.txt"
	expectedEmail := &email.Email{
		Headers: email.Headers{
			Date: time.Time(time.Date(2019, 4, 1, 7, 55, 0, 0, time.UTC)),
			Sender: &mail.Address{
				Name:    "Alice Sendandidóttir",
				Address: "alice.sendandidottir@example.com",
			},
			From: []*mail.Address{
				&mail.Address{
					Name:    "Alice Sendandidóttir",
					Address: "alice.sendandidottir@example.com",
				},
				&mail.Address{
					Name:    "Alice Sendandidóttir",
					Address: "alice.sendandidottir@example.net",
				},
			},
			ReplyTo: []*mail.Address{
				&mail.Address{
					Name:    "Alice Sendandidóttir",
					Address: "alice.sendandidottir@example.net",
				},
			},
			To: []*mail.Address{
				&mail.Address{
					Name:    "Bob Viðtakandison",
					Address: "bob.didtakandison@example.com",
				},
				&mail.Address{
					Name:    "Carol Viðtakandidóttir",
					Address: "carol.didtakandidottir@example.com",
				},
			},
			Cc: []*mail.Address{
				&mail.Address{
					Name:    "Dan Viðtakandison",
					Address: "dan.vidtakandison@example.com",
				},
				&mail.Address{
					Name:    "Eve Viðtakandidóttir",
					Address: "eve.vidtakandidottir@example.com",
				},
			},
			Bcc: []*mail.Address{
				&mail.Address{
					Name:    "Frank Viðtakandison",
					Address: "frank.vidtakandison@example.com",
				},
				&mail.Address{
					Name:    "Grace Viðtakandidóttir",
					Address: "grace.vidtakandidottir@example.com",
				},
			},
			MessageID: "Message-Id-1@example.com",
			InReplyTo: []string{
				"Message-Id-0@example.com",
			},
			References: []string{
				"Message-Id-0@example.com",
			},
			Subject:  "📧 Test Íslenskt pangram",
			Comments: "Message Header Comment",
			Keywords: []string{
				"Keyword 1",
				"Keyword 2",
			},
			ResentDate: time.Time(time.Date(2019, 4, 1, 7, 55, 0, 0, time.UTC)),
			ResentFrom: []*mail.Address{
				&mail.Address{
					Name:    "Alice Sendandidóttir",
					Address: "alice.sendandidottir@example.net",
				},
				&mail.Address{
					Name:    "Alice Sendandidóttir",
					Address: "alice.sendandidottir@example.com",
				},
			},
			ResentSender: &mail.Address{
				Name:    "Alice Sendandidóttir",
				Address: "alice.sendandidottir@example.net",
			},
			ResentTo: []*mail.Address{
				&mail.Address{
					Name:    "Bob Viðtakandison",
					Address: "bob.didtakandison@example.net",
				},
				&mail.Address{
					Name:    "Carol Viðtakandidóttir",
					Address: "carol.didtakandidottir@example.net",
				},
			},
			ResentCc: []*mail.Address{
				&mail.Address{
					Name:    "Dan Viðtakandison",
					Address: "dan.vidtakandison@example.net",
				},
				&mail.Address{
					Name:    "Eve Viðtakandidóttir",
					Address: "eve.vidtakandidottir@example.net",
				},
			},
			ResentBcc: []*mail.Address{
				&mail.Address{
					Name:    "Frank Viðtakandison",
					Address: "frank.vidtakandison@example.net",
				},
				&mail.Address{
					Name:    "Grace Viðtakandidóttir",
					Address: "grace.vidtakandidottir@example.net",
				},
			},
			ResentMessageID: "Message-Id-1@example.net",
			ExtraHeaders: map[string][]string{
				"X-Clacks-Overhead": []string{
					"GNU Terry Pratchett",
				},
				"X-Script/function/\t !\"#$%&'()*+,-./;<=>?@[\\]^_`{|}~": []string{
					"TEST VALUE 1\t !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_` abcdefghijklmnopqrstuvwxyz{|}~",
					"TEST VALUE 2\t !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_` abcdefghijklmnopqrstuvwxyz{|}~",
				},
			},
			ContentInfo: &email.ContentInfo{
				Type: "multipart/related",
				TypeParams: map[string]string{
					"boundary": "RelatedBoundaryString",
					"charset":  "utf-8",
				},
				Disposition:       "",
				DispositionParams: map[string]string(nil), // p0
				TransferEncoding:  "base64",
				ID:                "",
				Charset:           "utf-8",
			},
			Received: nil,
		},
		Text: "Kæmi ný öxi hér, ykist þjófum nú bæði víl og ádrepa.\n" +
			"Svo hölt, yxna kýr þegði jú um dóp í fé á bæ.\n" +
			"Þú dazt á hnéð í vök og yfir blóm sexý pæju.",
		EnrichedText: "<bold>Kæmi ný öxi hér, ykist þjófum nú bæði víl og ádrepa.</bold>\n" +
			"<italic>Svo hölt, yxna kýr þegði jú um dóp í fé á bæ.</italic>\n" +
			"<fixed>Þú dazt á hnéð í vök og yfir blóm sexý pæju.</fixed>",
		HTML: "<html>\n" +
			"<div dir=\"ltr\">\n" +
			"<p>Kæmi ný öxi hér, ykist þjófum nú bæði víl og ádrepa.</p>\n" +
			"<p>Svo hölt, yxna kýr þegði jú um dóp í fé á bæ.</p>\n" +
			"<p>Þú dazt á hnéð í vök og yfir blóm sexý pæju.</p>\n" +
			"</div>\n" +
			"</html>",
		Files: []*email.File{
			&email.File{
				FileType: "inline",
				Name:     "inline-jpg-image-filename.jpg",
				ContentInfo: &email.ContentInfo{
					Type: "image/jpeg",
					TypeParams: map[string]string{
						"name": "inline-jpg-image-name.jpg",
					},
					Disposition: "inline",
					DispositionParams: map[string]string{
						"filename": "inline-jpg-image-filename.jpg",
					},
					TransferEncoding: "base64",
					ID:               "inline-jpg-image.jpg@example.com",
					Charset:          "utf-8",
				},
				Data: []byte{
					239, 191, 189, 239, 191, 189, 239, 191, 189, 239, 191, 189, 0, 67, 0, 3, 2, 2, 2,
					2, 2, 3, 2, 2, 2, 3, 3, 3, 3, 4, 6, 4, 4, 4, 4, 4, 8, 6, 6, 5, 6, 9, 8, 10, 10, 9,
					8, 9, 9, 10, 12, 15, 12, 10, 11, 14, 11, 9, 9, 13, 17, 13, 14, 15, 16, 16, 17, 16,
					10, 12, 18, 19, 18, 16, 19, 15, 16, 16, 16, 239, 191, 189, 239, 191, 189, 0, 11,
					8, 0, 1, 0, 1, 1, 1, 17, 0, 239, 191, 189, 239, 191, 189, 0, 6, 0, 16, 16, 5, 239,
					191, 189, 239, 191, 189, 0, 8, 1, 1, 0, 0, 63, 0, 239, 191, 189, 239, 191, 189, 32,
					239, 191, 189, 239, 191, 189,
				},
			},
		},
	}
	testEmailFromFile(t, fp, expectedEmail)
}

func TestParseEmailIcelandicMultipartRelatedUtf8OverQuotedprintable(t *testing.T) {
	fp := "tests/test_icelandic_multipart_related_utf-8_over_quoted-printable.txt"
	expectedEmail := &email.Email{
		Headers: email.Headers{
			Date: time.Time(time.Date(2019, 4, 1, 7, 55, 0, 0, time.UTC)),
			Sender: &mail.Address{
				Name:    "Alice Sendandidóttir",
				Address: "alice.sendandidottir@example.com",
			},
			From: []*mail.Address{
				&mail.Address{
					Name:    "Alice Sendandidóttir",
					Address: "alice.sendandidottir@example.com",
				},
				&mail.Address{
					Name:    "Alice Sendandidóttir",
					Address: "alice.sendandidottir@example.net",
				},
			},
			ReplyTo: []*mail.Address{
				&mail.Address{
					Name:    "Alice Sendandidóttir",
					Address: "alice.sendandidottir@example.net",
				},
			},
			To: []*mail.Address{
				&mail.Address{
					Name:    "Bob Viðtakandison",
					Address: "bob.didtakandison@example.com",
				},
				&mail.Address{
					Name:    "Carol Viðtakandidóttir",
					Address: "carol.didtakandidottir@example.com",
				},
			},
			Cc: []*mail.Address{
				&mail.Address{
					Name:    "Dan Viðtakandison",
					Address: "dan.vidtakandison@example.com",
				},
				&mail.Address{
					Name:    "Eve Viðtakandidóttir",
					Address: "eve.vidtakandidottir@example.com",
				},
			},
			Bcc: []*mail.Address{
				&mail.Address{
					Name:    "Frank Viðtakandison",
					Address: "frank.vidtakandison@example.com",
				},
				&mail.Address{
					Name:    "Grace Viðtakandidóttir",
					Address: "grace.vidtakandidottir@example.com",
				},
			},
			MessageID: "Message-Id-1@example.com",
			InReplyTo: []string{
				"Message-Id-0@example.com",
			},
			References: []string{
				"Message-Id-0@example.com",
			},
			Subject:  "📧 Test Íslenskt pangram",
			Comments: "Message Header Comment",
			Keywords: []string{
				"Keyword 1",
				"Keyword 2",
			},
			ResentDate: time.Time(time.Date(2019, 4, 1, 7, 55, 0, 0, time.UTC)),
			ResentFrom: []*mail.Address{
				&mail.Address{
					Name:    "Alice Sendandidóttir",
					Address: "alice.sendandidottir@example.net",
				},
				&mail.Address{
					Name:    "Alice Sendandidóttir",
					Address: "alice.sendandidottir@example.com",
				},
			},
			ResentSender: &mail.Address{
				Name:    "Alice Sendandidóttir",
				Address: "alice.sendandidottir@example.net",
			},
			ResentTo: []*mail.Address{
				&mail.Address{
					Name:    "Bob Viðtakandison",
					Address: "bob.didtakandison@example.net",
				},
				&mail.Address{
					Name:    "Carol Viðtakandidóttir",
					Address: "carol.didtakandidottir@example.net",
				},
			},
			ResentCc: []*mail.Address{
				&mail.Address{
					Name:    "Dan Viðtakandison",
					Address: "dan.vidtakandison@example.net",
				},
				&mail.Address{
					Name:    "Eve Viðtakandidóttir",
					Address: "eve.vidtakandidottir@example.net",
				},
			},
			ResentBcc: []*mail.Address{
				&mail.Address{
					Name:    "Frank Viðtakandison",
					Address: "frank.vidtakandison@example.net",
				},
				&mail.Address{
					Name:    "Grace Viðtakandidóttir",
					Address: "grace.vidtakandidottir@example.net",
				},
			},
			ResentMessageID: "Message-Id-1@example.net",
			ExtraHeaders: map[string][]string{
				"X-Clacks-Overhead": []string{
					"GNU Terry Pratchett",
				},
				"X-Script/function/\t !\"#$%&'()*+,-./;<=>?@[\\]^_`{|}~": []string{
					"TEST VALUE 1\t !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_` abcdefghijklmnopqrstuvwxyz{|}~",
					"TEST VALUE 2\t !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_` abcdefghijklmnopqrstuvwxyz{|}~",
				},
			},
			ContentInfo: &email.ContentInfo{
				Type: "multipart/related",
				TypeParams: map[string]string{
					"boundary": "RelatedBoundaryString",
					"charset":  "utf-8",
				},
				Disposition:       "",
				DispositionParams: map[string]string(nil), // p0
				TransferEncoding:  "quoted-printable",
				ID:                "",
				Charset:           "utf-8",
			},
			Received: nil,
		},
		Text: "Kæmi ný öxi hér, ykist þjófum nú bæði víl og ádrepa.\n" +
			"Svo hölt, yxna kýr þegði jú um dóp í fé á bæ.\n" +
			"Þú dazt á hnéð í vök og yfir blóm sexý pæju.",
		EnrichedText: "<bold>Kæmi ný öxi hér, ykist þjófum nú bæði víl og ádrepa.</bold>\n" +
			"<italic>Svo hölt, yxna kýr þegði jú um dóp í fé á bæ.</italic>\n" +
			"<fixed>Þú dazt á hnéð í vök og yfir blóm sexý pæju.</fixed>",
		HTML: "<html>\n" +
			"<div dir=\"ltr\">\n" +
			"<p>Kæmi ný öxi hér, ykist þjófum nú bæði víl og ádrepa.</p>\n" +
			"<p>Svo hölt, yxna kýr þegði jú um dóp í fé á bæ.</p>\n" +
			"<p>Þú dazt á hnéð í vök og yfir blóm sexý pæju.</p>\n" +
			"</div>\n" +
			"</html>",
		Files: []*email.File{
			&email.File{
				FileType: "inline",
				Name:     "inline-jpg-image-filename.jpg",
				ContentInfo: &email.ContentInfo{
					Type: "image/jpeg",
					TypeParams: map[string]string{
						"name": "inline-jpg-image-name.jpg",
					},
					Disposition: "inline",
					DispositionParams: map[string]string{
						"filename": "inline-jpg-image-filename.jpg",
					},
					TransferEncoding: "base64",
					ID:               "inline-jpg-image.jpg@example.com",
					Charset:          "utf-8",
				},
				Data: []byte{
					239, 191, 189, 239, 191, 189, 239, 191, 189, 239, 191, 189, 0, 67, 0, 3, 2, 2, 2,
					2, 2, 3, 2, 2, 2, 3, 3, 3, 3, 4, 6, 4, 4, 4, 4, 4, 8, 6, 6, 5, 6, 9, 8, 10, 10, 9,
					8, 9, 9, 10, 12, 15, 12, 10, 11, 14, 11, 9, 9, 13, 17, 13, 14, 15, 16, 16, 17, 16,
					10, 12, 18, 19, 18, 16, 19, 15, 16, 16, 16, 239, 191, 189, 239, 191, 189, 0, 11,
					8, 0, 1, 0, 1, 1, 1, 17, 0, 239, 191, 189, 239, 191, 189, 0, 6, 0, 16, 16, 5, 239,
					191, 189, 239, 191, 189, 0, 8, 1, 1, 0, 0, 63, 0, 239, 191, 189, 239, 191, 189, 32,
					239, 191, 189, 239, 191, 189,
				},
			},
		},
	}
	testEmailFromFile(t, fp, expectedEmail)
}

func TestParseEmailIcelandicMultipartRelatedIso88591OverBase64(t *testing.T) {
	fp := "tests/test_icelandic_multipart_related_iso-8859-1_over_base64.txt"
	expectedEmail := &email.Email{
		Headers: email.Headers{
			Date: time.Time(time.Date(2019, 4, 1, 7, 55, 0, 0, time.UTC)),
			Sender: &mail.Address{
				Name:    "Alice Sendandidóttir",
				Address: "alice.sendandidottir@example.com",
			},
			From: []*mail.Address{
				&mail.Address{
					Name:    "Alice Sendandidóttir",
					Address: "alice.sendandidottir@example.com",
				},
				&mail.Address{
					Name:    "Alice Sendandidóttir",
					Address: "alice.sendandidottir@example.net",
				},
			},
			ReplyTo: []*mail.Address{
				&mail.Address{
					Name:    "Alice Sendandidóttir",
					Address: "alice.sendandidottir@example.net",
				},
			},
			To: []*mail.Address{
				&mail.Address{
					Name:    "Bob Viðtakandison",
					Address: "bob.didtakandison@example.com",
				},
				&mail.Address{
					Name:    "Carol Viðtakandidóttir",
					Address: "carol.didtakandidottir@example.com",
				},
			},
			Cc: []*mail.Address{
				&mail.Address{
					Name:    "Dan Viðtakandison",
					Address: "dan.vidtakandison@example.com",
				},
				&mail.Address{
					Name:    "Eve Viðtakandidóttir",
					Address: "eve.vidtakandidottir@example.com",
				},
			},
			Bcc: []*mail.Address{
				&mail.Address{
					Name:    "Frank Viðtakandison",
					Address: "frank.vidtakandison@example.com",
				},
				&mail.Address{
					Name:    "Grace Viðtakandidóttir",
					Address: "grace.vidtakandidottir@example.com",
				},
			},
			MessageID: "Message-Id-1@example.com",
			InReplyTo: []string{
				"Message-Id-0@example.com",
			},
			References: []string{
				"Message-Id-0@example.com",
			},
			Subject:  "📧 Test Íslenskt pangram",
			Comments: "Message Header Comment",
			Keywords: []string{
				"Keyword 1",
				"Keyword 2",
			},
			ResentDate: time.Time(time.Date(2019, 4, 1, 7, 55, 0, 0, time.UTC)),
			ResentFrom: []*mail.Address{
				&mail.Address{
					Name:    "Alice Sendandidóttir",
					Address: "alice.sendandidottir@example.net",
				},
				&mail.Address{
					Name:    "Alice Sendandidóttir",
					Address: "alice.sendandidottir@example.com",
				},
			},
			ResentSender: &mail.Address{
				Name:    "Alice Sendandidóttir",
				Address: "alice.sendandidottir@example.net",
			},
			ResentTo: []*mail.Address{
				&mail.Address{
					Name:    "Bob Viðtakandison",
					Address: "bob.didtakandison@example.net",
				},
				&mail.Address{
					Name:    "Carol Viðtakandidóttir",
					Address: "carol.didtakandidottir@example.net",
				},
			},
			ResentCc: []*mail.Address{
				&mail.Address{
					Name:    "Dan Viðtakandison",
					Address: "dan.vidtakandison@example.net",
				},
				&mail.Address{
					Name:    "Eve Viðtakandidóttir",
					Address: "eve.vidtakandidottir@example.net",
				},
			},
			ResentBcc: []*mail.Address{
				&mail.Address{
					Name:    "Frank Viðtakandison",
					Address: "frank.vidtakandison@example.net",
				},
				&mail.Address{
					Name:    "Grace Viðtakandidóttir",
					Address: "grace.vidtakandidottir@example.net",
				},
			},
			ResentMessageID: "Message-Id-1@example.net",
			ExtraHeaders: map[string][]string{
				"X-Clacks-Overhead": []string{
					"GNU Terry Pratchett",
				},
				"X-Script/function/\t !\"#$%&'()*+,-./;<=>?@[\\]^_`{|}~": []string{
					"TEST VALUE 1\t !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_` abcdefghijklmnopqrstuvwxyz{|}~",
					"TEST VALUE 2\t !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_` abcdefghijklmnopqrstuvwxyz{|}~",
				},
			},
			ContentInfo: &email.ContentInfo{
				Type: "multipart/related",
				TypeParams: map[string]string{
					"boundary": "RelatedBoundaryString",
					"charset":  "iso-8859-1",
				},
				Disposition:       "",
				DispositionParams: map[string]string(nil), // p0
				TransferEncoding:  "base64",
				ID:                "",
				Charset:           "iso-8859-1",
			},
			Received: nil,
		},
		Text: "Kæmi ný öxi hér, ykist þjófum nú bæði víl og ádrepa.\n" +
			"Svo hölt, yxna kýr þegði jú um dóp í fé á bæ.\n" +
			"Þú dazt á hnéð í vök og yfir blóm sexý pæju.",
		EnrichedText: "<bold>Kæmi ný öxi hér, ykist þjófum nú bæði víl og ádrepa.</bold>\n" +
			"<italic>Svo hölt, yxna kýr þegði jú um dóp í fé á bæ.</italic>\n" +
			"<fixed>Þú dazt á hnéð í vök og yfir blóm sexý pæju.</fixed>",
		HTML: "<html>\n" +
			"<div dir=\"ltr\">\n" +
			"<p>Kæmi ný öxi hér, ykist þjófum nú bæði víl og ádrepa.</p>\n" +
			"<p>Svo hölt, yxna kýr þegði jú um dóp í fé á bæ.</p>\n" +
			"<p>Þú dazt á hnéð í vök og yfir blóm sexý pæju.</p>\n" +
			"</div>\n" +
			"</html>",
		Files: []*email.File{
			&email.File{
				FileType: "inline",
				Name:     "inline-jpg-image-filename.jpg",
				ContentInfo: &email.ContentInfo{
					Type: "image/jpeg",
					TypeParams: map[string]string{
						"name": "inline-jpg-image-name.jpg",
					},
					Disposition: "inline",
					DispositionParams: map[string]string{
						"filename": "inline-jpg-image-filename.jpg",
					},
					TransferEncoding: "base64",
					ID:               "inline-jpg-image.jpg@example.com",
					Charset:          "iso-8859-1",
				},
				Data: []byte{
					195, 191, 195, 152, 195, 191, 195, 155, 0, 67, 0, 3, 2, 2, 2, 2, 2, 3, 2, 2, 2, 3,
					3, 3, 3, 4, 6, 4, 4, 4, 4, 4, 8, 6, 6, 5, 6, 9, 8, 10, 10, 9, 8, 9, 9, 10, 12, 15,
					12, 10, 11, 14, 11, 9, 9, 13, 17, 13, 14, 15, 16, 16, 17, 16, 10, 12, 18, 19, 18,
					16, 19, 15, 16, 16, 16, 195, 191, 195, 137, 0, 11, 8, 0, 1, 0, 1, 1, 1, 17, 0, 195,
					191, 195, 140, 0, 6, 0, 16, 16, 5, 195, 191, 195, 154, 0, 8, 1, 1, 0, 0, 63, 0, 195,
					146, 195, 143, 32, 195, 191, 195, 153,
				},
			},
		},
	}
	testEmailFromFile(t, fp, expectedEmail)
}

func TestParseEmailIcelandicMultipartRelatedIso88591OverQuotedprintable(t *testing.T) {
	fp := "tests/test_icelandic_multipart_related_iso-8859-1_over_quoted-printable.txt"
	expectedEmail := &email.Email{
		Headers: email.Headers{
			Date: time.Time(time.Date(2019, 4, 1, 7, 55, 0, 0, time.UTC)),
			Sender: &mail.Address{
				Name:    "Alice Sendandidóttir",
				Address: "alice.sendandidottir@example.com",
			},
			From: []*mail.Address{
				&mail.Address{
					Name:    "Alice Sendandidóttir",
					Address: "alice.sendandidottir@example.com",
				},
				&mail.Address{
					Name:    "Alice Sendandidóttir",
					Address: "alice.sendandidottir@example.net",
				},
			},
			ReplyTo: []*mail.Address{
				&mail.Address{
					Name:    "Alice Sendandidóttir",
					Address: "alice.sendandidottir@example.net",
				},
			},
			To: []*mail.Address{
				&mail.Address{
					Name:    "Bob Viðtakandison",
					Address: "bob.didtakandison@example.com",
				},
				&mail.Address{
					Name:    "Carol Viðtakandidóttir",
					Address: "carol.didtakandidottir@example.com",
				},
			},
			Cc: []*mail.Address{
				&mail.Address{
					Name:    "Dan Viðtakandison",
					Address: "dan.vidtakandison@example.com",
				},
				&mail.Address{
					Name:    "Eve Viðtakandidóttir",
					Address: "eve.vidtakandidottir@example.com",
				},
			},
			Bcc: []*mail.Address{
				&mail.Address{
					Name:    "Frank Viðtakandison",
					Address: "frank.vidtakandison@example.com",
				},
				&mail.Address{
					Name:    "Grace Viðtakandidóttir",
					Address: "grace.vidtakandidottir@example.com",
				},
			},
			MessageID: "Message-Id-1@example.com",
			InReplyTo: []string{
				"Message-Id-0@example.com",
			},
			References: []string{
				"Message-Id-0@example.com",
			},
			Subject:  "📧 Test Íslenskt pangram",
			Comments: "Message Header Comment",
			Keywords: []string{
				"Keyword 1",
				"Keyword 2",
			},
			ResentDate: time.Time(time.Date(2019, 4, 1, 7, 55, 0, 0, time.UTC)),
			ResentFrom: []*mail.Address{
				&mail.Address{
					Name:    "Alice Sendandidóttir",
					Address: "alice.sendandidottir@example.net",
				},
				&mail.Address{
					Name:    "Alice Sendandidóttir",
					Address: "alice.sendandidottir@example.com",
				},
			},
			ResentSender: &mail.Address{
				Name:    "Alice Sendandidóttir",
				Address: "alice.sendandidottir@example.net",
			},
			ResentTo: []*mail.Address{
				&mail.Address{
					Name:    "Bob Viðtakandison",
					Address: "bob.didtakandison@example.net",
				},
				&mail.Address{
					Name:    "Carol Viðtakandidóttir",
					Address: "carol.didtakandidottir@example.net",
				},
			},
			ResentCc: []*mail.Address{
				&mail.Address{
					Name:    "Dan Viðtakandison",
					Address: "dan.vidtakandison@example.net",
				},
				&mail.Address{
					Name:    "Eve Viðtakandidóttir",
					Address: "eve.vidtakandidottir@example.net",
				},
			},
			ResentBcc: []*mail.Address{
				&mail.Address{
					Name:    "Frank Viðtakandison",
					Address: "frank.vidtakandison@example.net",
				},
				&mail.Address{
					Name:    "Grace Viðtakandidóttir",
					Address: "grace.vidtakandidottir@example.net",
				},
			},
			ResentMessageID: "Message-Id-1@example.net",
			ExtraHeaders: map[string][]string{
				"X-Clacks-Overhead": []string{
					"GNU Terry Pratchett",
				},
				"X-Script/function/\t !\"#$%&'()*+,-./;<=>?@[\\]^_`{|}~": []string{
					"TEST VALUE 1\t !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_` abcdefghijklmnopqrstuvwxyz{|}~",
					"TEST VALUE 2\t !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_` abcdefghijklmnopqrstuvwxyz{|}~",
				},
			},
			ContentInfo: &email.ContentInfo{
				Type: "multipart/related",
				TypeParams: map[string]string{
					"boundary": "RelatedBoundaryString",
					"charset":  "iso-8859-1",
				},
				Disposition:       "",
				DispositionParams: map[string]string(nil), // p0
				TransferEncoding:  "quoted-printable",
				ID:                "",
				Charset:           "iso-8859-1",
			},
			Received: nil,
		},
		Text: "Kæmi ný öxi hér, ykist þjófum nú bæði víl og ádrepa.\n" +
			"Svo hölt, yxna kýr þegði jú um dóp í fé á bæ.\n" +
			"Þú dazt á hnéð í vök og yfir blóm sexý pæju.",
		EnrichedText: "<bold>Kæmi ný öxi hér, ykist þjófum nú bæði víl og ádrepa.</bold>\n" +
			"<italic>Svo hölt, yxna kýr þegði jú um dóp í fé á bæ.</italic>\n" +
			"<fixed>Þú dazt á hnéð í vök og yfir blóm sexý pæju.</fixed>",
		HTML: "<html>\n" +
			"<div dir=\"ltr\">\n" +
			"<p>Kæmi ný öxi hér, ykist þjófum nú bæði víl og ádrepa.</p>\n" +
			"<p>Svo hölt, yxna kýr þegði jú um dóp í fé á bæ.</p>\n" +
			"<p>Þú dazt á hnéð í vök og yfir blóm sexý pæju.</p>\n" +
			"</div>\n" +
			"</html>",
		Files: []*email.File{
			&email.File{
				FileType: "inline",
				Name:     "inline-jpg-image-filename.jpg",
				ContentInfo: &email.ContentInfo{
					Type: "image/jpeg",
					TypeParams: map[string]string{
						"name": "inline-jpg-image-name.jpg",
					},
					Disposition: "inline",
					DispositionParams: map[string]string{
						"filename": "inline-jpg-image-filename.jpg",
					},
					TransferEncoding: "base64",
					ID:               "inline-jpg-image.jpg@example.com",
					Charset:          "iso-8859-1",
				},
				Data: []byte{
					195, 191, 195, 152, 195, 191, 195, 155, 0, 67, 0, 3, 2, 2, 2, 2, 2, 3, 2, 2, 2, 3,
					3, 3, 3, 4, 6, 4, 4, 4, 4, 4, 8, 6, 6, 5, 6, 9, 8, 10, 10, 9, 8, 9, 9, 10, 12, 15,
					12, 10, 11, 14, 11, 9, 9, 13, 17, 13, 14, 15, 16, 16, 17, 16, 10, 12, 18, 19, 18,
					16, 19, 15, 16, 16, 16, 195, 191, 195, 137, 0, 11, 8, 0, 1, 0, 1, 1, 1, 17, 0, 195,
					191, 195, 140, 0, 6, 0, 16, 16, 5, 195, 191, 195, 154, 0, 8, 1, 1, 0, 0, 63, 0, 195,
					146, 195, 143, 32, 195, 191, 195, 153,
				},
			},
		},
	}
	testEmailFromFile(t, fp, expectedEmail)
}

func TestParseEmailIcelandicMultipartMixedUtf8OverBase64(t *testing.T) {
	fp := "tests/test_icelandic_multipart_mixed_utf-8_over_base64.txt"
	expectedEmail := &email.Email{
		Headers: email.Headers{
			Date: time.Time(time.Date(2019, 4, 1, 7, 55, 0, 0, time.UTC)),
			Sender: &mail.Address{
				Name:    "Alice Sendandidóttir",
				Address: "alice.sendandidottir@example.com",
			},
			From: []*mail.Address{
				&mail.Address{
					Name:    "Alice Sendandidóttir",
					Address: "alice.sendandidottir@example.com",
				},
				&mail.Address{
					Name:    "Alice Sendandidóttir",
					Address: "alice.sendandidottir@example.net",
				},
			},
			ReplyTo: []*mail.Address{
				&mail.Address{
					Name:    "Alice Sendandidóttir",
					Address: "alice.sendandidottir@example.net",
				},
			},
			To: []*mail.Address{
				&mail.Address{
					Name:    "Bob Viðtakandison",
					Address: "bob.didtakandison@example.com",
				},
				&mail.Address{
					Name:    "Carol Viðtakandidóttir",
					Address: "carol.didtakandidottir@example.com",
				},
			},
			Cc: []*mail.Address{
				&mail.Address{
					Name:    "Dan Viðtakandison",
					Address: "dan.vidtakandison@example.com",
				},
				&mail.Address{
					Name:    "Eve Viðtakandidóttir",
					Address: "eve.vidtakandidottir@example.com",
				},
			},
			Bcc: []*mail.Address{
				&mail.Address{
					Name:    "Frank Viðtakandison",
					Address: "frank.vidtakandison@example.com",
				},
				&mail.Address{
					Name:    "Grace Viðtakandidóttir",
					Address: "grace.vidtakandidottir@example.com",
				},
			},
			MessageID: "Message-Id-1@example.com",
			InReplyTo: []string{
				"Message-Id-0@example.com",
			},
			References: []string{
				"Message-Id-0@example.com",
			},
			Subject:  "📧 Test Íslenskt pangram",
			Comments: "Message Header Comment",
			Keywords: []string{
				"Keyword 1",
				"Keyword 2",
			},
			ResentDate: time.Time(time.Date(2019, 4, 1, 7, 55, 0, 0, time.UTC)),
			ResentFrom: []*mail.Address{
				&mail.Address{
					Name:    "Alice Sendandidóttir",
					Address: "alice.sendandidottir@example.net",
				},
				&mail.Address{
					Name:    "Alice Sendandidóttir",
					Address: "alice.sendandidottir@example.com",
				},
			},
			ResentSender: &mail.Address{
				Name:    "Alice Sendandidóttir",
				Address: "alice.sendandidottir@example.net",
			},
			ResentTo: []*mail.Address{
				&mail.Address{
					Name:    "Bob Viðtakandison",
					Address: "bob.didtakandison@example.net",
				},
				&mail.Address{
					Name:    "Carol Viðtakandidóttir",
					Address: "carol.didtakandidottir@example.net",
				},
			},
			ResentCc: []*mail.Address{
				&mail.Address{
					Name:    "Dan Viðtakandison",
					Address: "dan.vidtakandison@example.net",
				},
				&mail.Address{
					Name:    "Eve Viðtakandidóttir",
					Address: "eve.vidtakandidottir@example.net",
				},
			},
			ResentBcc: []*mail.Address{
				&mail.Address{
					Name:    "Frank Viðtakandison",
					Address: "frank.vidtakandison@example.net",
				},
				&mail.Address{
					Name:    "Grace Viðtakandidóttir",
					Address: "grace.vidtakandidottir@example.net",
				},
			},
			ResentMessageID: "Message-Id-1@example.net",
			ExtraHeaders: map[string][]string{
				"X-Clacks-Overhead": []string{
					"GNU Terry Pratchett",
				},
				"X-Script/function/\t !\"#$%&'()*+,-./;<=>?@[\\]^_`{|}~": []string{
					"TEST VALUE 1\t !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_` abcdefghijklmnopqrstuvwxyz{|}~",
					"TEST VALUE 2\t !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_` abcdefghijklmnopqrstuvwxyz{|}~",
				},
			},
			ContentInfo: &email.ContentInfo{
				Type: "multipart/mixed",
				TypeParams: map[string]string{
					"boundary": "MixedBoundaryString",
					"charset":  "utf-8",
				},
				Disposition:       "",
				DispositionParams: map[string]string(nil), // p0
				TransferEncoding:  "base64",
				ID:                "",
				Charset:           "utf-8",
			},
			Received: nil,
		},
		Text: "Kæmi ný öxi hér, ykist þjófum nú bæði víl og ádrepa.\n" +
			"Svo hölt, yxna kýr þegði jú um dóp í fé á bæ.\n" +
			"Þú dazt á hnéð í vök og yfir blóm sexý pæju.",
		EnrichedText: "<bold>Kæmi ný öxi hér, ykist þjófum nú bæði víl og ádrepa.</bold>\n" +
			"<italic>Svo hölt, yxna kýr þegði jú um dóp í fé á bæ.</italic>\n" +
			"<fixed>Þú dazt á hnéð í vök og yfir blóm sexý pæju.</fixed>",
		HTML: "<html>\n" +
			"<div dir=\"ltr\">\n" +
			"<p>Kæmi ný öxi hér, ykist þjófum nú bæði víl og ádrepa.</p>\n" +
			"<p>Svo hölt, yxna kýr þegði jú um dóp í fé á bæ.</p>\n" +
			"<p>Þú dazt á hnéð í vök og yfir blóm sexý pæju.</p>\n" +
			"</div>\n" +
			"</html>",
		Files: []*email.File{
			&email.File{
				FileType: "",
				Name:     "inline-jpg-image-without-disposition.jpg",
				ContentInfo: &email.ContentInfo{
					Type: "image/jpeg",
					TypeParams: map[string]string{
						"name": "inline-jpg-image-without-disposition.jpg",
					},
					Disposition:       "",
					DispositionParams: map[string]string(nil), // p0
					TransferEncoding:  "base64",
					ID:                "",
					Charset:           "utf-8",
				},
				Data: []byte{
					239, 191, 189, 239, 191, 189, 239, 191, 189, 239, 191, 189, 0, 67, 0, 3, 2, 2, 2,
					2, 2, 3, 2, 2, 2, 3, 3, 3, 3, 4, 6, 4, 4, 4, 4, 4, 8, 6, 6, 5, 6, 9, 8, 10, 10, 9,
					8, 9, 9, 10, 12, 15, 12, 10, 11, 14, 11, 9, 9, 13, 17, 13, 14, 15, 16, 16, 17, 16,
					10, 12, 18, 19, 18, 16, 19, 15, 16, 16, 16, 239, 191, 189, 239, 191, 189, 0, 11,
					8, 0, 1, 0, 1, 1, 1, 17, 0, 239, 191, 189, 239, 191, 189, 0, 6, 0, 16, 16, 5, 239,
					191, 189, 239, 191, 189, 0, 8, 1, 1, 0, 0, 63, 0, 239, 191, 189, 239, 191, 189, 32,
					239, 191, 189, 239, 191, 189,
				},
			},
			&email.File{
				FileType: "inline",
				Name:     "inline-jpg-image-filename.jpg",
				ContentInfo: &email.ContentInfo{
					Type: "image/jpeg",
					TypeParams: map[string]string{
						"name": "inline-jpg-image-name.jpg",
					},
					Disposition: "inline",
					DispositionParams: map[string]string{
						"filename": "inline-jpg-image-filename.jpg",
					},
					TransferEncoding: "base64",
					ID:               "inline-jpg-image.jpg@example.com",
					Charset:          "utf-8",
				},
				Data: []byte{
					239, 191, 189, 239, 191, 189, 239, 191, 189, 239, 191, 189, 0, 67, 0, 3, 2, 2, 2,
					2, 2, 3, 2, 2, 2, 3, 3, 3, 3, 4, 6, 4, 4, 4, 4, 4, 8, 6, 6, 5, 6, 9, 8, 10, 10, 9,
					8, 9, 9, 10, 12, 15, 12, 10, 11, 14, 11, 9, 9, 13, 17, 13, 14, 15, 16, 16, 17, 16,
					10, 12, 18, 19, 18, 16, 19, 15, 16, 16, 16, 239, 191, 189, 239, 191, 189, 0, 11,
					8, 0, 1, 0, 1, 1, 1, 17, 0, 239, 191, 189, 239, 191, 189, 0, 6, 0, 16, 16, 5, 239,
					191, 189, 239, 191, 189, 0, 8, 1, 1, 0, 0, 63, 0, 239, 191, 189, 239, 191, 189, 32,
					239, 191, 189, 239, 191, 189,
				},
			},
			&email.File{
				FileType: "attachment",
				Name:     "attached-pdf-filename.pdf",
				ContentInfo: &email.ContentInfo{
					Type: "application/pdf",
					TypeParams: map[string]string{
						"name": "attached-pdf-name.pdf",
					},
					Disposition: "attachment",
					DispositionParams: map[string]string{
						"filename": "attached-pdf-filename.pdf",
					},
					TransferEncoding: "base64",
					ID:               "",
					Charset:          "utf-8",
				},
				Data: []byte{
					37, 80, 68, 70, 45, 49, 46, 13, 116, 114, 97, 105, 108, 101, 114, 60, 60, 47, 82,
					111, 111, 116, 60, 60, 47, 80, 97, 103, 101, 115, 60, 60, 47, 75, 105, 100, 115,
					91, 60, 60, 47, 77, 101, 100, 105, 97, 66, 111, 120, 91, 48, 32, 48, 32, 51, 32,
					51, 93, 62, 62, 93, 62, 62, 62, 62, 62, 62,
				},
			},
			&email.File{
				FileType: "",
				Name:     "attached-pdf-without-disposition.pdf",
				ContentInfo: &email.ContentInfo{
					Type: "application/pdf",
					TypeParams: map[string]string{
						"name": "attached-pdf-without-disposition.pdf",
					},
					Disposition:       "",
					DispositionParams: map[string]string(nil), // p0
					TransferEncoding:  "base64",
					ID:                "",
					Charset:           "utf-8",
				},
				Data: []byte{
					37, 80, 68, 70, 45, 49, 46, 13, 116, 114, 97, 105, 108, 101, 114, 60, 60, 47, 82,
					111, 111, 116, 60, 60, 47, 80, 97, 103, 101, 115, 60, 60, 47, 75, 105, 100, 115,
					91, 60, 60, 47, 77, 101, 100, 105, 97, 66, 111, 120, 91, 48, 32, 48, 32, 51, 32,
					51, 93, 62, 62, 93, 62, 62, 62, 62, 62, 62,
				},
			},
			&email.File{
				FileType: "attachment",
				Name:     "attached-json-filename.json",
				ContentInfo: &email.ContentInfo{
					Type: "application/json",
					TypeParams: map[string]string{
						"name": "attached-json-name.json",
					},
					Disposition: "attachment",
					DispositionParams: map[string]string{
						"filename": "attached-json-filename.json",
					},
					TransferEncoding: "7bit",
					ID:               "",
					Charset:          "utf-8",
				},
				Data: []byte{
					123, 34, 102, 111, 111, 34, 58, 34, 98, 97, 114, 34, 125,
				},
			},
			&email.File{
				FileType: "attachment",
				Name:     "attached-text-plain-filename.txt",
				ContentInfo: &email.ContentInfo{
					Type: "text/plain",
					TypeParams: map[string]string{
						"name": "attached-text-plain-name.txt",
					},
					Disposition: "attachment",
					DispositionParams: map[string]string{
						"filename": "attached-text-plain-filename.txt",
					},
					TransferEncoding: "base64",
					ID:               "",
					Charset:          "utf-8",
				},
				Data: []byte{
					84, 101, 120, 116, 47, 112, 108, 97, 105, 110, 32, 99, 111, 110, 116, 101, 110, 116,
					32, 97, 115, 32, 97, 110, 32, 97, 116, 116, 97, 99, 104, 101, 100, 32, 46, 116, 120,
					116, 32, 102, 105, 108, 101, 46,
				},
			},
			&email.File{
				FileType: "attachment",
				Name:     "attached-text-html-filename.html",
				ContentInfo: &email.ContentInfo{
					Type: "text/html",
					TypeParams: map[string]string{
						"name": "attached-text-html-name.html",
					},
					Disposition: "attachment",
					DispositionParams: map[string]string{
						"filename": "attached-text-html-filename.html",
					},
					TransferEncoding: "base64",
					ID:               "",
					Charset:          "utf-8",
				},
				Data: []byte{
					84, 101, 120, 116, 47, 104, 116, 109, 108, 32, 99, 111, 110, 116, 101, 110, 116,
					32, 97, 115, 32, 97, 110, 32, 97, 116, 116, 97, 99, 104, 101, 100, 32, 46, 104, 116,
					109, 108, 32, 102, 105, 108, 101, 46,
				},
			},
		},
	}
	testEmailFromFile(t, fp, expectedEmail)
}

func TestParseEmailIcelandicMultipartMixedUtf8OverQuotedprintable(t *testing.T) {
	fp := "tests/test_icelandic_multipart_mixed_utf-8_over_quoted-printable.txt"
	expectedEmail := &email.Email{
		Headers: email.Headers{
			Date: time.Time(time.Date(2019, 4, 1, 7, 55, 0, 0, time.UTC)),
			Sender: &mail.Address{
				Name:    "Alice Sendandidóttir",
				Address: "alice.sendandidottir@example.com",
			},
			From: []*mail.Address{
				&mail.Address{
					Name:    "Alice Sendandidóttir",
					Address: "alice.sendandidottir@example.com",
				},
				&mail.Address{
					Name:    "Alice Sendandidóttir",
					Address: "alice.sendandidottir@example.net",
				},
			},
			ReplyTo: []*mail.Address{
				&mail.Address{
					Name:    "Alice Sendandidóttir",
					Address: "alice.sendandidottir@example.net",
				},
			},
			To: []*mail.Address{
				&mail.Address{
					Name:    "Bob Viðtakandison",
					Address: "bob.didtakandison@example.com",
				},
				&mail.Address{
					Name:    "Carol Viðtakandidóttir",
					Address: "carol.didtakandidottir@example.com",
				},
			},
			Cc: []*mail.Address{
				&mail.Address{
					Name:    "Dan Viðtakandison",
					Address: "dan.vidtakandison@example.com",
				},
				&mail.Address{
					Name:    "Eve Viðtakandidóttir",
					Address: "eve.vidtakandidottir@example.com",
				},
			},
			Bcc: []*mail.Address{
				&mail.Address{
					Name:    "Frank Viðtakandison",
					Address: "frank.vidtakandison@example.com",
				},
				&mail.Address{
					Name:    "Grace Viðtakandidóttir",
					Address: "grace.vidtakandidottir@example.com",
				},
			},
			MessageID: "Message-Id-1@example.com",
			InReplyTo: []string{
				"Message-Id-0@example.com",
			},
			References: []string{
				"Message-Id-0@example.com",
			},
			Subject:  "📧 Test Íslenskt pangram",
			Comments: "Message Header Comment",
			Keywords: []string{
				"Keyword 1",
				"Keyword 2",
			},
			ResentDate: time.Time(time.Date(2019, 4, 1, 7, 55, 0, 0, time.UTC)),
			ResentFrom: []*mail.Address{
				&mail.Address{
					Name:    "Alice Sendandidóttir",
					Address: "alice.sendandidottir@example.net",
				},
				&mail.Address{
					Name:    "Alice Sendandidóttir",
					Address: "alice.sendandidottir@example.com",
				},
			},
			ResentSender: &mail.Address{
				Name:    "Alice Sendandidóttir",
				Address: "alice.sendandidottir@example.net",
			},
			ResentTo: []*mail.Address{
				&mail.Address{
					Name:    "Bob Viðtakandison",
					Address: "bob.didtakandison@example.net",
				},
				&mail.Address{
					Name:    "Carol Viðtakandidóttir",
					Address: "carol.didtakandidottir@example.net",
				},
			},
			ResentCc: []*mail.Address{
				&mail.Address{
					Name:    "Dan Viðtakandison",
					Address: "dan.vidtakandison@example.net",
				},
				&mail.Address{
					Name:    "Eve Viðtakandidóttir",
					Address: "eve.vidtakandidottir@example.net",
				},
			},
			ResentBcc: []*mail.Address{
				&mail.Address{
					Name:    "Frank Viðtakandison",
					Address: "frank.vidtakandison@example.net",
				},
				&mail.Address{
					Name:    "Grace Viðtakandidóttir",
					Address: "grace.vidtakandidottir@example.net",
				},
			},
			ResentMessageID: "Message-Id-1@example.net",
			ExtraHeaders: map[string][]string{
				"X-Clacks-Overhead": []string{
					"GNU Terry Pratchett",
				},
				"X-Script/function/\t !\"#$%&'()*+,-./;<=>?@[\\]^_`{|}~": []string{
					"TEST VALUE 1\t !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_` abcdefghijklmnopqrstuvwxyz{|}~",
					"TEST VALUE 2\t !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_` abcdefghijklmnopqrstuvwxyz{|}~",
				},
			},
			ContentInfo: &email.ContentInfo{
				Type: "multipart/mixed",
				TypeParams: map[string]string{
					"boundary": "MixedBoundaryString",
					"charset":  "utf-8",
				},
				Disposition:       "",
				DispositionParams: map[string]string(nil), // p0
				TransferEncoding:  "quoted-printable",
				ID:                "",
				Charset:           "utf-8",
			},
			Received: nil,
		},
		Text: "Kæmi ný öxi hér, ykist þjófum nú bæði víl og ádrepa.\n" +
			"Svo hölt, yxna kýr þegði jú um dóp í fé á bæ.\n" +
			"Þú dazt á hnéð í vök og yfir blóm sexý pæju.",
		EnrichedText: "<bold>Kæmi ný öxi hér, ykist þjófum nú bæði víl og ádrepa.</bold>\n" +
			"<italic>Svo hölt, yxna kýr þegði jú um dóp í fé á bæ.</italic>\n" +
			"<fixed>Þú dazt á hnéð í vök og yfir blóm sexý pæju.</fixed>",
		HTML: "<html>\n" +
			"<div dir=\"ltr\">\n" +
			"<p>Kæmi ný öxi hér, ykist þjófum nú bæði víl og ádrepa.</p>\n" +
			"<p>Svo hölt, yxna kýr þegði jú um dóp í fé á bæ.</p>\n" +
			"<p>Þú dazt á hnéð í vök og yfir blóm sexý pæju.</p>\n" +
			"</div>\n" +
			"</html>",
		Files: []*email.File{
			&email.File{
				FileType: "",
				Name:     "inline-jpg-image-without-disposition.jpg",
				ContentInfo: &email.ContentInfo{
					Type: "image/jpeg",
					TypeParams: map[string]string{
						"name": "inline-jpg-image-without-disposition.jpg",
					},
					Disposition:       "",
					DispositionParams: map[string]string(nil), // p0
					TransferEncoding:  "base64",
					ID:                "",
					Charset:           "utf-8",
				},
				Data: []byte{
					239, 191, 189, 239, 191, 189, 239, 191, 189, 239, 191, 189, 0, 67, 0, 3, 2, 2, 2,
					2, 2, 3, 2, 2, 2, 3, 3, 3, 3, 4, 6, 4, 4, 4, 4, 4, 8, 6, 6, 5, 6, 9, 8, 10, 10, 9,
					8, 9, 9, 10, 12, 15, 12, 10, 11, 14, 11, 9, 9, 13, 17, 13, 14, 15, 16, 16, 17, 16,
					10, 12, 18, 19, 18, 16, 19, 15, 16, 16, 16, 239, 191, 189, 239, 191, 189, 0, 11,
					8, 0, 1, 0, 1, 1, 1, 17, 0, 239, 191, 189, 239, 191, 189, 0, 6, 0, 16, 16, 5, 239,
					191, 189, 239, 191, 189, 0, 8, 1, 1, 0, 0, 63, 0, 239, 191, 189, 239, 191, 189, 32,
					239, 191, 189, 239, 191, 189,
				},
			},
			&email.File{
				FileType: "inline",
				Name:     "inline-jpg-image-filename.jpg",
				ContentInfo: &email.ContentInfo{
					Type: "image/jpeg",
					TypeParams: map[string]string{
						"name": "inline-jpg-image-name.jpg",
					},
					Disposition: "inline",
					DispositionParams: map[string]string{
						"filename": "inline-jpg-image-filename.jpg",
					},
					TransferEncoding: "base64",
					ID:               "inline-jpg-image.jpg@example.com",
					Charset:          "utf-8",
				},
				Data: []byte{
					239, 191, 189, 239, 191, 189, 239, 191, 189, 239, 191, 189, 0, 67, 0, 3, 2, 2, 2,
					2, 2, 3, 2, 2, 2, 3, 3, 3, 3, 4, 6, 4, 4, 4, 4, 4, 8, 6, 6, 5, 6, 9, 8, 10, 10, 9,
					8, 9, 9, 10, 12, 15, 12, 10, 11, 14, 11, 9, 9, 13, 17, 13, 14, 15, 16, 16, 17, 16,
					10, 12, 18, 19, 18, 16, 19, 15, 16, 16, 16, 239, 191, 189, 239, 191, 189, 0, 11,
					8, 0, 1, 0, 1, 1, 1, 17, 0, 239, 191, 189, 239, 191, 189, 0, 6, 0, 16, 16, 5, 239,
					191, 189, 239, 191, 189, 0, 8, 1, 1, 0, 0, 63, 0, 239, 191, 189, 239, 191, 189, 32,
					239, 191, 189, 239, 191, 189,
				},
			},
			&email.File{
				FileType: "attachment",
				Name:     "attached-pdf-filename.pdf",
				ContentInfo: &email.ContentInfo{
					Type: "application/pdf",
					TypeParams: map[string]string{
						"name": "attached-pdf-name.pdf",
					},
					Disposition: "attachment",
					DispositionParams: map[string]string{
						"filename": "attached-pdf-filename.pdf",
					},
					TransferEncoding: "base64",
					ID:               "",
					Charset:          "utf-8",
				},
				Data: []byte{
					37, 80, 68, 70, 45, 49, 46, 13, 116, 114, 97, 105, 108, 101, 114, 60, 60, 47, 82,
					111, 111, 116, 60, 60, 47, 80, 97, 103, 101, 115, 60, 60, 47, 75, 105, 100, 115,
					91, 60, 60, 47, 77, 101, 100, 105, 97, 66, 111, 120, 91, 48, 32, 48, 32, 51, 32,
					51, 93, 62, 62, 93, 62, 62, 62, 62, 62, 62,
				},
			},
			&email.File{
				FileType: "",
				Name:     "attached-pdf-without-disposition.pdf",
				ContentInfo: &email.ContentInfo{
					Type: "application/pdf",
					TypeParams: map[string]string{
						"name": "attached-pdf-without-disposition.pdf",
					},
					Disposition:       "",
					DispositionParams: map[string]string(nil), // p0
					TransferEncoding:  "base64",
					ID:                "",
					Charset:           "utf-8",
				},
				Data: []byte{
					37, 80, 68, 70, 45, 49, 46, 13, 116, 114, 97, 105, 108, 101, 114, 60, 60, 47, 82,
					111, 111, 116, 60, 60, 47, 80, 97, 103, 101, 115, 60, 60, 47, 75, 105, 100, 115,
					91, 60, 60, 47, 77, 101, 100, 105, 97, 66, 111, 120, 91, 48, 32, 48, 32, 51, 32,
					51, 93, 62, 62, 93, 62, 62, 62, 62, 62, 62,
				},
			},
			&email.File{
				FileType: "attachment",
				Name:     "attached-json-filename.json",
				ContentInfo: &email.ContentInfo{
					Type: "application/json",
					TypeParams: map[string]string{
						"name": "attached-json-name.json",
					},
					Disposition: "attachment",
					DispositionParams: map[string]string{
						"filename": "attached-json-filename.json",
					},
					TransferEncoding: "7bit",
					ID:               "",
					Charset:          "utf-8",
				},
				Data: []byte{
					123, 34, 102, 111, 111, 34, 58, 34, 98, 97, 114, 34, 125,
				},
			},
			&email.File{
				FileType: "attachment",
				Name:     "attached-text-plain-filename.txt",
				ContentInfo: &email.ContentInfo{
					Type: "text/plain",
					TypeParams: map[string]string{
						"name": "attached-text-plain-name.txt",
					},
					Disposition: "attachment",
					DispositionParams: map[string]string{
						"filename": "attached-text-plain-filename.txt",
					},
					TransferEncoding: "base64",
					ID:               "",
					Charset:          "utf-8",
				},
				Data: []byte{
					84, 101, 120, 116, 47, 112, 108, 97, 105, 110, 32, 99, 111, 110, 116, 101, 110, 116,
					32, 97, 115, 32, 97, 110, 32, 97, 116, 116, 97, 99, 104, 101, 100, 32, 46, 116, 120,
					116, 32, 102, 105, 108, 101, 46,
				},
			},
			&email.File{
				FileType: "attachment",
				Name:     "attached-text-html-filename.html",
				ContentInfo: &email.ContentInfo{
					Type: "text/html",
					TypeParams: map[string]string{
						"name": "attached-text-html-name.html",
					},
					Disposition: "attachment",
					DispositionParams: map[string]string{
						"filename": "attached-text-html-filename.html",
					},
					TransferEncoding: "base64",
					ID:               "",
					Charset:          "utf-8",
				},
				Data: []byte{
					84, 101, 120, 116, 47, 104, 116, 109, 108, 32, 99, 111, 110, 116, 101, 110, 116,
					32, 97, 115, 32, 97, 110, 32, 97, 116, 116, 97, 99, 104, 101, 100, 32, 46, 104, 116,
					109, 108, 32, 102, 105, 108, 101, 46,
				},
			},
		},
	}
	testEmailFromFile(t, fp, expectedEmail)
}

func TestParseEmailIcelandicMultipartMixedIso88591OverBase64(t *testing.T) {
	fp := "tests/test_icelandic_multipart_mixed_iso-8859-1_over_base64.txt"
	expectedEmail := &email.Email{
		Headers: email.Headers{
			Date: time.Time(time.Date(2019, 4, 1, 7, 55, 0, 0, time.UTC)),
			Sender: &mail.Address{
				Name:    "Alice Sendandidóttir",
				Address: "alice.sendandidottir@example.com",
			},
			From: []*mail.Address{
				&mail.Address{
					Name:    "Alice Sendandidóttir",
					Address: "alice.sendandidottir@example.com",
				},
				&mail.Address{
					Name:    "Alice Sendandidóttir",
					Address: "alice.sendandidottir@example.net",
				},
			},
			ReplyTo: []*mail.Address{
				&mail.Address{
					Name:    "Alice Sendandidóttir",
					Address: "alice.sendandidottir@example.net",
				},
			},
			To: []*mail.Address{
				&mail.Address{
					Name:    "Bob Viðtakandison",
					Address: "bob.didtakandison@example.com",
				},
				&mail.Address{
					Name:    "Carol Viðtakandidóttir",
					Address: "carol.didtakandidottir@example.com",
				},
			},
			Cc: []*mail.Address{
				&mail.Address{
					Name:    "Dan Viðtakandison",
					Address: "dan.vidtakandison@example.com",
				},
				&mail.Address{
					Name:    "Eve Viðtakandidóttir",
					Address: "eve.vidtakandidottir@example.com",
				},
			},
			Bcc: []*mail.Address{
				&mail.Address{
					Name:    "Frank Viðtakandison",
					Address: "frank.vidtakandison@example.com",
				},
				&mail.Address{
					Name:    "Grace Viðtakandidóttir",
					Address: "grace.vidtakandidottir@example.com",
				},
			},
			MessageID: "Message-Id-1@example.com",
			InReplyTo: []string{
				"Message-Id-0@example.com",
			},
			References: []string{
				"Message-Id-0@example.com",
			},
			Subject:  "📧 Test Íslenskt pangram",
			Comments: "Message Header Comment",
			Keywords: []string{
				"Keyword 1",
				"Keyword 2",
			},
			ResentDate: time.Time(time.Date(2019, 4, 1, 7, 55, 0, 0, time.UTC)),
			ResentFrom: []*mail.Address{
				&mail.Address{
					Name:    "Alice Sendandidóttir",
					Address: "alice.sendandidottir@example.net",
				},
				&mail.Address{
					Name:    "Alice Sendandidóttir",
					Address: "alice.sendandidottir@example.com",
				},
			},
			ResentSender: &mail.Address{
				Name:    "Alice Sendandidóttir",
				Address: "alice.sendandidottir@example.net",
			},
			ResentTo: []*mail.Address{
				&mail.Address{
					Name:    "Bob Viðtakandison",
					Address: "bob.didtakandison@example.net",
				},
				&mail.Address{
					Name:    "Carol Viðtakandidóttir",
					Address: "carol.didtakandidottir@example.net",
				},
			},
			ResentCc: []*mail.Address{
				&mail.Address{
					Name:    "Dan Viðtakandison",
					Address: "dan.vidtakandison@example.net",
				},
				&mail.Address{
					Name:    "Eve Viðtakandidóttir",
					Address: "eve.vidtakandidottir@example.net",
				},
			},
			ResentBcc: []*mail.Address{
				&mail.Address{
					Name:    "Frank Viðtakandison",
					Address: "frank.vidtakandison@example.net",
				},
				&mail.Address{
					Name:    "Grace Viðtakandidóttir",
					Address: "grace.vidtakandidottir@example.net",
				},
			},
			ResentMessageID: "Message-Id-1@example.net",
			ExtraHeaders: map[string][]string{
				"X-Clacks-Overhead": []string{
					"GNU Terry Pratchett",
				},
				"X-Script/function/\t !\"#$%&'()*+,-./;<=>?@[\\]^_`{|}~": []string{
					"TEST VALUE 1\t !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_` abcdefghijklmnopqrstuvwxyz{|}~",
					"TEST VALUE 2\t !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_` abcdefghijklmnopqrstuvwxyz{|}~",
				},
			},
			ContentInfo: &email.ContentInfo{
				Type: "multipart/mixed",
				TypeParams: map[string]string{
					"boundary": "MixedBoundaryString",
					"charset":  "iso-8859-1",
				},
				Disposition:       "",
				DispositionParams: map[string]string(nil), // p0
				TransferEncoding:  "base64",
				ID:                "",
				Charset:           "iso-8859-1",
			},
			Received: nil,
		},
		Text: "Kæmi ný öxi hér, ykist þjófum nú bæði víl og ádrepa.\n" +
			"Svo hölt, yxna kýr þegði jú um dóp í fé á bæ.\n" +
			"Þú dazt á hnéð í vök og yfir blóm sexý pæju.",
		EnrichedText: "<bold>Kæmi ný öxi hér, ykist þjófum nú bæði víl og ádrepa.</bold>\n" +
			"<italic>Svo hölt, yxna kýr þegði jú um dóp í fé á bæ.</italic>\n" +
			"<fixed>Þú dazt á hnéð í vök og yfir blóm sexý pæju.</fixed>",
		HTML: "<html>\n" +
			"<div dir=\"ltr\">\n" +
			"<p>Kæmi ný öxi hér, ykist þjófum nú bæði víl og ádrepa.</p>\n" +
			"<p>Svo hölt, yxna kýr þegði jú um dóp í fé á bæ.</p>\n" +
			"<p>Þú dazt á hnéð í vök og yfir blóm sexý pæju.</p>\n" +
			"</div>\n" +
			"</html>",
		Files: []*email.File{
			&email.File{
				FileType: "",
				Name:     "inline-jpg-image-without-disposition.jpg",
				ContentInfo: &email.ContentInfo{
					Type: "image/jpeg",
					TypeParams: map[string]string{
						"name": "inline-jpg-image-without-disposition.jpg",
					},
					Disposition:       "",
					DispositionParams: map[string]string(nil), // p0
					TransferEncoding:  "base64",
					ID:                "",
					Charset:           "iso-8859-1",
				},
				Data: []byte{
					195, 191, 195, 152, 195, 191, 195, 155, 0, 67, 0, 3, 2, 2, 2, 2, 2, 3, 2, 2, 2, 3,
					3, 3, 3, 4, 6, 4, 4, 4, 4, 4, 8, 6, 6, 5, 6, 9, 8, 10, 10, 9, 8, 9, 9, 10, 12, 15,
					12, 10, 11, 14, 11, 9, 9, 13, 17, 13, 14, 15, 16, 16, 17, 16, 10, 12, 18, 19, 18,
					16, 19, 15, 16, 16, 16, 195, 191, 195, 137, 0, 11, 8, 0, 1, 0, 1, 1, 1, 17, 0, 195,
					191, 195, 140, 0, 6, 0, 16, 16, 5, 195, 191, 195, 154, 0, 8, 1, 1, 0, 0, 63, 0, 195,
					146, 195, 143, 32, 195, 191, 195, 153,
				},
			},
			&email.File{
				FileType: "inline",
				Name:     "inline-jpg-image-filename.jpg",
				ContentInfo: &email.ContentInfo{
					Type: "image/jpeg",
					TypeParams: map[string]string{
						"name": "inline-jpg-image-name.jpg",
					},
					Disposition: "inline",
					DispositionParams: map[string]string{
						"filename": "inline-jpg-image-filename.jpg",
					},
					TransferEncoding: "base64",
					ID:               "inline-jpg-image.jpg@example.com",
					Charset:          "iso-8859-1",
				},
				Data: []byte{
					195, 191, 195, 152, 195, 191, 195, 155, 0, 67, 0, 3, 2, 2, 2, 2, 2, 3, 2, 2, 2, 3,
					3, 3, 3, 4, 6, 4, 4, 4, 4, 4, 8, 6, 6, 5, 6, 9, 8, 10, 10, 9, 8, 9, 9, 10, 12, 15,
					12, 10, 11, 14, 11, 9, 9, 13, 17, 13, 14, 15, 16, 16, 17, 16, 10, 12, 18, 19, 18,
					16, 19, 15, 16, 16, 16, 195, 191, 195, 137, 0, 11, 8, 0, 1, 0, 1, 1, 1, 17, 0, 195,
					191, 195, 140, 0, 6, 0, 16, 16, 5, 195, 191, 195, 154, 0, 8, 1, 1, 0, 0, 63, 0, 195,
					146, 195, 143, 32, 195, 191, 195, 153,
				},
			},
			&email.File{
				FileType: "attachment",
				Name:     "attached-pdf-filename.pdf",
				ContentInfo: &email.ContentInfo{
					Type: "application/pdf",
					TypeParams: map[string]string{
						"name": "attached-pdf-name.pdf",
					},
					Disposition: "attachment",
					DispositionParams: map[string]string{
						"filename": "attached-pdf-filename.pdf",
					},
					TransferEncoding: "base64",
					ID:               "",
					Charset:          "iso-8859-1",
				},
				Data: []byte{
					37, 80, 68, 70, 45, 49, 46, 13, 116, 114, 97, 105, 108, 101, 114, 60, 60, 47, 82,
					111, 111, 116, 60, 60, 47, 80, 97, 103, 101, 115, 60, 60, 47, 75, 105, 100, 115,
					91, 60, 60, 47, 77, 101, 100, 105, 97, 66, 111, 120, 91, 48, 32, 48, 32, 51, 32,
					51, 93, 62, 62, 93, 62, 62, 62, 62, 62, 62,
				},
			},
			&email.File{
				FileType: "",
				Name:     "attached-pdf-without-disposition.pdf",
				ContentInfo: &email.ContentInfo{
					Type: "application/pdf",
					TypeParams: map[string]string{
						"name": "attached-pdf-without-disposition.pdf",
					},
					Disposition:       "",
					DispositionParams: map[string]string(nil), // p0
					TransferEncoding:  "base64",
					ID:                "",
					Charset:           "iso-8859-1",
				},
				Data: []byte{
					37, 80, 68, 70, 45, 49, 46, 13, 116, 114, 97, 105, 108, 101, 114, 60, 60, 47, 82,
					111, 111, 116, 60, 60, 47, 80, 97, 103, 101, 115, 60, 60, 47, 75, 105, 100, 115,
					91, 60, 60, 47, 77, 101, 100, 105, 97, 66, 111, 120, 91, 48, 32, 48, 32, 51, 32,
					51, 93, 62, 62, 93, 62, 62, 62, 62, 62, 62,
				},
			},
			&email.File{
				FileType: "attachment",
				Name:     "attached-json-filename.json",
				ContentInfo: &email.ContentInfo{
					Type: "application/json",
					TypeParams: map[string]string{
						"name": "attached-json-name.json",
					},
					Disposition: "attachment",
					DispositionParams: map[string]string{
						"filename": "attached-json-filename.json",
					},
					TransferEncoding: "7bit",
					ID:               "",
					Charset:          "iso-8859-1",
				},
				Data: []byte{
					123, 34, 102, 111, 111, 34, 58, 34, 98, 97, 114, 34, 125,
				},
			},
			&email.File{
				FileType: "attachment",
				Name:     "attached-text-plain-filename.txt",
				ContentInfo: &email.ContentInfo{
					Type: "text/plain",
					TypeParams: map[string]string{
						"name": "attached-text-plain-name.txt",
					},
					Disposition: "attachment",
					DispositionParams: map[string]string{
						"filename": "attached-text-plain-filename.txt",
					},
					TransferEncoding: "base64",
					ID:               "",
					Charset:          "iso-8859-1",
				},
				Data: []byte{
					84, 101, 120, 116, 47, 112, 108, 97, 105, 110, 32, 99, 111, 110, 116, 101, 110, 116,
					32, 97, 115, 32, 97, 110, 32, 97, 116, 116, 97, 99, 104, 101, 100, 32, 46, 116, 120,
					116, 32, 102, 105, 108, 101, 46,
				},
			},
			&email.File{
				FileType: "attachment",
				Name:     "attached-text-html-filename.html",
				ContentInfo: &email.ContentInfo{
					Type: "text/html",
					TypeParams: map[string]string{
						"name": "attached-text-html-name.html",
					},
					Disposition: "attachment",
					DispositionParams: map[string]string{
						"filename": "attached-text-html-filename.html",
					},
					TransferEncoding: "base64",
					ID:               "",
					Charset:          "iso-8859-1",
				},
				Data: []byte{
					84, 101, 120, 116, 47, 104, 116, 109, 108, 32, 99, 111, 110, 116, 101, 110, 116,
					32, 97, 115, 32, 97, 110, 32, 97, 116, 116, 97, 99, 104, 101, 100, 32, 46, 104, 116,
					109, 108, 32, 102, 105, 108, 101, 46,
				},
			},
		},
	}
	testEmailFromFile(t, fp, expectedEmail)
}

func TestParseEmailIcelandicMultipartMixedIso88591OverQuotedprintable(t *testing.T) {
	fp := "tests/test_icelandic_multipart_mixed_iso-8859-1_over_quoted-printable.txt"
	expectedEmail := &email.Email{
		Headers: email.Headers{
			Date: time.Time(time.Date(2019, 4, 1, 7, 55, 0, 0, time.UTC)),
			Sender: &mail.Address{
				Name:    "Alice Sendandidóttir",
				Address: "alice.sendandidottir@example.com",
			},
			From: []*mail.Address{
				&mail.Address{
					Name:    "Alice Sendandidóttir",
					Address: "alice.sendandidottir@example.com",
				},
				&mail.Address{
					Name:    "Alice Sendandidóttir",
					Address: "alice.sendandidottir@example.net",
				},
			},
			ReplyTo: []*mail.Address{
				&mail.Address{
					Name:    "Alice Sendandidóttir",
					Address: "alice.sendandidottir@example.net",
				},
			},
			To: []*mail.Address{
				&mail.Address{
					Name:    "Bob Viðtakandison",
					Address: "bob.didtakandison@example.com",
				},
				&mail.Address{
					Name:    "Carol Viðtakandidóttir",
					Address: "carol.didtakandidottir@example.com",
				},
			},
			Cc: []*mail.Address{
				&mail.Address{
					Name:    "Dan Viðtakandison",
					Address: "dan.vidtakandison@example.com",
				},
				&mail.Address{
					Name:    "Eve Viðtakandidóttir",
					Address: "eve.vidtakandidottir@example.com",
				},
			},
			Bcc: []*mail.Address{
				&mail.Address{
					Name:    "Frank Viðtakandison",
					Address: "frank.vidtakandison@example.com",
				},
				&mail.Address{
					Name:    "Grace Viðtakandidóttir",
					Address: "grace.vidtakandidottir@example.com",
				},
			},
			MessageID: "Message-Id-1@example.com",
			InReplyTo: []string{
				"Message-Id-0@example.com",
			},
			References: []string{
				"Message-Id-0@example.com",
			},
			Subject:  "📧 Test Íslenskt pangram",
			Comments: "Message Header Comment",
			Keywords: []string{
				"Keyword 1",
				"Keyword 2",
			},
			ResentDate: time.Time(time.Date(2019, 4, 1, 7, 55, 0, 0, time.UTC)),
			ResentFrom: []*mail.Address{
				&mail.Address{
					Name:    "Alice Sendandidóttir",
					Address: "alice.sendandidottir@example.net",
				},
				&mail.Address{
					Name:    "Alice Sendandidóttir",
					Address: "alice.sendandidottir@example.com",
				},
			},
			ResentSender: &mail.Address{
				Name:    "Alice Sendandidóttir",
				Address: "alice.sendandidottir@example.net",
			},
			ResentTo: []*mail.Address{
				&mail.Address{
					Name:    "Bob Viðtakandison",
					Address: "bob.didtakandison@example.net",
				},
				&mail.Address{
					Name:    "Carol Viðtakandidóttir",
					Address: "carol.didtakandidottir@example.net",
				},
			},
			ResentCc: []*mail.Address{
				&mail.Address{
					Name:    "Dan Viðtakandison",
					Address: "dan.vidtakandison@example.net",
				},
				&mail.Address{
					Name:    "Eve Viðtakandidóttir",
					Address: "eve.vidtakandidottir@example.net",
				},
			},
			ResentBcc: []*mail.Address{
				&mail.Address{
					Name:    "Frank Viðtakandison",
					Address: "frank.vidtakandison@example.net",
				},
				&mail.Address{
					Name:    "Grace Viðtakandidóttir",
					Address: "grace.vidtakandidottir@example.net",
				},
			},
			ResentMessageID: "Message-Id-1@example.net",
			ExtraHeaders: map[string][]string{
				"X-Clacks-Overhead": []string{
					"GNU Terry Pratchett",
				},
				"X-Script/function/\t !\"#$%&'()*+,-./;<=>?@[\\]^_`{|}~": []string{
					"TEST VALUE 1\t !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_` abcdefghijklmnopqrstuvwxyz{|}~",
					"TEST VALUE 2\t !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_` abcdefghijklmnopqrstuvwxyz{|}~",
				},
			},
			ContentInfo: &email.ContentInfo{
				Type: "multipart/mixed",
				TypeParams: map[string]string{
					"boundary": "MixedBoundaryString",
					"charset":  "iso-8859-1",
				},
				Disposition:       "",
				DispositionParams: map[string]string(nil), // p0
				TransferEncoding:  "quoted-printable",
				ID:                "",
				Charset:           "iso-8859-1",
			},
			Received: nil,
		},
		Text: "Kæmi ný öxi hér, ykist þjófum nú bæði víl og ádrepa.\n" +
			"Svo hölt, yxna kýr þegði jú um dóp í fé á bæ.\n" +
			"Þú dazt á hnéð í vök og yfir blóm sexý pæju.",
		EnrichedText: "<bold>Kæmi ný öxi hér, ykist þjófum nú bæði víl og ádrepa.</bold>\n" +
			"<italic>Svo hölt, yxna kýr þegði jú um dóp í fé á bæ.</italic>\n" +
			"<fixed>Þú dazt á hnéð í vök og yfir blóm sexý pæju.</fixed>",
		HTML: "<html>\n" +
			"<div dir=\"ltr\">\n" +
			"<p>Kæmi ný öxi hér, ykist þjófum nú bæði víl og ádrepa.</p>\n" +
			"<p>Svo hölt, yxna kýr þegði jú um dóp í fé á bæ.</p>\n" +
			"<p>Þú dazt á hnéð í vök og yfir blóm sexý pæju.</p>\n" +
			"</div>\n" +
			"</html>",
		Files: []*email.File{
			&email.File{
				FileType: "",
				Name:     "inline-jpg-image-without-disposition.jpg",
				ContentInfo: &email.ContentInfo{
					Type: "image/jpeg",
					TypeParams: map[string]string{
						"name": "inline-jpg-image-without-disposition.jpg",
					},
					Disposition:       "",
					DispositionParams: map[string]string(nil), // p0
					TransferEncoding:  "base64",
					ID:                "",
					Charset:           "iso-8859-1",
				},
				Data: []byte{
					195, 191, 195, 152, 195, 191, 195, 155, 0, 67, 0, 3, 2, 2, 2, 2, 2, 3, 2, 2, 2, 3,
					3, 3, 3, 4, 6, 4, 4, 4, 4, 4, 8, 6, 6, 5, 6, 9, 8, 10, 10, 9, 8, 9, 9, 10, 12, 15,
					12, 10, 11, 14, 11, 9, 9, 13, 17, 13, 14, 15, 16, 16, 17, 16, 10, 12, 18, 19, 18,
					16, 19, 15, 16, 16, 16, 195, 191, 195, 137, 0, 11, 8, 0, 1, 0, 1, 1, 1, 17, 0, 195,
					191, 195, 140, 0, 6, 0, 16, 16, 5, 195, 191, 195, 154, 0, 8, 1, 1, 0, 0, 63, 0, 195,
					146, 195, 143, 32, 195, 191, 195, 153,
				},
			},
			&email.File{
				FileType: "inline",
				Name:     "inline-jpg-image-filename.jpg",
				ContentInfo: &email.ContentInfo{
					Type: "image/jpeg",
					TypeParams: map[string]string{
						"name": "inline-jpg-image-name.jpg",
					},
					Disposition: "inline",
					DispositionParams: map[string]string{
						"filename": "inline-jpg-image-filename.jpg",
					},
					TransferEncoding: "base64",
					ID:               "inline-jpg-image.jpg@example.com",
					Charset:          "iso-8859-1",
				},
				Data: []byte{
					195, 191, 195, 152, 195, 191, 195, 155, 0, 67, 0, 3, 2, 2, 2, 2, 2, 3, 2, 2, 2, 3,
					3, 3, 3, 4, 6, 4, 4, 4, 4, 4, 8, 6, 6, 5, 6, 9, 8, 10, 10, 9, 8, 9, 9, 10, 12, 15,
					12, 10, 11, 14, 11, 9, 9, 13, 17, 13, 14, 15, 16, 16, 17, 16, 10, 12, 18, 19, 18,
					16, 19, 15, 16, 16, 16, 195, 191, 195, 137, 0, 11, 8, 0, 1, 0, 1, 1, 1, 17, 0, 195,
					191, 195, 140, 0, 6, 0, 16, 16, 5, 195, 191, 195, 154, 0, 8, 1, 1, 0, 0, 63, 0, 195,
					146, 195, 143, 32, 195, 191, 195, 153,
				},
			},
			&email.File{
				FileType: "attachment",
				Name:     "attached-pdf-filename.pdf",
				ContentInfo: &email.ContentInfo{
					Type: "application/pdf",
					TypeParams: map[string]string{
						"name": "attached-pdf-name.pdf",
					},
					Disposition: "attachment",
					DispositionParams: map[string]string{
						"filename": "attached-pdf-filename.pdf",
					},
					TransferEncoding: "base64",
					ID:               "",
					Charset:          "iso-8859-1",
				},
				Data: []byte{
					37, 80, 68, 70, 45, 49, 46, 13, 116, 114, 97, 105, 108, 101, 114, 60, 60, 47, 82,
					111, 111, 116, 60, 60, 47, 80, 97, 103, 101, 115, 60, 60, 47, 75, 105, 100, 115,
					91, 60, 60, 47, 77, 101, 100, 105, 97, 66, 111, 120, 91, 48, 32, 48, 32, 51, 32,
					51, 93, 62, 62, 93, 62, 62, 62, 62, 62, 62,
				},
			},
			&email.File{
				FileType: "",
				Name:     "attached-pdf-without-disposition.pdf",
				ContentInfo: &email.ContentInfo{
					Type: "application/pdf",
					TypeParams: map[string]string{
						"name": "attached-pdf-without-disposition.pdf",
					},
					Disposition:       "",
					DispositionParams: map[string]string(nil), // p0
					TransferEncoding:  "base64",
					ID:                "",
					Charset:           "iso-8859-1",
				},
				Data: []byte{
					37, 80, 68, 70, 45, 49, 46, 13, 116, 114, 97, 105, 108, 101, 114, 60, 60, 47, 82,
					111, 111, 116, 60, 60, 47, 80, 97, 103, 101, 115, 60, 60, 47, 75, 105, 100, 115,
					91, 60, 60, 47, 77, 101, 100, 105, 97, 66, 111, 120, 91, 48, 32, 48, 32, 51, 32,
					51, 93, 62, 62, 93, 62, 62, 62, 62, 62, 62,
				},
			},
			&email.File{
				FileType: "attachment",
				Name:     "attached-json-filename.json",
				ContentInfo: &email.ContentInfo{
					Type: "application/json",
					TypeParams: map[string]string{
						"name": "attached-json-name.json",
					},
					Disposition: "attachment",
					DispositionParams: map[string]string{
						"filename": "attached-json-filename.json",
					},
					TransferEncoding: "7bit",
					ID:               "",
					Charset:          "iso-8859-1",
				},
				Data: []byte{
					123, 34, 102, 111, 111, 34, 58, 34, 98, 97, 114, 34, 125,
				},
			},
			&email.File{
				FileType: "attachment",
				Name:     "attached-text-plain-filename.txt",
				ContentInfo: &email.ContentInfo{
					Type: "text/plain",
					TypeParams: map[string]string{
						"name": "attached-text-plain-name.txt",
					},
					Disposition: "attachment",
					DispositionParams: map[string]string{
						"filename": "attached-text-plain-filename.txt",
					},
					TransferEncoding: "base64",
					ID:               "",
					Charset:          "iso-8859-1",
				},
				Data: []byte{
					84, 101, 120, 116, 47, 112, 108, 97, 105, 110, 32, 99, 111, 110, 116, 101, 110, 116,
					32, 97, 115, 32, 97, 110, 32, 97, 116, 116, 97, 99, 104, 101, 100, 32, 46, 116, 120,
					116, 32, 102, 105, 108, 101, 46,
				},
			},
			&email.File{
				FileType: "attachment",
				Name:     "attached-text-html-filename.html",
				ContentInfo: &email.ContentInfo{
					Type: "text/html",
					TypeParams: map[string]string{
						"name": "attached-text-html-name.html",
					},
					Disposition: "attachment",
					DispositionParams: map[string]string{
						"filename": "attached-text-html-filename.html",
					},
					TransferEncoding: "base64",
					ID:               "",
					Charset:          "iso-8859-1",
				},
				Data: []byte{
					84, 101, 120, 116, 47, 104, 116, 109, 108, 32, 99, 111, 110, 116, 101, 110, 116,
					32, 97, 115, 32, 97, 110, 32, 97, 116, 116, 97, 99, 104, 101, 100, 32, 46, 104, 116,
					109, 108, 32, 102, 105, 108, 101, 46,
				},
			},
		},
	}
	testEmailFromFile(t, fp, expectedEmail)
}

func TestParseEmailIcelandicMultipartSignedUtf8OverBase64(t *testing.T) {
	fp := "tests/test_icelandic_multipart_signed_utf-8_over_base64.txt"
	expectedEmail := &email.Email{
		Headers: email.Headers{
			Date: time.Time(time.Date(2019, 4, 1, 7, 55, 0, 0, time.UTC)),
			Sender: &mail.Address{
				Name:    "Alice Sendandidóttir",
				Address: "alice.sendandidottir@example.com",
			},
			From: []*mail.Address{
				&mail.Address{
					Name:    "Alice Sendandidóttir",
					Address: "alice.sendandidottir@example.com",
				},
				&mail.Address{
					Name:    "Alice Sendandidóttir",
					Address: "alice.sendandidottir@example.net",
				},
			},
			ReplyTo: []*mail.Address{
				&mail.Address{
					Name:    "Alice Sendandidóttir",
					Address: "alice.sendandidottir@example.net",
				},
			},
			To: []*mail.Address{
				&mail.Address{
					Name:    "Bob Viðtakandison",
					Address: "bob.didtakandison@example.com",
				},
				&mail.Address{
					Name:    "Carol Viðtakandidóttir",
					Address: "carol.didtakandidottir@example.com",
				},
			},
			Cc: []*mail.Address{
				&mail.Address{
					Name:    "Dan Viðtakandison",
					Address: "dan.vidtakandison@example.com",
				},
				&mail.Address{
					Name:    "Eve Viðtakandidóttir",
					Address: "eve.vidtakandidottir@example.com",
				},
			},
			Bcc: []*mail.Address{
				&mail.Address{
					Name:    "Frank Viðtakandison",
					Address: "frank.vidtakandison@example.com",
				},
				&mail.Address{
					Name:    "Grace Viðtakandidóttir",
					Address: "grace.vidtakandidottir@example.com",
				},
			},
			MessageID: "Message-Id-1@example.com",
			InReplyTo: []string{
				"Message-Id-0@example.com",
			},
			References: []string{
				"Message-Id-0@example.com",
			},
			Subject:  "📧 Signed Test Íslenskt pangram",
			Comments: "Message Header Comment",
			Keywords: []string{
				"Keyword 1",
				"Keyword 2",
			},
			ResentDate: time.Time(time.Date(2019, 4, 1, 7, 55, 0, 0, time.UTC)),
			ResentFrom: []*mail.Address{
				&mail.Address{
					Name:    "Alice Sendandidóttir",
					Address: "alice.sendandidottir@example.net",
				},
				&mail.Address{
					Name:    "Alice Sendandidóttir",
					Address: "alice.sendandidottir@example.com",
				},
			},
			ResentSender: &mail.Address{
				Name:    "Alice Sendandidóttir",
				Address: "alice.sendandidottir@example.net",
			},
			ResentTo: []*mail.Address{
				&mail.Address{
					Name:    "Bob Viðtakandison",
					Address: "bob.didtakandison@example.net",
				},
				&mail.Address{
					Name:    "Carol Viðtakandidóttir",
					Address: "carol.didtakandidottir@example.net",
				},
			},
			ResentCc: []*mail.Address{
				&mail.Address{
					Name:    "Dan Viðtakandison",
					Address: "dan.vidtakandison@example.net",
				},
				&mail.Address{
					Name:    "Eve Viðtakandidóttir",
					Address: "eve.vidtakandidottir@example.net",
				},
			},
			ResentBcc: []*mail.Address{
				&mail.Address{
					Name:    "Frank Viðtakandison",
					Address: "frank.vidtakandison@example.net",
				},
				&mail.Address{
					Name:    "Grace Viðtakandidóttir",
					Address: "grace.vidtakandidottir@example.net",
				},
			},
			ResentMessageID: "Message-Id-1@example.net",
			ExtraHeaders: map[string][]string{
				"X-Clacks-Overhead": []string{
					"GNU Terry Pratchett",
				},
				"X-Script/function/\t !\"#$%&'()*+,-./;<=>?@[\\]^_`{|}~": []string{
					"TEST VALUE 1\t !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_` abcdefghijklmnopqrstuvwxyz{|}~",
					"TEST VALUE 2\t !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_` abcdefghijklmnopqrstuvwxyz{|}~",
				},
			},
			ContentInfo: &email.ContentInfo{
				Type: "multipart/signed",
				TypeParams: map[string]string{
					"boundary": "SignedBoundaryString",
					"charset":  "utf-8",
					"micalg":   "sha1",
					"protocol": "application/pkcs7-signature",
				},
				Disposition:       "",
				DispositionParams: map[string]string(nil), // p0
				TransferEncoding:  "base64",
				ID:                "",
				Charset:           "utf-8",
			},
			Received: nil,
		},
		Text: "Kæmi ný öxi hér, ykist þjófum nú bæði víl og ádrepa.\n" +
			"Svo hölt, yxna kýr þegði jú um dóp í fé á bæ.\n" +
			"Þú dazt á hnéð í vök og yfir blóm sexý pæju.",
		EnrichedText: "",
		HTML:         "",
		Files: []*email.File{
			&email.File{
				FileType: "attachment",
				Name:     "smime.p7s",
				ContentInfo: &email.ContentInfo{
					Type: "application/pkcs7-signature",
					TypeParams: map[string]string{
						"name": "smime.p7s",
					},
					Disposition: "attachment",
					DispositionParams: map[string]string{
						"filename": "smime.p7s",
					},
					TransferEncoding: "base64",
					ID:               "",
					Charset:          "utf-8",
				},
				Data: []byte{
					239, 191, 189, 28, 239, 191, 189, 239, 191, 189, 117, 46, 239, 191, 189, 18, 97,
					239, 191, 189, 126, 239, 191, 189, 239, 191, 189, 239, 191, 189, 239, 191, 189, 25,
					58, 223, 189, 239, 191, 189, 239, 191, 189, 239, 158, 173, 108, 31, 71, 27, 239,
					191, 189, 80, 239, 191, 189, 239, 191, 189, 239, 191, 189, 239, 191, 189, 198, 132,
					239, 191, 189, 239, 191, 189, 29, 239, 191, 189, 19, 239, 191, 189, 80, 239, 191,
					189, 239, 191, 189, 239, 191, 189, 239, 191, 189, 198, 132, 239, 191, 189, 239, 191,
					189, 29, 239, 191, 189, 19, 239, 191, 189, 49, 239, 191, 189, 239, 191, 189, 127,
					7, 28, 104, 33, 239, 191, 189, 120, 71, 82, 239, 191, 189, 239, 191, 189, 38, 30,
					239, 191, 189, 239, 191, 189, 239, 191, 189, 239, 191, 189, 239, 191, 189, 113, 239,
					191, 189, 239, 191, 189, 239, 191, 189, 219, 158, 57, 239, 191, 189, 28, 113, 239,
					191, 189, 239, 191, 189, 239, 191, 189, 239, 191, 189, 38, 24, 239, 191, 189, 239,
					190, 173, 108, 31, 71, 27, 239, 191, 189, 80, 110, 120, 239, 191, 189, 239, 191,
					189, 198, 132, 239, 191, 189, 239, 191, 189, 29, 239, 191, 189, 19, 239, 191, 189,
					8, 114, 30, 17, 212, 186, 58, 95, 239, 191, 189, 94, 59, 26, 18, 6, 124, 119, 239,
					191, 189, 79, 239, 191, 189, 21, 65, 239, 191, 189, 239, 191, 189, 239, 191, 189,
				},
			},
		},
	}
	testEmailFromFile(t, fp, expectedEmail)
}

func TestParseEmailIcelandicMultipartSignedUtf8OverQuotedprintable(t *testing.T) {
	fp := "tests/test_icelandic_multipart_signed_utf-8_over_quoted-printable.txt"
	expectedEmail := &email.Email{
		Headers: email.Headers{
			Date: time.Time(time.Date(2019, 4, 1, 7, 55, 0, 0, time.UTC)),
			Sender: &mail.Address{
				Name:    "Alice Sendandidóttir",
				Address: "alice.sendandidottir@example.com",
			},
			From: []*mail.Address{
				&mail.Address{
					Name:    "Alice Sendandidóttir",
					Address: "alice.sendandidottir@example.com",
				},
				&mail.Address{
					Name:    "Alice Sendandidóttir",
					Address: "alice.sendandidottir@example.net",
				},
			},
			ReplyTo: []*mail.Address{
				&mail.Address{
					Name:    "Alice Sendandidóttir",
					Address: "alice.sendandidottir@example.net",
				},
			},
			To: []*mail.Address{
				&mail.Address{
					Name:    "Bob Viðtakandison",
					Address: "bob.didtakandison@example.com",
				},
				&mail.Address{
					Name:    "Carol Viðtakandidóttir",
					Address: "carol.didtakandidottir@example.com",
				},
			},
			Cc: []*mail.Address{
				&mail.Address{
					Name:    "Dan Viðtakandison",
					Address: "dan.vidtakandison@example.com",
				},
				&mail.Address{
					Name:    "Eve Viðtakandidóttir",
					Address: "eve.vidtakandidottir@example.com",
				},
			},
			Bcc: []*mail.Address{
				&mail.Address{
					Name:    "Frank Viðtakandison",
					Address: "frank.vidtakandison@example.com",
				},
				&mail.Address{
					Name:    "Grace Viðtakandidóttir",
					Address: "grace.vidtakandidottir@example.com",
				},
			},
			MessageID: "Message-Id-1@example.com",
			InReplyTo: []string{
				"Message-Id-0@example.com",
			},
			References: []string{
				"Message-Id-0@example.com",
			},
			Subject:  "📧 Signed Test Íslenskt pangram",
			Comments: "Message Header Comment",
			Keywords: []string{
				"Keyword 1",
				"Keyword 2",
			},
			ResentDate: time.Time(time.Date(2019, 4, 1, 7, 55, 0, 0, time.UTC)),
			ResentFrom: []*mail.Address{
				&mail.Address{
					Name:    "Alice Sendandidóttir",
					Address: "alice.sendandidottir@example.net",
				},
				&mail.Address{
					Name:    "Alice Sendandidóttir",
					Address: "alice.sendandidottir@example.com",
				},
			},
			ResentSender: &mail.Address{
				Name:    "Alice Sendandidóttir",
				Address: "alice.sendandidottir@example.net",
			},
			ResentTo: []*mail.Address{
				&mail.Address{
					Name:    "Bob Viðtakandison",
					Address: "bob.didtakandison@example.net",
				},
				&mail.Address{
					Name:    "Carol Viðtakandidóttir",
					Address: "carol.didtakandidottir@example.net",
				},
			},
			ResentCc: []*mail.Address{
				&mail.Address{
					Name:    "Dan Viðtakandison",
					Address: "dan.vidtakandison@example.net",
				},
				&mail.Address{
					Name:    "Eve Viðtakandidóttir",
					Address: "eve.vidtakandidottir@example.net",
				},
			},
			ResentBcc: []*mail.Address{
				&mail.Address{
					Name:    "Frank Viðtakandison",
					Address: "frank.vidtakandison@example.net",
				},
				&mail.Address{
					Name:    "Grace Viðtakandidóttir",
					Address: "grace.vidtakandidottir@example.net",
				},
			},
			ResentMessageID: "Message-Id-1@example.net",
			ExtraHeaders: map[string][]string{
				"X-Clacks-Overhead": []string{
					"GNU Terry Pratchett",
				},
				"X-Script/function/\t !\"#$%&'()*+,-./;<=>?@[\\]^_`{|}~": []string{
					"TEST VALUE 1\t !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_` abcdefghijklmnopqrstuvwxyz{|}~",
					"TEST VALUE 2\t !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_` abcdefghijklmnopqrstuvwxyz{|}~",
				},
			},
			ContentInfo: &email.ContentInfo{
				Type: "multipart/signed",
				TypeParams: map[string]string{
					"boundary": "SignedBoundaryString",
					"charset":  "utf-8",
					"micalg":   "sha1",
					"protocol": "application/pkcs7-signature",
				},
				Disposition:       "",
				DispositionParams: map[string]string(nil), // p0
				TransferEncoding:  "quoted-printable",
				ID:                "",
				Charset:           "utf-8",
			},
			Received: nil,
		},
		Text: "Kæmi ný öxi hér, ykist þjófum nú bæði víl og ádrepa.\n" +
			"Svo hölt, yxna kýr þegði jú um dóp í fé á bæ.\n" +
			"Þú dazt á hnéð í vök og yfir blóm sexý pæju.",
		EnrichedText: "",
		HTML:         "",
		Files: []*email.File{
			&email.File{
				FileType: "attachment",
				Name:     "smime.p7s",
				ContentInfo: &email.ContentInfo{
					Type: "application/pkcs7-signature",
					TypeParams: map[string]string{
						"name": "smime.p7s",
					},
					Disposition: "attachment",
					DispositionParams: map[string]string{
						"filename": "smime.p7s",
					},
					TransferEncoding: "base64",
					ID:               "",
					Charset:          "utf-8",
				},
				Data: []byte{
					239, 191, 189, 28, 239, 191, 189, 239, 191, 189, 117, 46, 239, 191, 189, 18, 97,
					239, 191, 189, 126, 239, 191, 189, 239, 191, 189, 239, 191, 189, 239, 191, 189, 25,
					58, 223, 189, 239, 191, 189, 239, 191, 189, 239, 158, 173, 108, 31, 71, 27, 239,
					191, 189, 80, 239, 191, 189, 239, 191, 189, 239, 191, 189, 239, 191, 189, 198, 132,
					239, 191, 189, 239, 191, 189, 29, 239, 191, 189, 19, 239, 191, 189, 80, 239, 191,
					189, 239, 191, 189, 239, 191, 189, 239, 191, 189, 198, 132, 239, 191, 189, 239, 191,
					189, 29, 239, 191, 189, 19, 239, 191, 189, 49, 239, 191, 189, 239, 191, 189, 127,
					7, 28, 104, 33, 239, 191, 189, 120, 71, 82, 239, 191, 189, 239, 191, 189, 38, 30,
					239, 191, 189, 239, 191, 189, 239, 191, 189, 239, 191, 189, 239, 191, 189, 113, 239,
					191, 189, 239, 191, 189, 239, 191, 189, 219, 158, 57, 239, 191, 189, 28, 113, 239,
					191, 189, 239, 191, 189, 239, 191, 189, 239, 191, 189, 38, 24, 239, 191, 189, 239,
					190, 173, 108, 31, 71, 27, 239, 191, 189, 80, 110, 120, 239, 191, 189, 239, 191,
					189, 198, 132, 239, 191, 189, 239, 191, 189, 29, 239, 191, 189, 19, 239, 191, 189,
					8, 114, 30, 17, 212, 186, 58, 95, 239, 191, 189, 94, 59, 26, 18, 6, 124, 119, 239,
					191, 189, 79, 239, 191, 189, 21, 65, 239, 191, 189, 239, 191, 189, 239, 191, 189,
				},
			},
		},
	}
	testEmailFromFile(t, fp, expectedEmail)
}

func TestParseEmailIcelandicMultipartSignedIso88591OverBase64(t *testing.T) {
	fp := "tests/test_icelandic_multipart_signed_iso-8859-1_over_base64.txt"
	expectedEmail := &email.Email{
		Headers: email.Headers{
			Date: time.Time(time.Date(2019, 4, 1, 7, 55, 0, 0, time.UTC)),
			Sender: &mail.Address{
				Name:    "Alice Sendandidóttir",
				Address: "alice.sendandidottir@example.com",
			},
			From: []*mail.Address{
				&mail.Address{
					Name:    "Alice Sendandidóttir",
					Address: "alice.sendandidottir@example.com",
				},
				&mail.Address{
					Name:    "Alice Sendandidóttir",
					Address: "alice.sendandidottir@example.net",
				},
			},
			ReplyTo: []*mail.Address{
				&mail.Address{
					Name:    "Alice Sendandidóttir",
					Address: "alice.sendandidottir@example.net",
				},
			},
			To: []*mail.Address{
				&mail.Address{
					Name:    "Bob Viðtakandison",
					Address: "bob.didtakandison@example.com",
				},
				&mail.Address{
					Name:    "Carol Viðtakandidóttir",
					Address: "carol.didtakandidottir@example.com",
				},
			},
			Cc: []*mail.Address{
				&mail.Address{
					Name:    "Dan Viðtakandison",
					Address: "dan.vidtakandison@example.com",
				},
				&mail.Address{
					Name:    "Eve Viðtakandidóttir",
					Address: "eve.vidtakandidottir@example.com",
				},
			},
			Bcc: []*mail.Address{
				&mail.Address{
					Name:    "Frank Viðtakandison",
					Address: "frank.vidtakandison@example.com",
				},
				&mail.Address{
					Name:    "Grace Viðtakandidóttir",
					Address: "grace.vidtakandidottir@example.com",
				},
			},
			MessageID: "Message-Id-1@example.com",
			InReplyTo: []string{
				"Message-Id-0@example.com",
			},
			References: []string{
				"Message-Id-0@example.com",
			},
			Subject:  "📧 Signed Test Íslenskt pangram",
			Comments: "Message Header Comment",
			Keywords: []string{
				"Keyword 1",
				"Keyword 2",
			},
			ResentDate: time.Time(time.Date(2019, 4, 1, 7, 55, 0, 0, time.UTC)),
			ResentFrom: []*mail.Address{
				&mail.Address{
					Name:    "Alice Sendandidóttir",
					Address: "alice.sendandidottir@example.net",
				},
				&mail.Address{
					Name:    "Alice Sendandidóttir",
					Address: "alice.sendandidottir@example.com",
				},
			},
			ResentSender: &mail.Address{
				Name:    "Alice Sendandidóttir",
				Address: "alice.sendandidottir@example.net",
			},
			ResentTo: []*mail.Address{
				&mail.Address{
					Name:    "Bob Viðtakandison",
					Address: "bob.didtakandison@example.net",
				},
				&mail.Address{
					Name:    "Carol Viðtakandidóttir",
					Address: "carol.didtakandidottir@example.net",
				},
			},
			ResentCc: []*mail.Address{
				&mail.Address{
					Name:    "Dan Viðtakandison",
					Address: "dan.vidtakandison@example.net",
				},
				&mail.Address{
					Name:    "Eve Viðtakandidóttir",
					Address: "eve.vidtakandidottir@example.net",
				},
			},
			ResentBcc: []*mail.Address{
				&mail.Address{
					Name:    "Frank Viðtakandison",
					Address: "frank.vidtakandison@example.net",
				},
				&mail.Address{
					Name:    "Grace Viðtakandidóttir",
					Address: "grace.vidtakandidottir@example.net",
				},
			},
			ResentMessageID: "Message-Id-1@example.net",
			ExtraHeaders: map[string][]string{
				"X-Clacks-Overhead": []string{
					"GNU Terry Pratchett",
				},
				"X-Script/function/\t !\"#$%&'()*+,-./;<=>?@[\\]^_`{|}~": []string{
					"TEST VALUE 1\t !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_` abcdefghijklmnopqrstuvwxyz{|}~",
					"TEST VALUE 2\t !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_` abcdefghijklmnopqrstuvwxyz{|}~",
				},
			},
			ContentInfo: &email.ContentInfo{
				Type: "multipart/signed",
				TypeParams: map[string]string{
					"boundary": "SignedBoundaryString",
					"charset":  "iso-8859-1",
					"micalg":   "sha1",
					"protocol": "application/pkcs7-signature",
				},
				Disposition:       "",
				DispositionParams: map[string]string(nil), // p0
				TransferEncoding:  "base64",
				ID:                "",
				Charset:           "iso-8859-1",
			},
			Received: nil,
		},
		Text: "Kæmi ný öxi hér, ykist þjófum nú bæði víl og ádrepa.\n" +
			"Svo hölt, yxna kýr þegði jú um dóp í fé á bæ.\n" +
			"Þú dazt á hnéð í vök og yfir blóm sexý pæju.",
		EnrichedText: "",
		HTML:         "",
		Files: []*email.File{
			&email.File{
				FileType: "attachment",
				Name:     "smime.p7s",
				ContentInfo: &email.ContentInfo{
					Type: "application/pkcs7-signature",
					TypeParams: map[string]string{
						"name": "smime.p7s",
					},
					Disposition: "attachment",
					DispositionParams: map[string]string{
						"filename": "smime.p7s",
					},
					TransferEncoding: "base64",
					ID:               "",
					Charset:          "iso-8859-1",
				},
				Data: []byte{
					226, 128, 154, 28, 226, 128, 161, 226, 128, 158, 117, 46, 197, 189, 18, 97, 197,
					146, 126, 195, 187, 197, 184, 195, 129, 195, 135, 25, 58, 195, 159, 194, 189, 194,
					185, 195, 163, 195, 175, 197, 190, 194, 173, 108, 31, 71, 27, 226, 128, 166, 80,
					194, 165, 195, 188, 226, 128, 166, 195, 163, 194, 174, 195, 134, 226, 128, 158, 239,
					191, 189, 197, 184, 29, 195, 182, 19, 195, 171, 226, 128, 166, 80, 194, 165, 195,
					188, 226, 128, 166, 195, 163, 194, 174, 195, 134, 226, 128, 158, 239, 191, 189, 197,
					184, 29, 195, 182, 19, 195, 170, 49, 195, 187, 195, 174, 127, 7, 28, 104, 33, 195,
					136, 120, 71, 82, 195, 168, 195, 161, 38, 30, 195, 185, 195, 170, 195, 150, 195,
					129, 195, 180, 113, 226, 128, 156, 194, 173, 195, 187, 195, 155, 197, 190, 57, 195,
					188, 28, 113, 226, 128, 156, 194, 173, 195, 187, 195, 161, 38, 24, 195, 135, 195,
					175, 194, 190, 194, 173, 108, 31, 71, 27, 226, 128, 166, 80, 110, 120, 195, 187,
					195, 167, 194, 174, 195, 134, 226, 128, 158, 239, 191, 189, 197, 184, 29, 195, 182,
					19, 195, 170, 8, 114, 30, 17, 195, 148, 194, 186, 58, 95, 195, 136, 94, 59, 26, 18,
					6, 124, 119, 195, 152, 79, 194, 174, 21, 65, 194, 185, 195, 163, 195, 175, 197, 190,
				},
			},
		},
	}
	testEmailFromFile(t, fp, expectedEmail)
}

func TestParseEmailIcelandicMultipartSignedIso88591OverQuotedprintable(t *testing.T) {
	fp := "tests/test_icelandic_multipart_signed_iso-8859-1_over_quoted-printable.txt"
	expectedEmail := &email.Email{
		Headers: email.Headers{
			Date: time.Time(time.Date(2019, 4, 1, 7, 55, 0, 0, time.UTC)),
			Sender: &mail.Address{
				Name:    "Alice Sendandidóttir",
				Address: "alice.sendandidottir@example.com",
			},
			From: []*mail.Address{
				&mail.Address{
					Name:    "Alice Sendandidóttir",
					Address: "alice.sendandidottir@example.com",
				},
				&mail.Address{
					Name:    "Alice Sendandidóttir",
					Address: "alice.sendandidottir@example.net",
				},
			},
			ReplyTo: []*mail.Address{
				&mail.Address{
					Name:    "Alice Sendandidóttir",
					Address: "alice.sendandidottir@example.net",
				},
			},
			To: []*mail.Address{
				&mail.Address{
					Name:    "Bob Viðtakandison",
					Address: "bob.didtakandison@example.com",
				},
				&mail.Address{
					Name:    "Carol Viðtakandidóttir",
					Address: "carol.didtakandidottir@example.com",
				},
			},
			Cc: []*mail.Address{
				&mail.Address{
					Name:    "Dan Viðtakandison",
					Address: "dan.vidtakandison@example.com",
				},
				&mail.Address{
					Name:    "Eve Viðtakandidóttir",
					Address: "eve.vidtakandidottir@example.com",
				},
			},
			Bcc: []*mail.Address{
				&mail.Address{
					Name:    "Frank Viðtakandison",
					Address: "frank.vidtakandison@example.com",
				},
				&mail.Address{
					Name:    "Grace Viðtakandidóttir",
					Address: "grace.vidtakandidottir@example.com",
				},
			},
			MessageID: "Message-Id-1@example.com",
			InReplyTo: []string{
				"Message-Id-0@example.com",
			},
			References: []string{
				"Message-Id-0@example.com",
			},
			Subject:  "📧 Signed Test Íslenskt pangram",
			Comments: "Message Header Comment",
			Keywords: []string{
				"Keyword 1",
				"Keyword 2",
			},
			ResentDate: time.Time(time.Date(2019, 4, 1, 7, 55, 0, 0, time.UTC)),
			ResentFrom: []*mail.Address{
				&mail.Address{
					Name:    "Alice Sendandidóttir",
					Address: "alice.sendandidottir@example.net",
				},
				&mail.Address{
					Name:    "Alice Sendandidóttir",
					Address: "alice.sendandidottir@example.com",
				},
			},
			ResentSender: &mail.Address{
				Name:    "Alice Sendandidóttir",
				Address: "alice.sendandidottir@example.net",
			},
			ResentTo: []*mail.Address{
				&mail.Address{
					Name:    "Bob Viðtakandison",
					Address: "bob.didtakandison@example.net",
				},
				&mail.Address{
					Name:    "Carol Viðtakandidóttir",
					Address: "carol.didtakandidottir@example.net",
				},
			},
			ResentCc: []*mail.Address{
				&mail.Address{
					Name:    "Dan Viðtakandison",
					Address: "dan.vidtakandison@example.net",
				},
				&mail.Address{
					Name:    "Eve Viðtakandidóttir",
					Address: "eve.vidtakandidottir@example.net",
				},
			},
			ResentBcc: []*mail.Address{
				&mail.Address{
					Name:    "Frank Viðtakandison",
					Address: "frank.vidtakandison@example.net",
				},
				&mail.Address{
					Name:    "Grace Viðtakandidóttir",
					Address: "grace.vidtakandidottir@example.net",
				},
			},
			ResentMessageID: "Message-Id-1@example.net",
			ExtraHeaders: map[string][]string{
				"X-Clacks-Overhead": []string{
					"GNU Terry Pratchett",
				},
				"X-Script/function/\t !\"#$%&'()*+,-./;<=>?@[\\]^_`{|}~": []string{
					"TEST VALUE 1\t !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_` abcdefghijklmnopqrstuvwxyz{|}~",
					"TEST VALUE 2\t !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_` abcdefghijklmnopqrstuvwxyz{|}~",
				},
			},
			ContentInfo: &email.ContentInfo{
				Type: "multipart/signed",
				TypeParams: map[string]string{
					"boundary": "SignedBoundaryString",
					"charset":  "iso-8859-1",
					"micalg":   "sha1",
					"protocol": "application/pkcs7-signature",
				},
				Disposition:       "",
				DispositionParams: map[string]string(nil), // p0
				TransferEncoding:  "quoted-printable",
				ID:                "",
				Charset:           "iso-8859-1",
			},
			Received: nil,
		},
		Text: "Kæmi ný öxi hér, ykist þjófum nú bæði víl og ádrepa.\n" +
			"Svo hölt, yxna kýr þegði jú um dóp í fé á bæ.\n" +
			"Þú dazt á hnéð í vök og yfir blóm sexý pæju.",
		EnrichedText: "",
		HTML:         "",
		Files: []*email.File{
			&email.File{
				FileType: "attachment",
				Name:     "smime.p7s",
				ContentInfo: &email.ContentInfo{
					Type: "application/pkcs7-signature",
					TypeParams: map[string]string{
						"name": "smime.p7s",
					},
					Disposition: "attachment",
					DispositionParams: map[string]string{
						"filename": "smime.p7s",
					},
					TransferEncoding: "base64",
					ID:               "",
					Charset:          "iso-8859-1",
				},
				Data: []byte{
					226, 128, 154, 28, 226, 128, 161, 226, 128, 158, 117, 46, 197, 189, 18, 97, 197,
					146, 126, 195, 187, 197, 184, 195, 129, 195, 135, 25, 58, 195, 159, 194, 189, 194,
					185, 195, 163, 195, 175, 197, 190, 194, 173, 108, 31, 71, 27, 226, 128, 166, 80,
					194, 165, 195, 188, 226, 128, 166, 195, 163, 194, 174, 195, 134, 226, 128, 158, 239,
					191, 189, 197, 184, 29, 195, 182, 19, 195, 171, 226, 128, 166, 80, 194, 165, 195,
					188, 226, 128, 166, 195, 163, 194, 174, 195, 134, 226, 128, 158, 239, 191, 189, 197,
					184, 29, 195, 182, 19, 195, 170, 49, 195, 187, 195, 174, 127, 7, 28, 104, 33, 195,
					136, 120, 71, 82, 195, 168, 195, 161, 38, 30, 195, 185, 195, 170, 195, 150, 195,
					129, 195, 180, 113, 226, 128, 156, 194, 173, 195, 187, 195, 155, 197, 190, 57, 195,
					188, 28, 113, 226, 128, 156, 194, 173, 195, 187, 195, 161, 38, 24, 195, 135, 195,
					175, 194, 190, 194, 173, 108, 31, 71, 27, 226, 128, 166, 80, 110, 120, 195, 187,
					195, 167, 194, 174, 195, 134, 226, 128, 158, 239, 191, 189, 197, 184, 29, 195, 182,
					19, 195, 170, 8, 114, 30, 17, 195, 148, 194, 186, 58, 95, 195, 136, 94, 59, 26, 18,
					6, 124, 119, 195, 152, 79, 194, 174, 21, 65, 194, 185, 195, 163, 195, 175, 197, 190,
				},
			},
		},
	}
	testEmailFromFile(t, fp, expectedEmail)
}

func TestParseEmailJapanesePlaintextUtf8Over7bit(t *testing.T) {
	fp := "tests/test_japanese_plaintext_utf-8_over_7bit.txt"
	expectedEmail := &email.Email{
		Headers: email.Headers{
			Date: time.Time(time.Date(2019, 3, 31, 22, 55, 0, 0, time.UTC)),
			Sender: &mail.Address{
				Name:    "郵便アリス",
				Address: "alice.yuubin@example.com",
			},
			From: []*mail.Address{
				&mail.Address{
					Name:    "郵便アリス",
					Address: "alice.yuubin@example.com",
				},
				&mail.Address{
					Name:    "郵便アリス",
					Address: "alice.yuubin@example.net",
				},
			},
			ReplyTo: []*mail.Address{
				&mail.Address{
					Name:    "郵便アリス",
					Address: "alice.yuubin@example.net",
				},
			},
			To: []*mail.Address{
				&mail.Address{
					Name:    "郵便ボブ",
					Address: "bob.yuubin@example.com",
				},
				&mail.Address{
					Name:    "郵便キャロル",
					Address: "carol.yuubin@example.com",
				},
			},
			Cc: []*mail.Address{
				&mail.Address{
					Name:    "郵便ダン",
					Address: "dan.yuubin@example.com",
				},
				&mail.Address{
					Name:    "郵便イーブ",
					Address: "eve.yubin@example.com",
				},
			},
			Bcc: []*mail.Address{
				&mail.Address{
					Name:    "郵便フランク",
					Address: "frank.yuubin@example.com",
				},
				&mail.Address{
					Name:    "郵便グレイス",
					Address: "grace.yubin@example.com",
				},
			},
			MessageID: "Message-Id-1@example.com",
			InReplyTo: []string{
				"Message-Id-0@example.com",
			},
			References: []string{
				"Message-Id-0@example.com",
			},
			Subject:  "📧 Test いろは歌",
			Comments: "Message Header Comment",
			Keywords: []string{
				"Keyword 1",
				"Keyword 2",
			},
			ResentDate: time.Time(time.Date(2019, 3, 31, 22, 55, 0, 0, time.UTC)),
			ResentFrom: []*mail.Address{
				&mail.Address{
					Name:    "郵便アリス",
					Address: "alice.yuubin@example.net",
				},
				&mail.Address{
					Name:    "郵便アリス",
					Address: "alice.yuubin@example.com",
				},
			},
			ResentSender: &mail.Address{
				Name:    "郵便アリス",
				Address: "alice.yuubin@example.net",
			},
			ResentTo: []*mail.Address{
				&mail.Address{
					Name:    "郵便ボブ",
					Address: "bob.yuubin@example.net",
				},
				&mail.Address{
					Name:    "郵便キャロル",
					Address: "carol.yuubin@example.net",
				},
			},
			ResentCc: []*mail.Address{
				&mail.Address{
					Name:    "郵便ダン",
					Address: "dan.yuubin@example.net",
				},
				&mail.Address{
					Name:    "郵便イーブ",
					Address: "eve.yubin@example.net",
				},
			},
			ResentBcc: []*mail.Address{
				&mail.Address{
					Name:    "郵便フランク",
					Address: "frank.yuubin@example.net",
				},
				&mail.Address{
					Name:    "郵便グレイス",
					Address: "grace.yubin@example.net",
				},
			},
			ResentMessageID: "Message-Id-1@example.net",
			ExtraHeaders: map[string][]string{
				"X-Clacks-Overhead": []string{
					"GNU Terry Pratchett",
				},
				"X-Script/function/\t !\"#$%&'()*+,-./;<=>?@[\\]^_`{|}~": []string{
					"TEST VALUE 1\t !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_` abcdefghijklmnopqrstuvwxyz{|}~",
					"TEST VALUE 2\t !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_` abcdefghijklmnopqrstuvwxyz{|}~",
				},
			},
			ContentInfo: &email.ContentInfo{
				Type: "text/plain",
				TypeParams: map[string]string{
					"charset": "utf-8",
				},
				Disposition:       "",
				DispositionParams: map[string]string(nil),
				TransferEncoding:  "7bit",
				ID:                "",
				Charset:           "utf-8",
			},
			Received: nil,
		},
		Text: "色は匂えど\n" +
			"散りぬるを\n" +
			"我が世誰ぞ\n" +
			"常ならん\n" +
			"有為の奥山\n" +
			"今日越えて\n" +
			"浅き夢見じ\n" +
			"酔いもせず。\n" +
			"\n" +
			"Iro wa nioedo / Chirinuru o / Wa ga yo tare zo / Tsune naran / Ui no okuyama / Kyo koete Asaki yume miji / Yoi mo sezu.\n" +
			"\n" +
			"とりなくこゑすゆめさませみよあけわたるひんかしをそらいろはえておきつへにほふねむれゐぬもやのうち。\n" +
			"\n" +
			"天地星空\n" +
			"山川峰谷\n" +
			"雲霧室苔\n" +
			"人犬上末\n" +
			"硫黄猿生ふ為よ\n" +
			"榎の枝を馴れ居て。\n" +
			"\n" +
			"田居に出で菜摘むわれをぞ君召すと求食り追ひゆく山城の打酔へる子ら藻葉干せよえ舟繋けぬ。",
		EnrichedText: "",
		HTML:         "",
		Files:        nil,
	}
	testEmailFromFile(t, fp, expectedEmail)
}

func TestParseEmailJapanesePlaintextUtf8OverBase64(t *testing.T) {
	fp := "tests/test_japanese_plaintext_utf-8_over_base64.txt"
	expectedEmail := &email.Email{
		Headers: email.Headers{
			Date: time.Time(time.Date(2019, 3, 31, 22, 55, 0, 0, time.UTC)),
			Sender: &mail.Address{
				Name:    "郵便アリス",
				Address: "alice.yuubin@example.com",
			},
			From: []*mail.Address{
				&mail.Address{
					Name:    "郵便アリス",
					Address: "alice.yuubin@example.com",
				},
				&mail.Address{
					Name:    "郵便アリス",
					Address: "alice.yuubin@example.net",
				},
			},
			ReplyTo: []*mail.Address{
				&mail.Address{
					Name:    "郵便アリス",
					Address: "alice.yuubin@example.net",
				},
			},
			To: []*mail.Address{
				&mail.Address{
					Name:    "郵便ボブ",
					Address: "bob.yuubin@example.com",
				},
				&mail.Address{
					Name:    "郵便キャロル",
					Address: "carol.yuubin@example.com",
				},
			},
			Cc: []*mail.Address{
				&mail.Address{
					Name:    "郵便ダン",
					Address: "dan.yuubin@example.com",
				},
				&mail.Address{
					Name:    "郵便イーブ",
					Address: "eve.yubin@example.com",
				},
			},
			Bcc: []*mail.Address{
				&mail.Address{
					Name:    "郵便フランク",
					Address: "frank.yuubin@example.com",
				},
				&mail.Address{
					Name:    "郵便グレイス",
					Address: "grace.yubin@example.com",
				},
			},
			MessageID: "Message-Id-1@example.com",
			InReplyTo: []string{
				"Message-Id-0@example.com",
			},
			References: []string{
				"Message-Id-0@example.com",
			},
			Subject:  "📧 Test いろは歌",
			Comments: "Message Header Comment",
			Keywords: []string{
				"Keyword 1",
				"Keyword 2",
			},
			ResentDate: time.Time(time.Date(2019, 3, 31, 22, 55, 0, 0, time.UTC)),
			ResentFrom: []*mail.Address{
				&mail.Address{
					Name:    "郵便アリス",
					Address: "alice.yuubin@example.net",
				},
				&mail.Address{
					Name:    "郵便アリス",
					Address: "alice.yuubin@example.com",
				},
			},
			ResentSender: &mail.Address{
				Name:    "郵便アリス",
				Address: "alice.yuubin@example.net",
			},
			ResentTo: []*mail.Address{
				&mail.Address{
					Name:    "郵便ボブ",
					Address: "bob.yuubin@example.net",
				},
				&mail.Address{
					Name:    "郵便キャロル",
					Address: "carol.yuubin@example.net",
				},
			},
			ResentCc: []*mail.Address{
				&mail.Address{
					Name:    "郵便ダン",
					Address: "dan.yuubin@example.net",
				},
				&mail.Address{
					Name:    "郵便イーブ",
					Address: "eve.yubin@example.net",
				},
			},
			ResentBcc: []*mail.Address{
				&mail.Address{
					Name:    "郵便フランク",
					Address: "frank.yuubin@example.net",
				},
				&mail.Address{
					Name:    "郵便グレイス",
					Address: "grace.yubin@example.net",
				},
			},
			ResentMessageID: "Message-Id-1@example.net",
			ExtraHeaders: map[string][]string{
				"X-Clacks-Overhead": []string{
					"GNU Terry Pratchett",
				},
				"X-Script/function/\t !\"#$%&'()*+,-./;<=>?@[\\]^_`{|}~": []string{
					"TEST VALUE 1\t !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_` abcdefghijklmnopqrstuvwxyz{|}~",
					"TEST VALUE 2\t !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_` abcdefghijklmnopqrstuvwxyz{|}~",
				},
			},
			ContentInfo: &email.ContentInfo{
				Type: "text/plain",
				TypeParams: map[string]string{
					"charset": "utf-8",
				},
				Disposition:       "",
				DispositionParams: map[string]string(nil),
				TransferEncoding:  "base64",
				ID:                "",
				Charset:           "utf-8",
			},
			Received: nil,
		},
		Text: "色は匂えど\n" +
			"散りぬるを\n" +
			"我が世誰ぞ\n" +
			"常ならん\n" +
			"有為の奥山\n" +
			"今日越えて\n" +
			"浅き夢見じ\n" +
			"酔いもせず。\n" +
			"\n" +
			"Iro wa nioedo / Chirinuru o / Wa ga yo tare zo / Tsune naran / Ui no okuyama / Kyo koete Asaki yume miji / Yoi mo sezu.\n" +
			"\n" +
			"とりなくこゑすゆめさませみよあけわたるひんかしをそらいろはえておきつへにほふねむれゐぬもやのうち。\n" +
			"\n" +
			"天地星空\n" +
			"山川峰谷\n" +
			"雲霧室苔\n" +
			"人犬上末\n" +
			"硫黄猿生ふ為よ\n" +
			"榎の枝を馴れ居て。\n" +
			"\n" +
			"田居に出で菜摘むわれをぞ君召すと求食り追ひゆく山城の打酔へる子ら藻葉干せよえ舟繋けぬ。",
		EnrichedText: "",
		HTML:         "",
		Files:        nil,
	}
	testEmailFromFile(t, fp, expectedEmail)
}

func TestParseEmailJapanesePlaintextUtf8OverQuotedprintable(t *testing.T) {
	fp := "tests/test_japanese_plaintext_utf-8_over_quoted-printable.txt"
	expectedEmail := &email.Email{
		Headers: email.Headers{
			Date: time.Time(time.Date(2019, 3, 31, 22, 55, 0, 0, time.UTC)),
			Sender: &mail.Address{
				Name:    "郵便アリス",
				Address: "alice.yuubin@example.com",
			},
			From: []*mail.Address{
				&mail.Address{
					Name:    "郵便アリス",
					Address: "alice.yuubin@example.com",
				},
				&mail.Address{
					Name:    "郵便アリス",
					Address: "alice.yuubin@example.net",
				},
			},
			ReplyTo: []*mail.Address{
				&mail.Address{
					Name:    "郵便アリス",
					Address: "alice.yuubin@example.net",
				},
			},
			To: []*mail.Address{
				&mail.Address{
					Name:    "郵便ボブ",
					Address: "bob.yuubin@example.com",
				},
				&mail.Address{
					Name:    "郵便キャロル",
					Address: "carol.yuubin@example.com",
				},
			},
			Cc: []*mail.Address{
				&mail.Address{
					Name:    "郵便ダン",
					Address: "dan.yuubin@example.com",
				},
				&mail.Address{
					Name:    "郵便イーブ",
					Address: "eve.yubin@example.com",
				},
			},
			Bcc: []*mail.Address{
				&mail.Address{
					Name:    "郵便フランク",
					Address: "frank.yuubin@example.com",
				},
				&mail.Address{
					Name:    "郵便グレイス",
					Address: "grace.yubin@example.com",
				},
			},
			MessageID: "Message-Id-1@example.com",
			InReplyTo: []string{
				"Message-Id-0@example.com",
			},
			References: []string{
				"Message-Id-0@example.com",
			},
			Subject:  "📧 Test いろは歌",
			Comments: "Message Header Comment",
			Keywords: []string{
				"Keyword 1",
				"Keyword 2",
			},
			ResentDate: time.Time(time.Date(2019, 3, 31, 22, 55, 0, 0, time.UTC)),
			ResentFrom: []*mail.Address{
				&mail.Address{
					Name:    "郵便アリス",
					Address: "alice.yuubin@example.net",
				},
				&mail.Address{
					Name:    "郵便アリス",
					Address: "alice.yuubin@example.com",
				},
			},
			ResentSender: &mail.Address{
				Name:    "郵便アリス",
				Address: "alice.yuubin@example.net",
			},
			ResentTo: []*mail.Address{
				&mail.Address{
					Name:    "郵便ボブ",
					Address: "bob.yuubin@example.net",
				},
				&mail.Address{
					Name:    "郵便キャロル",
					Address: "carol.yuubin@example.net",
				},
			},
			ResentCc: []*mail.Address{
				&mail.Address{
					Name:    "郵便ダン",
					Address: "dan.yuubin@example.net",
				},
				&mail.Address{
					Name:    "郵便イーブ",
					Address: "eve.yubin@example.net",
				},
			},
			ResentBcc: []*mail.Address{
				&mail.Address{
					Name:    "郵便フランク",
					Address: "frank.yuubin@example.net",
				},
				&mail.Address{
					Name:    "郵便グレイス",
					Address: "grace.yubin@example.net",
				},
			},
			ResentMessageID: "Message-Id-1@example.net",
			ExtraHeaders: map[string][]string{
				"X-Clacks-Overhead": []string{
					"GNU Terry Pratchett",
				},
				"X-Script/function/\t !\"#$%&'()*+,-./;<=>?@[\\]^_`{|}~": []string{
					"TEST VALUE 1\t !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_` abcdefghijklmnopqrstuvwxyz{|}~",
					"TEST VALUE 2\t !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_` abcdefghijklmnopqrstuvwxyz{|}~",
				},
			},
			ContentInfo: &email.ContentInfo{
				Type: "text/plain",
				TypeParams: map[string]string{
					"charset": "utf-8",
				},
				Disposition:       "",
				DispositionParams: map[string]string(nil),
				TransferEncoding:  "quoted-printable",
				ID:                "",
				Charset:           "utf-8",
			},
			Received: nil,
		},
		Text: "色は匂えど\n" +
			"散りぬるを\n" +
			"我が世誰ぞ\n" +
			"常ならん\n" +
			"有為の奥山\n" +
			"今日越えて\n" +
			"浅き夢見じ\n" +
			"酔いもせず。\n" +
			"\n" +
			"Iro wa nioedo / Chirinuru o / Wa ga yo tare zo / Tsune naran / Ui no okuyama / Kyo koete Asaki yume miji / Yoi mo sezu.\n" +
			"\n" +
			"とりなくこゑすゆめさませみよあけわたるひんかしをそらいろはえておきつへにほふねむれゐぬもやのうち。\n" +
			"\n" +
			"天地星空\n" +
			"山川峰谷\n" +
			"雲霧室苔\n" +
			"人犬上末\n" +
			"硫黄猿生ふ為よ\n" +
			"榎の枝を馴れ居て。\n" +
			"\n" +
			"田居に出で菜摘むわれをぞ君召すと求食り追ひゆく山城の打酔へる子ら藻葉干せよえ舟繋けぬ。",
		EnrichedText: "",
		HTML:         "",
		Files:        nil,
	}
	testEmailFromFile(t, fp, expectedEmail)
}

func TestParseEmailJapanesePlaintextIso2022jpOver7bit(t *testing.T) {
	fp := "tests/test_japanese_plaintext_iso-2022-jp_over_7bit.txt"
	expectedEmail := &email.Email{
		Headers: email.Headers{
			Date: time.Time(time.Date(2019, 3, 31, 22, 55, 0, 0, time.UTC)),
			Sender: &mail.Address{
				Name:    "郵便アリス",
				Address: "alice.yuubin@example.com",
			},
			From: []*mail.Address{
				&mail.Address{
					Name:    "郵便アリス",
					Address: "alice.yuubin@example.com",
				},
				&mail.Address{
					Name:    "郵便アリス",
					Address: "alice.yuubin@example.net",
				},
			},
			ReplyTo: []*mail.Address{
				&mail.Address{
					Name:    "郵便アリス",
					Address: "alice.yuubin@example.net",
				},
			},
			To: []*mail.Address{
				&mail.Address{
					Name:    "郵便ボブ",
					Address: "bob.yuubin@example.com",
				},
				&mail.Address{
					Name:    "郵便キャロル",
					Address: "carol.yuubin@example.com",
				},
			},
			Cc: []*mail.Address{
				&mail.Address{
					Name:    "郵便ダン",
					Address: "dan.yuubin@example.com",
				},
				&mail.Address{
					Name:    "郵便イーブ",
					Address: "eve.yubin@example.com",
				},
			},
			Bcc: []*mail.Address{
				&mail.Address{
					Name:    "郵便フランク",
					Address: "frank.yuubin@example.com",
				},
				&mail.Address{
					Name:    "郵便グレイス",
					Address: "grace.yubin@example.com",
				},
			},
			MessageID: "Message-Id-1@example.com",
			InReplyTo: []string{
				"Message-Id-0@example.com",
			},
			References: []string{
				"Message-Id-0@example.com",
			},
			Subject:  "📧 Test いろは歌",
			Comments: "Message Header Comment",
			Keywords: []string{
				"Keyword 1",
				"Keyword 2",
			},
			ResentDate: time.Time(time.Date(2019, 3, 31, 22, 55, 0, 0, time.UTC)),
			ResentFrom: []*mail.Address{
				&mail.Address{
					Name:    "郵便アリス",
					Address: "alice.yuubin@example.net",
				},
				&mail.Address{
					Name:    "郵便アリス",
					Address: "alice.yuubin@example.com",
				},
			},
			ResentSender: &mail.Address{
				Name:    "郵便アリス",
				Address: "alice.yuubin@example.net",
			},
			ResentTo: []*mail.Address{
				&mail.Address{
					Name:    "郵便ボブ",
					Address: "bob.yuubin@example.net",
				},
				&mail.Address{
					Name:    "郵便キャロル",
					Address: "carol.yuubin@example.net",
				},
			},
			ResentCc: []*mail.Address{
				&mail.Address{
					Name:    "郵便ダン",
					Address: "dan.yuubin@example.net",
				},
				&mail.Address{
					Name:    "郵便イーブ",
					Address: "eve.yubin@example.net",
				},
			},
			ResentBcc: []*mail.Address{
				&mail.Address{
					Name:    "郵便フランク",
					Address: "frank.yuubin@example.net",
				},
				&mail.Address{
					Name:    "郵便グレイス",
					Address: "grace.yubin@example.net",
				},
			},
			ResentMessageID: "Message-Id-1@example.net",
			ExtraHeaders: map[string][]string{
				"X-Clacks-Overhead": []string{
					"GNU Terry Pratchett",
				},
				"X-Script/function/\t !\"#$%&'()*+,-./;<=>?@[\\]^_`{|}~": []string{
					"TEST VALUE 1\t !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_` abcdefghijklmnopqrstuvwxyz{|}~",
					"TEST VALUE 2\t !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_` abcdefghijklmnopqrstuvwxyz{|}~",
				},
			},
			ContentInfo: &email.ContentInfo{
				Type: "text/plain",
				TypeParams: map[string]string{
					"charset": "iso-2022-jp",
				},
				Disposition:       "",
				DispositionParams: map[string]string(nil),
				TransferEncoding:  "7bit",
				ID:                "",
				Charset:           "iso-2022-jp",
			},
			Received: nil,
		},
		Text: "色は匂えど\n" +
			"散りぬるを\n" +
			"我が世誰ぞ\n" +
			"常ならん\n" +
			"有為の奥山\n" +
			"今日越えて\n" +
			"浅き夢見じ\n" +
			"酔いもせず。\n" +
			"\n" +
			"Iro wa nioedo / Chirinuru o / Wa ga yo tare zo / Tsune naran / Ui no okuyama / Kyo koete Asaki yume miji / Yoi mo sezu.\n" +
			"\n" +
			"とりなくこゑすゆめさませみよあけわたるひんかしをそらいろはえておきつへにほふねむれゐぬもやのうち。\n" +
			"\n" +
			"天地星空\n" +
			"山川峰谷\n" +
			"雲霧室苔\n" +
			"人犬上末\n" +
			"硫黄猿生ふ為よ\n" +
			"榎の枝を馴れ居て。\n" +
			"\n" +
			"田居に出で菜摘むわれをぞ君召すと求食り追ひゆく山城の打酔へる子ら藻葉干せよえ舟繋けぬ。",
		EnrichedText: "",
		HTML:         "",
		Files:        nil,
	}
	testEmailFromFile(t, fp, expectedEmail)
}

func TestParseEmailJapanesePlaintextIso2022jpOverBase64(t *testing.T) {
	fp := "tests/test_japanese_plaintext_iso-2022-jp_over_base64.txt"
	expectedEmail := &email.Email{
		Headers: email.Headers{
			Date: time.Time(time.Date(2019, 3, 31, 22, 55, 0, 0, time.UTC)),
			Sender: &mail.Address{
				Name:    "郵便アリス",
				Address: "alice.yuubin@example.com",
			},
			From: []*mail.Address{
				&mail.Address{
					Name:    "郵便アリス",
					Address: "alice.yuubin@example.com",
				},
				&mail.Address{
					Name:    "郵便アリス",
					Address: "alice.yuubin@example.net",
				},
			},
			ReplyTo: []*mail.Address{
				&mail.Address{
					Name:    "郵便アリス",
					Address: "alice.yuubin@example.net",
				},
			},
			To: []*mail.Address{
				&mail.Address{
					Name:    "郵便ボブ",
					Address: "bob.yuubin@example.com",
				},
				&mail.Address{
					Name:    "郵便キャロル",
					Address: "carol.yuubin@example.com",
				},
			},
			Cc: []*mail.Address{
				&mail.Address{
					Name:    "郵便ダン",
					Address: "dan.yuubin@example.com",
				},
				&mail.Address{
					Name:    "郵便イーブ",
					Address: "eve.yubin@example.com",
				},
			},
			Bcc: []*mail.Address{
				&mail.Address{
					Name:    "郵便フランク",
					Address: "frank.yuubin@example.com",
				},
				&mail.Address{
					Name:    "郵便グレイス",
					Address: "grace.yubin@example.com",
				},
			},
			MessageID: "Message-Id-1@example.com",
			InReplyTo: []string{
				"Message-Id-0@example.com",
			},
			References: []string{
				"Message-Id-0@example.com",
			},
			Subject:  "📧 Test いろは歌",
			Comments: "Message Header Comment",
			Keywords: []string{
				"Keyword 1",
				"Keyword 2",
			},
			ResentDate: time.Time(time.Date(2019, 3, 31, 22, 55, 0, 0, time.UTC)),
			ResentFrom: []*mail.Address{
				&mail.Address{
					Name:    "郵便アリス",
					Address: "alice.yuubin@example.net",
				},
				&mail.Address{
					Name:    "郵便アリス",
					Address: "alice.yuubin@example.com",
				},
			},
			ResentSender: &mail.Address{
				Name:    "郵便アリス",
				Address: "alice.yuubin@example.net",
			},
			ResentTo: []*mail.Address{
				&mail.Address{
					Name:    "郵便ボブ",
					Address: "bob.yuubin@example.net",
				},
				&mail.Address{
					Name:    "郵便キャロル",
					Address: "carol.yuubin@example.net",
				},
			},
			ResentCc: []*mail.Address{
				&mail.Address{
					Name:    "郵便ダン",
					Address: "dan.yuubin@example.net",
				},
				&mail.Address{
					Name:    "郵便イーブ",
					Address: "eve.yubin@example.net",
				},
			},
			ResentBcc: []*mail.Address{
				&mail.Address{
					Name:    "郵便フランク",
					Address: "frank.yuubin@example.net",
				},
				&mail.Address{
					Name:    "郵便グレイス",
					Address: "grace.yubin@example.net",
				},
			},
			ResentMessageID: "Message-Id-1@example.net",
			ExtraHeaders: map[string][]string{
				"X-Clacks-Overhead": []string{
					"GNU Terry Pratchett",
				},
				"X-Script/function/\t !\"#$%&'()*+,-./;<=>?@[\\]^_`{|}~": []string{
					"TEST VALUE 1\t !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_` abcdefghijklmnopqrstuvwxyz{|}~",
					"TEST VALUE 2\t !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_` abcdefghijklmnopqrstuvwxyz{|}~",
				},
			},
			ContentInfo: &email.ContentInfo{
				Type: "text/plain",
				TypeParams: map[string]string{
					"charset": "iso-2022-jp",
				},
				Disposition:       "",
				DispositionParams: map[string]string(nil),
				TransferEncoding:  "base64",
				ID:                "",
				Charset:           "iso-2022-jp",
			},
			Received: nil,
		},
		Text: "色は匂えど\n" +
			"散りぬるを\n" +
			"我が世誰ぞ\n" +
			"常ならん\n" +
			"有為の奥山\n" +
			"今日越えて\n" +
			"浅き夢見じ\n" +
			"酔いもせず。\n" +
			"\n" +
			"Iro wa nioedo / Chirinuru o / Wa ga yo tare zo / Tsune naran / Ui no okuyama / Kyo koete Asaki yume miji / Yoi mo sezu.\n" +
			"\n" +
			"とりなくこゑすゆめさませみよあけわたるひんかしをそらいろはえておきつへにほふねむれゐぬもやのうち。\n" +
			"\n" +
			"天地星空\n" +
			"山川峰谷\n" +
			"雲霧室苔\n" +
			"人犬上末\n" +
			"硫黄猿生ふ為よ\n" +
			"榎の枝を馴れ居て。\n" +
			"\n" +
			"田居に出で菜摘むわれをぞ君召すと求食り追ひゆく山城の打酔へる子ら藻葉干せよえ舟繋けぬ。",
		EnrichedText: "",
		HTML:         "",
		Files:        nil,
	}
	testEmailFromFile(t, fp, expectedEmail)
}

func TestParseEmailJapanesePlaintextIso2022jpOverQuotedprintable(t *testing.T) {
	fp := "tests/test_japanese_plaintext_iso-2022-jp_over_quoted-printable.txt"
	expectedEmail := &email.Email{
		Headers: email.Headers{
			Date: time.Time(time.Date(2019, 3, 31, 22, 55, 0, 0, time.UTC)),
			Sender: &mail.Address{
				Name:    "郵便アリス",
				Address: "alice.yuubin@example.com",
			},
			From: []*mail.Address{
				&mail.Address{
					Name:    "郵便アリス",
					Address: "alice.yuubin@example.com",
				},
				&mail.Address{
					Name:    "郵便アリス",
					Address: "alice.yuubin@example.net",
				},
			},
			ReplyTo: []*mail.Address{
				&mail.Address{
					Name:    "郵便アリス",
					Address: "alice.yuubin@example.net",
				},
			},
			To: []*mail.Address{
				&mail.Address{
					Name:    "郵便ボブ",
					Address: "bob.yuubin@example.com",
				},
				&mail.Address{
					Name:    "郵便キャロル",
					Address: "carol.yuubin@example.com",
				},
			},
			Cc: []*mail.Address{
				&mail.Address{
					Name:    "郵便ダン",
					Address: "dan.yuubin@example.com",
				},
				&mail.Address{
					Name:    "郵便イーブ",
					Address: "eve.yubin@example.com",
				},
			},
			Bcc: []*mail.Address{
				&mail.Address{
					Name:    "郵便フランク",
					Address: "frank.yuubin@example.com",
				},
				&mail.Address{
					Name:    "郵便グレイス",
					Address: "grace.yubin@example.com",
				},
			},
			MessageID: "Message-Id-1@example.com",
			InReplyTo: []string{
				"Message-Id-0@example.com",
			},
			References: []string{
				"Message-Id-0@example.com",
			},
			Subject:  "📧 Test いろは歌",
			Comments: "Message Header Comment",
			Keywords: []string{
				"Keyword 1",
				"Keyword 2",
			},
			ResentDate: time.Time(time.Date(2019, 3, 31, 22, 55, 0, 0, time.UTC)),
			ResentFrom: []*mail.Address{
				&mail.Address{
					Name:    "郵便アリス",
					Address: "alice.yuubin@example.net",
				},
				&mail.Address{
					Name:    "郵便アリス",
					Address: "alice.yuubin@example.com",
				},
			},
			ResentSender: &mail.Address{
				Name:    "郵便アリス",
				Address: "alice.yuubin@example.net",
			},
			ResentTo: []*mail.Address{
				&mail.Address{
					Name:    "郵便ボブ",
					Address: "bob.yuubin@example.net",
				},
				&mail.Address{
					Name:    "郵便キャロル",
					Address: "carol.yuubin@example.net",
				},
			},
			ResentCc: []*mail.Address{
				&mail.Address{
					Name:    "郵便ダン",
					Address: "dan.yuubin@example.net",
				},
				&mail.Address{
					Name:    "郵便イーブ",
					Address: "eve.yubin@example.net",
				},
			},
			ResentBcc: []*mail.Address{
				&mail.Address{
					Name:    "郵便フランク",
					Address: "frank.yuubin@example.net",
				},
				&mail.Address{
					Name:    "郵便グレイス",
					Address: "grace.yubin@example.net",
				},
			},
			ResentMessageID: "Message-Id-1@example.net",
			ExtraHeaders: map[string][]string{
				"X-Clacks-Overhead": []string{
					"GNU Terry Pratchett",
				},
				"X-Script/function/\t !\"#$%&'()*+,-./;<=>?@[\\]^_`{|}~": []string{
					"TEST VALUE 1\t !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_` abcdefghijklmnopqrstuvwxyz{|}~",
					"TEST VALUE 2\t !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_` abcdefghijklmnopqrstuvwxyz{|}~",
				},
			},
			ContentInfo: &email.ContentInfo{
				Type: "text/plain",
				TypeParams: map[string]string{
					"charset": "iso-2022-jp",
				},
				Disposition:       "",
				DispositionParams: map[string]string(nil),
				TransferEncoding:  "quoted-printable",
				ID:                "",
				Charset:           "iso-2022-jp",
			},
			Received: nil,
		},
		Text: "色は匂えど\n" +
			"散りぬるを\n" +
			"我が世誰ぞ\n" +
			"常ならん\n" +
			"有為の奥山\n" +
			"今日越えて\n" +
			"浅き夢見じ\n" +
			"酔いもせず。\n" +
			"\n" +
			"Iro wa nioedo / Chirinuru o / Wa ga yo tare zo / Tsune naran / Ui no okuyama / Kyo koete Asaki yume miji / Yoi mo sezu.\n" +
			"\n" +
			"とりなくこゑすゆめさませみよあけわたるひんかしをそらいろはえておきつへにほふねむれゐぬもやのうち。\n" +
			"\n" +
			"天地星空\n" +
			"山川峰谷\n" +
			"雲霧室苔\n" +
			"人犬上末\n" +
			"硫黄猿生ふ為よ\n" +
			"榎の枝を馴れ居て。\n" +
			"\n" +
			"田居に出で菜摘むわれをぞ君召すと求食り追ひゆく山城の打酔へる子ら藻葉干せよえ舟繋けぬ。",
		EnrichedText: "",
		HTML:         "",
		Files:        nil,
	}
	testEmailFromFile(t, fp, expectedEmail)
}

func TestParseEmailJapanesePlaintextEucjpOverBase64(t *testing.T) {
	fp := "tests/test_japanese_plaintext_euc-jp_over_base64.txt"
	expectedEmail := &email.Email{
		Headers: email.Headers{
			Date: time.Time(time.Date(2019, 3, 31, 22, 55, 0, 0, time.UTC)),
			Sender: &mail.Address{
				Name:    "郵便アリス",
				Address: "alice.yuubin@example.com",
			},
			From: []*mail.Address{
				&mail.Address{
					Name:    "郵便アリス",
					Address: "alice.yuubin@example.com",
				},
				&mail.Address{
					Name:    "郵便アリス",
					Address: "alice.yuubin@example.net",
				},
			},
			ReplyTo: []*mail.Address{
				&mail.Address{
					Name:    "郵便アリス",
					Address: "alice.yuubin@example.net",
				},
			},
			To: []*mail.Address{
				&mail.Address{
					Name:    "郵便ボブ",
					Address: "bob.yuubin@example.com",
				},
				&mail.Address{
					Name:    "郵便キャロル",
					Address: "carol.yuubin@example.com",
				},
			},
			Cc: []*mail.Address{
				&mail.Address{
					Name:    "郵便ダン",
					Address: "dan.yuubin@example.com",
				},
				&mail.Address{
					Name:    "郵便イーブ",
					Address: "eve.yubin@example.com",
				},
			},
			Bcc: []*mail.Address{
				&mail.Address{
					Name:    "郵便フランク",
					Address: "frank.yuubin@example.com",
				},
				&mail.Address{
					Name:    "郵便グレイス",
					Address: "grace.yubin@example.com",
				},
			},
			MessageID: "Message-Id-1@example.com",
			InReplyTo: []string{
				"Message-Id-0@example.com",
			},
			References: []string{
				"Message-Id-0@example.com",
			},
			Subject:  "📧 Test いろは歌",
			Comments: "Message Header Comment",
			Keywords: []string{
				"Keyword 1",
				"Keyword 2",
			},
			ResentDate: time.Time(time.Date(2019, 3, 31, 22, 55, 0, 0, time.UTC)),
			ResentFrom: []*mail.Address{
				&mail.Address{
					Name:    "郵便アリス",
					Address: "alice.yuubin@example.net",
				},
				&mail.Address{
					Name:    "郵便アリス",
					Address: "alice.yuubin@example.com",
				},
			},
			ResentSender: &mail.Address{
				Name:    "郵便アリス",
				Address: "alice.yuubin@example.net",
			},
			ResentTo: []*mail.Address{
				&mail.Address{
					Name:    "郵便ボブ",
					Address: "bob.yuubin@example.net",
				},
				&mail.Address{
					Name:    "郵便キャロル",
					Address: "carol.yuubin@example.net",
				},
			},
			ResentCc: []*mail.Address{
				&mail.Address{
					Name:    "郵便ダン",
					Address: "dan.yuubin@example.net",
				},
				&mail.Address{
					Name:    "郵便イーブ",
					Address: "eve.yubin@example.net",
				},
			},
			ResentBcc: []*mail.Address{
				&mail.Address{
					Name:    "郵便フランク",
					Address: "frank.yuubin@example.net",
				},
				&mail.Address{
					Name:    "郵便グレイス",
					Address: "grace.yubin@example.net",
				},
			},
			ResentMessageID: "Message-Id-1@example.net",
			ExtraHeaders: map[string][]string{
				"X-Clacks-Overhead": []string{
					"GNU Terry Pratchett",
				},
				"X-Script/function/\t !\"#$%&'()*+,-./;<=>?@[\\]^_`{|}~": []string{
					"TEST VALUE 1\t !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_` abcdefghijklmnopqrstuvwxyz{|}~",
					"TEST VALUE 2\t !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_` abcdefghijklmnopqrstuvwxyz{|}~",
				},
			},
			ContentInfo: &email.ContentInfo{
				Type: "text/plain",
				TypeParams: map[string]string{
					"charset": "euc-jp",
				},
				Disposition:       "",
				DispositionParams: map[string]string(nil),
				TransferEncoding:  "base64",
				ID:                "",
				Charset:           "euc-jp",
			},
			Received: nil,
		},
		Text: "色は匂えど\n" +
			"散りぬるを\n" +
			"我が世誰ぞ\n" +
			"常ならん\n" +
			"有為の奥山\n" +
			"今日越えて\n" +
			"浅き夢見じ\n" +
			"酔いもせず。\n" +
			"\n" +
			"Iro wa nioedo / Chirinuru o / Wa ga yo tare zo / Tsune naran / Ui no okuyama / Kyo koete Asaki yume miji / Yoi mo sezu.\n" +
			"\n" +
			"とりなくこゑすゆめさませみよあけわたるひんかしをそらいろはえておきつへにほふねむれゐぬもやのうち。\n" +
			"\n" +
			"天地星空\n" +
			"山川峰谷\n" +
			"雲霧室苔\n" +
			"人犬上末\n" +
			"硫黄猿生ふ為よ\n" +
			"榎の枝を馴れ居て。\n" +
			"\n" +
			"田居に出で菜摘むわれをぞ君召すと求食り追ひゆく山城の打酔へる子ら藻葉干せよえ舟繋けぬ。",
		EnrichedText: "",
		HTML:         "",
		Files:        nil,
	}
	testEmailFromFile(t, fp, expectedEmail)
}

func TestParseEmailJapanesePlaintextEucjpOverQuotedprintable(t *testing.T) {
	fp := "tests/test_japanese_plaintext_euc-jp_over_quoted-printable.txt"
	expectedEmail := &email.Email{
		Headers: email.Headers{
			Date: time.Time(time.Date(2019, 3, 31, 22, 55, 0, 0, time.UTC)),
			Sender: &mail.Address{
				Name:    "郵便アリス",
				Address: "alice.yuubin@example.com",
			},
			From: []*mail.Address{
				&mail.Address{
					Name:    "郵便アリス",
					Address: "alice.yuubin@example.com",
				},
				&mail.Address{
					Name:    "郵便アリス",
					Address: "alice.yuubin@example.net",
				},
			},
			ReplyTo: []*mail.Address{
				&mail.Address{
					Name:    "郵便アリス",
					Address: "alice.yuubin@example.net",
				},
			},
			To: []*mail.Address{
				&mail.Address{
					Name:    "郵便ボブ",
					Address: "bob.yuubin@example.com",
				},
				&mail.Address{
					Name:    "郵便キャロル",
					Address: "carol.yuubin@example.com",
				},
			},
			Cc: []*mail.Address{
				&mail.Address{
					Name:    "郵便ダン",
					Address: "dan.yuubin@example.com",
				},
				&mail.Address{
					Name:    "郵便イーブ",
					Address: "eve.yubin@example.com",
				},
			},
			Bcc: []*mail.Address{
				&mail.Address{
					Name:    "郵便フランク",
					Address: "frank.yuubin@example.com",
				},
				&mail.Address{
					Name:    "郵便グレイス",
					Address: "grace.yubin@example.com",
				},
			},
			MessageID: "Message-Id-1@example.com",
			InReplyTo: []string{
				"Message-Id-0@example.com",
			},
			References: []string{
				"Message-Id-0@example.com",
			},
			Subject:  "📧 Test いろは歌",
			Comments: "Message Header Comment",
			Keywords: []string{
				"Keyword 1",
				"Keyword 2",
			},
			ResentDate: time.Time(time.Date(2019, 3, 31, 22, 55, 0, 0, time.UTC)),
			ResentFrom: []*mail.Address{
				&mail.Address{
					Name:    "郵便アリス",
					Address: "alice.yuubin@example.net",
				},
				&mail.Address{
					Name:    "郵便アリス",
					Address: "alice.yuubin@example.com",
				},
			},
			ResentSender: &mail.Address{
				Name:    "郵便アリス",
				Address: "alice.yuubin@example.net",
			},
			ResentTo: []*mail.Address{
				&mail.Address{
					Name:    "郵便ボブ",
					Address: "bob.yuubin@example.net",
				},
				&mail.Address{
					Name:    "郵便キャロル",
					Address: "carol.yuubin@example.net",
				},
			},
			ResentCc: []*mail.Address{
				&mail.Address{
					Name:    "郵便ダン",
					Address: "dan.yuubin@example.net",
				},
				&mail.Address{
					Name:    "郵便イーブ",
					Address: "eve.yubin@example.net",
				},
			},
			ResentBcc: []*mail.Address{
				&mail.Address{
					Name:    "郵便フランク",
					Address: "frank.yuubin@example.net",
				},
				&mail.Address{
					Name:    "郵便グレイス",
					Address: "grace.yubin@example.net",
				},
			},
			ResentMessageID: "Message-Id-1@example.net",
			ExtraHeaders: map[string][]string{
				"X-Clacks-Overhead": []string{
					"GNU Terry Pratchett",
				},
				"X-Script/function/\t !\"#$%&'()*+,-./;<=>?@[\\]^_`{|}~": []string{
					"TEST VALUE 1\t !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_` abcdefghijklmnopqrstuvwxyz{|}~",
					"TEST VALUE 2\t !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_` abcdefghijklmnopqrstuvwxyz{|}~",
				},
			},
			ContentInfo: &email.ContentInfo{
				Type: "text/plain",
				TypeParams: map[string]string{
					"charset": "euc-jp",
				},
				Disposition:       "",
				DispositionParams: map[string]string(nil),
				TransferEncoding:  "quoted-printable",
				ID:                "",
				Charset:           "euc-jp",
			},
			Received: nil,
		},
		Text: "色は匂えど\n" +
			"散りぬるを\n" +
			"我が世誰ぞ\n" +
			"常ならん\n" +
			"有為の奥山\n" +
			"今日越えて\n" +
			"浅き夢見じ\n" +
			"酔いもせず。\n" +
			"\n" +
			"Iro wa nioedo / Chirinuru o / Wa ga yo tare zo / Tsune naran / Ui no okuyama / Kyo koete Asaki yume miji / Yoi mo sezu.\n" +
			"\n" +
			"とりなくこゑすゆめさませみよあけわたるひんかしをそらいろはえておきつへにほふねむれゐぬもやのうち。\n" +
			"\n" +
			"天地星空\n" +
			"山川峰谷\n" +
			"雲霧室苔\n" +
			"人犬上末\n" +
			"硫黄猿生ふ為よ\n" +
			"榎の枝を馴れ居て。\n" +
			"\n" +
			"田居に出で菜摘むわれをぞ君召すと求食り追ひゆく山城の打酔へる子ら藻葉干せよえ舟繋けぬ。",
		EnrichedText: "",
		HTML:         "",
		Files:        nil,
	}
	testEmailFromFile(t, fp, expectedEmail)
}

func TestParseEmailJapaneseMultipartRelatedUtf8Over7bit(t *testing.T) {
	fp := "tests/test_japanese_multipart_related_utf-8_over_7bit.txt"
	expectedEmail := &email.Email{
		Headers: email.Headers{
			Date: time.Time(time.Date(2019, 3, 31, 22, 55, 0, 0, time.UTC)),
			Sender: &mail.Address{
				Name:    "郵便アリス",
				Address: "alice.yuubin@example.com",
			},
			From: []*mail.Address{
				&mail.Address{
					Name:    "郵便アリス",
					Address: "alice.yuubin@example.com",
				},
				&mail.Address{
					Name:    "郵便アリス",
					Address: "alice.yuubin@example.net",
				},
			},
			ReplyTo: []*mail.Address{
				&mail.Address{
					Name:    "郵便アリス",
					Address: "alice.yuubin@example.net",
				},
			},
			To: []*mail.Address{
				&mail.Address{
					Name:    "郵便ボブ",
					Address: "bob.yuubin@example.com",
				},
				&mail.Address{
					Name:    "郵便キャロル",
					Address: "carol.yuubin@example.com",
				},
			},
			Cc: []*mail.Address{
				&mail.Address{
					Name:    "郵便ダン",
					Address: "dan.yuubin@example.com",
				},
				&mail.Address{
					Name:    "郵便イーブ",
					Address: "eve.yubin@example.com",
				},
			},
			Bcc: []*mail.Address{
				&mail.Address{
					Name:    "郵便フランク",
					Address: "frank.yuubin@example.com",
				},
				&mail.Address{
					Name:    "郵便グレイス",
					Address: "grace.yubin@example.com",
				},
			},
			MessageID: "Message-Id-1@example.com",
			InReplyTo: []string{
				"Message-Id-0@example.com",
			},
			References: []string{
				"Message-Id-0@example.com",
			},
			Subject:  "📧 Test いろは歌",
			Comments: "Message Header Comment",
			Keywords: []string{
				"Keyword 1",
				"Keyword 2",
			},
			ResentDate: time.Time(time.Date(2019, 3, 31, 22, 55, 0, 0, time.UTC)),
			ResentFrom: []*mail.Address{
				&mail.Address{
					Name:    "郵便アリス",
					Address: "alice.yuubin@example.net",
				},
				&mail.Address{
					Name:    "郵便アリス",
					Address: "alice.yuubin@example.com",
				},
			},
			ResentSender: &mail.Address{
				Name:    "郵便アリス",
				Address: "alice.yuubin@example.net",
			},
			ResentTo: []*mail.Address{
				&mail.Address{
					Name:    "郵便ボブ",
					Address: "bob.yuubin@example.net",
				},
				&mail.Address{
					Name:    "郵便キャロル",
					Address: "carol.yuubin@example.net",
				},
			},
			ResentCc: []*mail.Address{
				&mail.Address{
					Name:    "郵便ダン",
					Address: "dan.yuubin@example.net",
				},
				&mail.Address{
					Name:    "郵便イーブ",
					Address: "eve.yubin@example.net",
				},
			},
			ResentBcc: []*mail.Address{
				&mail.Address{
					Name:    "郵便フランク",
					Address: "frank.yuubin@example.net",
				},
				&mail.Address{
					Name:    "郵便グレイス",
					Address: "grace.yubin@example.net",
				},
			},
			ResentMessageID: "Message-Id-1@example.net",
			ExtraHeaders: map[string][]string{
				"X-Clacks-Overhead": []string{
					"GNU Terry Pratchett",
				},
				"X-Script/function/\t !\"#$%&'()*+,-./;<=>?@[\\]^_`{|}~": []string{
					"TEST VALUE 1\t !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_` abcdefghijklmnopqrstuvwxyz{|}~",
					"TEST VALUE 2\t !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_` abcdefghijklmnopqrstuvwxyz{|}~",
				},
			},
			ContentInfo: &email.ContentInfo{
				Type: "multipart/related",
				TypeParams: map[string]string{
					"boundary": "RelatedBoundaryString",
					"charset":  "utf-8",
				},
				Disposition:       "",
				DispositionParams: map[string]string(nil), // p0
				TransferEncoding:  "7bit",
				ID:                "",
				Charset:           "utf-8",
			},
			Received: nil,
		},
		Text: "色は匂えど\n" +
			"散りぬるを\n" +
			"我が世誰ぞ\n" +
			"常ならん\n" +
			"有為の奥山\n" +
			"今日越えて\n" +
			"浅き夢見じ\n" +
			"酔いもせず。\n" +
			"\n" +
			"Iro wa nioedo / Chirinuru o / Wa ga yo tare zo / Tsune naran / Ui no okuyama / Kyo koete Asaki yume miji / Yoi mo sezu.\n" +
			"\n" +
			"とりなくこゑすゆめさませみよあけわたるひんかしをそらいろはえておきつへにほふねむれゐぬもやのうち。\n" +
			"\n" +
			"天地星空\n" +
			"山川峰谷\n" +
			"雲霧室苔\n" +
			"人犬上末\n" +
			"硫黄猿生ふ為よ\n" +
			"榎の枝を馴れ居て。\n" +
			"\n" +
			"田居に出で菜摘むわれをぞ君召すと求食り追ひゆく山城の打酔へる子ら藻葉干せよえ舟繋けぬ。",
		EnrichedText: "<bold>色は匂えど</bold>\n" +
			"<italic>散りぬるを</italic>\n" +
			"<fixed>我が世誰ぞ</fixed>\n" +
			"<underline>常ならん</underline>\n" +
			"有為の奥山\n" +
			"今日越えて\n" +
			"浅き夢見じ\n" +
			"酔いもせず。\n" +
			"\n" +
			"Iro wa nioedo / Chirinuru o / Wa ga yo tare zo / Tsune naran / Ui no okuyama / Kyo koete Asaki yume miji / Yoi mo sezu.\n" +
			"\n" +
			"とりなくこゑすゆめさませみよあけわたるひんかしをそらいろはえておきつへにほふねむれゐぬもやのうち。\n" +
			"\n" +
			"天地星空\n" +
			"山川峰谷\n" +
			"雲霧室苔\n" +
			"人犬上末\n" +
			"硫黄猿生ふ為よ\n" +
			"榎の枝を馴れ居て。\n" +
			"\n" +
			"田居に出で菜摘むわれをぞ君召すと求食り追ひゆく山城の打酔へる子ら藻葉干せよえ舟繋けぬ。",
		HTML: "<html>\n" +
			"<div dir=\"ltr\">\n" +
			"<p>色は匂えど<br />\n" +
			"散りぬるを<br />\n" +
			"我が世誰ぞ<br />\n" +
			"常ならん<br />\n" +
			"有為の奥山<br />\n" +
			"今日越えて<br />\n" +
			"浅き夢見じ<br />\n" +
			"酔いもせず。</p>\n" +
			"\n" +
			"<p>Iro wa nioedo / Chirinuru o / Wa ga yo tare zo / Tsune naran / Ui no okuyama / Kyo koete Asaki yume miji / Yoi mo sezu.</p>\n" +
			"\n" +
			"<p>とりなくこゑすゆめさませみよあけわたるひんかしをそらいろはえておきつへにほふねむれゐぬもやのうち。</p>\n" +
			"\n" +
			"<p>天地星空<br />\n" +
			"山川峰谷<br />\n" +
			"雲霧室苔<br />\n" +
			"人犬上末<br />\n" +
			"硫黄猿生ふ為よ<br />\n" +
			"榎の枝を馴れ居て。</p>\n" +
			"\n" +
			"<p>田居に出で菜摘むわれをぞ君召すと求食り追ひゆく山城の打酔へる子ら藻葉干せよえ舟繋けぬ。</p>\n" +
			"</div>\n" +
			"</html>",
		Files: []*email.File{
			&email.File{
				FileType: "inline",
				Name:     "inline-jpg-image-filename.jpg",
				ContentInfo: &email.ContentInfo{
					Type: "image/jpeg",
					TypeParams: map[string]string{
						"name": "inline-jpg-image-name.jpg",
					},
					Disposition: "inline",
					DispositionParams: map[string]string{
						"filename": "inline-jpg-image-filename.jpg",
					},
					TransferEncoding: "base64",
					ID:               "inline-jpg-image.jpg@example.com",
					Charset:          "utf-8",
				},
				Data: []byte{
					239, 191, 189, 239, 191, 189, 239, 191, 189, 239, 191, 189, 0, 67, 0, 3, 2, 2, 2,
					2, 2, 3, 2, 2, 2, 3, 3, 3, 3, 4, 6, 4, 4, 4, 4, 4, 8, 6, 6, 5, 6, 9, 8, 10, 10, 9,
					8, 9, 9, 10, 12, 15, 12, 10, 11, 14, 11, 9, 9, 13, 17, 13, 14, 15, 16, 16, 17, 16,
					10, 12, 18, 19, 18, 16, 19, 15, 16, 16, 16, 239, 191, 189, 239, 191, 189, 0, 11,
					8, 0, 1, 0, 1, 1, 1, 17, 0, 239, 191, 189, 239, 191, 189, 0, 6, 0, 16, 16, 5, 239,
					191, 189, 239, 191, 189, 0, 8, 1, 1, 0, 0, 63, 0, 239, 191, 189, 239, 191, 189, 32,
					239, 191, 189, 239, 191, 189,
				},
			},
		},
	}
	testEmailFromFile(t, fp, expectedEmail)
}

func TestParseEmailJapaneseMultipartRelatedUtf8OverBase64(t *testing.T) {
	fp := "tests/test_japanese_multipart_related_utf-8_over_base64.txt"
	expectedEmail := &email.Email{
		Headers: email.Headers{
			Date: time.Time(time.Date(2019, 3, 31, 22, 55, 0, 0, time.UTC)),
			Sender: &mail.Address{
				Name:    "郵便アリス",
				Address: "alice.yuubin@example.com",
			},
			From: []*mail.Address{
				&mail.Address{
					Name:    "郵便アリス",
					Address: "alice.yuubin@example.com",
				},
				&mail.Address{
					Name:    "郵便アリス",
					Address: "alice.yuubin@example.net",
				},
			},
			ReplyTo: []*mail.Address{
				&mail.Address{
					Name:    "郵便アリス",
					Address: "alice.yuubin@example.net",
				},
			},
			To: []*mail.Address{
				&mail.Address{
					Name:    "郵便ボブ",
					Address: "bob.yuubin@example.com",
				},
				&mail.Address{
					Name:    "郵便キャロル",
					Address: "carol.yuubin@example.com",
				},
			},
			Cc: []*mail.Address{
				&mail.Address{
					Name:    "郵便ダン",
					Address: "dan.yuubin@example.com",
				},
				&mail.Address{
					Name:    "郵便イーブ",
					Address: "eve.yubin@example.com",
				},
			},
			Bcc: []*mail.Address{
				&mail.Address{
					Name:    "郵便フランク",
					Address: "frank.yuubin@example.com",
				},
				&mail.Address{
					Name:    "郵便グレイス",
					Address: "grace.yubin@example.com",
				},
			},
			MessageID: "Message-Id-1@example.com",
			InReplyTo: []string{
				"Message-Id-0@example.com",
			},
			References: []string{
				"Message-Id-0@example.com",
			},
			Subject:  "📧 Test いろは歌",
			Comments: "Message Header Comment",
			Keywords: []string{
				"Keyword 1",
				"Keyword 2",
			},
			ResentDate: time.Time(time.Date(2019, 3, 31, 22, 55, 0, 0, time.UTC)),
			ResentFrom: []*mail.Address{
				&mail.Address{
					Name:    "郵便アリス",
					Address: "alice.yuubin@example.net",
				},
				&mail.Address{
					Name:    "郵便アリス",
					Address: "alice.yuubin@example.com",
				},
			},
			ResentSender: &mail.Address{
				Name:    "郵便アリス",
				Address: "alice.yuubin@example.net",
			},
			ResentTo: []*mail.Address{
				&mail.Address{
					Name:    "郵便ボブ",
					Address: "bob.yuubin@example.net",
				},
				&mail.Address{
					Name:    "郵便キャロル",
					Address: "carol.yuubin@example.net",
				},
			},
			ResentCc: []*mail.Address{
				&mail.Address{
					Name:    "郵便ダン",
					Address: "dan.yuubin@example.net",
				},
				&mail.Address{
					Name:    "郵便イーブ",
					Address: "eve.yubin@example.net",
				},
			},
			ResentBcc: []*mail.Address{
				&mail.Address{
					Name:    "郵便フランク",
					Address: "frank.yuubin@example.net",
				},
				&mail.Address{
					Name:    "郵便グレイス",
					Address: "grace.yubin@example.net",
				},
			},
			ResentMessageID: "Message-Id-1@example.net",
			ExtraHeaders: map[string][]string{
				"X-Clacks-Overhead": []string{
					"GNU Terry Pratchett",
				},
				"X-Script/function/\t !\"#$%&'()*+,-./;<=>?@[\\]^_`{|}~": []string{
					"TEST VALUE 1\t !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_` abcdefghijklmnopqrstuvwxyz{|}~",
					"TEST VALUE 2\t !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_` abcdefghijklmnopqrstuvwxyz{|}~",
				},
			},
			ContentInfo: &email.ContentInfo{
				Type: "multipart/related",
				TypeParams: map[string]string{
					"boundary": "RelatedBoundaryString",
					"charset":  "utf-8",
				},
				Disposition:       "",
				DispositionParams: map[string]string(nil), // p0
				TransferEncoding:  "base64",
				ID:                "",
				Charset:           "utf-8",
			},
			Received: nil,
		},
		Text: "色は匂えど\n" +
			"散りぬるを\n" +
			"我が世誰ぞ\n" +
			"常ならん\n" +
			"有為の奥山\n" +
			"今日越えて\n" +
			"浅き夢見じ\n" +
			"酔いもせず。\n" +
			"\n" +
			"Iro wa nioedo / Chirinuru o / Wa ga yo tare zo / Tsune naran / Ui no okuyama / Kyo koete Asaki yume miji / Yoi mo sezu.\n" +
			"\n" +
			"とりなくこゑすゆめさませみよあけわたるひんかしをそらいろはえておきつへにほふねむれゐぬもやのうち。\n" +
			"\n" +
			"天地星空\n" +
			"山川峰谷\n" +
			"雲霧室苔\n" +
			"人犬上末\n" +
			"硫黄猿生ふ為よ\n" +
			"榎の枝を馴れ居て。\n" +
			"\n" +
			"田居に出で菜摘むわれをぞ君召すと求食り追ひゆく山城の打酔へる子ら藻葉干せよえ舟繋けぬ。",
		EnrichedText: "<bold>色は匂えど</bold>\n" +
			"<italic>散りぬるを</italic>\n" +
			"<fixed>我が世誰ぞ</fixed>\n" +
			"<underline>常ならん</underline>\n" +
			"有為の奥山\n" +
			"今日越えて\n" +
			"浅き夢見じ\n" +
			"酔いもせず。\n" +
			"\n" +
			"Iro wa nioedo / Chirinuru o / Wa ga yo tare zo / Tsune naran / Ui no okuyama / Kyo koete Asaki yume miji / Yoi mo sezu.\n" +
			"\n" +
			"とりなくこゑすゆめさませみよあけわたるひんかしをそらいろはえておきつへにほふねむれゐぬもやのうち。\n" +
			"\n" +
			"天地星空\n" +
			"山川峰谷\n" +
			"雲霧室苔\n" +
			"人犬上末\n" +
			"硫黄猿生ふ為よ\n" +
			"榎の枝を馴れ居て。\n" +
			"\n" +
			"田居に出で菜摘むわれをぞ君召すと求食り追ひゆく山城の打酔へる子ら藻葉干せよえ舟繋けぬ。",
		HTML: "<html>\n" +
			"<div dir=\"ltr\">\n" +
			"<p>色は匂えど<br />\n" +
			"散りぬるを<br />\n" +
			"我が世誰ぞ<br />\n" +
			"常ならん<br />\n" +
			"有為の奥山<br />\n" +
			"今日越えて<br />\n" +
			"浅き夢見じ<br />\n" +
			"酔いもせず。</p>\n" +
			"\n" +
			"<p>Iro wa nioedo / Chirinuru o / Wa ga yo tare zo / Tsune naran / Ui no okuyama / Kyo koete Asaki yume miji / Yoi mo sezu.</p>\n" +
			"\n" +
			"<p>とりなくこゑすゆめさませみよあけわたるひんかしをそらいろはえておきつへにほふねむれゐぬもやのうち。</p>\n" +
			"\n" +
			"<p>天地星空<br />\n" +
			"山川峰谷<br />\n" +
			"雲霧室苔<br />\n" +
			"人犬上末<br />\n" +
			"硫黄猿生ふ為よ<br />\n" +
			"榎の枝を馴れ居て。</p>\n" +
			"\n" +
			"<p>田居に出で菜摘むわれをぞ君召すと求食り追ひゆく山城の打酔へる子ら藻葉干せよえ舟繋けぬ。</p>\n" +
			"</div>\n" +
			"</html>",
		Files: []*email.File{
			&email.File{
				FileType: "inline",
				Name:     "inline-jpg-image-filename.jpg",
				ContentInfo: &email.ContentInfo{
					Type: "image/jpeg",
					TypeParams: map[string]string{
						"name": "inline-jpg-image-name.jpg",
					},
					Disposition: "inline",
					DispositionParams: map[string]string{
						"filename": "inline-jpg-image-filename.jpg",
					},
					TransferEncoding: "base64",
					ID:               "inline-jpg-image.jpg@example.com",
					Charset:          "utf-8",
				},
				Data: []byte{
					239, 191, 189, 239, 191, 189, 239, 191, 189, 239, 191, 189, 0, 67, 0, 3, 2, 2, 2,
					2, 2, 3, 2, 2, 2, 3, 3, 3, 3, 4, 6, 4, 4, 4, 4, 4, 8, 6, 6, 5, 6, 9, 8, 10, 10, 9,
					8, 9, 9, 10, 12, 15, 12, 10, 11, 14, 11, 9, 9, 13, 17, 13, 14, 15, 16, 16, 17, 16,
					10, 12, 18, 19, 18, 16, 19, 15, 16, 16, 16, 239, 191, 189, 239, 191, 189, 0, 11,
					8, 0, 1, 0, 1, 1, 1, 17, 0, 239, 191, 189, 239, 191, 189, 0, 6, 0, 16, 16, 5, 239,
					191, 189, 239, 191, 189, 0, 8, 1, 1, 0, 0, 63, 0, 239, 191, 189, 239, 191, 189, 32,
					239, 191, 189, 239, 191, 189,
				},
			},
		},
	}
	testEmailFromFile(t, fp, expectedEmail)
}

func TestParseEmailJapaneseMultipartRelatedUtf8OverQuotedprintable(t *testing.T) {
	fp := "tests/test_japanese_multipart_related_utf-8_over_quoted-printable.txt"
	expectedEmail := &email.Email{
		Headers: email.Headers{
			Date: time.Time(time.Date(2019, 3, 31, 22, 55, 0, 0, time.UTC)),
			Sender: &mail.Address{
				Name:    "郵便アリス",
				Address: "alice.yuubin@example.com",
			},
			From: []*mail.Address{
				&mail.Address{
					Name:    "郵便アリス",
					Address: "alice.yuubin@example.com",
				},
				&mail.Address{
					Name:    "郵便アリス",
					Address: "alice.yuubin@example.net",
				},
			},
			ReplyTo: []*mail.Address{
				&mail.Address{
					Name:    "郵便アリス",
					Address: "alice.yuubin@example.net",
				},
			},
			To: []*mail.Address{
				&mail.Address{
					Name:    "郵便ボブ",
					Address: "bob.yuubin@example.com",
				},
				&mail.Address{
					Name:    "郵便キャロル",
					Address: "carol.yuubin@example.com",
				},
			},
			Cc: []*mail.Address{
				&mail.Address{
					Name:    "郵便ダン",
					Address: "dan.yuubin@example.com",
				},
				&mail.Address{
					Name:    "郵便イーブ",
					Address: "eve.yubin@example.com",
				},
			},
			Bcc: []*mail.Address{
				&mail.Address{
					Name:    "郵便フランク",
					Address: "frank.yuubin@example.com",
				},
				&mail.Address{
					Name:    "郵便グレイス",
					Address: "grace.yubin@example.com",
				},
			},
			MessageID: "Message-Id-1@example.com",
			InReplyTo: []string{
				"Message-Id-0@example.com",
			},
			References: []string{
				"Message-Id-0@example.com",
			},
			Subject:  "📧 Test いろは歌",
			Comments: "Message Header Comment",
			Keywords: []string{
				"Keyword 1",
				"Keyword 2",
			},
			ResentDate: time.Time(time.Date(2019, 3, 31, 22, 55, 0, 0, time.UTC)),
			ResentFrom: []*mail.Address{
				&mail.Address{
					Name:    "郵便アリス",
					Address: "alice.yuubin@example.net",
				},
				&mail.Address{
					Name:    "郵便アリス",
					Address: "alice.yuubin@example.com",
				},
			},
			ResentSender: &mail.Address{
				Name:    "郵便アリス",
				Address: "alice.yuubin@example.net",
			},
			ResentTo: []*mail.Address{
				&mail.Address{
					Name:    "郵便ボブ",
					Address: "bob.yuubin@example.net",
				},
				&mail.Address{
					Name:    "郵便キャロル",
					Address: "carol.yuubin@example.net",
				},
			},
			ResentCc: []*mail.Address{
				&mail.Address{
					Name:    "郵便ダン",
					Address: "dan.yuubin@example.net",
				},
				&mail.Address{
					Name:    "郵便イーブ",
					Address: "eve.yubin@example.net",
				},
			},
			ResentBcc: []*mail.Address{
				&mail.Address{
					Name:    "郵便フランク",
					Address: "frank.yuubin@example.net",
				},
				&mail.Address{
					Name:    "郵便グレイス",
					Address: "grace.yubin@example.net",
				},
			},
			ResentMessageID: "Message-Id-1@example.net",
			ExtraHeaders: map[string][]string{
				"X-Clacks-Overhead": []string{
					"GNU Terry Pratchett",
				},
				"X-Script/function/\t !\"#$%&'()*+,-./;<=>?@[\\]^_`{|}~": []string{
					"TEST VALUE 1\t !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_` abcdefghijklmnopqrstuvwxyz{|}~",
					"TEST VALUE 2\t !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_` abcdefghijklmnopqrstuvwxyz{|}~",
				},
			},
			ContentInfo: &email.ContentInfo{
				Type: "multipart/related",
				TypeParams: map[string]string{
					"boundary": "RelatedBoundaryString",
					"charset":  "utf-8",
				},
				Disposition:       "",
				DispositionParams: map[string]string(nil), // p0
				TransferEncoding:  "quoted-printable",
				ID:                "",
				Charset:           "utf-8",
			},
			Received: nil,
		},
		Text: "色は匂えど\n" +
			"散りぬるを\n" +
			"我が世誰ぞ\n" +
			"常ならん\n" +
			"有為の奥山\n" +
			"今日越えて\n" +
			"浅き夢見じ\n" +
			"酔いもせず。\n" +
			"\n" +
			"Iro wa nioedo / Chirinuru o / Wa ga yo tare zo / Tsune naran / Ui no okuyama / Kyo koete Asaki yume miji / Yoi mo sezu.\n" +
			"\n" +
			"とりなくこゑすゆめさませみよあけわたるひんかしをそらいろはえておきつへにほふねむれゐぬもやのうち。\n" +
			"\n" +
			"天地星空\n" +
			"山川峰谷\n" +
			"雲霧室苔\n" +
			"人犬上末\n" +
			"硫黄猿生ふ為よ\n" +
			"榎の枝を馴れ居て。\n" +
			"\n" +
			"田居に出で菜摘むわれをぞ君召すと求食り追ひゆく山城の打酔へる子ら藻葉干せよえ舟繋けぬ。",
		EnrichedText: "<bold>色は匂えど</bold>\n" +
			"<italic>散りぬるを</italic>\n" +
			"<fixed>我が世誰ぞ</fixed>\n" +
			"<underline>常ならん</underline>\n" +
			"有為の奥山\n" +
			"今日越えて\n" +
			"浅き夢見じ\n" +
			"酔いもせず。\n" +
			"\n" +
			"Iro wa nioedo / Chirinuru o / Wa ga yo tare zo / Tsune naran / Ui no okuyama / Kyo koete Asaki yume miji / Yoi mo sezu.\n" +
			"\n" +
			"とりなくこゑすゆめさませみよあけわたるひんかしをそらいろはえておきつへにほふねむれゐぬもやのうち。\n" +
			"\n" +
			"天地星空\n" +
			"山川峰谷\n" +
			"雲霧室苔\n" +
			"人犬上末\n" +
			"硫黄猿生ふ為よ\n" +
			"榎の枝を馴れ居て。\n" +
			"\n" +
			"田居に出で菜摘むわれをぞ君召すと求食り追ひゆく山城の打酔へる子ら藻葉干せよえ舟繋けぬ。",
		HTML: "<html>\n" +
			"<div dir=\"ltr\">\n" +
			"<p>色は匂えど<br />\n" +
			"散りぬるを<br />\n" +
			"我が世誰ぞ<br />\n" +
			"常ならん<br />\n" +
			"有為の奥山<br />\n" +
			"今日越えて<br />\n" +
			"浅き夢見じ<br />\n" +
			"酔いもせず。</p>\n" +
			"\n" +
			"<p>Iro wa nioedo / Chirinuru o / Wa ga yo tare zo / Tsune naran / Ui no okuyama / Kyo koete Asaki yume miji / Yoi mo sezu.</p>\n" +
			"\n" +
			"<p>とりなくこゑすゆめさませみよあけわたるひんかしをそらいろはえておきつへにほふねむれゐぬもやのうち。</p>\n" +
			"\n" +
			"<p>天地星空<br />\n" +
			"山川峰谷<br />\n" +
			"雲霧室苔<br />\n" +
			"人犬上末<br />\n" +
			"硫黄猿生ふ為よ<br />\n" +
			"榎の枝を馴れ居て。</p>\n" +
			"\n" +
			"<p>田居に出で菜摘むわれをぞ君召すと求食り追ひゆく山城の打酔へる子ら藻葉干せよえ舟繋けぬ。</p>\n" +
			"</div>\n" +
			"</html>",
		Files: []*email.File{
			&email.File{
				FileType: "inline",
				Name:     "inline-jpg-image-filename.jpg",
				ContentInfo: &email.ContentInfo{
					Type: "image/jpeg",
					TypeParams: map[string]string{
						"name": "inline-jpg-image-name.jpg",
					},
					Disposition: "inline",
					DispositionParams: map[string]string{
						"filename": "inline-jpg-image-filename.jpg",
					},
					TransferEncoding: "base64",
					ID:               "inline-jpg-image.jpg@example.com",
					Charset:          "utf-8",
				},
				Data: []byte{
					239, 191, 189, 239, 191, 189, 239, 191, 189, 239, 191, 189, 0, 67, 0, 3, 2, 2, 2,
					2, 2, 3, 2, 2, 2, 3, 3, 3, 3, 4, 6, 4, 4, 4, 4, 4, 8, 6, 6, 5, 6, 9, 8, 10, 10, 9,
					8, 9, 9, 10, 12, 15, 12, 10, 11, 14, 11, 9, 9, 13, 17, 13, 14, 15, 16, 16, 17, 16,
					10, 12, 18, 19, 18, 16, 19, 15, 16, 16, 16, 239, 191, 189, 239, 191, 189, 0, 11,
					8, 0, 1, 0, 1, 1, 1, 17, 0, 239, 191, 189, 239, 191, 189, 0, 6, 0, 16, 16, 5, 239,
					191, 189, 239, 191, 189, 0, 8, 1, 1, 0, 0, 63, 0, 239, 191, 189, 239, 191, 189, 32,
					239, 191, 189, 239, 191, 189,
				},
			},
		},
	}
	testEmailFromFile(t, fp, expectedEmail)
}

func TestParseEmailJapaneseMultipartRelatedIso2022jpOver7bit(t *testing.T) {
	fp := "tests/test_japanese_multipart_related_iso-2022-jp_over_7bit.txt"
	expectedEmail := &email.Email{
		Headers: email.Headers{
			Date: time.Time(time.Date(2019, 3, 31, 22, 55, 0, 0, time.UTC)),
			Sender: &mail.Address{
				Name:    "郵便アリス",
				Address: "alice.yuubin@example.com",
			},
			From: []*mail.Address{
				&mail.Address{
					Name:    "郵便アリス",
					Address: "alice.yuubin@example.com",
				},
				&mail.Address{
					Name:    "郵便アリス",
					Address: "alice.yuubin@example.net",
				},
			},
			ReplyTo: []*mail.Address{
				&mail.Address{
					Name:    "郵便アリス",
					Address: "alice.yuubin@example.net",
				},
			},
			To: []*mail.Address{
				&mail.Address{
					Name:    "郵便ボブ",
					Address: "bob.yuubin@example.com",
				},
				&mail.Address{
					Name:    "郵便キャロル",
					Address: "carol.yuubin@example.com",
				},
			},
			Cc: []*mail.Address{
				&mail.Address{
					Name:    "郵便ダン",
					Address: "dan.yuubin@example.com",
				},
				&mail.Address{
					Name:    "郵便イーブ",
					Address: "eve.yubin@example.com",
				},
			},
			Bcc: []*mail.Address{
				&mail.Address{
					Name:    "郵便フランク",
					Address: "frank.yuubin@example.com",
				},
				&mail.Address{
					Name:    "郵便グレイス",
					Address: "grace.yubin@example.com",
				},
			},
			MessageID: "Message-Id-1@example.com",
			InReplyTo: []string{
				"Message-Id-0@example.com",
			},
			References: []string{
				"Message-Id-0@example.com",
			},
			Subject:  "📧 Test いろは歌",
			Comments: "Message Header Comment",
			Keywords: []string{
				"Keyword 1",
				"Keyword 2",
			},
			ResentDate: time.Time(time.Date(2019, 3, 31, 22, 55, 0, 0, time.UTC)),
			ResentFrom: []*mail.Address{
				&mail.Address{
					Name:    "郵便アリス",
					Address: "alice.yuubin@example.net",
				},
				&mail.Address{
					Name:    "郵便アリス",
					Address: "alice.yuubin@example.com",
				},
			},
			ResentSender: &mail.Address{
				Name:    "郵便アリス",
				Address: "alice.yuubin@example.net",
			},
			ResentTo: []*mail.Address{
				&mail.Address{
					Name:    "郵便ボブ",
					Address: "bob.yuubin@example.net",
				},
				&mail.Address{
					Name:    "郵便キャロル",
					Address: "carol.yuubin@example.net",
				},
			},
			ResentCc: []*mail.Address{
				&mail.Address{
					Name:    "郵便ダン",
					Address: "dan.yuubin@example.net",
				},
				&mail.Address{
					Name:    "郵便イーブ",
					Address: "eve.yubin@example.net",
				},
			},
			ResentBcc: []*mail.Address{
				&mail.Address{
					Name:    "郵便フランク",
					Address: "frank.yuubin@example.net",
				},
				&mail.Address{
					Name:    "郵便グレイス",
					Address: "grace.yubin@example.net",
				},
			},
			ResentMessageID: "Message-Id-1@example.net",
			ExtraHeaders: map[string][]string{
				"X-Clacks-Overhead": []string{
					"GNU Terry Pratchett",
				},
				"X-Script/function/\t !\"#$%&'()*+,-./;<=>?@[\\]^_`{|}~": []string{
					"TEST VALUE 1\t !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_` abcdefghijklmnopqrstuvwxyz{|}~",
					"TEST VALUE 2\t !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_` abcdefghijklmnopqrstuvwxyz{|}~",
				},
			},
			ContentInfo: &email.ContentInfo{
				Type: "multipart/related",
				TypeParams: map[string]string{
					"boundary": "RelatedBoundaryString",
					"charset":  "iso-2022-jp",
				},
				Disposition:       "",
				DispositionParams: map[string]string(nil), // p0
				TransferEncoding:  "7bit",
				ID:                "",
				Charset:           "iso-2022-jp",
			},
			Received: nil,
		},
		Text: "色は匂えど\n" +
			"散りぬるを\n" +
			"我が世誰ぞ\n" +
			"常ならん\n" +
			"有為の奥山\n" +
			"今日越えて\n" +
			"浅き夢見じ\n" +
			"酔いもせず。\n" +
			"\n" +
			"Iro wa nioedo / Chirinuru o / Wa ga yo tare zo / Tsune naran / Ui no okuyama / Kyo koete Asaki yume miji / Yoi mo sezu.\n" +
			"\n" +
			"とりなくこゑすゆめさませみよあけわたるひんかしをそらいろはえておきつへにほふねむれゐぬもやのうち。\n" +
			"\n" +
			"天地星空\n" +
			"山川峰谷\n" +
			"雲霧室苔\n" +
			"人犬上末\n" +
			"硫黄猿生ふ為よ\n" +
			"榎の枝を馴れ居て。\n" +
			"\n" +
			"田居に出で菜摘むわれをぞ君召すと求食り追ひゆく山城の打酔へる子ら藻葉干せよえ舟繋けぬ。",
		EnrichedText: "<bold>色は匂えど</bold>\n" +
			"<italic>散りぬるを</italic>\n" +
			"<fixed>我が世誰ぞ</fixed>\n" +
			"<underline>常ならん</underline>\n" +
			"有為の奥山\n" +
			"今日越えて\n" +
			"浅き夢見じ\n" +
			"酔いもせず。\n" +
			"\n" +
			"Iro wa nioedo / Chirinuru o / Wa ga yo tare zo / Tsune naran / Ui no okuyama / Kyo koete Asaki yume miji / Yoi mo sezu.\n" +
			"\n" +
			"とりなくこゑすゆめさませみよあけわたるひんかしをそらいろはえておきつへにほふねむれゐぬもやのうち。\n" +
			"\n" +
			"天地星空\n" +
			"山川峰谷\n" +
			"雲霧室苔\n" +
			"人犬上末\n" +
			"硫黄猿生ふ為よ\n" +
			"榎の枝を馴れ居て。\n" +
			"\n" +
			"田居に出で菜摘むわれをぞ君召すと求食り追ひゆく山城の打酔へる子ら藻葉干せよえ舟繋けぬ。",
		HTML: "<html>\n" +
			"<div dir=\"ltr\">\n" +
			"<p>色は匂えど<br />\n" +
			"散りぬるを<br />\n" +
			"我が世誰ぞ<br />\n" +
			"常ならん<br />\n" +
			"有為の奥山<br />\n" +
			"今日越えて<br />\n" +
			"浅き夢見じ<br />\n" +
			"酔いもせず。</p>\n" +
			"\n" +
			"<p>Iro wa nioedo / Chirinuru o / Wa ga yo tare zo / Tsune naran / Ui no okuyama / Kyo koete Asaki yume miji / Yoi mo sezu.</p>\n" +
			"\n" +
			"<p>とりなくこゑすゆめさませみよあけわたるひんかしをそらいろはえておきつへにほふねむれゐぬもやのうち。</p>\n" +
			"\n" +
			"<p>天地星空<br />\n" +
			"山川峰谷<br />\n" +
			"雲霧室苔<br />\n" +
			"人犬上末<br />\n" +
			"硫黄猿生ふ為よ<br />\n" +
			"榎の枝を馴れ居て。</p>\n" +
			"\n" +
			"<p>田居に出で菜摘むわれをぞ君召すと求食り追ひゆく山城の打酔へる子ら藻葉干せよえ舟繋けぬ。</p>\n" +
			"</div>\n" +
			"</html>",
		Files: []*email.File{
			&email.File{
				FileType: "inline",
				Name:     "inline-jpg-image-filename.jpg",
				ContentInfo: &email.ContentInfo{
					Type: "image/jpeg",
					TypeParams: map[string]string{
						"name": "inline-jpg-image-name.jpg",
					},
					Disposition: "inline",
					DispositionParams: map[string]string{
						"filename": "inline-jpg-image-filename.jpg",
					},
					TransferEncoding: "base64",
					ID:               "inline-jpg-image.jpg@example.com",
					Charset:          "iso-2022-jp",
				},
				Data: []byte{
					239, 191, 189, 239, 191, 189, 239, 191, 189, 239, 191, 189, 0, 67, 0, 3, 2, 2, 2,
					2, 2, 3, 2, 2, 2, 3, 3, 3, 3, 4, 6, 4, 4, 4, 4, 4, 8, 6, 6, 5, 6, 9, 8, 10, 10, 9,
					8, 9, 9, 10, 12, 15, 12, 10, 11, 14, 11, 9, 9, 13, 17, 13, 14, 15, 16, 16, 17, 16,
					10, 12, 18, 19, 18, 16, 19, 15, 16, 16, 16, 239, 191, 189, 239, 191, 189, 0, 11,
					8, 0, 1, 0, 1, 1, 1, 17, 0, 239, 191, 189, 239, 191, 189, 0, 6, 0, 16, 16, 5, 239,
					191, 189, 239, 191, 189, 0, 8, 1, 1, 0, 0, 63, 0, 239, 191, 189, 239, 191, 189, 32,
					239, 191, 189, 239, 191, 189,
				},
			},
		},
	}
	testEmailFromFile(t, fp, expectedEmail)
}

func TestParseEmailJapaneseMultipartRelatedIso2022jpOverBase64(t *testing.T) {
	fp := "tests/test_japanese_multipart_related_iso-2022-jp_over_base64.txt"
	expectedEmail := &email.Email{
		Headers: email.Headers{
			Date: time.Time(time.Date(2019, 3, 31, 22, 55, 0, 0, time.UTC)),
			Sender: &mail.Address{
				Name:    "郵便アリス",
				Address: "alice.yuubin@example.com",
			},
			From: []*mail.Address{
				&mail.Address{
					Name:    "郵便アリス",
					Address: "alice.yuubin@example.com",
				},
				&mail.Address{
					Name:    "郵便アリス",
					Address: "alice.yuubin@example.net",
				},
			},
			ReplyTo: []*mail.Address{
				&mail.Address{
					Name:    "郵便アリス",
					Address: "alice.yuubin@example.net",
				},
			},
			To: []*mail.Address{
				&mail.Address{
					Name:    "郵便ボブ",
					Address: "bob.yuubin@example.com",
				},
				&mail.Address{
					Name:    "郵便キャロル",
					Address: "carol.yuubin@example.com",
				},
			},
			Cc: []*mail.Address{
				&mail.Address{
					Name:    "郵便ダン",
					Address: "dan.yuubin@example.com",
				},
				&mail.Address{
					Name:    "郵便イーブ",
					Address: "eve.yubin@example.com",
				},
			},
			Bcc: []*mail.Address{
				&mail.Address{
					Name:    "郵便フランク",
					Address: "frank.yuubin@example.com",
				},
				&mail.Address{
					Name:    "郵便グレイス",
					Address: "grace.yubin@example.com",
				},
			},
			MessageID: "Message-Id-1@example.com",
			InReplyTo: []string{
				"Message-Id-0@example.com",
			},
			References: []string{
				"Message-Id-0@example.com",
			},
			Subject:  "📧 Test いろは歌",
			Comments: "Message Header Comment",
			Keywords: []string{
				"Keyword 1",
				"Keyword 2",
			},
			ResentDate: time.Time(time.Date(2019, 3, 31, 22, 55, 0, 0, time.UTC)),
			ResentFrom: []*mail.Address{
				&mail.Address{
					Name:    "郵便アリス",
					Address: "alice.yuubin@example.net",
				},
				&mail.Address{
					Name:    "郵便アリス",
					Address: "alice.yuubin@example.com",
				},
			},
			ResentSender: &mail.Address{
				Name:    "郵便アリス",
				Address: "alice.yuubin@example.net",
			},
			ResentTo: []*mail.Address{
				&mail.Address{
					Name:    "郵便ボブ",
					Address: "bob.yuubin@example.net",
				},
				&mail.Address{
					Name:    "郵便キャロル",
					Address: "carol.yuubin@example.net",
				},
			},
			ResentCc: []*mail.Address{
				&mail.Address{
					Name:    "郵便ダン",
					Address: "dan.yuubin@example.net",
				},
				&mail.Address{
					Name:    "郵便イーブ",
					Address: "eve.yubin@example.net",
				},
			},
			ResentBcc: []*mail.Address{
				&mail.Address{
					Name:    "郵便フランク",
					Address: "frank.yuubin@example.net",
				},
				&mail.Address{
					Name:    "郵便グレイス",
					Address: "grace.yubin@example.net",
				},
			},
			ResentMessageID: "Message-Id-1@example.net",
			ExtraHeaders: map[string][]string{
				"X-Clacks-Overhead": []string{
					"GNU Terry Pratchett",
				},
				"X-Script/function/\t !\"#$%&'()*+,-./;<=>?@[\\]^_`{|}~": []string{
					"TEST VALUE 1\t !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_` abcdefghijklmnopqrstuvwxyz{|}~",
					"TEST VALUE 2\t !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_` abcdefghijklmnopqrstuvwxyz{|}~",
				},
			},
			ContentInfo: &email.ContentInfo{
				Type: "multipart/related",
				TypeParams: map[string]string{
					"boundary": "RelatedBoundaryString",
					"charset":  "iso-2022-jp",
				},
				Disposition:       "",
				DispositionParams: map[string]string(nil), // p0
				TransferEncoding:  "base64",
				ID:                "",
				Charset:           "iso-2022-jp",
			},
			Received: nil,
		},
		Text: "色は匂えど\n" +
			"散りぬるを\n" +
			"我が世誰ぞ\n" +
			"常ならん\n" +
			"有為の奥山\n" +
			"今日越えて\n" +
			"浅き夢見じ\n" +
			"酔いもせず。\n" +
			"\n" +
			"Iro wa nioedo / Chirinuru o / Wa ga yo tare zo / Tsune naran / Ui no okuyama / Kyo koete Asaki yume miji / Yoi mo sezu.\n" +
			"\n" +
			"とりなくこゑすゆめさませみよあけわたるひんかしをそらいろはえておきつへにほふねむれゐぬもやのうち。\n" +
			"\n" +
			"天地星空\n" +
			"山川峰谷\n" +
			"雲霧室苔\n" +
			"人犬上末\n" +
			"硫黄猿生ふ為よ\n" +
			"榎の枝を馴れ居て。\n" +
			"\n" +
			"田居に出で菜摘むわれをぞ君召すと求食り追ひゆく山城の打酔へる子ら藻葉干せよえ舟繋けぬ。",
		EnrichedText: "<bold>色は匂えど</bold>\n" +
			"<italic>散りぬるを</italic>\n" +
			"<fixed>我が世誰ぞ</fixed>\n" +
			"<underline>常ならん</underline>\n" +
			"有為の奥山\n" +
			"今日越えて\n" +
			"浅き夢見じ\n" +
			"酔いもせず。\n" +
			"\n" +
			"Iro wa nioedo / Chirinuru o / Wa ga yo tare zo / Tsune naran / Ui no okuyama / Kyo koete Asaki yume miji / Yoi mo sezu.\n" +
			"\n" +
			"とりなくこゑすゆめさませみよあけわたるひんかしをそらいろはえておきつへにほふねむれゐぬもやのうち。\n" +
			"\n" +
			"天地星空\n" +
			"山川峰谷\n" +
			"雲霧室苔\n" +
			"人犬上末\n" +
			"硫黄猿生ふ為よ\n" +
			"榎の枝を馴れ居て。\n" +
			"\n" +
			"田居に出で菜摘むわれをぞ君召すと求食り追ひゆく山城の打酔へる子ら藻葉干せよえ舟繋けぬ。",
		HTML: "<html>\n" +
			"<div dir=\"ltr\">\n" +
			"<p>色は匂えど<br />\n" +
			"散りぬるを<br />\n" +
			"我が世誰ぞ<br />\n" +
			"常ならん<br />\n" +
			"有為の奥山<br />\n" +
			"今日越えて<br />\n" +
			"浅き夢見じ<br />\n" +
			"酔いもせず。</p>\n" +
			"\n" +
			"<p>Iro wa nioedo / Chirinuru o / Wa ga yo tare zo / Tsune naran / Ui no okuyama / Kyo koete Asaki yume miji / Yoi mo sezu.</p>\n" +
			"\n" +
			"<p>とりなくこゑすゆめさませみよあけわたるひんかしをそらいろはえておきつへにほふねむれゐぬもやのうち。</p>\n" +
			"\n" +
			"<p>天地星空<br />\n" +
			"山川峰谷<br />\n" +
			"雲霧室苔<br />\n" +
			"人犬上末<br />\n" +
			"硫黄猿生ふ為よ<br />\n" +
			"榎の枝を馴れ居て。</p>\n" +
			"\n" +
			"<p>田居に出で菜摘むわれをぞ君召すと求食り追ひゆく山城の打酔へる子ら藻葉干せよえ舟繋けぬ。</p>\n" +
			"</div>\n" +
			"</html>",
		Files: []*email.File{
			&email.File{
				FileType: "inline",
				Name:     "inline-jpg-image-filename.jpg",
				ContentInfo: &email.ContentInfo{
					Type: "image/jpeg",
					TypeParams: map[string]string{
						"name": "inline-jpg-image-name.jpg",
					},
					Disposition: "inline",
					DispositionParams: map[string]string{
						"filename": "inline-jpg-image-filename.jpg",
					},
					TransferEncoding: "base64",
					ID:               "inline-jpg-image.jpg@example.com",
					Charset:          "iso-2022-jp",
				},
				Data: []byte{
					239, 191, 189, 239, 191, 189, 239, 191, 189, 239, 191, 189, 0, 67, 0, 3, 2, 2, 2,
					2, 2, 3, 2, 2, 2, 3, 3, 3, 3, 4, 6, 4, 4, 4, 4, 4, 8, 6, 6, 5, 6, 9, 8, 10, 10, 9,
					8, 9, 9, 10, 12, 15, 12, 10, 11, 14, 11, 9, 9, 13, 17, 13, 14, 15, 16, 16, 17, 16,
					10, 12, 18, 19, 18, 16, 19, 15, 16, 16, 16, 239, 191, 189, 239, 191, 189, 0, 11,
					8, 0, 1, 0, 1, 1, 1, 17, 0, 239, 191, 189, 239, 191, 189, 0, 6, 0, 16, 16, 5, 239,
					191, 189, 239, 191, 189, 0, 8, 1, 1, 0, 0, 63, 0, 239, 191, 189, 239, 191, 189, 32,
					239, 191, 189, 239, 191, 189,
				},
			},
		},
	}
	testEmailFromFile(t, fp, expectedEmail)
}

func TestParseEmailJapaneseMultipartRelatedIso2022jpOverQuotedprintable(t *testing.T) {
	fp := "tests/test_japanese_multipart_related_iso-2022-jp_over_quoted-printable.txt"
	expectedEmail := &email.Email{
		Headers: email.Headers{
			Date: time.Time(time.Date(2019, 3, 31, 22, 55, 0, 0, time.UTC)),
			Sender: &mail.Address{
				Name:    "郵便アリス",
				Address: "alice.yuubin@example.com",
			},
			From: []*mail.Address{
				&mail.Address{
					Name:    "郵便アリス",
					Address: "alice.yuubin@example.com",
				},
				&mail.Address{
					Name:    "郵便アリス",
					Address: "alice.yuubin@example.net",
				},
			},
			ReplyTo: []*mail.Address{
				&mail.Address{
					Name:    "郵便アリス",
					Address: "alice.yuubin@example.net",
				},
			},
			To: []*mail.Address{
				&mail.Address{
					Name:    "郵便ボブ",
					Address: "bob.yuubin@example.com",
				},
				&mail.Address{
					Name:    "郵便キャロル",
					Address: "carol.yuubin@example.com",
				},
			},
			Cc: []*mail.Address{
				&mail.Address{
					Name:    "郵便ダン",
					Address: "dan.yuubin@example.com",
				},
				&mail.Address{
					Name:    "郵便イーブ",
					Address: "eve.yubin@example.com",
				},
			},
			Bcc: []*mail.Address{
				&mail.Address{
					Name:    "郵便フランク",
					Address: "frank.yuubin@example.com",
				},
				&mail.Address{
					Name:    "郵便グレイス",
					Address: "grace.yubin@example.com",
				},
			},
			MessageID: "Message-Id-1@example.com",
			InReplyTo: []string{
				"Message-Id-0@example.com",
			},
			References: []string{
				"Message-Id-0@example.com",
			},
			Subject:  "📧 Test いろは歌",
			Comments: "Message Header Comment",
			Keywords: []string{
				"Keyword 1",
				"Keyword 2",
			},
			ResentDate: time.Time(time.Date(2019, 3, 31, 22, 55, 0, 0, time.UTC)),
			ResentFrom: []*mail.Address{
				&mail.Address{
					Name:    "郵便アリス",
					Address: "alice.yuubin@example.net",
				},
				&mail.Address{
					Name:    "郵便アリス",
					Address: "alice.yuubin@example.com",
				},
			},
			ResentSender: &mail.Address{
				Name:    "郵便アリス",
				Address: "alice.yuubin@example.net",
			},
			ResentTo: []*mail.Address{
				&mail.Address{
					Name:    "郵便ボブ",
					Address: "bob.yuubin@example.net",
				},
				&mail.Address{
					Name:    "郵便キャロル",
					Address: "carol.yuubin@example.net",
				},
			},
			ResentCc: []*mail.Address{
				&mail.Address{
					Name:    "郵便ダン",
					Address: "dan.yuubin@example.net",
				},
				&mail.Address{
					Name:    "郵便イーブ",
					Address: "eve.yubin@example.net",
				},
			},
			ResentBcc: []*mail.Address{
				&mail.Address{
					Name:    "郵便フランク",
					Address: "frank.yuubin@example.net",
				},
				&mail.Address{
					Name:    "郵便グレイス",
					Address: "grace.yubin@example.net",
				},
			},
			ResentMessageID: "Message-Id-1@example.net",
			ExtraHeaders: map[string][]string{
				"X-Clacks-Overhead": []string{
					"GNU Terry Pratchett",
				},
				"X-Script/function/\t !\"#$%&'()*+,-./;<=>?@[\\]^_`{|}~": []string{
					"TEST VALUE 1\t !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_` abcdefghijklmnopqrstuvwxyz{|}~",
					"TEST VALUE 2\t !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_` abcdefghijklmnopqrstuvwxyz{|}~",
				},
			},
			ContentInfo: &email.ContentInfo{
				Type: "multipart/related",
				TypeParams: map[string]string{
					"boundary": "RelatedBoundaryString",
					"charset":  "iso-2022-jp",
				},
				Disposition:       "",
				DispositionParams: map[string]string(nil), // p0
				TransferEncoding:  "quoted-printable",
				ID:                "",
				Charset:           "iso-2022-jp",
			},
			Received: nil,
		},
		Text: "色は匂えど\n" +
			"散りぬるを\n" +
			"我が世誰ぞ\n" +
			"常ならん\n" +
			"有為の奥山\n" +
			"今日越えて\n" +
			"浅き夢見じ\n" +
			"酔いもせず。\n" +
			"\n" +
			"Iro wa nioedo / Chirinuru o / Wa ga yo tare zo / Tsune naran / Ui no okuyama / Kyo koete Asaki yume miji / Yoi mo sezu.\n" +
			"\n" +
			"とりなくこゑすゆめさませみよあけわたるひんかしをそらいろはえておきつへにほふねむれゐぬもやのうち。\n" +
			"\n" +
			"天地星空\n" +
			"山川峰谷\n" +
			"雲霧室苔\n" +
			"人犬上末\n" +
			"硫黄猿生ふ為よ\n" +
			"榎の枝を馴れ居て。\n" +
			"\n" +
			"田居に出で菜摘むわれをぞ君召すと求食り追ひゆく山城の打酔へる子ら藻葉干せよえ舟繋けぬ。",
		EnrichedText: "<bold>色は匂えど</bold>\n" +
			"<italic>散りぬるを</italic>\n" +
			"<fixed>我が世誰ぞ</fixed>\n" +
			"<underline>常ならん</underline>\n" +
			"有為の奥山\n" +
			"今日越えて\n" +
			"浅き夢見じ\n" +
			"酔いもせず。\n" +
			"\n" +
			"Iro wa nioedo / Chirinuru o / Wa ga yo tare zo / Tsune naran / Ui no okuyama / Kyo koete Asaki yume miji / Yoi mo sezu.\n" +
			"\n" +
			"とりなくこゑすゆめさませみよあけわたるひんかしをそらいろはえておきつへにほふねむれゐぬもやのうち。\n" +
			"\n" +
			"天地星空\n" +
			"山川峰谷\n" +
			"雲霧室苔\n" +
			"人犬上末\n" +
			"硫黄猿生ふ為よ\n" +
			"榎の枝を馴れ居て。\n" +
			"\n" +
			"田居に出で菜摘むわれをぞ君召すと求食り追ひゆく山城の打酔へる子ら藻葉干せよえ舟繋けぬ。",
		HTML: "<html>\n" +
			"<div dir=\"ltr\">\n" +
			"<p>色は匂えど<br />\n" +
			"散りぬるを<br />\n" +
			"我が世誰ぞ<br />\n" +
			"常ならん<br />\n" +
			"有為の奥山<br />\n" +
			"今日越えて<br />\n" +
			"浅き夢見じ<br />\n" +
			"酔いもせず。</p>\n" +
			"\n" +
			"<p>Iro wa nioedo / Chirinuru o / Wa ga yo tare zo / Tsune naran / Ui no okuyama / Kyo koete Asaki yume miji / Yoi mo sezu.</p>\n" +
			"\n" +
			"<p>とりなくこゑすゆめさませみよあけわたるひんかしをそらいろはえておきつへにほふねむれゐぬもやのうち。</p>\n" +
			"\n" +
			"<p>天地星空<br />\n" +
			"山川峰谷<br />\n" +
			"雲霧室苔<br />\n" +
			"人犬上末<br />\n" +
			"硫黄猿生ふ為よ<br />\n" +
			"榎の枝を馴れ居て。</p>\n" +
			"\n" +
			"<p>田居に出で菜摘むわれをぞ君召すと求食り追ひゆく山城の打酔へる子ら藻葉干せよえ舟繋けぬ。</p>\n" +
			"</div>\n" +
			"</html>",
		Files: []*email.File{
			&email.File{
				FileType: "inline",
				Name:     "inline-jpg-image-filename.jpg",
				ContentInfo: &email.ContentInfo{
					Type: "image/jpeg",
					TypeParams: map[string]string{
						"name": "inline-jpg-image-name.jpg",
					},
					Disposition: "inline",
					DispositionParams: map[string]string{
						"filename": "inline-jpg-image-filename.jpg",
					},
					TransferEncoding: "base64",
					ID:               "inline-jpg-image.jpg@example.com",
					Charset:          "iso-2022-jp",
				},
				Data: []byte{
					239, 191, 189, 239, 191, 189, 239, 191, 189, 239, 191, 189, 0, 67, 0, 3, 2, 2, 2,
					2, 2, 3, 2, 2, 2, 3, 3, 3, 3, 4, 6, 4, 4, 4, 4, 4, 8, 6, 6, 5, 6, 9, 8, 10, 10, 9,
					8, 9, 9, 10, 12, 15, 12, 10, 11, 14, 11, 9, 9, 13, 17, 13, 14, 15, 16, 16, 17, 16,
					10, 12, 18, 19, 18, 16, 19, 15, 16, 16, 16, 239, 191, 189, 239, 191, 189, 0, 11,
					8, 0, 1, 0, 1, 1, 1, 17, 0, 239, 191, 189, 239, 191, 189, 0, 6, 0, 16, 16, 5, 239,
					191, 189, 239, 191, 189, 0, 8, 1, 1, 0, 0, 63, 0, 239, 191, 189, 239, 191, 189, 32,
					239, 191, 189, 239, 191, 189,
				},
			},
		},
	}
	testEmailFromFile(t, fp, expectedEmail)
}

func TestParseEmailJapaneseMultipartRelatedEucjpOverBase64(t *testing.T) {
	fp := "tests/test_japanese_multipart_related_euc-jp_over_base64.txt"
	expectedEmail := &email.Email{
		Headers: email.Headers{
			Date: time.Time(time.Date(2019, 3, 31, 22, 55, 0, 0, time.UTC)),
			Sender: &mail.Address{
				Name:    "郵便アリス",
				Address: "alice.yuubin@example.com",
			},
			From: []*mail.Address{
				&mail.Address{
					Name:    "郵便アリス",
					Address: "alice.yuubin@example.com",
				},
				&mail.Address{
					Name:    "郵便アリス",
					Address: "alice.yuubin@example.net",
				},
			},
			ReplyTo: []*mail.Address{
				&mail.Address{
					Name:    "郵便アリス",
					Address: "alice.yuubin@example.net",
				},
			},
			To: []*mail.Address{
				&mail.Address{
					Name:    "郵便ボブ",
					Address: "bob.yuubin@example.com",
				},
				&mail.Address{
					Name:    "郵便キャロル",
					Address: "carol.yuubin@example.com",
				},
			},
			Cc: []*mail.Address{
				&mail.Address{
					Name:    "郵便ダン",
					Address: "dan.yuubin@example.com",
				},
				&mail.Address{
					Name:    "郵便イーブ",
					Address: "eve.yubin@example.com",
				},
			},
			Bcc: []*mail.Address{
				&mail.Address{
					Name:    "郵便フランク",
					Address: "frank.yuubin@example.com",
				},
				&mail.Address{
					Name:    "郵便グレイス",
					Address: "grace.yubin@example.com",
				},
			},
			MessageID: "Message-Id-1@example.com",
			InReplyTo: []string{
				"Message-Id-0@example.com",
			},
			References: []string{
				"Message-Id-0@example.com",
			},
			Subject:  "📧 Test いろは歌",
			Comments: "Message Header Comment",
			Keywords: []string{
				"Keyword 1",
				"Keyword 2",
			},
			ResentDate: time.Time(time.Date(2019, 3, 31, 22, 55, 0, 0, time.UTC)),
			ResentFrom: []*mail.Address{
				&mail.Address{
					Name:    "郵便アリス",
					Address: "alice.yuubin@example.net",
				},
				&mail.Address{
					Name:    "郵便アリス",
					Address: "alice.yuubin@example.com",
				},
			},
			ResentSender: &mail.Address{
				Name:    "郵便アリス",
				Address: "alice.yuubin@example.net",
			},
			ResentTo: []*mail.Address{
				&mail.Address{
					Name:    "郵便ボブ",
					Address: "bob.yuubin@example.net",
				},
				&mail.Address{
					Name:    "郵便キャロル",
					Address: "carol.yuubin@example.net",
				},
			},
			ResentCc: []*mail.Address{
				&mail.Address{
					Name:    "郵便ダン",
					Address: "dan.yuubin@example.net",
				},
				&mail.Address{
					Name:    "郵便イーブ",
					Address: "eve.yubin@example.net",
				},
			},
			ResentBcc: []*mail.Address{
				&mail.Address{
					Name:    "郵便フランク",
					Address: "frank.yuubin@example.net",
				},
				&mail.Address{
					Name:    "郵便グレイス",
					Address: "grace.yubin@example.net",
				},
			},
			ResentMessageID: "Message-Id-1@example.net",
			ExtraHeaders: map[string][]string{
				"X-Clacks-Overhead": []string{
					"GNU Terry Pratchett",
				},
				"X-Script/function/\t !\"#$%&'()*+,-./;<=>?@[\\]^_`{|}~": []string{
					"TEST VALUE 1\t !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_` abcdefghijklmnopqrstuvwxyz{|}~",
					"TEST VALUE 2\t !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_` abcdefghijklmnopqrstuvwxyz{|}~",
				},
			},
			ContentInfo: &email.ContentInfo{
				Type: "multipart/related",
				TypeParams: map[string]string{
					"boundary": "RelatedBoundaryString",
					"charset":  "euc-jp",
				},
				Disposition:       "",
				DispositionParams: map[string]string(nil), // p0
				TransferEncoding:  "base64",
				ID:                "",
				Charset:           "euc-jp",
			},
			Received: nil,
		},
		Text: "色は匂えど\n" +
			"散りぬるを\n" +
			"我が世誰ぞ\n" +
			"常ならん\n" +
			"有為の奥山\n" +
			"今日越えて\n" +
			"浅き夢見じ\n" +
			"酔いもせず。\n" +
			"\n" +
			"Iro wa nioedo / Chirinuru o / Wa ga yo tare zo / Tsune naran / Ui no okuyama / Kyo koete Asaki yume miji / Yoi mo sezu.\n" +
			"\n" +
			"とりなくこゑすゆめさませみよあけわたるひんかしをそらいろはえておきつへにほふねむれゐぬもやのうち。\n" +
			"\n" +
			"天地星空\n" +
			"山川峰谷\n" +
			"雲霧室苔\n" +
			"人犬上末\n" +
			"硫黄猿生ふ為よ\n" +
			"榎の枝を馴れ居て。\n" +
			"\n" +
			"田居に出で菜摘むわれをぞ君召すと求食り追ひゆく山城の打酔へる子ら藻葉干せよえ舟繋けぬ。",
		EnrichedText: "<bold>色は匂えど</bold>\n" +
			"<italic>散りぬるを</italic>\n" +
			"<fixed>我が世誰ぞ</fixed>\n" +
			"<underline>常ならん</underline>\n" +
			"有為の奥山\n" +
			"今日越えて\n" +
			"浅き夢見じ\n" +
			"酔いもせず。\n" +
			"\n" +
			"Iro wa nioedo / Chirinuru o / Wa ga yo tare zo / Tsune naran / Ui no okuyama / Kyo koete Asaki yume miji / Yoi mo sezu.\n" +
			"\n" +
			"とりなくこゑすゆめさませみよあけわたるひんかしをそらいろはえておきつへにほふねむれゐぬもやのうち。\n" +
			"\n" +
			"天地星空\n" +
			"山川峰谷\n" +
			"雲霧室苔\n" +
			"人犬上末\n" +
			"硫黄猿生ふ為よ\n" +
			"榎の枝を馴れ居て。\n" +
			"\n" +
			"田居に出で菜摘むわれをぞ君召すと求食り追ひゆく山城の打酔へる子ら藻葉干せよえ舟繋けぬ。",
		HTML: "<html>\n" +
			"<div dir=\"ltr\">\n" +
			"<p>色は匂えど<br />\n" +
			"散りぬるを<br />\n" +
			"我が世誰ぞ<br />\n" +
			"常ならん<br />\n" +
			"有為の奥山<br />\n" +
			"今日越えて<br />\n" +
			"浅き夢見じ<br />\n" +
			"酔いもせず。</p>\n" +
			"\n" +
			"<p>Iro wa nioedo / Chirinuru o / Wa ga yo tare zo / Tsune naran / Ui no okuyama / Kyo koete Asaki yume miji / Yoi mo sezu.</p>\n" +
			"\n" +
			"<p>とりなくこゑすゆめさませみよあけわたるひんかしをそらいろはえておきつへにほふねむれゐぬもやのうち。</p>\n" +
			"\n" +
			"<p>天地星空<br />\n" +
			"山川峰谷<br />\n" +
			"雲霧室苔<br />\n" +
			"人犬上末<br />\n" +
			"硫黄猿生ふ為よ<br />\n" +
			"榎の枝を馴れ居て。</p>\n" +
			"\n" +
			"<p>田居に出で菜摘むわれをぞ君召すと求食り追ひゆく山城の打酔へる子ら藻葉干せよえ舟繋けぬ。</p>\n" +
			"</div>\n" +
			"</html>",
		Files: []*email.File{
			&email.File{
				FileType: "inline",
				Name:     "inline-jpg-image-filename.jpg",
				ContentInfo: &email.ContentInfo{
					Type: "image/jpeg",
					TypeParams: map[string]string{
						"name": "inline-jpg-image-name.jpg",
					},
					Disposition: "inline",
					DispositionParams: map[string]string{
						"filename": "inline-jpg-image-filename.jpg",
					},
					TransferEncoding: "base64",
					ID:               "inline-jpg-image.jpg@example.com",
					Charset:          "euc-jp",
				},
				Data: []byte{
					239, 191, 189, 239, 191, 189, 239, 191, 189, 239, 191, 189, 0, 67, 0, 3, 2, 2, 2,
					2, 2, 3, 2, 2, 2, 3, 3, 3, 3, 4, 6, 4, 4, 4, 4, 4, 8, 6, 6, 5, 6, 9, 8, 10, 10, 9,
					8, 9, 9, 10, 12, 15, 12, 10, 11, 14, 11, 9, 9, 13, 17, 13, 14, 15, 16, 16, 17, 16,
					10, 12, 18, 19, 18, 16, 19, 15, 16, 16, 16, 239, 191, 189, 239, 191, 189, 0, 11,
					8, 0, 1, 0, 1, 1, 1, 17, 0, 239, 191, 189, 239, 191, 189, 0, 6, 0, 16, 16, 5, 239,
					191, 189, 239, 191, 189, 0, 8, 1, 1, 0, 0, 63, 0, 229, 142, 166, 32, 239, 191, 189,
					239, 191, 189,
				},
			},
		},
	}
	testEmailFromFile(t, fp, expectedEmail)
}

func TestParseEmailJapaneseMultipartRelatedEucjpOverQuotedprintable(t *testing.T) {
	fp := "tests/test_japanese_multipart_related_euc-jp_over_quoted-printable.txt"
	expectedEmail := &email.Email{
		Headers: email.Headers{
			Date: time.Time(time.Date(2019, 3, 31, 22, 55, 0, 0, time.UTC)),
			Sender: &mail.Address{
				Name:    "郵便アリス",
				Address: "alice.yuubin@example.com",
			},
			From: []*mail.Address{
				&mail.Address{
					Name:    "郵便アリス",
					Address: "alice.yuubin@example.com",
				},
				&mail.Address{
					Name:    "郵便アリス",
					Address: "alice.yuubin@example.net",
				},
			},
			ReplyTo: []*mail.Address{
				&mail.Address{
					Name:    "郵便アリス",
					Address: "alice.yuubin@example.net",
				},
			},
			To: []*mail.Address{
				&mail.Address{
					Name:    "郵便ボブ",
					Address: "bob.yuubin@example.com",
				},
				&mail.Address{
					Name:    "郵便キャロル",
					Address: "carol.yuubin@example.com",
				},
			},
			Cc: []*mail.Address{
				&mail.Address{
					Name:    "郵便ダン",
					Address: "dan.yuubin@example.com",
				},
				&mail.Address{
					Name:    "郵便イーブ",
					Address: "eve.yubin@example.com",
				},
			},
			Bcc: []*mail.Address{
				&mail.Address{
					Name:    "郵便フランク",
					Address: "frank.yuubin@example.com",
				},
				&mail.Address{
					Name:    "郵便グレイス",
					Address: "grace.yubin@example.com",
				},
			},
			MessageID: "Message-Id-1@example.com",
			InReplyTo: []string{
				"Message-Id-0@example.com",
			},
			References: []string{
				"Message-Id-0@example.com",
			},
			Subject:  "📧 Test いろは歌",
			Comments: "Message Header Comment",
			Keywords: []string{
				"Keyword 1",
				"Keyword 2",
			},
			ResentDate: time.Time(time.Date(2019, 3, 31, 22, 55, 0, 0, time.UTC)),
			ResentFrom: []*mail.Address{
				&mail.Address{
					Name:    "郵便アリス",
					Address: "alice.yuubin@example.net",
				},
				&mail.Address{
					Name:    "郵便アリス",
					Address: "alice.yuubin@example.com",
				},
			},
			ResentSender: &mail.Address{
				Name:    "郵便アリス",
				Address: "alice.yuubin@example.net",
			},
			ResentTo: []*mail.Address{
				&mail.Address{
					Name:    "郵便ボブ",
					Address: "bob.yuubin@example.net",
				},
				&mail.Address{
					Name:    "郵便キャロル",
					Address: "carol.yuubin@example.net",
				},
			},
			ResentCc: []*mail.Address{
				&mail.Address{
					Name:    "郵便ダン",
					Address: "dan.yuubin@example.net",
				},
				&mail.Address{
					Name:    "郵便イーブ",
					Address: "eve.yubin@example.net",
				},
			},
			ResentBcc: []*mail.Address{
				&mail.Address{
					Name:    "郵便フランク",
					Address: "frank.yuubin@example.net",
				},
				&mail.Address{
					Name:    "郵便グレイス",
					Address: "grace.yubin@example.net",
				},
			},
			ResentMessageID: "Message-Id-1@example.net",
			ExtraHeaders: map[string][]string{
				"X-Clacks-Overhead": []string{
					"GNU Terry Pratchett",
				},
				"X-Script/function/\t !\"#$%&'()*+,-./;<=>?@[\\]^_`{|}~": []string{
					"TEST VALUE 1\t !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_` abcdefghijklmnopqrstuvwxyz{|}~",
					"TEST VALUE 2\t !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_` abcdefghijklmnopqrstuvwxyz{|}~",
				},
			},
			ContentInfo: &email.ContentInfo{
				Type: "multipart/related",
				TypeParams: map[string]string{
					"boundary": "RelatedBoundaryString",
					"charset":  "euc-jp",
				},
				Disposition:       "",
				DispositionParams: map[string]string(nil), // p0
				TransferEncoding:  "quoted-printable",
				ID:                "",
				Charset:           "euc-jp",
			},
			Received: nil,
		},
		Text: "色は匂えど\n" +
			"散りぬるを\n" +
			"我が世誰ぞ\n" +
			"常ならん\n" +
			"有為の奥山\n" +
			"今日越えて\n" +
			"浅き夢見じ\n" +
			"酔いもせず。\n" +
			"\n" +
			"Iro wa nioedo / Chirinuru o / Wa ga yo tare zo / Tsune naran / Ui no okuyama / Kyo koete Asaki yume miji / Yoi mo sezu.\n" +
			"\n" +
			"とりなくこゑすゆめさませみよあけわたるひんかしをそらいろはえておきつへにほふねむれゐぬもやのうち。\n" +
			"\n" +
			"天地星空\n" +
			"山川峰谷\n" +
			"雲霧室苔\n" +
			"人犬上末\n" +
			"硫黄猿生ふ為よ\n" +
			"榎の枝を馴れ居て。\n" +
			"\n" +
			"田居に出で菜摘むわれをぞ君召すと求食り追ひゆく山城の打酔へる子ら藻葉干せよえ舟繋けぬ。",
		EnrichedText: "<bold>色は匂えど</bold>\n" +
			"<italic>散りぬるを</italic>\n" +
			"<fixed>我が世誰ぞ</fixed>\n" +
			"<underline>常ならん</underline>\n" +
			"有為の奥山\n" +
			"今日越えて\n" +
			"浅き夢見じ\n" +
			"酔いもせず。\n" +
			"\n" +
			"Iro wa nioedo / Chirinuru o / Wa ga yo tare zo / Tsune naran / Ui no okuyama / Kyo koete Asaki yume miji / Yoi mo sezu.\n" +
			"\n" +
			"とりなくこゑすゆめさませみよあけわたるひんかしをそらいろはえておきつへにほふねむれゐぬもやのうち。\n" +
			"\n" +
			"天地星空\n" +
			"山川峰谷\n" +
			"雲霧室苔\n" +
			"人犬上末\n" +
			"硫黄猿生ふ為よ\n" +
			"榎の枝を馴れ居て。\n" +
			"\n" +
			"田居に出で菜摘むわれをぞ君召すと求食り追ひゆく山城の打酔へる子ら藻葉干せよえ舟繋けぬ。",
		HTML: "<html>\n" +
			"<div dir=\"ltr\">\n" +
			"<p>色は匂えど<br />\n" +
			"散りぬるを<br />\n" +
			"我が世誰ぞ<br />\n" +
			"常ならん<br />\n" +
			"有為の奥山<br />\n" +
			"今日越えて<br />\n" +
			"浅き夢見じ<br />\n" +
			"酔いもせず。</p>\n" +
			"\n" +
			"<p>Iro wa nioedo / Chirinuru o / Wa ga yo tare zo / Tsune naran / Ui no okuyama / Kyo koete Asaki yume miji / Yoi mo sezu.</p>\n" +
			"\n" +
			"<p>とりなくこゑすゆめさませみよあけわたるひんかしをそらいろはえておきつへにほふねむれゐぬもやのうち。</p>\n" +
			"\n" +
			"<p>天地星空<br />\n" +
			"山川峰谷<br />\n" +
			"雲霧室苔<br />\n" +
			"人犬上末<br />\n" +
			"硫黄猿生ふ為よ<br />\n" +
			"榎の枝を馴れ居て。</p>\n" +
			"\n" +
			"<p>田居に出で菜摘むわれをぞ君召すと求食り追ひゆく山城の打酔へる子ら藻葉干せよえ舟繋けぬ。</p>\n" +
			"</div>\n" +
			"</html>",
		Files: []*email.File{
			&email.File{
				FileType: "inline",
				Name:     "inline-jpg-image-filename.jpg",
				ContentInfo: &email.ContentInfo{
					Type: "image/jpeg",
					TypeParams: map[string]string{
						"name": "inline-jpg-image-name.jpg",
					},
					Disposition: "inline",
					DispositionParams: map[string]string{
						"filename": "inline-jpg-image-filename.jpg",
					},
					TransferEncoding: "base64",
					ID:               "inline-jpg-image.jpg@example.com",
					Charset:          "euc-jp",
				},
				Data: []byte{
					239, 191, 189, 239, 191, 189, 239, 191, 189, 239, 191, 189, 0, 67, 0, 3, 2, 2, 2,
					2, 2, 3, 2, 2, 2, 3, 3, 3, 3, 4, 6, 4, 4, 4, 4, 4, 8, 6, 6, 5, 6, 9, 8, 10, 10, 9,
					8, 9, 9, 10, 12, 15, 12, 10, 11, 14, 11, 9, 9, 13, 17, 13, 14, 15, 16, 16, 17, 16,
					10, 12, 18, 19, 18, 16, 19, 15, 16, 16, 16, 239, 191, 189, 239, 191, 189, 0, 11,
					8, 0, 1, 0, 1, 1, 1, 17, 0, 239, 191, 189, 239, 191, 189, 0, 6, 0, 16, 16, 5, 239,
					191, 189, 239, 191, 189, 0, 8, 1, 1, 0, 0, 63, 0, 229, 142, 166, 32, 239, 191, 189,
					239, 191, 189,
				},
			},
		},
	}
	testEmailFromFile(t, fp, expectedEmail)
}

func TestParseEmailJapaneseMultipartMixedUtf8Over7bit(t *testing.T) {
	fp := "tests/test_japanese_multipart_mixed_utf-8_over_7bit.txt"
	expectedEmail := &email.Email{
		Headers: email.Headers{
			Date: time.Time(time.Date(2019, 3, 31, 22, 55, 0, 0, time.UTC)),
			Sender: &mail.Address{
				Name:    "郵便アリス",
				Address: "alice.yuubin@example.com",
			},
			From: []*mail.Address{
				&mail.Address{
					Name:    "郵便アリス",
					Address: "alice.yuubin@example.com",
				},
				&mail.Address{
					Name:    "郵便アリス",
					Address: "alice.yuubin@example.net",
				},
			},
			ReplyTo: []*mail.Address{
				&mail.Address{
					Name:    "郵便アリス",
					Address: "alice.yuubin@example.net",
				},
			},
			To: []*mail.Address{
				&mail.Address{
					Name:    "郵便ボブ",
					Address: "bob.yuubin@example.com",
				},
				&mail.Address{
					Name:    "郵便キャロル",
					Address: "carol.yuubin@example.com",
				},
			},
			Cc: []*mail.Address{
				&mail.Address{
					Name:    "郵便ダン",
					Address: "dan.yuubin@example.com",
				},
				&mail.Address{
					Name:    "郵便イーブ",
					Address: "eve.yubin@example.com",
				},
			},
			Bcc: []*mail.Address{
				&mail.Address{
					Name:    "郵便フランク",
					Address: "frank.yuubin@example.com",
				},
				&mail.Address{
					Name:    "郵便グレイス",
					Address: "grace.yubin@example.com",
				},
			},
			MessageID: "Message-Id-1@example.com",
			InReplyTo: []string{
				"Message-Id-0@example.com",
			},
			References: []string{
				"Message-Id-0@example.com",
			},
			Subject:  "📧 Test いろは歌",
			Comments: "Message Header Comment",
			Keywords: []string{
				"Keyword 1",
				"Keyword 2",
			},
			ResentDate: time.Time(time.Date(2019, 3, 31, 22, 55, 0, 0, time.UTC)),
			ResentFrom: []*mail.Address{
				&mail.Address{
					Name:    "郵便アリス",
					Address: "alice.yuubin@example.net",
				},
				&mail.Address{
					Name:    "郵便アリス",
					Address: "alice.yuubin@example.com",
				},
			},
			ResentSender: &mail.Address{
				Name:    "郵便アリス",
				Address: "alice.yuubin@example.net",
			},
			ResentTo: []*mail.Address{
				&mail.Address{
					Name:    "郵便ボブ",
					Address: "bob.yuubin@example.net",
				},
				&mail.Address{
					Name:    "郵便キャロル",
					Address: "carol.yuubin@example.net",
				},
			},
			ResentCc: []*mail.Address{
				&mail.Address{
					Name:    "郵便ダン",
					Address: "dan.yuubin@example.net",
				},
				&mail.Address{
					Name:    "郵便イーブ",
					Address: "eve.yubin@example.net",
				},
			},
			ResentBcc: []*mail.Address{
				&mail.Address{
					Name:    "郵便フランク",
					Address: "frank.yuubin@example.net",
				},
				&mail.Address{
					Name:    "郵便グレイス",
					Address: "grace.yubin@example.net",
				},
			},
			ResentMessageID: "Message-Id-1@example.net",
			ExtraHeaders: map[string][]string{
				"X-Clacks-Overhead": []string{
					"GNU Terry Pratchett",
				},
				"X-Script/function/\t !\"#$%&'()*+,-./;<=>?@[\\]^_`{|}~": []string{
					"TEST VALUE 1\t !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_` abcdefghijklmnopqrstuvwxyz{|}~",
					"TEST VALUE 2\t !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_` abcdefghijklmnopqrstuvwxyz{|}~",
				},
			},
			ContentInfo: &email.ContentInfo{
				Type: "multipart/mixed",
				TypeParams: map[string]string{
					"boundary": "MixedBoundaryString",
					"charset":  "utf-8",
				},
				Disposition:       "",
				DispositionParams: map[string]string(nil), // p0
				TransferEncoding:  "7bit",
				ID:                "",
				Charset:           "utf-8",
			},
			Received: nil,
		},
		Text: "色は匂えど\n" +
			"散りぬるを\n" +
			"我が世誰ぞ\n" +
			"常ならん\n" +
			"有為の奥山\n" +
			"今日越えて\n" +
			"浅き夢見じ\n" +
			"酔いもせず。\n" +
			"\n" +
			"Iro wa nioedo / Chirinuru o / Wa ga yo tare zo / Tsune naran / Ui no okuyama / Kyo koete Asaki yume miji / Yoi mo sezu.\n" +
			"\n" +
			"とりなくこゑすゆめさませみよあけわたるひんかしをそらいろはえておきつへにほふねむれゐぬもやのうち。\n" +
			"\n" +
			"天地星空\n" +
			"山川峰谷\n" +
			"雲霧室苔\n" +
			"人犬上末\n" +
			"硫黄猿生ふ為よ\n" +
			"榎の枝を馴れ居て。\n" +
			"\n" +
			"田居に出で菜摘むわれをぞ君召すと求食り追ひゆく山城の打酔へる子ら藻葉干せよえ舟繋けぬ。",
		EnrichedText: "<bold>色は匂えど</bold>\n" +
			"<italic>散りぬるを</italic>\n" +
			"<fixed>我が世誰ぞ</fixed>\n" +
			"<underline>常ならん</underline>\n" +
			"有為の奥山\n" +
			"今日越えて\n" +
			"浅き夢見じ\n" +
			"酔いもせず。\n" +
			"\n" +
			"Iro wa nioedo / Chirinuru o / Wa ga yo tare zo / Tsune naran / Ui no okuyama / Kyo koete Asaki yume miji / Yoi mo sezu.\n" +
			"\n" +
			"とりなくこゑすゆめさませみよあけわたるひんかしをそらいろはえておきつへにほふねむれゐぬもやのうち。\n" +
			"\n" +
			"天地星空\n" +
			"山川峰谷\n" +
			"雲霧室苔\n" +
			"人犬上末\n" +
			"硫黄猿生ふ為よ\n" +
			"榎の枝を馴れ居て。\n" +
			"\n" +
			"田居に出で菜摘むわれをぞ君召すと求食り追ひゆく山城の打酔へる子ら藻葉干せよえ舟繋けぬ。",
		HTML: "<html>\n" +
			"<div dir=\"ltr\">\n" +
			"<p>色は匂えど<br />\n" +
			"散りぬるを<br />\n" +
			"我が世誰ぞ<br />\n" +
			"常ならん<br />\n" +
			"有為の奥山<br />\n" +
			"今日越えて<br />\n" +
			"浅き夢見じ<br />\n" +
			"酔いもせず。</p>\n" +
			"\n" +
			"<p>Iro wa nioedo / Chirinuru o / Wa ga yo tare zo / Tsune naran / Ui no okuyama / Kyo koete Asaki yume miji / Yoi mo sezu.</p>\n" +
			"\n" +
			"<p>とりなくこゑすゆめさませみよあけわたるひんかしをそらいろはえておきつへにほふねむれゐぬもやのうち。</p>\n" +
			"\n" +
			"<p>天地星空<br />\n" +
			"山川峰谷<br />\n" +
			"雲霧室苔<br />\n" +
			"人犬上末<br />\n" +
			"硫黄猿生ふ為よ<br />\n" +
			"榎の枝を馴れ居て。</p>\n" +
			"\n" +
			"<p>田居に出で菜摘むわれをぞ君召すと求食り追ひゆく山城の打酔へる子ら藻葉干せよえ舟繋けぬ。</p>\n" +
			"</div>\n" +
			"</html>",
		Files: []*email.File{
			&email.File{
				FileType: "",
				Name:     "inline-jpg-image-without-disposition.jpg",
				ContentInfo: &email.ContentInfo{
					Type: "image/jpeg",
					TypeParams: map[string]string{
						"name": "inline-jpg-image-without-disposition.jpg",
					},
					Disposition:       "",
					DispositionParams: map[string]string(nil), // p0
					TransferEncoding:  "base64",
					ID:                "",
					Charset:           "utf-8",
				},
				Data: []byte{
					239, 191, 189, 239, 191, 189, 239, 191, 189, 239, 191, 189, 0, 67, 0, 3, 2, 2, 2,
					2, 2, 3, 2, 2, 2, 3, 3, 3, 3, 4, 6, 4, 4, 4, 4, 4, 8, 6, 6, 5, 6, 9, 8, 10, 10, 9,
					8, 9, 9, 10, 12, 15, 12, 10, 11, 14, 11, 9, 9, 13, 17, 13, 14, 15, 16, 16, 17, 16,
					10, 12, 18, 19, 18, 16, 19, 15, 16, 16, 16, 239, 191, 189, 239, 191, 189, 0, 11,
					8, 0, 1, 0, 1, 1, 1, 17, 0, 239, 191, 189, 239, 191, 189, 0, 6, 0, 16, 16, 5, 239,
					191, 189, 239, 191, 189, 0, 8, 1, 1, 0, 0, 63, 0, 239, 191, 189, 239, 191, 189, 32,
					239, 191, 189, 239, 191, 189,
				},
			},
			&email.File{
				FileType: "inline",
				Name:     "inline-jpg-image-filename.jpg",
				ContentInfo: &email.ContentInfo{
					Type: "image/jpeg",
					TypeParams: map[string]string{
						"name": "inline-jpg-image-name.jpg",
					},
					Disposition: "inline",
					DispositionParams: map[string]string{
						"filename": "inline-jpg-image-filename.jpg",
					},
					TransferEncoding: "base64",
					ID:               "inline-jpg-image.jpg@example.com",
					Charset:          "utf-8",
				},
				Data: []byte{
					239, 191, 189, 239, 191, 189, 239, 191, 189, 239, 191, 189, 0, 67, 0, 3, 2, 2, 2,
					2, 2, 3, 2, 2, 2, 3, 3, 3, 3, 4, 6, 4, 4, 4, 4, 4, 8, 6, 6, 5, 6, 9, 8, 10, 10, 9,
					8, 9, 9, 10, 12, 15, 12, 10, 11, 14, 11, 9, 9, 13, 17, 13, 14, 15, 16, 16, 17, 16,
					10, 12, 18, 19, 18, 16, 19, 15, 16, 16, 16, 239, 191, 189, 239, 191, 189, 0, 11,
					8, 0, 1, 0, 1, 1, 1, 17, 0, 239, 191, 189, 239, 191, 189, 0, 6, 0, 16, 16, 5, 239,
					191, 189, 239, 191, 189, 0, 8, 1, 1, 0, 0, 63, 0, 239, 191, 189, 239, 191, 189, 32,
					239, 191, 189, 239, 191, 189,
				},
			},
			&email.File{
				FileType: "attachment",
				Name:     "attached-pdf-filename.pdf",
				ContentInfo: &email.ContentInfo{
					Type: "application/pdf",
					TypeParams: map[string]string{
						"name": "attached-pdf-name.pdf",
					},
					Disposition: "attachment",
					DispositionParams: map[string]string{
						"filename": "attached-pdf-filename.pdf",
					},
					TransferEncoding: "base64",
					ID:               "",
					Charset:          "utf-8",
				},
				Data: []byte{
					37, 80, 68, 70, 45, 49, 46, 13, 116, 114, 97, 105, 108, 101, 114, 60, 60, 47, 82,
					111, 111, 116, 60, 60, 47, 80, 97, 103, 101, 115, 60, 60, 47, 75, 105, 100, 115,
					91, 60, 60, 47, 77, 101, 100, 105, 97, 66, 111, 120, 91, 48, 32, 48, 32, 51, 32,
					51, 93, 62, 62, 93, 62, 62, 62, 62, 62, 62,
				},
			},
			&email.File{
				FileType: "",
				Name:     "attached-pdf-without-disposition.pdf",
				ContentInfo: &email.ContentInfo{
					Type: "application/pdf",
					TypeParams: map[string]string{
						"name": "attached-pdf-without-disposition.pdf",
					},
					Disposition:       "",
					DispositionParams: map[string]string(nil), // p0
					TransferEncoding:  "base64",
					ID:                "",
					Charset:           "utf-8",
				},
				Data: []byte{
					37, 80, 68, 70, 45, 49, 46, 13, 116, 114, 97, 105, 108, 101, 114, 60, 60, 47, 82,
					111, 111, 116, 60, 60, 47, 80, 97, 103, 101, 115, 60, 60, 47, 75, 105, 100, 115,
					91, 60, 60, 47, 77, 101, 100, 105, 97, 66, 111, 120, 91, 48, 32, 48, 32, 51, 32,
					51, 93, 62, 62, 93, 62, 62, 62, 62, 62, 62,
				},
			},
			&email.File{
				FileType: "attachment",
				Name:     "attached-json-filename.json",
				ContentInfo: &email.ContentInfo{
					Type: "application/json",
					TypeParams: map[string]string{
						"name": "attached-json-name.json",
					},
					Disposition: "attachment",
					DispositionParams: map[string]string{
						"filename": "attached-json-filename.json",
					},
					TransferEncoding: "7bit",
					ID:               "",
					Charset:          "utf-8",
				},
				Data: []byte{
					123, 34, 102, 111, 111, 34, 58, 34, 98, 97, 114, 34, 125,
				},
			},
			&email.File{
				FileType: "attachment",
				Name:     "attached-text-plain-filename.txt",
				ContentInfo: &email.ContentInfo{
					Type: "text/plain",
					TypeParams: map[string]string{
						"name": "attached-text-plain-name.txt",
					},
					Disposition: "attachment",
					DispositionParams: map[string]string{
						"filename": "attached-text-plain-filename.txt",
					},
					TransferEncoding: "base64",
					ID:               "",
					Charset:          "utf-8",
				},
				Data: []byte{
					84, 101, 120, 116, 47, 112, 108, 97, 105, 110, 32, 99, 111, 110, 116, 101, 110, 116,
					32, 97, 115, 32, 97, 110, 32, 97, 116, 116, 97, 99, 104, 101, 100, 32, 46, 116, 120,
					116, 32, 102, 105, 108, 101, 46,
				},
			},
			&email.File{
				FileType: "attachment",
				Name:     "attached-text-html-filename.html",
				ContentInfo: &email.ContentInfo{
					Type: "text/html",
					TypeParams: map[string]string{
						"name": "attached-text-html-name.html",
					},
					Disposition: "attachment",
					DispositionParams: map[string]string{
						"filename": "attached-text-html-filename.html",
					},
					TransferEncoding: "base64",
					ID:               "",
					Charset:          "utf-8",
				},
				Data: []byte{
					84, 101, 120, 116, 47, 104, 116, 109, 108, 32, 99, 111, 110, 116, 101, 110, 116,
					32, 97, 115, 32, 97, 110, 32, 97, 116, 116, 97, 99, 104, 101, 100, 32, 46, 104, 116,
					109, 108, 32, 102, 105, 108, 101, 46,
				},
			},
		},
	}
	testEmailFromFile(t, fp, expectedEmail)
}

func TestParseEmailJapaneseMultipartMixedUtf8OverBase64(t *testing.T) {
	fp := "tests/test_japanese_multipart_mixed_utf-8_over_base64.txt"
	expectedEmail := &email.Email{
		Headers: email.Headers{
			Date: time.Time(time.Date(2019, 3, 31, 22, 55, 0, 0, time.UTC)),
			Sender: &mail.Address{
				Name:    "郵便アリス",
				Address: "alice.yuubin@example.com",
			},
			From: []*mail.Address{
				&mail.Address{
					Name:    "郵便アリス",
					Address: "alice.yuubin@example.com",
				},
				&mail.Address{
					Name:    "郵便アリス",
					Address: "alice.yuubin@example.net",
				},
			},
			ReplyTo: []*mail.Address{
				&mail.Address{
					Name:    "郵便アリス",
					Address: "alice.yuubin@example.net",
				},
			},
			To: []*mail.Address{
				&mail.Address{
					Name:    "郵便ボブ",
					Address: "bob.yuubin@example.com",
				},
				&mail.Address{
					Name:    "郵便キャロル",
					Address: "carol.yuubin@example.com",
				},
			},
			Cc: []*mail.Address{
				&mail.Address{
					Name:    "郵便ダン",
					Address: "dan.yuubin@example.com",
				},
				&mail.Address{
					Name:    "郵便イーブ",
					Address: "eve.yubin@example.com",
				},
			},
			Bcc: []*mail.Address{
				&mail.Address{
					Name:    "郵便フランク",
					Address: "frank.yuubin@example.com",
				},
				&mail.Address{
					Name:    "郵便グレイス",
					Address: "grace.yubin@example.com",
				},
			},
			MessageID: "Message-Id-1@example.com",
			InReplyTo: []string{
				"Message-Id-0@example.com",
			},
			References: []string{
				"Message-Id-0@example.com",
			},
			Subject:  "📧 Test いろは歌",
			Comments: "Message Header Comment",
			Keywords: []string{
				"Keyword 1",
				"Keyword 2",
			},
			ResentDate: time.Time(time.Date(2019, 3, 31, 22, 55, 0, 0, time.UTC)),
			ResentFrom: []*mail.Address{
				&mail.Address{
					Name:    "郵便アリス",
					Address: "alice.yuubin@example.net",
				},
				&mail.Address{
					Name:    "郵便アリス",
					Address: "alice.yuubin@example.com",
				},
			},
			ResentSender: &mail.Address{
				Name:    "郵便アリス",
				Address: "alice.yuubin@example.net",
			},
			ResentTo: []*mail.Address{
				&mail.Address{
					Name:    "郵便ボブ",
					Address: "bob.yuubin@example.net",
				},
				&mail.Address{
					Name:    "郵便キャロル",
					Address: "carol.yuubin@example.net",
				},
			},
			ResentCc: []*mail.Address{
				&mail.Address{
					Name:    "郵便ダン",
					Address: "dan.yuubin@example.net",
				},
				&mail.Address{
					Name:    "郵便イーブ",
					Address: "eve.yubin@example.net",
				},
			},
			ResentBcc: []*mail.Address{
				&mail.Address{
					Name:    "郵便フランク",
					Address: "frank.yuubin@example.net",
				},
				&mail.Address{
					Name:    "郵便グレイス",
					Address: "grace.yubin@example.net",
				},
			},
			ResentMessageID: "Message-Id-1@example.net",
			ExtraHeaders: map[string][]string{
				"X-Clacks-Overhead": []string{
					"GNU Terry Pratchett",
				},
				"X-Script/function/\t !\"#$%&'()*+,-./;<=>?@[\\]^_`{|}~": []string{
					"TEST VALUE 1\t !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_` abcdefghijklmnopqrstuvwxyz{|}~",
					"TEST VALUE 2\t !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_` abcdefghijklmnopqrstuvwxyz{|}~",
				},
			},
			ContentInfo: &email.ContentInfo{
				Type: "multipart/mixed",
				TypeParams: map[string]string{
					"boundary": "MixedBoundaryString",
					"charset":  "utf-8",
				},
				Disposition:       "",
				DispositionParams: map[string]string(nil), // p0
				TransferEncoding:  "base64",
				ID:                "",
				Charset:           "utf-8",
			},
			Received: nil,
		},
		Text: "色は匂えど\n" +
			"散りぬるを\n" +
			"我が世誰ぞ\n" +
			"常ならん\n" +
			"有為の奥山\n" +
			"今日越えて\n" +
			"浅き夢見じ\n" +
			"酔いもせず。\n" +
			"\n" +
			"Iro wa nioedo / Chirinuru o / Wa ga yo tare zo / Tsune naran / Ui no okuyama / Kyo koete Asaki yume miji / Yoi mo sezu.\n" +
			"\n" +
			"とりなくこゑすゆめさませみよあけわたるひんかしをそらいろはえておきつへにほふねむれゐぬもやのうち。\n" +
			"\n" +
			"天地星空\n" +
			"山川峰谷\n" +
			"雲霧室苔\n" +
			"人犬上末\n" +
			"硫黄猿生ふ為よ\n" +
			"榎の枝を馴れ居て。\n" +
			"\n" +
			"田居に出で菜摘むわれをぞ君召すと求食り追ひゆく山城の打酔へる子ら藻葉干せよえ舟繋けぬ。",
		EnrichedText: "<bold>色は匂えど</bold>\n" +
			"<italic>散りぬるを</italic>\n" +
			"<fixed>我が世誰ぞ</fixed>\n" +
			"<underline>常ならん</underline>\n" +
			"有為の奥山\n" +
			"今日越えて\n" +
			"浅き夢見じ\n" +
			"酔いもせず。\n" +
			"\n" +
			"Iro wa nioedo / Chirinuru o / Wa ga yo tare zo / Tsune naran / Ui no okuyama / Kyo koete Asaki yume miji / Yoi mo sezu.\n" +
			"\n" +
			"とりなくこゑすゆめさませみよあけわたるひんかしをそらいろはえておきつへにほふねむれゐぬもやのうち。\n" +
			"\n" +
			"天地星空\n" +
			"山川峰谷\n" +
			"雲霧室苔\n" +
			"人犬上末\n" +
			"硫黄猿生ふ為よ\n" +
			"榎の枝を馴れ居て。\n" +
			"\n" +
			"田居に出で菜摘むわれをぞ君召すと求食り追ひゆく山城の打酔へる子ら藻葉干せよえ舟繋けぬ。",
		HTML: "<html>\n" +
			"<div dir=\"ltr\">\n" +
			"<p>色は匂えど<br />\n" +
			"散りぬるを<br />\n" +
			"我が世誰ぞ<br />\n" +
			"常ならん<br />\n" +
			"有為の奥山<br />\n" +
			"今日越えて<br />\n" +
			"浅き夢見じ<br />\n" +
			"酔いもせず。</p>\n" +
			"\n" +
			"<p>Iro wa nioedo / Chirinuru o / Wa ga yo tare zo / Tsune naran / Ui no okuyama / Kyo koete Asaki yume miji / Yoi mo sezu.</p>\n" +
			"\n" +
			"<p>とりなくこゑすゆめさませみよあけわたるひんかしをそらいろはえておきつへにほふねむれゐぬもやのうち。</p>\n" +
			"\n" +
			"<p>天地星空<br />\n" +
			"山川峰谷<br />\n" +
			"雲霧室苔<br />\n" +
			"人犬上末<br />\n" +
			"硫黄猿生ふ為よ<br />\n" +
			"榎の枝を馴れ居て。</p>\n" +
			"\n" +
			"<p>田居に出で菜摘むわれをぞ君召すと求食り追ひゆく山城の打酔へる子ら藻葉干せよえ舟繋けぬ。</p>\n" +
			"</div>\n" +
			"</html>",
		Files: []*email.File{
			&email.File{
				FileType: "",
				Name:     "inline-jpg-image-without-disposition.jpg",
				ContentInfo: &email.ContentInfo{
					Type: "image/jpeg",
					TypeParams: map[string]string{
						"name": "inline-jpg-image-without-disposition.jpg",
					},
					Disposition:       "",
					DispositionParams: map[string]string(nil), // p0
					TransferEncoding:  "base64",
					ID:                "",
					Charset:           "utf-8",
				},
				Data: []byte{
					239, 191, 189, 239, 191, 189, 239, 191, 189, 239, 191, 189, 0, 67, 0, 3, 2, 2, 2,
					2, 2, 3, 2, 2, 2, 3, 3, 3, 3, 4, 6, 4, 4, 4, 4, 4, 8, 6, 6, 5, 6, 9, 8, 10, 10, 9,
					8, 9, 9, 10, 12, 15, 12, 10, 11, 14, 11, 9, 9, 13, 17, 13, 14, 15, 16, 16, 17, 16,
					10, 12, 18, 19, 18, 16, 19, 15, 16, 16, 16, 239, 191, 189, 239, 191, 189, 0, 11,
					8, 0, 1, 0, 1, 1, 1, 17, 0, 239, 191, 189, 239, 191, 189, 0, 6, 0, 16, 16, 5, 239,
					191, 189, 239, 191, 189, 0, 8, 1, 1, 0, 0, 63, 0, 239, 191, 189, 239, 191, 189, 32,
					239, 191, 189, 239, 191, 189,
				},
			},
			&email.File{
				FileType: "inline",
				Name:     "inline-jpg-image-filename.jpg",
				ContentInfo: &email.ContentInfo{
					Type: "image/jpeg",
					TypeParams: map[string]string{
						"name": "inline-jpg-image-name.jpg",
					},
					Disposition: "inline",
					DispositionParams: map[string]string{
						"filename": "inline-jpg-image-filename.jpg",
					},
					TransferEncoding: "base64",
					ID:               "inline-jpg-image.jpg@example.com",
					Charset:          "utf-8",
				},
				Data: []byte{
					239, 191, 189, 239, 191, 189, 239, 191, 189, 239, 191, 189, 0, 67, 0, 3, 2, 2, 2,
					2, 2, 3, 2, 2, 2, 3, 3, 3, 3, 4, 6, 4, 4, 4, 4, 4, 8, 6, 6, 5, 6, 9, 8, 10, 10, 9,
					8, 9, 9, 10, 12, 15, 12, 10, 11, 14, 11, 9, 9, 13, 17, 13, 14, 15, 16, 16, 17, 16,
					10, 12, 18, 19, 18, 16, 19, 15, 16, 16, 16, 239, 191, 189, 239, 191, 189, 0, 11,
					8, 0, 1, 0, 1, 1, 1, 17, 0, 239, 191, 189, 239, 191, 189, 0, 6, 0, 16, 16, 5, 239,
					191, 189, 239, 191, 189, 0, 8, 1, 1, 0, 0, 63, 0, 239, 191, 189, 239, 191, 189, 32,
					239, 191, 189, 239, 191, 189,
				},
			},
			&email.File{
				FileType: "attachment",
				Name:     "attached-pdf-filename.pdf",
				ContentInfo: &email.ContentInfo{
					Type: "application/pdf",
					TypeParams: map[string]string{
						"name": "attached-pdf-name.pdf",
					},
					Disposition: "attachment",
					DispositionParams: map[string]string{
						"filename": "attached-pdf-filename.pdf",
					},
					TransferEncoding: "base64",
					ID:               "",
					Charset:          "utf-8",
				},
				Data: []byte{
					37, 80, 68, 70, 45, 49, 46, 13, 116, 114, 97, 105, 108, 101, 114, 60, 60, 47, 82,
					111, 111, 116, 60, 60, 47, 80, 97, 103, 101, 115, 60, 60, 47, 75, 105, 100, 115,
					91, 60, 60, 47, 77, 101, 100, 105, 97, 66, 111, 120, 91, 48, 32, 48, 32, 51, 32,
					51, 93, 62, 62, 93, 62, 62, 62, 62, 62, 62,
				},
			},
			&email.File{
				FileType: "",
				Name:     "attached-pdf-without-disposition.pdf",
				ContentInfo: &email.ContentInfo{
					Type: "application/pdf",
					TypeParams: map[string]string{
						"name": "attached-pdf-without-disposition.pdf",
					},
					Disposition:       "",
					DispositionParams: map[string]string(nil), // p0
					TransferEncoding:  "base64",
					ID:                "",
					Charset:           "utf-8",
				},
				Data: []byte{
					37, 80, 68, 70, 45, 49, 46, 13, 116, 114, 97, 105, 108, 101, 114, 60, 60, 47, 82,
					111, 111, 116, 60, 60, 47, 80, 97, 103, 101, 115, 60, 60, 47, 75, 105, 100, 115,
					91, 60, 60, 47, 77, 101, 100, 105, 97, 66, 111, 120, 91, 48, 32, 48, 32, 51, 32,
					51, 93, 62, 62, 93, 62, 62, 62, 62, 62, 62,
				},
			},
			&email.File{
				FileType: "attachment",
				Name:     "attached-json-filename.json",
				ContentInfo: &email.ContentInfo{
					Type: "application/json",
					TypeParams: map[string]string{
						"name": "attached-json-name.json",
					},
					Disposition: "attachment",
					DispositionParams: map[string]string{
						"filename": "attached-json-filename.json",
					},
					TransferEncoding: "7bit",
					ID:               "",
					Charset:          "utf-8",
				},
				Data: []byte{
					123, 34, 102, 111, 111, 34, 58, 34, 98, 97, 114, 34, 125,
				},
			},
			&email.File{
				FileType: "attachment",
				Name:     "attached-text-plain-filename.txt",
				ContentInfo: &email.ContentInfo{
					Type: "text/plain",
					TypeParams: map[string]string{
						"name": "attached-text-plain-name.txt",
					},
					Disposition: "attachment",
					DispositionParams: map[string]string{
						"filename": "attached-text-plain-filename.txt",
					},
					TransferEncoding: "base64",
					ID:               "",
					Charset:          "utf-8",
				},
				Data: []byte{
					84, 101, 120, 116, 47, 112, 108, 97, 105, 110, 32, 99, 111, 110, 116, 101, 110, 116,
					32, 97, 115, 32, 97, 110, 32, 97, 116, 116, 97, 99, 104, 101, 100, 32, 46, 116, 120,
					116, 32, 102, 105, 108, 101, 46,
				},
			},
			&email.File{
				FileType: "attachment",
				Name:     "attached-text-html-filename.html",
				ContentInfo: &email.ContentInfo{
					Type: "text/html",
					TypeParams: map[string]string{
						"name": "attached-text-html-name.html",
					},
					Disposition: "attachment",
					DispositionParams: map[string]string{
						"filename": "attached-text-html-filename.html",
					},
					TransferEncoding: "base64",
					ID:               "",
					Charset:          "utf-8",
				},
				Data: []byte{
					84, 101, 120, 116, 47, 104, 116, 109, 108, 32, 99, 111, 110, 116, 101, 110, 116,
					32, 97, 115, 32, 97, 110, 32, 97, 116, 116, 97, 99, 104, 101, 100, 32, 46, 104, 116,
					109, 108, 32, 102, 105, 108, 101, 46,
				},
			},
		},
	}
	testEmailFromFile(t, fp, expectedEmail)
}

func TestParseEmailJapaneseMultipartMixedUtf8OverQuotedprintable(t *testing.T) {
	fp := "tests/test_japanese_multipart_mixed_utf-8_over_quoted-printable.txt"
	expectedEmail := &email.Email{
		Headers: email.Headers{
			Date: time.Time(time.Date(2019, 3, 31, 22, 55, 0, 0, time.UTC)),
			Sender: &mail.Address{
				Name:    "郵便アリス",
				Address: "alice.yuubin@example.com",
			},
			From: []*mail.Address{
				&mail.Address{
					Name:    "郵便アリス",
					Address: "alice.yuubin@example.com",
				},
				&mail.Address{
					Name:    "郵便アリス",
					Address: "alice.yuubin@example.net",
				},
			},
			ReplyTo: []*mail.Address{
				&mail.Address{
					Name:    "郵便アリス",
					Address: "alice.yuubin@example.net",
				},
			},
			To: []*mail.Address{
				&mail.Address{
					Name:    "郵便ボブ",
					Address: "bob.yuubin@example.com",
				},
				&mail.Address{
					Name:    "郵便キャロル",
					Address: "carol.yuubin@example.com",
				},
			},
			Cc: []*mail.Address{
				&mail.Address{
					Name:    "郵便ダン",
					Address: "dan.yuubin@example.com",
				},
				&mail.Address{
					Name:    "郵便イーブ",
					Address: "eve.yubin@example.com",
				},
			},
			Bcc: []*mail.Address{
				&mail.Address{
					Name:    "郵便フランク",
					Address: "frank.yuubin@example.com",
				},
				&mail.Address{
					Name:    "郵便グレイス",
					Address: "grace.yubin@example.com",
				},
			},
			MessageID: "Message-Id-1@example.com",
			InReplyTo: []string{
				"Message-Id-0@example.com",
			},
			References: []string{
				"Message-Id-0@example.com",
			},
			Subject:  "📧 Test いろは歌",
			Comments: "Message Header Comment",
			Keywords: []string{
				"Keyword 1",
				"Keyword 2",
			},
			ResentDate: time.Time(time.Date(2019, 3, 31, 22, 55, 0, 0, time.UTC)),
			ResentFrom: []*mail.Address{
				&mail.Address{
					Name:    "郵便アリス",
					Address: "alice.yuubin@example.net",
				},
				&mail.Address{
					Name:    "郵便アリス",
					Address: "alice.yuubin@example.com",
				},
			},
			ResentSender: &mail.Address{
				Name:    "郵便アリス",
				Address: "alice.yuubin@example.net",
			},
			ResentTo: []*mail.Address{
				&mail.Address{
					Name:    "郵便ボブ",
					Address: "bob.yuubin@example.net",
				},
				&mail.Address{
					Name:    "郵便キャロル",
					Address: "carol.yuubin@example.net",
				},
			},
			ResentCc: []*mail.Address{
				&mail.Address{
					Name:    "郵便ダン",
					Address: "dan.yuubin@example.net",
				},
				&mail.Address{
					Name:    "郵便イーブ",
					Address: "eve.yubin@example.net",
				},
			},
			ResentBcc: []*mail.Address{
				&mail.Address{
					Name:    "郵便フランク",
					Address: "frank.yuubin@example.net",
				},
				&mail.Address{
					Name:    "郵便グレイス",
					Address: "grace.yubin@example.net",
				},
			},
			ResentMessageID: "Message-Id-1@example.net",
			ExtraHeaders: map[string][]string{
				"X-Clacks-Overhead": []string{
					"GNU Terry Pratchett",
				},
				"X-Script/function/\t !\"#$%&'()*+,-./;<=>?@[\\]^_`{|}~": []string{
					"TEST VALUE 1\t !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_` abcdefghijklmnopqrstuvwxyz{|}~",
					"TEST VALUE 2\t !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_` abcdefghijklmnopqrstuvwxyz{|}~",
				},
			},
			ContentInfo: &email.ContentInfo{
				Type: "multipart/mixed",
				TypeParams: map[string]string{
					"boundary": "MixedBoundaryString",
					"charset":  "utf-8",
				},
				Disposition:       "",
				DispositionParams: map[string]string(nil), // p0
				TransferEncoding:  "quoted-printable",
				ID:                "",
				Charset:           "utf-8",
			},
			Received: nil,
		},
		Text: "色は匂えど\n" +
			"散りぬるを\n" +
			"我が世誰ぞ\n" +
			"常ならん\n" +
			"有為の奥山\n" +
			"今日越えて\n" +
			"浅き夢見じ\n" +
			"酔いもせず。\n" +
			"\n" +
			"Iro wa nioedo / Chirinuru o / Wa ga yo tare zo / Tsune naran / Ui no okuyama / Kyo koete Asaki yume miji / Yoi mo sezu.\n" +
			"\n" +
			"とりなくこゑすゆめさませみよあけわたるひんかしをそらいろはえておきつへにほふねむれゐぬもやのうち。\n" +
			"\n" +
			"天地星空\n" +
			"山川峰谷\n" +
			"雲霧室苔\n" +
			"人犬上末\n" +
			"硫黄猿生ふ為よ\n" +
			"榎の枝を馴れ居て。\n" +
			"\n" +
			"田居に出で菜摘むわれをぞ君召すと求食り追ひゆく山城の打酔へる子ら藻葉干せよえ舟繋けぬ。",
		EnrichedText: "<bold>色は匂えど</bold>\n" +
			"<italic>散りぬるを</italic>\n" +
			"<fixed>我が世誰ぞ</fixed>\n" +
			"<underline>常ならん</underline>\n" +
			"有為の奥山\n" +
			"今日越えて\n" +
			"浅き夢見じ\n" +
			"酔いもせず。\n" +
			"\n" +
			"Iro wa nioedo / Chirinuru o / Wa ga yo tare zo / Tsune naran / Ui no okuyama / Kyo koete Asaki yume miji / Yoi mo sezu.\n" +
			"\n" +
			"とりなくこゑすゆめさませみよあけわたるひんかしをそらいろはえておきつへにほふねむれゐぬもやのうち。\n" +
			"\n" +
			"天地星空\n" +
			"山川峰谷\n" +
			"雲霧室苔\n" +
			"人犬上末\n" +
			"硫黄猿生ふ為よ\n" +
			"榎の枝を馴れ居て。\n" +
			"\n" +
			"田居に出で菜摘むわれをぞ君召すと求食り追ひゆく山城の打酔へる子ら藻葉干せよえ舟繋けぬ。",
		HTML: "<html>\n" +
			"<div dir=\"ltr\">\n" +
			"<p>色は匂えど<br />\n" +
			"散りぬるを<br />\n" +
			"我が世誰ぞ<br />\n" +
			"常ならん<br />\n" +
			"有為の奥山<br />\n" +
			"今日越えて<br />\n" +
			"浅き夢見じ<br />\n" +
			"酔いもせず。</p>\n" +
			"\n" +
			"<p>Iro wa nioedo / Chirinuru o / Wa ga yo tare zo / Tsune naran / Ui no okuyama / Kyo koete Asaki yume miji / Yoi mo sezu.</p>\n" +
			"\n" +
			"<p>とりなくこゑすゆめさませみよあけわたるひんかしをそらいろはえておきつへにほふねむれゐぬもやのうち。</p>\n" +
			"\n" +
			"<p>天地星空<br />\n" +
			"山川峰谷<br />\n" +
			"雲霧室苔<br />\n" +
			"人犬上末<br />\n" +
			"硫黄猿生ふ為よ<br />\n" +
			"榎の枝を馴れ居て。</p>\n" +
			"\n" +
			"<p>田居に出で菜摘むわれをぞ君召すと求食り追ひゆく山城の打酔へる子ら藻葉干せよえ舟繋けぬ。</p>\n" +
			"</div>\n" +
			"</html>",
		Files: []*email.File{
			&email.File{
				FileType: "",
				Name:     "inline-jpg-image-without-disposition.jpg",
				ContentInfo: &email.ContentInfo{
					Type: "image/jpeg",
					TypeParams: map[string]string{
						"name": "inline-jpg-image-without-disposition.jpg",
					},
					Disposition:       "",
					DispositionParams: map[string]string(nil), // p0
					TransferEncoding:  "base64",
					ID:                "",
					Charset:           "utf-8",
				},
				Data: []byte{
					239, 191, 189, 239, 191, 189, 239, 191, 189, 239, 191, 189, 0, 67, 0, 3, 2, 2, 2,
					2, 2, 3, 2, 2, 2, 3, 3, 3, 3, 4, 6, 4, 4, 4, 4, 4, 8, 6, 6, 5, 6, 9, 8, 10, 10, 9,
					8, 9, 9, 10, 12, 15, 12, 10, 11, 14, 11, 9, 9, 13, 17, 13, 14, 15, 16, 16, 17, 16,
					10, 12, 18, 19, 18, 16, 19, 15, 16, 16, 16, 239, 191, 189, 239, 191, 189, 0, 11,
					8, 0, 1, 0, 1, 1, 1, 17, 0, 239, 191, 189, 239, 191, 189, 0, 6, 0, 16, 16, 5, 239,
					191, 189, 239, 191, 189, 0, 8, 1, 1, 0, 0, 63, 0, 239, 191, 189, 239, 191, 189, 32,
					239, 191, 189, 239, 191, 189,
				},
			},
			&email.File{
				FileType: "inline",
				Name:     "inline-jpg-image-filename.jpg",
				ContentInfo: &email.ContentInfo{
					Type: "image/jpeg",
					TypeParams: map[string]string{
						"name": "inline-jpg-image-name.jpg",
					},
					Disposition: "inline",
					DispositionParams: map[string]string{
						"filename": "inline-jpg-image-filename.jpg",
					},
					TransferEncoding: "base64",
					ID:               "inline-jpg-image.jpg@example.com",
					Charset:          "utf-8",
				},
				Data: []byte{
					239, 191, 189, 239, 191, 189, 239, 191, 189, 239, 191, 189, 0, 67, 0, 3, 2, 2, 2,
					2, 2, 3, 2, 2, 2, 3, 3, 3, 3, 4, 6, 4, 4, 4, 4, 4, 8, 6, 6, 5, 6, 9, 8, 10, 10, 9,
					8, 9, 9, 10, 12, 15, 12, 10, 11, 14, 11, 9, 9, 13, 17, 13, 14, 15, 16, 16, 17, 16,
					10, 12, 18, 19, 18, 16, 19, 15, 16, 16, 16, 239, 191, 189, 239, 191, 189, 0, 11,
					8, 0, 1, 0, 1, 1, 1, 17, 0, 239, 191, 189, 239, 191, 189, 0, 6, 0, 16, 16, 5, 239,
					191, 189, 239, 191, 189, 0, 8, 1, 1, 0, 0, 63, 0, 239, 191, 189, 239, 191, 189, 32,
					239, 191, 189, 239, 191, 189,
				},
			},
			&email.File{
				FileType: "attachment",
				Name:     "attached-pdf-filename.pdf",
				ContentInfo: &email.ContentInfo{
					Type: "application/pdf",
					TypeParams: map[string]string{
						"name": "attached-pdf-name.pdf",
					},
					Disposition: "attachment",
					DispositionParams: map[string]string{
						"filename": "attached-pdf-filename.pdf",
					},
					TransferEncoding: "base64",
					ID:               "",
					Charset:          "utf-8",
				},
				Data: []byte{
					37, 80, 68, 70, 45, 49, 46, 13, 116, 114, 97, 105, 108, 101, 114, 60, 60, 47, 82,
					111, 111, 116, 60, 60, 47, 80, 97, 103, 101, 115, 60, 60, 47, 75, 105, 100, 115,
					91, 60, 60, 47, 77, 101, 100, 105, 97, 66, 111, 120, 91, 48, 32, 48, 32, 51, 32,
					51, 93, 62, 62, 93, 62, 62, 62, 62, 62, 62,
				},
			},
			&email.File{
				FileType: "",
				Name:     "attached-pdf-without-disposition.pdf",
				ContentInfo: &email.ContentInfo{
					Type: "application/pdf",
					TypeParams: map[string]string{
						"name": "attached-pdf-without-disposition.pdf",
					},
					Disposition:       "",
					DispositionParams: map[string]string(nil), // p0
					TransferEncoding:  "base64",
					ID:                "",
					Charset:           "utf-8",
				},
				Data: []byte{
					37, 80, 68, 70, 45, 49, 46, 13, 116, 114, 97, 105, 108, 101, 114, 60, 60, 47, 82,
					111, 111, 116, 60, 60, 47, 80, 97, 103, 101, 115, 60, 60, 47, 75, 105, 100, 115,
					91, 60, 60, 47, 77, 101, 100, 105, 97, 66, 111, 120, 91, 48, 32, 48, 32, 51, 32,
					51, 93, 62, 62, 93, 62, 62, 62, 62, 62, 62,
				},
			},
			&email.File{
				FileType: "attachment",
				Name:     "attached-json-filename.json",
				ContentInfo: &email.ContentInfo{
					Type: "application/json",
					TypeParams: map[string]string{
						"name": "attached-json-name.json",
					},
					Disposition: "attachment",
					DispositionParams: map[string]string{
						"filename": "attached-json-filename.json",
					},
					TransferEncoding: "7bit",
					ID:               "",
					Charset:          "utf-8",
				},
				Data: []byte{
					123, 34, 102, 111, 111, 34, 58, 34, 98, 97, 114, 34, 125,
				},
			},
			&email.File{
				FileType: "attachment",
				Name:     "attached-text-plain-filename.txt",
				ContentInfo: &email.ContentInfo{
					Type: "text/plain",
					TypeParams: map[string]string{
						"name": "attached-text-plain-name.txt",
					},
					Disposition: "attachment",
					DispositionParams: map[string]string{
						"filename": "attached-text-plain-filename.txt",
					},
					TransferEncoding: "base64",
					ID:               "",
					Charset:          "utf-8",
				},
				Data: []byte{
					84, 101, 120, 116, 47, 112, 108, 97, 105, 110, 32, 99, 111, 110, 116, 101, 110, 116,
					32, 97, 115, 32, 97, 110, 32, 97, 116, 116, 97, 99, 104, 101, 100, 32, 46, 116, 120,
					116, 32, 102, 105, 108, 101, 46,
				},
			},
			&email.File{
				FileType: "attachment",
				Name:     "attached-text-html-filename.html",
				ContentInfo: &email.ContentInfo{
					Type: "text/html",
					TypeParams: map[string]string{
						"name": "attached-text-html-name.html",
					},
					Disposition: "attachment",
					DispositionParams: map[string]string{
						"filename": "attached-text-html-filename.html",
					},
					TransferEncoding: "base64",
					ID:               "",
					Charset:          "utf-8",
				},
				Data: []byte{
					84, 101, 120, 116, 47, 104, 116, 109, 108, 32, 99, 111, 110, 116, 101, 110, 116,
					32, 97, 115, 32, 97, 110, 32, 97, 116, 116, 97, 99, 104, 101, 100, 32, 46, 104, 116,
					109, 108, 32, 102, 105, 108, 101, 46,
				},
			},
		},
	}
	testEmailFromFile(t, fp, expectedEmail)
}

func TestParseEmailJapaneseMultipartMixedIso2022jpOver7bit(t *testing.T) {
	fp := "tests/test_japanese_multipart_mixed_iso-2022-jp_over_7bit.txt"
	expectedEmail := &email.Email{
		Headers: email.Headers{
			Date: time.Time(time.Date(2019, 3, 31, 22, 55, 0, 0, time.UTC)),
			Sender: &mail.Address{
				Name:    "郵便アリス",
				Address: "alice.yuubin@example.com",
			},
			From: []*mail.Address{
				&mail.Address{
					Name:    "郵便アリス",
					Address: "alice.yuubin@example.com",
				},
				&mail.Address{
					Name:    "郵便アリス",
					Address: "alice.yuubin@example.net",
				},
			},
			ReplyTo: []*mail.Address{
				&mail.Address{
					Name:    "郵便アリス",
					Address: "alice.yuubin@example.net",
				},
			},
			To: []*mail.Address{
				&mail.Address{
					Name:    "郵便ボブ",
					Address: "bob.yuubin@example.com",
				},
				&mail.Address{
					Name:    "郵便キャロル",
					Address: "carol.yuubin@example.com",
				},
			},
			Cc: []*mail.Address{
				&mail.Address{
					Name:    "郵便ダン",
					Address: "dan.yuubin@example.com",
				},
				&mail.Address{
					Name:    "郵便イーブ",
					Address: "eve.yubin@example.com",
				},
			},
			Bcc: []*mail.Address{
				&mail.Address{
					Name:    "郵便フランク",
					Address: "frank.yuubin@example.com",
				},
				&mail.Address{
					Name:    "郵便グレイス",
					Address: "grace.yubin@example.com",
				},
			},
			MessageID: "Message-Id-1@example.com",
			InReplyTo: []string{
				"Message-Id-0@example.com",
			},
			References: []string{
				"Message-Id-0@example.com",
			},
			Subject:  "📧 Test いろは歌",
			Comments: "Message Header Comment",
			Keywords: []string{
				"Keyword 1",
				"Keyword 2",
			},
			ResentDate: time.Time(time.Date(2019, 3, 31, 22, 55, 0, 0, time.UTC)),
			ResentFrom: []*mail.Address{
				&mail.Address{
					Name:    "郵便アリス",
					Address: "alice.yuubin@example.net",
				},
				&mail.Address{
					Name:    "郵便アリス",
					Address: "alice.yuubin@example.com",
				},
			},
			ResentSender: &mail.Address{
				Name:    "郵便アリス",
				Address: "alice.yuubin@example.net",
			},
			ResentTo: []*mail.Address{
				&mail.Address{
					Name:    "郵便ボブ",
					Address: "bob.yuubin@example.net",
				},
				&mail.Address{
					Name:    "郵便キャロル",
					Address: "carol.yuubin@example.net",
				},
			},
			ResentCc: []*mail.Address{
				&mail.Address{
					Name:    "郵便ダン",
					Address: "dan.yuubin@example.net",
				},
				&mail.Address{
					Name:    "郵便イーブ",
					Address: "eve.yubin@example.net",
				},
			},
			ResentBcc: []*mail.Address{
				&mail.Address{
					Name:    "郵便フランク",
					Address: "frank.yuubin@example.net",
				},
				&mail.Address{
					Name:    "郵便グレイス",
					Address: "grace.yubin@example.net",
				},
			},
			ResentMessageID: "Message-Id-1@example.net",
			ExtraHeaders: map[string][]string{
				"X-Clacks-Overhead": []string{
					"GNU Terry Pratchett",
				},
				"X-Script/function/\t !\"#$%&'()*+,-./;<=>?@[\\]^_`{|}~": []string{
					"TEST VALUE 1\t !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_` abcdefghijklmnopqrstuvwxyz{|}~",
					"TEST VALUE 2\t !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_` abcdefghijklmnopqrstuvwxyz{|}~",
				},
			},
			ContentInfo: &email.ContentInfo{
				Type: "multipart/mixed",
				TypeParams: map[string]string{
					"boundary": "MixedBoundaryString",
					"charset":  "iso-2022-jp",
				},
				Disposition:       "",
				DispositionParams: map[string]string(nil), // p0
				TransferEncoding:  "7bit",
				ID:                "",
				Charset:           "iso-2022-jp",
			},
			Received: nil,
		},
		Text: "色は匂えど\n" +
			"散りぬるを\n" +
			"我が世誰ぞ\n" +
			"常ならん\n" +
			"有為の奥山\n" +
			"今日越えて\n" +
			"浅き夢見じ\n" +
			"酔いもせず。\n" +
			"\n" +
			"Iro wa nioedo / Chirinuru o / Wa ga yo tare zo / Tsune naran / Ui no okuyama / Kyo koete Asaki yume miji / Yoi mo sezu.\n" +
			"\n" +
			"とりなくこゑすゆめさませみよあけわたるひんかしをそらいろはえておきつへにほふねむれゐぬもやのうち。\n" +
			"\n" +
			"天地星空\n" +
			"山川峰谷\n" +
			"雲霧室苔\n" +
			"人犬上末\n" +
			"硫黄猿生ふ為よ\n" +
			"榎の枝を馴れ居て。\n" +
			"\n" +
			"田居に出で菜摘むわれをぞ君召すと求食り追ひゆく山城の打酔へる子ら藻葉干せよえ舟繋けぬ。",
		EnrichedText: "<bold>色は匂えど</bold>\n" +
			"<italic>散りぬるを</italic>\n" +
			"<fixed>我が世誰ぞ</fixed>\n" +
			"<underline>常ならん</underline>\n" +
			"有為の奥山\n" +
			"今日越えて\n" +
			"浅き夢見じ\n" +
			"酔いもせず。\n" +
			"\n" +
			"Iro wa nioedo / Chirinuru o / Wa ga yo tare zo / Tsune naran / Ui no okuyama / Kyo koete Asaki yume miji / Yoi mo sezu.\n" +
			"\n" +
			"とりなくこゑすゆめさませみよあけわたるひんかしをそらいろはえておきつへにほふねむれゐぬもやのうち。\n" +
			"\n" +
			"天地星空\n" +
			"山川峰谷\n" +
			"雲霧室苔\n" +
			"人犬上末\n" +
			"硫黄猿生ふ為よ\n" +
			"榎の枝を馴れ居て。\n" +
			"\n" +
			"田居に出で菜摘むわれをぞ君召すと求食り追ひゆく山城の打酔へる子ら藻葉干せよえ舟繋けぬ。",
		HTML: "<html>\n" +
			"<div dir=\"ltr\">\n" +
			"<p>色は匂えど<br />\n" +
			"散りぬるを<br />\n" +
			"我が世誰ぞ<br />\n" +
			"常ならん<br />\n" +
			"有為の奥山<br />\n" +
			"今日越えて<br />\n" +
			"浅き夢見じ<br />\n" +
			"酔いもせず。</p>\n" +
			"\n" +
			"<p>Iro wa nioedo / Chirinuru o / Wa ga yo tare zo / Tsune naran / Ui no okuyama / Kyo koete Asaki yume miji / Yoi mo sezu.</p>\n" +
			"\n" +
			"<p>とりなくこゑすゆめさませみよあけわたるひんかしをそらいろはえておきつへにほふねむれゐぬもやのうち。</p>\n" +
			"\n" +
			"<p>天地星空<br />\n" +
			"山川峰谷<br />\n" +
			"雲霧室苔<br />\n" +
			"人犬上末<br />\n" +
			"硫黄猿生ふ為よ<br />\n" +
			"榎の枝を馴れ居て。</p>\n" +
			"\n" +
			"<p>田居に出で菜摘むわれをぞ君召すと求食り追ひゆく山城の打酔へる子ら藻葉干せよえ舟繋けぬ。</p>\n" +
			"</div>\n" +
			"</html>",
		Files: []*email.File{
			&email.File{
				FileType: "",
				Name:     "inline-jpg-image-without-disposition.jpg",
				ContentInfo: &email.ContentInfo{
					Type: "image/jpeg",
					TypeParams: map[string]string{
						"name": "inline-jpg-image-without-disposition.jpg",
					},
					Disposition:       "",
					DispositionParams: map[string]string(nil), // p0
					TransferEncoding:  "base64",
					ID:                "",
					Charset:           "iso-2022-jp",
				},
				Data: []byte{
					239, 191, 189, 239, 191, 189, 239, 191, 189, 239, 191, 189, 0, 67, 0, 3, 2, 2, 2,
					2, 2, 3, 2, 2, 2, 3, 3, 3, 3, 4, 6, 4, 4, 4, 4, 4, 8, 6, 6, 5, 6, 9, 8, 10, 10, 9,
					8, 9, 9, 10, 12, 15, 12, 10, 11, 14, 11, 9, 9, 13, 17, 13, 14, 15, 16, 16, 17, 16,
					10, 12, 18, 19, 18, 16, 19, 15, 16, 16, 16, 239, 191, 189, 239, 191, 189, 0, 11,
					8, 0, 1, 0, 1, 1, 1, 17, 0, 239, 191, 189, 239, 191, 189, 0, 6, 0, 16, 16, 5, 239,
					191, 189, 239, 191, 189, 0, 8, 1, 1, 0, 0, 63, 0, 239, 191, 189, 239, 191, 189, 32,
					239, 191, 189, 239, 191, 189,
				},
			},
			&email.File{
				FileType: "inline",
				Name:     "inline-jpg-image-filename.jpg",
				ContentInfo: &email.ContentInfo{
					Type: "image/jpeg",
					TypeParams: map[string]string{
						"name": "inline-jpg-image-name.jpg",
					},
					Disposition: "inline",
					DispositionParams: map[string]string{
						"filename": "inline-jpg-image-filename.jpg",
					},
					TransferEncoding: "base64",
					ID:               "inline-jpg-image.jpg@example.com",
					Charset:          "iso-2022-jp",
				},
				Data: []byte{
					239, 191, 189, 239, 191, 189, 239, 191, 189, 239, 191, 189, 0, 67, 0, 3, 2, 2, 2,
					2, 2, 3, 2, 2, 2, 3, 3, 3, 3, 4, 6, 4, 4, 4, 4, 4, 8, 6, 6, 5, 6, 9, 8, 10, 10, 9,
					8, 9, 9, 10, 12, 15, 12, 10, 11, 14, 11, 9, 9, 13, 17, 13, 14, 15, 16, 16, 17, 16,
					10, 12, 18, 19, 18, 16, 19, 15, 16, 16, 16, 239, 191, 189, 239, 191, 189, 0, 11,
					8, 0, 1, 0, 1, 1, 1, 17, 0, 239, 191, 189, 239, 191, 189, 0, 6, 0, 16, 16, 5, 239,
					191, 189, 239, 191, 189, 0, 8, 1, 1, 0, 0, 63, 0, 239, 191, 189, 239, 191, 189, 32,
					239, 191, 189, 239, 191, 189,
				},
			},
			&email.File{
				FileType: "attachment",
				Name:     "attached-pdf-filename.pdf",
				ContentInfo: &email.ContentInfo{
					Type: "application/pdf",
					TypeParams: map[string]string{
						"name": "attached-pdf-name.pdf",
					},
					Disposition: "attachment",
					DispositionParams: map[string]string{
						"filename": "attached-pdf-filename.pdf",
					},
					TransferEncoding: "base64",
					ID:               "",
					Charset:          "iso-2022-jp",
				},
				Data: []byte{
					37, 80, 68, 70, 45, 49, 46, 13, 116, 114, 97, 105, 108, 101, 114, 60, 60, 47, 82,
					111, 111, 116, 60, 60, 47, 80, 97, 103, 101, 115, 60, 60, 47, 75, 105, 100, 115,
					91, 60, 60, 47, 77, 101, 100, 105, 97, 66, 111, 120, 91, 48, 32, 48, 32, 51, 32,
					51, 93, 62, 62, 93, 62, 62, 62, 62, 62, 62,
				},
			},
			&email.File{
				FileType: "",
				Name:     "attached-pdf-without-disposition.pdf",
				ContentInfo: &email.ContentInfo{
					Type: "application/pdf",
					TypeParams: map[string]string{
						"name": "attached-pdf-without-disposition.pdf",
					},
					Disposition:       "",
					DispositionParams: map[string]string(nil), // p0
					TransferEncoding:  "base64",
					ID:                "",
					Charset:           "iso-2022-jp",
				},
				Data: []byte{
					37, 80, 68, 70, 45, 49, 46, 13, 116, 114, 97, 105, 108, 101, 114, 60, 60, 47, 82,
					111, 111, 116, 60, 60, 47, 80, 97, 103, 101, 115, 60, 60, 47, 75, 105, 100, 115,
					91, 60, 60, 47, 77, 101, 100, 105, 97, 66, 111, 120, 91, 48, 32, 48, 32, 51, 32,
					51, 93, 62, 62, 93, 62, 62, 62, 62, 62, 62,
				},
			},
			&email.File{
				FileType: "attachment",
				Name:     "attached-json-filename.json",
				ContentInfo: &email.ContentInfo{
					Type: "application/json",
					TypeParams: map[string]string{
						"name": "attached-json-name.json",
					},
					Disposition: "attachment",
					DispositionParams: map[string]string{
						"filename": "attached-json-filename.json",
					},
					TransferEncoding: "7bit",
					ID:               "",
					Charset:          "iso-2022-jp",
				},
				Data: []byte{
					123, 34, 102, 111, 111, 34, 58, 34, 98, 97, 114, 34, 125,
				},
			},
			&email.File{
				FileType: "attachment",
				Name:     "attached-text-plain-filename.txt",
				ContentInfo: &email.ContentInfo{
					Type: "text/plain",
					TypeParams: map[string]string{
						"name": "attached-text-plain-name.txt",
					},
					Disposition: "attachment",
					DispositionParams: map[string]string{
						"filename": "attached-text-plain-filename.txt",
					},
					TransferEncoding: "base64",
					ID:               "",
					Charset:          "iso-2022-jp",
				},
				Data: []byte{
					84, 101, 120, 116, 47, 112, 108, 97, 105, 110, 32, 99, 111, 110, 116, 101, 110, 116,
					32, 97, 115, 32, 97, 110, 32, 97, 116, 116, 97, 99, 104, 101, 100, 32, 46, 116, 120,
					116, 32, 102, 105, 108, 101, 46,
				},
			},
			&email.File{
				FileType: "attachment",
				Name:     "attached-text-html-filename.html",
				ContentInfo: &email.ContentInfo{
					Type: "text/html",
					TypeParams: map[string]string{
						"name": "attached-text-html-name.html",
					},
					Disposition: "attachment",
					DispositionParams: map[string]string{
						"filename": "attached-text-html-filename.html",
					},
					TransferEncoding: "base64",
					ID:               "",
					Charset:          "iso-2022-jp",
				},
				Data: []byte{
					84, 101, 120, 116, 47, 104, 116, 109, 108, 32, 99, 111, 110, 116, 101, 110, 116,
					32, 97, 115, 32, 97, 110, 32, 97, 116, 116, 97, 99, 104, 101, 100, 32, 46, 104, 116,
					109, 108, 32, 102, 105, 108, 101, 46,
				},
			},
		},
	}
	testEmailFromFile(t, fp, expectedEmail)
}

func TestParseEmailJapaneseMultipartMixedIso2022jpOverBase64(t *testing.T) {
	fp := "tests/test_japanese_multipart_mixed_iso-2022-jp_over_base64.txt"
	expectedEmail := &email.Email{
		Headers: email.Headers{
			Date: time.Time(time.Date(2019, 3, 31, 22, 55, 0, 0, time.UTC)),
			Sender: &mail.Address{
				Name:    "郵便アリス",
				Address: "alice.yuubin@example.com",
			},
			From: []*mail.Address{
				&mail.Address{
					Name:    "郵便アリス",
					Address: "alice.yuubin@example.com",
				},
				&mail.Address{
					Name:    "郵便アリス",
					Address: "alice.yuubin@example.net",
				},
			},
			ReplyTo: []*mail.Address{
				&mail.Address{
					Name:    "郵便アリス",
					Address: "alice.yuubin@example.net",
				},
			},
			To: []*mail.Address{
				&mail.Address{
					Name:    "郵便ボブ",
					Address: "bob.yuubin@example.com",
				},
				&mail.Address{
					Name:    "郵便キャロル",
					Address: "carol.yuubin@example.com",
				},
			},
			Cc: []*mail.Address{
				&mail.Address{
					Name:    "郵便ダン",
					Address: "dan.yuubin@example.com",
				},
				&mail.Address{
					Name:    "郵便イーブ",
					Address: "eve.yubin@example.com",
				},
			},
			Bcc: []*mail.Address{
				&mail.Address{
					Name:    "郵便フランク",
					Address: "frank.yuubin@example.com",
				},
				&mail.Address{
					Name:    "郵便グレイス",
					Address: "grace.yubin@example.com",
				},
			},
			MessageID: "Message-Id-1@example.com",
			InReplyTo: []string{
				"Message-Id-0@example.com",
			},
			References: []string{
				"Message-Id-0@example.com",
			},
			Subject:  "📧 Test いろは歌",
			Comments: "Message Header Comment",
			Keywords: []string{
				"Keyword 1",
				"Keyword 2",
			},
			ResentDate: time.Time(time.Date(2019, 3, 31, 22, 55, 0, 0, time.UTC)),
			ResentFrom: []*mail.Address{
				&mail.Address{
					Name:    "郵便アリス",
					Address: "alice.yuubin@example.net",
				},
				&mail.Address{
					Name:    "郵便アリス",
					Address: "alice.yuubin@example.com",
				},
			},
			ResentSender: &mail.Address{
				Name:    "郵便アリス",
				Address: "alice.yuubin@example.net",
			},
			ResentTo: []*mail.Address{
				&mail.Address{
					Name:    "郵便ボブ",
					Address: "bob.yuubin@example.net",
				},
				&mail.Address{
					Name:    "郵便キャロル",
					Address: "carol.yuubin@example.net",
				},
			},
			ResentCc: []*mail.Address{
				&mail.Address{
					Name:    "郵便ダン",
					Address: "dan.yuubin@example.net",
				},
				&mail.Address{
					Name:    "郵便イーブ",
					Address: "eve.yubin@example.net",
				},
			},
			ResentBcc: []*mail.Address{
				&mail.Address{
					Name:    "郵便フランク",
					Address: "frank.yuubin@example.net",
				},
				&mail.Address{
					Name:    "郵便グレイス",
					Address: "grace.yubin@example.net",
				},
			},
			ResentMessageID: "Message-Id-1@example.net",
			ExtraHeaders: map[string][]string{
				"X-Clacks-Overhead": []string{
					"GNU Terry Pratchett",
				},
				"X-Script/function/\t !\"#$%&'()*+,-./;<=>?@[\\]^_`{|}~": []string{
					"TEST VALUE 1\t !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_` abcdefghijklmnopqrstuvwxyz{|}~",
					"TEST VALUE 2\t !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_` abcdefghijklmnopqrstuvwxyz{|}~",
				},
			},
			ContentInfo: &email.ContentInfo{
				Type: "multipart/mixed",
				TypeParams: map[string]string{
					"boundary": "MixedBoundaryString",
					"charset":  "iso-2022-jp",
				},
				Disposition:       "",
				DispositionParams: map[string]string(nil), // p0
				TransferEncoding:  "base64",
				ID:                "",
				Charset:           "iso-2022-jp",
			},
			Received: nil,
		},
		Text: "色は匂えど\n" +
			"散りぬるを\n" +
			"我が世誰ぞ\n" +
			"常ならん\n" +
			"有為の奥山\n" +
			"今日越えて\n" +
			"浅き夢見じ\n" +
			"酔いもせず。\n" +
			"\n" +
			"Iro wa nioedo / Chirinuru o / Wa ga yo tare zo / Tsune naran / Ui no okuyama / Kyo koete Asaki yume miji / Yoi mo sezu.\n" +
			"\n" +
			"とりなくこゑすゆめさませみよあけわたるひんかしをそらいろはえておきつへにほふねむれゐぬもやのうち。\n" +
			"\n" +
			"天地星空\n" +
			"山川峰谷\n" +
			"雲霧室苔\n" +
			"人犬上末\n" +
			"硫黄猿生ふ為よ\n" +
			"榎の枝を馴れ居て。\n" +
			"\n" +
			"田居に出で菜摘むわれをぞ君召すと求食り追ひゆく山城の打酔へる子ら藻葉干せよえ舟繋けぬ。",
		EnrichedText: "<bold>色は匂えど</bold>\n" +
			"<italic>散りぬるを</italic>\n" +
			"<fixed>我が世誰ぞ</fixed>\n" +
			"<underline>常ならん</underline>\n" +
			"有為の奥山\n" +
			"今日越えて\n" +
			"浅き夢見じ\n" +
			"酔いもせず。\n" +
			"\n" +
			"Iro wa nioedo / Chirinuru o / Wa ga yo tare zo / Tsune naran / Ui no okuyama / Kyo koete Asaki yume miji / Yoi mo sezu.\n" +
			"\n" +
			"とりなくこゑすゆめさませみよあけわたるひんかしをそらいろはえておきつへにほふねむれゐぬもやのうち。\n" +
			"\n" +
			"天地星空\n" +
			"山川峰谷\n" +
			"雲霧室苔\n" +
			"人犬上末\n" +
			"硫黄猿生ふ為よ\n" +
			"榎の枝を馴れ居て。\n" +
			"\n" +
			"田居に出で菜摘むわれをぞ君召すと求食り追ひゆく山城の打酔へる子ら藻葉干せよえ舟繋けぬ。",
		HTML: "<html>\n" +
			"<div dir=\"ltr\">\n" +
			"<p>色は匂えど<br />\n" +
			"散りぬるを<br />\n" +
			"我が世誰ぞ<br />\n" +
			"常ならん<br />\n" +
			"有為の奥山<br />\n" +
			"今日越えて<br />\n" +
			"浅き夢見じ<br />\n" +
			"酔いもせず。</p>\n" +
			"\n" +
			"<p>Iro wa nioedo / Chirinuru o / Wa ga yo tare zo / Tsune naran / Ui no okuyama / Kyo koete Asaki yume miji / Yoi mo sezu.</p>\n" +
			"\n" +
			"<p>とりなくこゑすゆめさませみよあけわたるひんかしをそらいろはえておきつへにほふねむれゐぬもやのうち。</p>\n" +
			"\n" +
			"<p>天地星空<br />\n" +
			"山川峰谷<br />\n" +
			"雲霧室苔<br />\n" +
			"人犬上末<br />\n" +
			"硫黄猿生ふ為よ<br />\n" +
			"榎の枝を馴れ居て。</p>\n" +
			"\n" +
			"<p>田居に出で菜摘むわれをぞ君召すと求食り追ひゆく山城の打酔へる子ら藻葉干せよえ舟繋けぬ。</p>\n" +
			"</div>\n" +
			"</html>",
		Files: []*email.File{
			&email.File{
				FileType: "",
				Name:     "inline-jpg-image-without-disposition.jpg",
				ContentInfo: &email.ContentInfo{
					Type: "image/jpeg",
					TypeParams: map[string]string{
						"name": "inline-jpg-image-without-disposition.jpg",
					},
					Disposition:       "",
					DispositionParams: map[string]string(nil), // p0
					TransferEncoding:  "base64",
					ID:                "",
					Charset:           "iso-2022-jp",
				},
				Data: []byte{
					239, 191, 189, 239, 191, 189, 239, 191, 189, 239, 191, 189, 0, 67, 0, 3, 2, 2, 2,
					2, 2, 3, 2, 2, 2, 3, 3, 3, 3, 4, 6, 4, 4, 4, 4, 4, 8, 6, 6, 5, 6, 9, 8, 10, 10, 9,
					8, 9, 9, 10, 12, 15, 12, 10, 11, 14, 11, 9, 9, 13, 17, 13, 14, 15, 16, 16, 17, 16,
					10, 12, 18, 19, 18, 16, 19, 15, 16, 16, 16, 239, 191, 189, 239, 191, 189, 0, 11,
					8, 0, 1, 0, 1, 1, 1, 17, 0, 239, 191, 189, 239, 191, 189, 0, 6, 0, 16, 16, 5, 239,
					191, 189, 239, 191, 189, 0, 8, 1, 1, 0, 0, 63, 0, 239, 191, 189, 239, 191, 189, 32,
					239, 191, 189, 239, 191, 189,
				},
			},
			&email.File{
				FileType: "inline",
				Name:     "inline-jpg-image-filename.jpg",
				ContentInfo: &email.ContentInfo{
					Type: "image/jpeg",
					TypeParams: map[string]string{
						"name": "inline-jpg-image-name.jpg",
					},
					Disposition: "inline",
					DispositionParams: map[string]string{
						"filename": "inline-jpg-image-filename.jpg",
					},
					TransferEncoding: "base64",
					ID:               "inline-jpg-image.jpg@example.com",
					Charset:          "iso-2022-jp",
				},
				Data: []byte{
					239, 191, 189, 239, 191, 189, 239, 191, 189, 239, 191, 189, 0, 67, 0, 3, 2, 2, 2,
					2, 2, 3, 2, 2, 2, 3, 3, 3, 3, 4, 6, 4, 4, 4, 4, 4, 8, 6, 6, 5, 6, 9, 8, 10, 10, 9,
					8, 9, 9, 10, 12, 15, 12, 10, 11, 14, 11, 9, 9, 13, 17, 13, 14, 15, 16, 16, 17, 16,
					10, 12, 18, 19, 18, 16, 19, 15, 16, 16, 16, 239, 191, 189, 239, 191, 189, 0, 11,
					8, 0, 1, 0, 1, 1, 1, 17, 0, 239, 191, 189, 239, 191, 189, 0, 6, 0, 16, 16, 5, 239,
					191, 189, 239, 191, 189, 0, 8, 1, 1, 0, 0, 63, 0, 239, 191, 189, 239, 191, 189, 32,
					239, 191, 189, 239, 191, 189,
				},
			},
			&email.File{
				FileType: "attachment",
				Name:     "attached-pdf-filename.pdf",
				ContentInfo: &email.ContentInfo{
					Type: "application/pdf",
					TypeParams: map[string]string{
						"name": "attached-pdf-name.pdf",
					},
					Disposition: "attachment",
					DispositionParams: map[string]string{
						"filename": "attached-pdf-filename.pdf",
					},
					TransferEncoding: "base64",
					ID:               "",
					Charset:          "iso-2022-jp",
				},
				Data: []byte{
					37, 80, 68, 70, 45, 49, 46, 13, 116, 114, 97, 105, 108, 101, 114, 60, 60, 47, 82,
					111, 111, 116, 60, 60, 47, 80, 97, 103, 101, 115, 60, 60, 47, 75, 105, 100, 115,
					91, 60, 60, 47, 77, 101, 100, 105, 97, 66, 111, 120, 91, 48, 32, 48, 32, 51, 32,
					51, 93, 62, 62, 93, 62, 62, 62, 62, 62, 62,
				},
			},
			&email.File{
				FileType: "",
				Name:     "attached-pdf-without-disposition.pdf",
				ContentInfo: &email.ContentInfo{
					Type: "application/pdf",
					TypeParams: map[string]string{
						"name": "attached-pdf-without-disposition.pdf",
					},
					Disposition:       "",
					DispositionParams: map[string]string(nil), // p0
					TransferEncoding:  "base64",
					ID:                "",
					Charset:           "iso-2022-jp",
				},
				Data: []byte{
					37, 80, 68, 70, 45, 49, 46, 13, 116, 114, 97, 105, 108, 101, 114, 60, 60, 47, 82,
					111, 111, 116, 60, 60, 47, 80, 97, 103, 101, 115, 60, 60, 47, 75, 105, 100, 115,
					91, 60, 60, 47, 77, 101, 100, 105, 97, 66, 111, 120, 91, 48, 32, 48, 32, 51, 32,
					51, 93, 62, 62, 93, 62, 62, 62, 62, 62, 62,
				},
			},
			&email.File{
				FileType: "attachment",
				Name:     "attached-json-filename.json",
				ContentInfo: &email.ContentInfo{
					Type: "application/json",
					TypeParams: map[string]string{
						"name": "attached-json-name.json",
					},
					Disposition: "attachment",
					DispositionParams: map[string]string{
						"filename": "attached-json-filename.json",
					},
					TransferEncoding: "7bit",
					ID:               "",
					Charset:          "iso-2022-jp",
				},
				Data: []byte{
					123, 34, 102, 111, 111, 34, 58, 34, 98, 97, 114, 34, 125,
				},
			},
			&email.File{
				FileType: "attachment",
				Name:     "attached-text-plain-filename.txt",
				ContentInfo: &email.ContentInfo{
					Type: "text/plain",
					TypeParams: map[string]string{
						"name": "attached-text-plain-name.txt",
					},
					Disposition: "attachment",
					DispositionParams: map[string]string{
						"filename": "attached-text-plain-filename.txt",
					},
					TransferEncoding: "base64",
					ID:               "",
					Charset:          "iso-2022-jp",
				},
				Data: []byte{
					84, 101, 120, 116, 47, 112, 108, 97, 105, 110, 32, 99, 111, 110, 116, 101, 110, 116,
					32, 97, 115, 32, 97, 110, 32, 97, 116, 116, 97, 99, 104, 101, 100, 32, 46, 116, 120,
					116, 32, 102, 105, 108, 101, 46,
				},
			},
			&email.File{
				FileType: "attachment",
				Name:     "attached-text-html-filename.html",
				ContentInfo: &email.ContentInfo{
					Type: "text/html",
					TypeParams: map[string]string{
						"name": "attached-text-html-name.html",
					},
					Disposition: "attachment",
					DispositionParams: map[string]string{
						"filename": "attached-text-html-filename.html",
					},
					TransferEncoding: "base64",
					ID:               "",
					Charset:          "iso-2022-jp",
				},
				Data: []byte{
					84, 101, 120, 116, 47, 104, 116, 109, 108, 32, 99, 111, 110, 116, 101, 110, 116,
					32, 97, 115, 32, 97, 110, 32, 97, 116, 116, 97, 99, 104, 101, 100, 32, 46, 104, 116,
					109, 108, 32, 102, 105, 108, 101, 46,
				},
			},
		},
	}
	testEmailFromFile(t, fp, expectedEmail)
}

func TestParseEmailJapaneseMultipartMixedIso2022jpOverQuotedprintable(t *testing.T) {
	fp := "tests/test_japanese_multipart_mixed_iso-2022-jp_over_quoted-printable.txt"
	expectedEmail := &email.Email{
		Headers: email.Headers{
			Date: time.Time(time.Date(2019, 3, 31, 22, 55, 0, 0, time.UTC)),
			Sender: &mail.Address{
				Name:    "郵便アリス",
				Address: "alice.yuubin@example.com",
			},
			From: []*mail.Address{
				&mail.Address{
					Name:    "郵便アリス",
					Address: "alice.yuubin@example.com",
				},
				&mail.Address{
					Name:    "郵便アリス",
					Address: "alice.yuubin@example.net",
				},
			},
			ReplyTo: []*mail.Address{
				&mail.Address{
					Name:    "郵便アリス",
					Address: "alice.yuubin@example.net",
				},
			},
			To: []*mail.Address{
				&mail.Address{
					Name:    "郵便ボブ",
					Address: "bob.yuubin@example.com",
				},
				&mail.Address{
					Name:    "郵便キャロル",
					Address: "carol.yuubin@example.com",
				},
			},
			Cc: []*mail.Address{
				&mail.Address{
					Name:    "郵便ダン",
					Address: "dan.yuubin@example.com",
				},
				&mail.Address{
					Name:    "郵便イーブ",
					Address: "eve.yubin@example.com",
				},
			},
			Bcc: []*mail.Address{
				&mail.Address{
					Name:    "郵便フランク",
					Address: "frank.yuubin@example.com",
				},
				&mail.Address{
					Name:    "郵便グレイス",
					Address: "grace.yubin@example.com",
				},
			},
			MessageID: "Message-Id-1@example.com",
			InReplyTo: []string{
				"Message-Id-0@example.com",
			},
			References: []string{
				"Message-Id-0@example.com",
			},
			Subject:  "📧 Test いろは歌",
			Comments: "Message Header Comment",
			Keywords: []string{
				"Keyword 1",
				"Keyword 2",
			},
			ResentDate: time.Time(time.Date(2019, 3, 31, 22, 55, 0, 0, time.UTC)),
			ResentFrom: []*mail.Address{
				&mail.Address{
					Name:    "郵便アリス",
					Address: "alice.yuubin@example.net",
				},
				&mail.Address{
					Name:    "郵便アリス",
					Address: "alice.yuubin@example.com",
				},
			},
			ResentSender: &mail.Address{
				Name:    "郵便アリス",
				Address: "alice.yuubin@example.net",
			},
			ResentTo: []*mail.Address{
				&mail.Address{
					Name:    "郵便ボブ",
					Address: "bob.yuubin@example.net",
				},
				&mail.Address{
					Name:    "郵便キャロル",
					Address: "carol.yuubin@example.net",
				},
			},
			ResentCc: []*mail.Address{
				&mail.Address{
					Name:    "郵便ダン",
					Address: "dan.yuubin@example.net",
				},
				&mail.Address{
					Name:    "郵便イーブ",
					Address: "eve.yubin@example.net",
				},
			},
			ResentBcc: []*mail.Address{
				&mail.Address{
					Name:    "郵便フランク",
					Address: "frank.yuubin@example.net",
				},
				&mail.Address{
					Name:    "郵便グレイス",
					Address: "grace.yubin@example.net",
				},
			},
			ResentMessageID: "Message-Id-1@example.net",
			ExtraHeaders: map[string][]string{
				"X-Clacks-Overhead": []string{
					"GNU Terry Pratchett",
				},
				"X-Script/function/\t !\"#$%&'()*+,-./;<=>?@[\\]^_`{|}~": []string{
					"TEST VALUE 1\t !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_` abcdefghijklmnopqrstuvwxyz{|}~",
					"TEST VALUE 2\t !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_` abcdefghijklmnopqrstuvwxyz{|}~",
				},
			},
			ContentInfo: &email.ContentInfo{
				Type: "multipart/mixed",
				TypeParams: map[string]string{
					"boundary": "MixedBoundaryString",
					"charset":  "iso-2022-jp",
				},
				Disposition:       "",
				DispositionParams: map[string]string(nil), // p0
				TransferEncoding:  "quoted-printable",
				ID:                "",
				Charset:           "iso-2022-jp",
			},
			Received: nil,
		},
		Text: "色は匂えど\n" +
			"散りぬるを\n" +
			"我が世誰ぞ\n" +
			"常ならん\n" +
			"有為の奥山\n" +
			"今日越えて\n" +
			"浅き夢見じ\n" +
			"酔いもせず。\n" +
			"\n" +
			"Iro wa nioedo / Chirinuru o / Wa ga yo tare zo / Tsune naran / Ui no okuyama / Kyo koete Asaki yume miji / Yoi mo sezu.\n" +
			"\n" +
			"とりなくこゑすゆめさませみよあけわたるひんかしをそらいろはえておきつへにほふねむれゐぬもやのうち。\n" +
			"\n" +
			"天地星空\n" +
			"山川峰谷\n" +
			"雲霧室苔\n" +
			"人犬上末\n" +
			"硫黄猿生ふ為よ\n" +
			"榎の枝を馴れ居て。\n" +
			"\n" +
			"田居に出で菜摘むわれをぞ君召すと求食り追ひゆく山城の打酔へる子ら藻葉干せよえ舟繋けぬ。",
		EnrichedText: "<bold>色は匂えど</bold>\n" +
			"<italic>散りぬるを</italic>\n" +
			"<fixed>我が世誰ぞ</fixed>\n" +
			"<underline>常ならん</underline>\n" +
			"有為の奥山\n" +
			"今日越えて\n" +
			"浅き夢見じ\n" +
			"酔いもせず。\n" +
			"\n" +
			"Iro wa nioedo / Chirinuru o / Wa ga yo tare zo / Tsune naran / Ui no okuyama / Kyo koete Asaki yume miji / Yoi mo sezu.\n" +
			"\n" +
			"とりなくこゑすゆめさませみよあけわたるひんかしをそらいろはえておきつへにほふねむれゐぬもやのうち。\n" +
			"\n" +
			"天地星空\n" +
			"山川峰谷\n" +
			"雲霧室苔\n" +
			"人犬上末\n" +
			"硫黄猿生ふ為よ\n" +
			"榎の枝を馴れ居て。\n" +
			"\n" +
			"田居に出で菜摘むわれをぞ君召すと求食り追ひゆく山城の打酔へる子ら藻葉干せよえ舟繋けぬ。",
		HTML: "<html>\n" +
			"<div dir=\"ltr\">\n" +
			"<p>色は匂えど<br />\n" +
			"散りぬるを<br />\n" +
			"我が世誰ぞ<br />\n" +
			"常ならん<br />\n" +
			"有為の奥山<br />\n" +
			"今日越えて<br />\n" +
			"浅き夢見じ<br />\n" +
			"酔いもせず。</p>\n" +
			"\n" +
			"<p>Iro wa nioedo / Chirinuru o / Wa ga yo tare zo / Tsune naran / Ui no okuyama / Kyo koete Asaki yume miji / Yoi mo sezu.</p>\n" +
			"\n" +
			"<p>とりなくこゑすゆめさませみよあけわたるひんかしをそらいろはえておきつへにほふねむれゐぬもやのうち。</p>\n" +
			"\n" +
			"<p>天地星空<br />\n" +
			"山川峰谷<br />\n" +
			"雲霧室苔<br />\n" +
			"人犬上末<br />\n" +
			"硫黄猿生ふ為よ<br />\n" +
			"榎の枝を馴れ居て。</p>\n" +
			"\n" +
			"<p>田居に出で菜摘むわれをぞ君召すと求食り追ひゆく山城の打酔へる子ら藻葉干せよえ舟繋けぬ。</p>\n" +
			"</div>\n" +
			"</html>",
		Files: []*email.File{
			&email.File{
				FileType: "",
				Name:     "inline-jpg-image-without-disposition.jpg",
				ContentInfo: &email.ContentInfo{
					Type: "image/jpeg",
					TypeParams: map[string]string{
						"name": "inline-jpg-image-without-disposition.jpg",
					},
					Disposition:       "",
					DispositionParams: map[string]string(nil), // p0
					TransferEncoding:  "base64",
					ID:                "",
					Charset:           "iso-2022-jp",
				},
				Data: []byte{
					239, 191, 189, 239, 191, 189, 239, 191, 189, 239, 191, 189, 0, 67, 0, 3, 2, 2, 2,
					2, 2, 3, 2, 2, 2, 3, 3, 3, 3, 4, 6, 4, 4, 4, 4, 4, 8, 6, 6, 5, 6, 9, 8, 10, 10, 9,
					8, 9, 9, 10, 12, 15, 12, 10, 11, 14, 11, 9, 9, 13, 17, 13, 14, 15, 16, 16, 17, 16,
					10, 12, 18, 19, 18, 16, 19, 15, 16, 16, 16, 239, 191, 189, 239, 191, 189, 0, 11,
					8, 0, 1, 0, 1, 1, 1, 17, 0, 239, 191, 189, 239, 191, 189, 0, 6, 0, 16, 16, 5, 239,
					191, 189, 239, 191, 189, 0, 8, 1, 1, 0, 0, 63, 0, 239, 191, 189, 239, 191, 189, 32,
					239, 191, 189, 239, 191, 189,
				},
			},
			&email.File{
				FileType: "inline",
				Name:     "inline-jpg-image-filename.jpg",
				ContentInfo: &email.ContentInfo{
					Type: "image/jpeg",
					TypeParams: map[string]string{
						"name": "inline-jpg-image-name.jpg",
					},
					Disposition: "inline",
					DispositionParams: map[string]string{
						"filename": "inline-jpg-image-filename.jpg",
					},
					TransferEncoding: "base64",
					ID:               "inline-jpg-image.jpg@example.com",
					Charset:          "iso-2022-jp",
				},
				Data: []byte{
					239, 191, 189, 239, 191, 189, 239, 191, 189, 239, 191, 189, 0, 67, 0, 3, 2, 2, 2,
					2, 2, 3, 2, 2, 2, 3, 3, 3, 3, 4, 6, 4, 4, 4, 4, 4, 8, 6, 6, 5, 6, 9, 8, 10, 10, 9,
					8, 9, 9, 10, 12, 15, 12, 10, 11, 14, 11, 9, 9, 13, 17, 13, 14, 15, 16, 16, 17, 16,
					10, 12, 18, 19, 18, 16, 19, 15, 16, 16, 16, 239, 191, 189, 239, 191, 189, 0, 11,
					8, 0, 1, 0, 1, 1, 1, 17, 0, 239, 191, 189, 239, 191, 189, 0, 6, 0, 16, 16, 5, 239,
					191, 189, 239, 191, 189, 0, 8, 1, 1, 0, 0, 63, 0, 239, 191, 189, 239, 191, 189, 32,
					239, 191, 189, 239, 191, 189,
				},
			},
			&email.File{
				FileType: "attachment",
				Name:     "attached-pdf-filename.pdf",
				ContentInfo: &email.ContentInfo{
					Type: "application/pdf",
					TypeParams: map[string]string{
						"name": "attached-pdf-name.pdf",
					},
					Disposition: "attachment",
					DispositionParams: map[string]string{
						"filename": "attached-pdf-filename.pdf",
					},
					TransferEncoding: "base64",
					ID:               "",
					Charset:          "iso-2022-jp",
				},
				Data: []byte{
					37, 80, 68, 70, 45, 49, 46, 13, 116, 114, 97, 105, 108, 101, 114, 60, 60, 47, 82,
					111, 111, 116, 60, 60, 47, 80, 97, 103, 101, 115, 60, 60, 47, 75, 105, 100, 115,
					91, 60, 60, 47, 77, 101, 100, 105, 97, 66, 111, 120, 91, 48, 32, 48, 32, 51, 32,
					51, 93, 62, 62, 93, 62, 62, 62, 62, 62, 62,
				},
			},
			&email.File{
				FileType: "",
				Name:     "attached-pdf-without-disposition.pdf",
				ContentInfo: &email.ContentInfo{
					Type: "application/pdf",
					TypeParams: map[string]string{
						"name": "attached-pdf-without-disposition.pdf",
					},
					Disposition:       "",
					DispositionParams: map[string]string(nil), // p0
					TransferEncoding:  "base64",
					ID:                "",
					Charset:           "iso-2022-jp",
				},
				Data: []byte{
					37, 80, 68, 70, 45, 49, 46, 13, 116, 114, 97, 105, 108, 101, 114, 60, 60, 47, 82,
					111, 111, 116, 60, 60, 47, 80, 97, 103, 101, 115, 60, 60, 47, 75, 105, 100, 115,
					91, 60, 60, 47, 77, 101, 100, 105, 97, 66, 111, 120, 91, 48, 32, 48, 32, 51, 32,
					51, 93, 62, 62, 93, 62, 62, 62, 62, 62, 62,
				},
			},
			&email.File{
				FileType: "attachment",
				Name:     "attached-json-filename.json",
				ContentInfo: &email.ContentInfo{
					Type: "application/json",
					TypeParams: map[string]string{
						"name": "attached-json-name.json",
					},
					Disposition: "attachment",
					DispositionParams: map[string]string{
						"filename": "attached-json-filename.json",
					},
					TransferEncoding: "7bit",
					ID:               "",
					Charset:          "iso-2022-jp",
				},
				Data: []byte{
					123, 34, 102, 111, 111, 34, 58, 34, 98, 97, 114, 34, 125,
				},
			},
			&email.File{
				FileType: "attachment",
				Name:     "attached-text-plain-filename.txt",
				ContentInfo: &email.ContentInfo{
					Type: "text/plain",
					TypeParams: map[string]string{
						"name": "attached-text-plain-name.txt",
					},
					Disposition: "attachment",
					DispositionParams: map[string]string{
						"filename": "attached-text-plain-filename.txt",
					},
					TransferEncoding: "base64",
					ID:               "",
					Charset:          "iso-2022-jp",
				},
				Data: []byte{
					84, 101, 120, 116, 47, 112, 108, 97, 105, 110, 32, 99, 111, 110, 116, 101, 110, 116,
					32, 97, 115, 32, 97, 110, 32, 97, 116, 116, 97, 99, 104, 101, 100, 32, 46, 116, 120,
					116, 32, 102, 105, 108, 101, 46,
				},
			},
			&email.File{
				FileType: "attachment",
				Name:     "attached-text-html-filename.html",
				ContentInfo: &email.ContentInfo{
					Type: "text/html",
					TypeParams: map[string]string{
						"name": "attached-text-html-name.html",
					},
					Disposition: "attachment",
					DispositionParams: map[string]string{
						"filename": "attached-text-html-filename.html",
					},
					TransferEncoding: "base64",
					ID:               "",
					Charset:          "iso-2022-jp",
				},
				Data: []byte{
					84, 101, 120, 116, 47, 104, 116, 109, 108, 32, 99, 111, 110, 116, 101, 110, 116,
					32, 97, 115, 32, 97, 110, 32, 97, 116, 116, 97, 99, 104, 101, 100, 32, 46, 104, 116,
					109, 108, 32, 102, 105, 108, 101, 46,
				},
			},
		},
	}
	testEmailFromFile(t, fp, expectedEmail)
}

func TestParseEmailJapaneseMultipartMixedEucjpOverBase64(t *testing.T) {
	fp := "tests/test_japanese_multipart_mixed_euc-jp_over_base64.txt"
	expectedEmail := &email.Email{
		Headers: email.Headers{
			Date: time.Time(time.Date(2019, 3, 31, 22, 55, 0, 0, time.UTC)),
			Sender: &mail.Address{
				Name:    "郵便アリス",
				Address: "alice.yuubin@example.com",
			},
			From: []*mail.Address{
				&mail.Address{
					Name:    "郵便アリス",
					Address: "alice.yuubin@example.com",
				},
				&mail.Address{
					Name:    "郵便アリス",
					Address: "alice.yuubin@example.net",
				},
			},
			ReplyTo: []*mail.Address{
				&mail.Address{
					Name:    "郵便アリス",
					Address: "alice.yuubin@example.net",
				},
			},
			To: []*mail.Address{
				&mail.Address{
					Name:    "郵便ボブ",
					Address: "bob.yuubin@example.com",
				},
				&mail.Address{
					Name:    "郵便キャロル",
					Address: "carol.yuubin@example.com",
				},
			},
			Cc: []*mail.Address{
				&mail.Address{
					Name:    "郵便ダン",
					Address: "dan.yuubin@example.com",
				},
				&mail.Address{
					Name:    "郵便イーブ",
					Address: "eve.yubin@example.com",
				},
			},
			Bcc: []*mail.Address{
				&mail.Address{
					Name:    "郵便フランク",
					Address: "frank.yuubin@example.com",
				},
				&mail.Address{
					Name:    "郵便グレイス",
					Address: "grace.yubin@example.com",
				},
			},
			MessageID: "Message-Id-1@example.com",
			InReplyTo: []string{
				"Message-Id-0@example.com",
			},
			References: []string{
				"Message-Id-0@example.com",
			},
			Subject:  "📧 Test いろは歌",
			Comments: "Message Header Comment",
			Keywords: []string{
				"Keyword 1",
				"Keyword 2",
			},
			ResentDate: time.Time(time.Date(2019, 3, 31, 22, 55, 0, 0, time.UTC)),
			ResentFrom: []*mail.Address{
				&mail.Address{
					Name:    "郵便アリス",
					Address: "alice.yuubin@example.net",
				},
				&mail.Address{
					Name:    "郵便アリス",
					Address: "alice.yuubin@example.com",
				},
			},
			ResentSender: &mail.Address{
				Name:    "郵便アリス",
				Address: "alice.yuubin@example.net",
			},
			ResentTo: []*mail.Address{
				&mail.Address{
					Name:    "郵便ボブ",
					Address: "bob.yuubin@example.net",
				},
				&mail.Address{
					Name:    "郵便キャロル",
					Address: "carol.yuubin@example.net",
				},
			},
			ResentCc: []*mail.Address{
				&mail.Address{
					Name:    "郵便ダン",
					Address: "dan.yuubin@example.net",
				},
				&mail.Address{
					Name:    "郵便イーブ",
					Address: "eve.yubin@example.net",
				},
			},
			ResentBcc: []*mail.Address{
				&mail.Address{
					Name:    "郵便フランク",
					Address: "frank.yuubin@example.net",
				},
				&mail.Address{
					Name:    "郵便グレイス",
					Address: "grace.yubin@example.net",
				},
			},
			ResentMessageID: "Message-Id-1@example.net",
			ExtraHeaders: map[string][]string{
				"X-Clacks-Overhead": []string{
					"GNU Terry Pratchett",
				},
				"X-Script/function/\t !\"#$%&'()*+,-./;<=>?@[\\]^_`{|}~": []string{
					"TEST VALUE 1\t !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_` abcdefghijklmnopqrstuvwxyz{|}~",
					"TEST VALUE 2\t !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_` abcdefghijklmnopqrstuvwxyz{|}~",
				},
			},
			ContentInfo: &email.ContentInfo{
				Type: "multipart/mixed",
				TypeParams: map[string]string{
					"boundary": "MixedBoundaryString",
					"charset":  "euc-jp",
				},
				Disposition:       "",
				DispositionParams: map[string]string(nil), // p0
				TransferEncoding:  "base64",
				ID:                "",
				Charset:           "euc-jp",
			},
			Received: nil,
		},
		Text: "色は匂えど\n" +
			"散りぬるを\n" +
			"我が世誰ぞ\n" +
			"常ならん\n" +
			"有為の奥山\n" +
			"今日越えて\n" +
			"浅き夢見じ\n" +
			"酔いもせず。\n" +
			"\n" +
			"Iro wa nioedo / Chirinuru o / Wa ga yo tare zo / Tsune naran / Ui no okuyama / Kyo koete Asaki yume miji / Yoi mo sezu.\n" +
			"\n" +
			"とりなくこゑすゆめさませみよあけわたるひんかしをそらいろはえておきつへにほふねむれゐぬもやのうち。\n" +
			"\n" +
			"天地星空\n" +
			"山川峰谷\n" +
			"雲霧室苔\n" +
			"人犬上末\n" +
			"硫黄猿生ふ為よ\n" +
			"榎の枝を馴れ居て。\n" +
			"\n" +
			"田居に出で菜摘むわれをぞ君召すと求食り追ひゆく山城の打酔へる子ら藻葉干せよえ舟繋けぬ。",
		EnrichedText: "<bold>色は匂えど</bold>\n" +
			"<italic>散りぬるを</italic>\n" +
			"<fixed>我が世誰ぞ</fixed>\n" +
			"<underline>常ならん</underline>\n" +
			"有為の奥山\n" +
			"今日越えて\n" +
			"浅き夢見じ\n" +
			"酔いもせず。\n" +
			"\n" +
			"Iro wa nioedo / Chirinuru o / Wa ga yo tare zo / Tsune naran / Ui no okuyama / Kyo koete Asaki yume miji / Yoi mo sezu.\n" +
			"\n" +
			"とりなくこゑすゆめさませみよあけわたるひんかしをそらいろはえておきつへにほふねむれゐぬもやのうち。\n" +
			"\n" +
			"天地星空\n" +
			"山川峰谷\n" +
			"雲霧室苔\n" +
			"人犬上末\n" +
			"硫黄猿生ふ為よ\n" +
			"榎の枝を馴れ居て。\n" +
			"\n" +
			"田居に出で菜摘むわれをぞ君召すと求食り追ひゆく山城の打酔へる子ら藻葉干せよえ舟繋けぬ。",
		HTML: "<html>\n" +
			"<div dir=\"ltr\">\n" +
			"<p>色は匂えど<br />\n" +
			"散りぬるを<br />\n" +
			"我が世誰ぞ<br />\n" +
			"常ならん<br />\n" +
			"有為の奥山<br />\n" +
			"今日越えて<br />\n" +
			"浅き夢見じ<br />\n" +
			"酔いもせず。</p>\n" +
			"\n" +
			"<p>Iro wa nioedo / Chirinuru o / Wa ga yo tare zo / Tsune naran / Ui no okuyama / Kyo koete Asaki yume miji / Yoi mo sezu.</p>\n" +
			"\n" +
			"<p>とりなくこゑすゆめさませみよあけわたるひんかしをそらいろはえておきつへにほふねむれゐぬもやのうち。</p>\n" +
			"\n" +
			"<p>天地星空<br />\n" +
			"山川峰谷<br />\n" +
			"雲霧室苔<br />\n" +
			"人犬上末<br />\n" +
			"硫黄猿生ふ為よ<br />\n" +
			"榎の枝を馴れ居て。</p>\n" +
			"\n" +
			"<p>田居に出で菜摘むわれをぞ君召すと求食り追ひゆく山城の打酔へる子ら藻葉干せよえ舟繋けぬ。</p>\n" +
			"</div>\n" +
			"</html>",
		Files: []*email.File{
			&email.File{
				FileType: "",
				Name:     "inline-jpg-image-without-disposition.jpg",
				ContentInfo: &email.ContentInfo{
					Type: "image/jpeg",
					TypeParams: map[string]string{
						"name": "inline-jpg-image-without-disposition.jpg",
					},
					Disposition:       "",
					DispositionParams: map[string]string(nil), // p0
					TransferEncoding:  "base64",
					ID:                "",
					Charset:           "euc-jp",
				},
				Data: []byte{
					239, 191, 189, 239, 191, 189, 239, 191, 189, 239, 191, 189, 0, 67, 0, 3, 2, 2, 2,
					2, 2, 3, 2, 2, 2, 3, 3, 3, 3, 4, 6, 4, 4, 4, 4, 4, 8, 6, 6, 5, 6, 9, 8, 10, 10, 9,
					8, 9, 9, 10, 12, 15, 12, 10, 11, 14, 11, 9, 9, 13, 17, 13, 14, 15, 16, 16, 17, 16,
					10, 12, 18, 19, 18, 16, 19, 15, 16, 16, 16, 239, 191, 189, 239, 191, 189, 0, 11,
					8, 0, 1, 0, 1, 1, 1, 17, 0, 239, 191, 189, 239, 191, 189, 0, 6, 0, 16, 16, 5, 239,
					191, 189, 239, 191, 189, 0, 8, 1, 1, 0, 0, 63, 0, 229, 142, 166, 32, 239, 191, 189,
					239, 191, 189,
				},
			},
			&email.File{
				FileType: "inline",
				Name:     "inline-jpg-image-filename.jpg",
				ContentInfo: &email.ContentInfo{
					Type: "image/jpeg",
					TypeParams: map[string]string{
						"name": "inline-jpg-image-name.jpg",
					},
					Disposition: "inline",
					DispositionParams: map[string]string{
						"filename": "inline-jpg-image-filename.jpg",
					},
					TransferEncoding: "base64",
					ID:               "inline-jpg-image.jpg@example.com",
					Charset:          "euc-jp",
				},
				Data: []byte{
					239, 191, 189, 239, 191, 189, 239, 191, 189, 239, 191, 189, 0, 67, 0, 3, 2, 2, 2,
					2, 2, 3, 2, 2, 2, 3, 3, 3, 3, 4, 6, 4, 4, 4, 4, 4, 8, 6, 6, 5, 6, 9, 8, 10, 10, 9,
					8, 9, 9, 10, 12, 15, 12, 10, 11, 14, 11, 9, 9, 13, 17, 13, 14, 15, 16, 16, 17, 16,
					10, 12, 18, 19, 18, 16, 19, 15, 16, 16, 16, 239, 191, 189, 239, 191, 189, 0, 11,
					8, 0, 1, 0, 1, 1, 1, 17, 0, 239, 191, 189, 239, 191, 189, 0, 6, 0, 16, 16, 5, 239,
					191, 189, 239, 191, 189, 0, 8, 1, 1, 0, 0, 63, 0, 229, 142, 166, 32, 239, 191, 189,
					239, 191, 189,
				},
			},
			&email.File{
				FileType: "attachment",
				Name:     "attached-pdf-filename.pdf",
				ContentInfo: &email.ContentInfo{
					Type: "application/pdf",
					TypeParams: map[string]string{
						"name": "attached-pdf-name.pdf",
					},
					Disposition: "attachment",
					DispositionParams: map[string]string{
						"filename": "attached-pdf-filename.pdf",
					},
					TransferEncoding: "base64",
					ID:               "",
					Charset:          "euc-jp",
				},
				Data: []byte{
					37, 80, 68, 70, 45, 49, 46, 13, 116, 114, 97, 105, 108, 101, 114, 60, 60, 47, 82,
					111, 111, 116, 60, 60, 47, 80, 97, 103, 101, 115, 60, 60, 47, 75, 105, 100, 115,
					91, 60, 60, 47, 77, 101, 100, 105, 97, 66, 111, 120, 91, 48, 32, 48, 32, 51, 32,
					51, 93, 62, 62, 93, 62, 62, 62, 62, 62, 62,
				},
			},
			&email.File{
				FileType: "",
				Name:     "attached-pdf-without-disposition.pdf",
				ContentInfo: &email.ContentInfo{
					Type: "application/pdf",
					TypeParams: map[string]string{
						"name": "attached-pdf-without-disposition.pdf",
					},
					Disposition:       "",
					DispositionParams: map[string]string(nil), // p0
					TransferEncoding:  "base64",
					ID:                "",
					Charset:           "euc-jp",
				},
				Data: []byte{
					37, 80, 68, 70, 45, 49, 46, 13, 116, 114, 97, 105, 108, 101, 114, 60, 60, 47, 82,
					111, 111, 116, 60, 60, 47, 80, 97, 103, 101, 115, 60, 60, 47, 75, 105, 100, 115,
					91, 60, 60, 47, 77, 101, 100, 105, 97, 66, 111, 120, 91, 48, 32, 48, 32, 51, 32,
					51, 93, 62, 62, 93, 62, 62, 62, 62, 62, 62,
				},
			},
			&email.File{
				FileType: "attachment",
				Name:     "attached-json-filename.json",
				ContentInfo: &email.ContentInfo{
					Type: "application/json",
					TypeParams: map[string]string{
						"name": "attached-json-name.json",
					},
					Disposition: "attachment",
					DispositionParams: map[string]string{
						"filename": "attached-json-filename.json",
					},
					TransferEncoding: "7bit",
					ID:               "",
					Charset:          "euc-jp",
				},
				Data: []byte{
					123, 34, 102, 111, 111, 34, 58, 34, 98, 97, 114, 34, 125,
				},
			},
			&email.File{
				FileType: "attachment",
				Name:     "attached-text-plain-filename.txt",
				ContentInfo: &email.ContentInfo{
					Type: "text/plain",
					TypeParams: map[string]string{
						"name": "attached-text-plain-name.txt",
					},
					Disposition: "attachment",
					DispositionParams: map[string]string{
						"filename": "attached-text-plain-filename.txt",
					},
					TransferEncoding: "base64",
					ID:               "",
					Charset:          "euc-jp",
				},
				Data: []byte{
					84, 101, 120, 116, 47, 112, 108, 97, 105, 110, 32, 99, 111, 110, 116, 101, 110, 116,
					32, 97, 115, 32, 97, 110, 32, 97, 116, 116, 97, 99, 104, 101, 100, 32, 46, 116, 120,
					116, 32, 102, 105, 108, 101, 46,
				},
			},
			&email.File{
				FileType: "attachment",
				Name:     "attached-text-html-filename.html",
				ContentInfo: &email.ContentInfo{
					Type: "text/html",
					TypeParams: map[string]string{
						"name": "attached-text-html-name.html",
					},
					Disposition: "attachment",
					DispositionParams: map[string]string{
						"filename": "attached-text-html-filename.html",
					},
					TransferEncoding: "base64",
					ID:               "",
					Charset:          "euc-jp",
				},
				Data: []byte{
					84, 101, 120, 116, 47, 104, 116, 109, 108, 32, 99, 111, 110, 116, 101, 110, 116,
					32, 97, 115, 32, 97, 110, 32, 97, 116, 116, 97, 99, 104, 101, 100, 32, 46, 104, 116,
					109, 108, 32, 102, 105, 108, 101, 46,
				},
			},
		},
	}
	testEmailFromFile(t, fp, expectedEmail)
}

func TestParseEmailJapaneseMultipartMixedEucjpOverQuotedprintable(t *testing.T) {
	fp := "tests/test_japanese_multipart_mixed_euc-jp_over_quoted-printable.txt"
	expectedEmail := &email.Email{
		Headers: email.Headers{
			Date: time.Time(time.Date(2019, 3, 31, 22, 55, 0, 0, time.UTC)),
			Sender: &mail.Address{
				Name:    "郵便アリス",
				Address: "alice.yuubin@example.com",
			},
			From: []*mail.Address{
				&mail.Address{
					Name:    "郵便アリス",
					Address: "alice.yuubin@example.com",
				},
				&mail.Address{
					Name:    "郵便アリス",
					Address: "alice.yuubin@example.net",
				},
			},
			ReplyTo: []*mail.Address{
				&mail.Address{
					Name:    "郵便アリス",
					Address: "alice.yuubin@example.net",
				},
			},
			To: []*mail.Address{
				&mail.Address{
					Name:    "郵便ボブ",
					Address: "bob.yuubin@example.com",
				},
				&mail.Address{
					Name:    "郵便キャロル",
					Address: "carol.yuubin@example.com",
				},
			},
			Cc: []*mail.Address{
				&mail.Address{
					Name:    "郵便ダン",
					Address: "dan.yuubin@example.com",
				},
				&mail.Address{
					Name:    "郵便イーブ",
					Address: "eve.yubin@example.com",
				},
			},
			Bcc: []*mail.Address{
				&mail.Address{
					Name:    "郵便フランク",
					Address: "frank.yuubin@example.com",
				},
				&mail.Address{
					Name:    "郵便グレイス",
					Address: "grace.yubin@example.com",
				},
			},
			MessageID: "Message-Id-1@example.com",
			InReplyTo: []string{
				"Message-Id-0@example.com",
			},
			References: []string{
				"Message-Id-0@example.com",
			},
			Subject:  "📧 Test いろは歌",
			Comments: "Message Header Comment",
			Keywords: []string{
				"Keyword 1",
				"Keyword 2",
			},
			ResentDate: time.Time(time.Date(2019, 3, 31, 22, 55, 0, 0, time.UTC)),
			ResentFrom: []*mail.Address{
				&mail.Address{
					Name:    "郵便アリス",
					Address: "alice.yuubin@example.net",
				},
				&mail.Address{
					Name:    "郵便アリス",
					Address: "alice.yuubin@example.com",
				},
			},
			ResentSender: &mail.Address{
				Name:    "郵便アリス",
				Address: "alice.yuubin@example.net",
			},
			ResentTo: []*mail.Address{
				&mail.Address{
					Name:    "郵便ボブ",
					Address: "bob.yuubin@example.net",
				},
				&mail.Address{
					Name:    "郵便キャロル",
					Address: "carol.yuubin@example.net",
				},
			},
			ResentCc: []*mail.Address{
				&mail.Address{
					Name:    "郵便ダン",
					Address: "dan.yuubin@example.net",
				},
				&mail.Address{
					Name:    "郵便イーブ",
					Address: "eve.yubin@example.net",
				},
			},
			ResentBcc: []*mail.Address{
				&mail.Address{
					Name:    "郵便フランク",
					Address: "frank.yuubin@example.net",
				},
				&mail.Address{
					Name:    "郵便グレイス",
					Address: "grace.yubin@example.net",
				},
			},
			ResentMessageID: "Message-Id-1@example.net",
			ExtraHeaders: map[string][]string{
				"X-Clacks-Overhead": []string{
					"GNU Terry Pratchett",
				},
				"X-Script/function/\t !\"#$%&'()*+,-./;<=>?@[\\]^_`{|}~": []string{
					"TEST VALUE 1\t !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_` abcdefghijklmnopqrstuvwxyz{|}~",
					"TEST VALUE 2\t !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_` abcdefghijklmnopqrstuvwxyz{|}~",
				},
			},
			ContentInfo: &email.ContentInfo{
				Type: "multipart/mixed",
				TypeParams: map[string]string{
					"boundary": "MixedBoundaryString",
					"charset":  "euc-jp",
				},
				Disposition:       "",
				DispositionParams: map[string]string(nil), // p0
				TransferEncoding:  "quoted-printable",
				ID:                "",
				Charset:           "euc-jp",
			},
			Received: nil,
		},
		Text: "色は匂えど\n" +
			"散りぬるを\n" +
			"我が世誰ぞ\n" +
			"常ならん\n" +
			"有為の奥山\n" +
			"今日越えて\n" +
			"浅き夢見じ\n" +
			"酔いもせず。\n" +
			"\n" +
			"Iro wa nioedo / Chirinuru o / Wa ga yo tare zo / Tsune naran / Ui no okuyama / Kyo koete Asaki yume miji / Yoi mo sezu.\n" +
			"\n" +
			"とりなくこゑすゆめさませみよあけわたるひんかしをそらいろはえておきつへにほふねむれゐぬもやのうち。\n" +
			"\n" +
			"天地星空\n" +
			"山川峰谷\n" +
			"雲霧室苔\n" +
			"人犬上末\n" +
			"硫黄猿生ふ為よ\n" +
			"榎の枝を馴れ居て。\n" +
			"\n" +
			"田居に出で菜摘むわれをぞ君召すと求食り追ひゆく山城の打酔へる子ら藻葉干せよえ舟繋けぬ。",
		EnrichedText: "<bold>色は匂えど</bold>\n" +
			"<italic>散りぬるを</italic>\n" +
			"<fixed>我が世誰ぞ</fixed>\n" +
			"<underline>常ならん</underline>\n" +
			"有為の奥山\n" +
			"今日越えて\n" +
			"浅き夢見じ\n" +
			"酔いもせず。\n" +
			"\n" +
			"Iro wa nioedo / Chirinuru o / Wa ga yo tare zo / Tsune naran / Ui no okuyama / Kyo koete Asaki yume miji / Yoi mo sezu.\n" +
			"\n" +
			"とりなくこゑすゆめさませみよあけわたるひんかしをそらいろはえておきつへにほふねむれゐぬもやのうち。\n" +
			"\n" +
			"天地星空\n" +
			"山川峰谷\n" +
			"雲霧室苔\n" +
			"人犬上末\n" +
			"硫黄猿生ふ為よ\n" +
			"榎の枝を馴れ居て。\n" +
			"\n" +
			"田居に出で菜摘むわれをぞ君召すと求食り追ひゆく山城の打酔へる子ら藻葉干せよえ舟繋けぬ。",
		HTML: "<html>\n" +
			"<div dir=\"ltr\">\n" +
			"<p>色は匂えど<br />\n" +
			"散りぬるを<br />\n" +
			"我が世誰ぞ<br />\n" +
			"常ならん<br />\n" +
			"有為の奥山<br />\n" +
			"今日越えて<br />\n" +
			"浅き夢見じ<br />\n" +
			"酔いもせず。</p>\n" +
			"\n" +
			"<p>Iro wa nioedo / Chirinuru o / Wa ga yo tare zo / Tsune naran / Ui no okuyama / Kyo koete Asaki yume miji / Yoi mo sezu.</p>\n" +
			"\n" +
			"<p>とりなくこゑすゆめさませみよあけわたるひんかしをそらいろはえておきつへにほふねむれゐぬもやのうち。</p>\n" +
			"\n" +
			"<p>天地星空<br />\n" +
			"山川峰谷<br />\n" +
			"雲霧室苔<br />\n" +
			"人犬上末<br />\n" +
			"硫黄猿生ふ為よ<br />\n" +
			"榎の枝を馴れ居て。</p>\n" +
			"\n" +
			"<p>田居に出で菜摘むわれをぞ君召すと求食り追ひゆく山城の打酔へる子ら藻葉干せよえ舟繋けぬ。</p>\n" +
			"</div>\n" +
			"</html>",
		Files: []*email.File{
			&email.File{
				FileType: "",
				Name:     "inline-jpg-image-without-disposition.jpg",
				ContentInfo: &email.ContentInfo{
					Type: "image/jpeg",
					TypeParams: map[string]string{
						"name": "inline-jpg-image-without-disposition.jpg",
					},
					Disposition:       "",
					DispositionParams: map[string]string(nil), // p0
					TransferEncoding:  "base64",
					ID:                "",
					Charset:           "euc-jp",
				},
				Data: []byte{
					239, 191, 189, 239, 191, 189, 239, 191, 189, 239, 191, 189, 0, 67, 0, 3, 2, 2, 2,
					2, 2, 3, 2, 2, 2, 3, 3, 3, 3, 4, 6, 4, 4, 4, 4, 4, 8, 6, 6, 5, 6, 9, 8, 10, 10, 9,
					8, 9, 9, 10, 12, 15, 12, 10, 11, 14, 11, 9, 9, 13, 17, 13, 14, 15, 16, 16, 17, 16,
					10, 12, 18, 19, 18, 16, 19, 15, 16, 16, 16, 239, 191, 189, 239, 191, 189, 0, 11,
					8, 0, 1, 0, 1, 1, 1, 17, 0, 239, 191, 189, 239, 191, 189, 0, 6, 0, 16, 16, 5, 239,
					191, 189, 239, 191, 189, 0, 8, 1, 1, 0, 0, 63, 0, 229, 142, 166, 32, 239, 191, 189,
					239, 191, 189,
				},
			},
			&email.File{
				FileType: "inline",
				Name:     "inline-jpg-image-filename.jpg",
				ContentInfo: &email.ContentInfo{
					Type: "image/jpeg",
					TypeParams: map[string]string{
						"name": "inline-jpg-image-name.jpg",
					},
					Disposition: "inline",
					DispositionParams: map[string]string{
						"filename": "inline-jpg-image-filename.jpg",
					},
					TransferEncoding: "base64",
					ID:               "inline-jpg-image.jpg@example.com",
					Charset:          "euc-jp",
				},
				Data: []byte{
					239, 191, 189, 239, 191, 189, 239, 191, 189, 239, 191, 189, 0, 67, 0, 3, 2, 2, 2,
					2, 2, 3, 2, 2, 2, 3, 3, 3, 3, 4, 6, 4, 4, 4, 4, 4, 8, 6, 6, 5, 6, 9, 8, 10, 10, 9,
					8, 9, 9, 10, 12, 15, 12, 10, 11, 14, 11, 9, 9, 13, 17, 13, 14, 15, 16, 16, 17, 16,
					10, 12, 18, 19, 18, 16, 19, 15, 16, 16, 16, 239, 191, 189, 239, 191, 189, 0, 11,
					8, 0, 1, 0, 1, 1, 1, 17, 0, 239, 191, 189, 239, 191, 189, 0, 6, 0, 16, 16, 5, 239,
					191, 189, 239, 191, 189, 0, 8, 1, 1, 0, 0, 63, 0, 229, 142, 166, 32, 239, 191, 189,
					239, 191, 189,
				},
			},
			&email.File{
				FileType: "attachment",
				Name:     "attached-pdf-filename.pdf",
				ContentInfo: &email.ContentInfo{
					Type: "application/pdf",
					TypeParams: map[string]string{
						"name": "attached-pdf-name.pdf",
					},
					Disposition: "attachment",
					DispositionParams: map[string]string{
						"filename": "attached-pdf-filename.pdf",
					},
					TransferEncoding: "base64",
					ID:               "",
					Charset:          "euc-jp",
				},
				Data: []byte{
					37, 80, 68, 70, 45, 49, 46, 13, 116, 114, 97, 105, 108, 101, 114, 60, 60, 47, 82,
					111, 111, 116, 60, 60, 47, 80, 97, 103, 101, 115, 60, 60, 47, 75, 105, 100, 115,
					91, 60, 60, 47, 77, 101, 100, 105, 97, 66, 111, 120, 91, 48, 32, 48, 32, 51, 32,
					51, 93, 62, 62, 93, 62, 62, 62, 62, 62, 62,
				},
			},
			&email.File{
				FileType: "",
				Name:     "attached-pdf-without-disposition.pdf",
				ContentInfo: &email.ContentInfo{
					Type: "application/pdf",
					TypeParams: map[string]string{
						"name": "attached-pdf-without-disposition.pdf",
					},
					Disposition:       "",
					DispositionParams: map[string]string(nil), // p0
					TransferEncoding:  "base64",
					ID:                "",
					Charset:           "euc-jp",
				},
				Data: []byte{
					37, 80, 68, 70, 45, 49, 46, 13, 116, 114, 97, 105, 108, 101, 114, 60, 60, 47, 82,
					111, 111, 116, 60, 60, 47, 80, 97, 103, 101, 115, 60, 60, 47, 75, 105, 100, 115,
					91, 60, 60, 47, 77, 101, 100, 105, 97, 66, 111, 120, 91, 48, 32, 48, 32, 51, 32,
					51, 93, 62, 62, 93, 62, 62, 62, 62, 62, 62,
				},
			},
			&email.File{
				FileType: "attachment",
				Name:     "attached-json-filename.json",
				ContentInfo: &email.ContentInfo{
					Type: "application/json",
					TypeParams: map[string]string{
						"name": "attached-json-name.json",
					},
					Disposition: "attachment",
					DispositionParams: map[string]string{
						"filename": "attached-json-filename.json",
					},
					TransferEncoding: "7bit",
					ID:               "",
					Charset:          "euc-jp",
				},
				Data: []byte{
					123, 34, 102, 111, 111, 34, 58, 34, 98, 97, 114, 34, 125,
				},
			},
			&email.File{
				FileType: "attachment",
				Name:     "attached-text-plain-filename.txt",
				ContentInfo: &email.ContentInfo{
					Type: "text/plain",
					TypeParams: map[string]string{
						"name": "attached-text-plain-name.txt",
					},
					Disposition: "attachment",
					DispositionParams: map[string]string{
						"filename": "attached-text-plain-filename.txt",
					},
					TransferEncoding: "base64",
					ID:               "",
					Charset:          "euc-jp",
				},
				Data: []byte{
					84, 101, 120, 116, 47, 112, 108, 97, 105, 110, 32, 99, 111, 110, 116, 101, 110, 116,
					32, 97, 115, 32, 97, 110, 32, 97, 116, 116, 97, 99, 104, 101, 100, 32, 46, 116, 120,
					116, 32, 102, 105, 108, 101, 46,
				},
			},
			&email.File{
				FileType: "attachment",
				Name:     "attached-text-html-filename.html",
				ContentInfo: &email.ContentInfo{
					Type: "text/html",
					TypeParams: map[string]string{
						"name": "attached-text-html-name.html",
					},
					Disposition: "attachment",
					DispositionParams: map[string]string{
						"filename": "attached-text-html-filename.html",
					},
					TransferEncoding: "base64",
					ID:               "",
					Charset:          "euc-jp",
				},
				Data: []byte{
					84, 101, 120, 116, 47, 104, 116, 109, 108, 32, 99, 111, 110, 116, 101, 110, 116,
					32, 97, 115, 32, 97, 110, 32, 97, 116, 116, 97, 99, 104, 101, 100, 32, 46, 104, 116,
					109, 108, 32, 102, 105, 108, 101, 46,
				},
			},
		},
	}
	testEmailFromFile(t, fp, expectedEmail)
}

func TestParseEmailJapaneseMultipartSignedUtf8Over7bit(t *testing.T) {
	fp := "tests/test_japanese_multipart_signed_utf-8_over_7bit.txt"
	expectedEmail := &email.Email{
		Headers: email.Headers{
			Date: time.Time(time.Date(2019, 3, 31, 22, 55, 0, 0, time.UTC)),
			Sender: &mail.Address{
				Name:    "郵便アリス",
				Address: "alice.yuubin@example.com",
			},
			From: []*mail.Address{
				&mail.Address{
					Name:    "郵便アリス",
					Address: "alice.yuubin@example.com",
				},
				&mail.Address{
					Name:    "郵便アリス",
					Address: "alice.yuubin@example.net",
				},
			},
			ReplyTo: []*mail.Address{
				&mail.Address{
					Name:    "郵便アリス",
					Address: "alice.yuubin@example.net",
				},
			},
			To: []*mail.Address{
				&mail.Address{
					Name:    "郵便ボブ",
					Address: "bob.yuubin@example.com",
				},
				&mail.Address{
					Name:    "郵便キャロル",
					Address: "carol.yuubin@example.com",
				},
			},
			Cc: []*mail.Address{
				&mail.Address{
					Name:    "郵便ダン",
					Address: "dan.yuubin@example.com",
				},
				&mail.Address{
					Name:    "郵便イーブ",
					Address: "eve.yubin@example.com",
				},
			},
			Bcc: []*mail.Address{
				&mail.Address{
					Name:    "郵便フランク",
					Address: "frank.yuubin@example.com",
				},
				&mail.Address{
					Name:    "郵便グレイス",
					Address: "grace.yubin@example.com",
				},
			},
			MessageID: "Message-Id-1@example.com",
			InReplyTo: []string{
				"Message-Id-0@example.com",
			},
			References: []string{
				"Message-Id-0@example.com",
			},
			Subject:  "📧 Signed Test いろは歌",
			Comments: "Message Header Comment",
			Keywords: []string{
				"Keyword 1",
				"Keyword 2",
			},
			ResentDate: time.Time(time.Date(2019, 3, 31, 22, 55, 0, 0, time.UTC)),
			ResentFrom: []*mail.Address{
				&mail.Address{
					Name:    "郵便アリス",
					Address: "alice.yuubin@example.net",
				},
				&mail.Address{
					Name:    "郵便アリス",
					Address: "alice.yuubin@example.com",
				},
			},
			ResentSender: &mail.Address{
				Name:    "郵便アリス",
				Address: "alice.yuubin@example.net",
			},
			ResentTo: []*mail.Address{
				&mail.Address{
					Name:    "郵便ボブ",
					Address: "bob.yuubin@example.net",
				},
				&mail.Address{
					Name:    "郵便キャロル",
					Address: "carol.yuubin@example.net",
				},
			},
			ResentCc: []*mail.Address{
				&mail.Address{
					Name:    "郵便ダン",
					Address: "dan.yuubin@example.net",
				},
				&mail.Address{
					Name:    "郵便イーブ",
					Address: "eve.yubin@example.net",
				},
			},
			ResentBcc: []*mail.Address{
				&mail.Address{
					Name:    "郵便フランク",
					Address: "frank.yuubin@example.net",
				},
				&mail.Address{
					Name:    "郵便グレイス",
					Address: "grace.yubin@example.net",
				},
			},
			ResentMessageID: "Message-Id-1@example.net",
			ExtraHeaders: map[string][]string{
				"X-Clacks-Overhead": []string{
					"GNU Terry Pratchett",
				},
				"X-Script/function/\t !\"#$%&'()*+,-./;<=>?@[\\]^_`{|}~": []string{
					"TEST VALUE 1\t !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_` abcdefghijklmnopqrstuvwxyz{|}~",
					"TEST VALUE 2\t !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_` abcdefghijklmnopqrstuvwxyz{|}~",
				},
			},
			ContentInfo: &email.ContentInfo{
				Type: "multipart/signed",
				TypeParams: map[string]string{
					"boundary": "SignedBoundaryString",
					"charset":  "utf-8",
					"micalg":   "sha1",
					"protocol": "application/pkcs7-signature",
				},
				Disposition:       "",
				DispositionParams: map[string]string(nil), // p0
				TransferEncoding:  "7bit",
				ID:                "",
				Charset:           "utf-8",
			},
			Received: nil,
		},
		Text: "色は匂えど\n" +
			"散りぬるを\n" +
			"我が世誰ぞ\n" +
			"常ならん\n" +
			"有為の奥山\n" +
			"今日越えて\n" +
			"浅き夢見じ\n" +
			"酔いもせず。\n" +
			"\n" +
			"Iro wa nioedo / Chirinuru o / Wa ga yo tare zo / Tsune naran / Ui no okuyama / Kyo koete Asaki yume miji / Yoi mo sezu.\n" +
			"\n" +
			"とりなくこゑすゆめさませみよあけわたるひんかしをそらいろはえておきつへにほふねむれゐぬもやのうち。\n" +
			"\n" +
			"天地星空\n" +
			"山川峰谷\n" +
			"雲霧室苔\n" +
			"人犬上末\n" +
			"硫黄猿生ふ為よ\n" +
			"榎の枝を馴れ居て。\n" +
			"\n" +
			"田居に出で菜摘むわれをぞ君召すと求食り追ひゆく山城の打酔へる子ら藻葉干せよえ舟繋けぬ。",
		EnrichedText: "",
		HTML:         "",
		Files: []*email.File{
			&email.File{
				FileType: "attachment",
				Name:     "smime.p7s",
				ContentInfo: &email.ContentInfo{
					Type: "application/pkcs7-signature",
					TypeParams: map[string]string{
						"name": "smime.p7s",
					},
					Disposition: "attachment",
					DispositionParams: map[string]string{
						"filename": "smime.p7s",
					},
					TransferEncoding: "base64",
					ID:               "",
					Charset:          "utf-8",
				},
				Data: []byte{
					239, 191, 189, 28, 239, 191, 189, 239, 191, 189, 117, 46, 239, 191, 189, 18, 97,
					239, 191, 189, 126, 239, 191, 189, 239, 191, 189, 239, 191, 189, 239, 191, 189, 25,
					58, 223, 189, 239, 191, 189, 239, 191, 189, 239, 158, 173, 108, 31, 71, 27, 239,
					191, 189, 80, 239, 191, 189, 239, 191, 189, 239, 191, 189, 239, 191, 189, 198, 132,
					239, 191, 189, 239, 191, 189, 29, 239, 191, 189, 19, 239, 191, 189, 80, 239, 191,
					189, 239, 191, 189, 239, 191, 189, 239, 191, 189, 198, 132, 239, 191, 189, 239, 191,
					189, 29, 239, 191, 189, 19, 239, 191, 189, 49, 239, 191, 189, 239, 191, 189, 127,
					7, 28, 104, 33, 239, 191, 189, 120, 71, 82, 239, 191, 189, 239, 191, 189, 38, 30,
					239, 191, 189, 239, 191, 189, 239, 191, 189, 239, 191, 189, 239, 191, 189, 113, 239,
					191, 189, 239, 191, 189, 239, 191, 189, 219, 158, 57, 239, 191, 189, 28, 113, 239,
					191, 189, 239, 191, 189, 239, 191, 189, 239, 191, 189, 38, 24, 239, 191, 189, 239,
					190, 173, 108, 31, 71, 27, 239, 191, 189, 80, 110, 120, 239, 191, 189, 239, 191,
					189, 198, 132, 239, 191, 189, 239, 191, 189, 29, 239, 191, 189, 19, 239, 191, 189,
					8, 114, 30, 17, 212, 186, 58, 95, 239, 191, 189, 94, 59, 26, 18, 6, 124, 119, 239,
					191, 189, 79, 239, 191, 189, 21, 65, 239, 191, 189, 239, 191, 189, 239, 191, 189,
				},
			},
		},
	}
	testEmailFromFile(t, fp, expectedEmail)
}

func TestParseEmailJapaneseMultipartSignedUtf8OverBase64(t *testing.T) {
	fp := "tests/test_japanese_multipart_signed_utf-8_over_base64.txt"
	expectedEmail := &email.Email{
		Headers: email.Headers{
			Date: time.Time(time.Date(2019, 3, 31, 22, 55, 0, 0, time.UTC)),
			Sender: &mail.Address{
				Name:    "郵便アリス",
				Address: "alice.yuubin@example.com",
			},
			From: []*mail.Address{
				&mail.Address{
					Name:    "郵便アリス",
					Address: "alice.yuubin@example.com",
				},
				&mail.Address{
					Name:    "郵便アリス",
					Address: "alice.yuubin@example.net",
				},
			},
			ReplyTo: []*mail.Address{
				&mail.Address{
					Name:    "郵便アリス",
					Address: "alice.yuubin@example.net",
				},
			},
			To: []*mail.Address{
				&mail.Address{
					Name:    "郵便ボブ",
					Address: "bob.yuubin@example.com",
				},
				&mail.Address{
					Name:    "郵便キャロル",
					Address: "carol.yuubin@example.com",
				},
			},
			Cc: []*mail.Address{
				&mail.Address{
					Name:    "郵便ダン",
					Address: "dan.yuubin@example.com",
				},
				&mail.Address{
					Name:    "郵便イーブ",
					Address: "eve.yubin@example.com",
				},
			},
			Bcc: []*mail.Address{
				&mail.Address{
					Name:    "郵便フランク",
					Address: "frank.yuubin@example.com",
				},
				&mail.Address{
					Name:    "郵便グレイス",
					Address: "grace.yubin@example.com",
				},
			},
			MessageID: "Message-Id-1@example.com",
			InReplyTo: []string{
				"Message-Id-0@example.com",
			},
			References: []string{
				"Message-Id-0@example.com",
			},
			Subject:  "📧 Signed Test いろは歌",
			Comments: "Message Header Comment",
			Keywords: []string{
				"Keyword 1",
				"Keyword 2",
			},
			ResentDate: time.Time(time.Date(2019, 3, 31, 22, 55, 0, 0, time.UTC)),
			ResentFrom: []*mail.Address{
				&mail.Address{
					Name:    "郵便アリス",
					Address: "alice.yuubin@example.net",
				},
				&mail.Address{
					Name:    "郵便アリス",
					Address: "alice.yuubin@example.com",
				},
			},
			ResentSender: &mail.Address{
				Name:    "郵便アリス",
				Address: "alice.yuubin@example.net",
			},
			ResentTo: []*mail.Address{
				&mail.Address{
					Name:    "郵便ボブ",
					Address: "bob.yuubin@example.net",
				},
				&mail.Address{
					Name:    "郵便キャロル",
					Address: "carol.yuubin@example.net",
				},
			},
			ResentCc: []*mail.Address{
				&mail.Address{
					Name:    "郵便ダン",
					Address: "dan.yuubin@example.net",
				},
				&mail.Address{
					Name:    "郵便イーブ",
					Address: "eve.yubin@example.net",
				},
			},
			ResentBcc: []*mail.Address{
				&mail.Address{
					Name:    "郵便フランク",
					Address: "frank.yuubin@example.net",
				},
				&mail.Address{
					Name:    "郵便グレイス",
					Address: "grace.yubin@example.net",
				},
			},
			ResentMessageID: "Message-Id-1@example.net",
			ExtraHeaders: map[string][]string{
				"X-Clacks-Overhead": []string{
					"GNU Terry Pratchett",
				},
				"X-Script/function/\t !\"#$%&'()*+,-./;<=>?@[\\]^_`{|}~": []string{
					"TEST VALUE 1\t !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_` abcdefghijklmnopqrstuvwxyz{|}~",
					"TEST VALUE 2\t !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_` abcdefghijklmnopqrstuvwxyz{|}~",
				},
			},
			ContentInfo: &email.ContentInfo{
				Type: "multipart/signed",
				TypeParams: map[string]string{
					"boundary": "SignedBoundaryString",
					"charset":  "utf-8",
					"micalg":   "sha1",
					"protocol": "application/pkcs7-signature",
				},
				Disposition:       "",
				DispositionParams: map[string]string(nil), // p0
				TransferEncoding:  "base64",
				ID:                "",
				Charset:           "utf-8",
			},
			Received: nil,
		},
		Text: "色は匂えど\n" +
			"散りぬるを\n" +
			"我が世誰ぞ\n" +
			"常ならん\n" +
			"有為の奥山\n" +
			"今日越えて\n" +
			"浅き夢見じ\n" +
			"酔いもせず。\n" +
			"\n" +
			"Iro wa nioedo / Chirinuru o / Wa ga yo tare zo / Tsune naran / Ui no okuyama / Kyo koete Asaki yume miji / Yoi mo sezu.\n" +
			"\n" +
			"とりなくこゑすゆめさませみよあけわたるひんかしをそらいろはえておきつへにほふねむれゐぬもやのうち。\n" +
			"\n" +
			"天地星空\n" +
			"山川峰谷\n" +
			"雲霧室苔\n" +
			"人犬上末\n" +
			"硫黄猿生ふ為よ\n" +
			"榎の枝を馴れ居て。\n" +
			"\n" +
			"田居に出で菜摘むわれをぞ君召すと求食り追ひゆく山城の打酔へる子ら藻葉干せよえ舟繋けぬ。",
		EnrichedText: "",
		HTML:         "",
		Files: []*email.File{
			&email.File{
				FileType: "attachment",
				Name:     "smime.p7s",
				ContentInfo: &email.ContentInfo{
					Type: "application/pkcs7-signature",
					TypeParams: map[string]string{
						"name": "smime.p7s",
					},
					Disposition: "attachment",
					DispositionParams: map[string]string{
						"filename": "smime.p7s",
					},
					TransferEncoding: "base64",
					ID:               "",
					Charset:          "utf-8",
				},
				Data: []byte{
					239, 191, 189, 28, 239, 191, 189, 239, 191, 189, 117, 46, 239, 191, 189, 18, 97,
					239, 191, 189, 126, 239, 191, 189, 239, 191, 189, 239, 191, 189, 239, 191, 189, 25,
					58, 223, 189, 239, 191, 189, 239, 191, 189, 239, 158, 173, 108, 31, 71, 27, 239,
					191, 189, 80, 239, 191, 189, 239, 191, 189, 239, 191, 189, 239, 191, 189, 198, 132,
					239, 191, 189, 239, 191, 189, 29, 239, 191, 189, 19, 239, 191, 189, 80, 239, 191,
					189, 239, 191, 189, 239, 191, 189, 239, 191, 189, 198, 132, 239, 191, 189, 239, 191,
					189, 29, 239, 191, 189, 19, 239, 191, 189, 49, 239, 191, 189, 239, 191, 189, 127,
					7, 28, 104, 33, 239, 191, 189, 120, 71, 82, 239, 191, 189, 239, 191, 189, 38, 30,
					239, 191, 189, 239, 191, 189, 239, 191, 189, 239, 191, 189, 239, 191, 189, 113, 239,
					191, 189, 239, 191, 189, 239, 191, 189, 219, 158, 57, 239, 191, 189, 28, 113, 239,
					191, 189, 239, 191, 189, 239, 191, 189, 239, 191, 189, 38, 24, 239, 191, 189, 239,
					190, 173, 108, 31, 71, 27, 239, 191, 189, 80, 110, 120, 239, 191, 189, 239, 191,
					189, 198, 132, 239, 191, 189, 239, 191, 189, 29, 239, 191, 189, 19, 239, 191, 189,
					8, 114, 30, 17, 212, 186, 58, 95, 239, 191, 189, 94, 59, 26, 18, 6, 124, 119, 239,
					191, 189, 79, 239, 191, 189, 21, 65, 239, 191, 189, 239, 191, 189, 239, 191, 189,
				},
			},
		},
	}
	testEmailFromFile(t, fp, expectedEmail)
}

func TestParseEmailJapaneseMultipartSignedUtf8OverQuotedprintable(t *testing.T) {
	fp := "tests/test_japanese_multipart_signed_utf-8_over_quoted-printable.txt"
	expectedEmail := &email.Email{
		Headers: email.Headers{
			Date: time.Time(time.Date(2019, 3, 31, 22, 55, 0, 0, time.UTC)),
			Sender: &mail.Address{
				Name:    "郵便アリス",
				Address: "alice.yuubin@example.com",
			},
			From: []*mail.Address{
				&mail.Address{
					Name:    "郵便アリス",
					Address: "alice.yuubin@example.com",
				},
				&mail.Address{
					Name:    "郵便アリス",
					Address: "alice.yuubin@example.net",
				},
			},
			ReplyTo: []*mail.Address{
				&mail.Address{
					Name:    "郵便アリス",
					Address: "alice.yuubin@example.net",
				},
			},
			To: []*mail.Address{
				&mail.Address{
					Name:    "郵便ボブ",
					Address: "bob.yuubin@example.com",
				},
				&mail.Address{
					Name:    "郵便キャロル",
					Address: "carol.yuubin@example.com",
				},
			},
			Cc: []*mail.Address{
				&mail.Address{
					Name:    "郵便ダン",
					Address: "dan.yuubin@example.com",
				},
				&mail.Address{
					Name:    "郵便イーブ",
					Address: "eve.yubin@example.com",
				},
			},
			Bcc: []*mail.Address{
				&mail.Address{
					Name:    "郵便フランク",
					Address: "frank.yuubin@example.com",
				},
				&mail.Address{
					Name:    "郵便グレイス",
					Address: "grace.yubin@example.com",
				},
			},
			MessageID: "Message-Id-1@example.com",
			InReplyTo: []string{
				"Message-Id-0@example.com",
			},
			References: []string{
				"Message-Id-0@example.com",
			},
			Subject:  "📧 Signed Test いろは歌",
			Comments: "Message Header Comment",
			Keywords: []string{
				"Keyword 1",
				"Keyword 2",
			},
			ResentDate: time.Time(time.Date(2019, 3, 31, 22, 55, 0, 0, time.UTC)),
			ResentFrom: []*mail.Address{
				&mail.Address{
					Name:    "郵便アリス",
					Address: "alice.yuubin@example.net",
				},
				&mail.Address{
					Name:    "郵便アリス",
					Address: "alice.yuubin@example.com",
				},
			},
			ResentSender: &mail.Address{
				Name:    "郵便アリス",
				Address: "alice.yuubin@example.net",
			},
			ResentTo: []*mail.Address{
				&mail.Address{
					Name:    "郵便ボブ",
					Address: "bob.yuubin@example.net",
				},
				&mail.Address{
					Name:    "郵便キャロル",
					Address: "carol.yuubin@example.net",
				},
			},
			ResentCc: []*mail.Address{
				&mail.Address{
					Name:    "郵便ダン",
					Address: "dan.yuubin@example.net",
				},
				&mail.Address{
					Name:    "郵便イーブ",
					Address: "eve.yubin@example.net",
				},
			},
			ResentBcc: []*mail.Address{
				&mail.Address{
					Name:    "郵便フランク",
					Address: "frank.yuubin@example.net",
				},
				&mail.Address{
					Name:    "郵便グレイス",
					Address: "grace.yubin@example.net",
				},
			},
			ResentMessageID: "Message-Id-1@example.net",
			ExtraHeaders: map[string][]string{
				"X-Clacks-Overhead": []string{
					"GNU Terry Pratchett",
				},
				"X-Script/function/\t !\"#$%&'()*+,-./;<=>?@[\\]^_`{|}~": []string{
					"TEST VALUE 1\t !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_` abcdefghijklmnopqrstuvwxyz{|}~",
					"TEST VALUE 2\t !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_` abcdefghijklmnopqrstuvwxyz{|}~",
				},
			},
			ContentInfo: &email.ContentInfo{
				Type: "multipart/signed",
				TypeParams: map[string]string{
					"boundary": "SignedBoundaryString",
					"charset":  "utf-8",
					"micalg":   "sha1",
					"protocol": "application/pkcs7-signature",
				},
				Disposition:       "",
				DispositionParams: map[string]string(nil), // p0
				TransferEncoding:  "quoted-printable",
				ID:                "",
				Charset:           "utf-8",
			},
			Received: nil,
		},
		Text: "色は匂えど\n" +
			"散りぬるを\n" +
			"我が世誰ぞ\n" +
			"常ならん\n" +
			"有為の奥山\n" +
			"今日越えて\n" +
			"浅き夢見じ\n" +
			"酔いもせず。\n" +
			"\n" +
			"Iro wa nioedo / Chirinuru o / Wa ga yo tare zo / Tsune naran / Ui no okuyama / Kyo koete Asaki yume miji / Yoi mo sezu.\n" +
			"\n" +
			"とりなくこゑすゆめさませみよあけわたるひんかしをそらいろはえておきつへにほふねむれゐぬもやのうち。\n" +
			"\n" +
			"天地星空\n" +
			"山川峰谷\n" +
			"雲霧室苔\n" +
			"人犬上末\n" +
			"硫黄猿生ふ為よ\n" +
			"榎の枝を馴れ居て。\n" +
			"\n" +
			"田居に出で菜摘むわれをぞ君召すと求食り追ひゆく山城の打酔へる子ら藻葉干せよえ舟繋けぬ。",
		EnrichedText: "",
		HTML:         "",
		Files: []*email.File{
			&email.File{
				FileType: "attachment",
				Name:     "smime.p7s",
				ContentInfo: &email.ContentInfo{
					Type: "application/pkcs7-signature",
					TypeParams: map[string]string{
						"name": "smime.p7s",
					},
					Disposition: "attachment",
					DispositionParams: map[string]string{
						"filename": "smime.p7s",
					},
					TransferEncoding: "base64",
					ID:               "",
					Charset:          "utf-8",
				},
				Data: []byte{
					239, 191, 189, 28, 239, 191, 189, 239, 191, 189, 117, 46, 239, 191, 189, 18, 97,
					239, 191, 189, 126, 239, 191, 189, 239, 191, 189, 239, 191, 189, 239, 191, 189, 25,
					58, 223, 189, 239, 191, 189, 239, 191, 189, 239, 158, 173, 108, 31, 71, 27, 239,
					191, 189, 80, 239, 191, 189, 239, 191, 189, 239, 191, 189, 239, 191, 189, 198, 132,
					239, 191, 189, 239, 191, 189, 29, 239, 191, 189, 19, 239, 191, 189, 80, 239, 191,
					189, 239, 191, 189, 239, 191, 189, 239, 191, 189, 198, 132, 239, 191, 189, 239, 191,
					189, 29, 239, 191, 189, 19, 239, 191, 189, 49, 239, 191, 189, 239, 191, 189, 127,
					7, 28, 104, 33, 239, 191, 189, 120, 71, 82, 239, 191, 189, 239, 191, 189, 38, 30,
					239, 191, 189, 239, 191, 189, 239, 191, 189, 239, 191, 189, 239, 191, 189, 113, 239,
					191, 189, 239, 191, 189, 239, 191, 189, 219, 158, 57, 239, 191, 189, 28, 113, 239,
					191, 189, 239, 191, 189, 239, 191, 189, 239, 191, 189, 38, 24, 239, 191, 189, 239,
					190, 173, 108, 31, 71, 27, 239, 191, 189, 80, 110, 120, 239, 191, 189, 239, 191,
					189, 198, 132, 239, 191, 189, 239, 191, 189, 29, 239, 191, 189, 19, 239, 191, 189,
					8, 114, 30, 17, 212, 186, 58, 95, 239, 191, 189, 94, 59, 26, 18, 6, 124, 119, 239,
					191, 189, 79, 239, 191, 189, 21, 65, 239, 191, 189, 239, 191, 189, 239, 191, 189,
				},
			},
		},
	}
	testEmailFromFile(t, fp, expectedEmail)
}

func TestParseEmailJapaneseMultipartSignedIso2022jpOver7bit(t *testing.T) {
	fp := "tests/test_japanese_multipart_signed_iso-2022-jp_over_7bit.txt"
	expectedEmail := &email.Email{
		Headers: email.Headers{
			Date: time.Time(time.Date(2019, 3, 31, 22, 55, 0, 0, time.UTC)),
			Sender: &mail.Address{
				Name:    "郵便アリス",
				Address: "alice.yuubin@example.com",
			},
			From: []*mail.Address{
				&mail.Address{
					Name:    "郵便アリス",
					Address: "alice.yuubin@example.com",
				},
				&mail.Address{
					Name:    "郵便アリス",
					Address: "alice.yuubin@example.net",
				},
			},
			ReplyTo: []*mail.Address{
				&mail.Address{
					Name:    "郵便アリス",
					Address: "alice.yuubin@example.net",
				},
			},
			To: []*mail.Address{
				&mail.Address{
					Name:    "郵便ボブ",
					Address: "bob.yuubin@example.com",
				},
				&mail.Address{
					Name:    "郵便キャロル",
					Address: "carol.yuubin@example.com",
				},
			},
			Cc: []*mail.Address{
				&mail.Address{
					Name:    "郵便ダン",
					Address: "dan.yuubin@example.com",
				},
				&mail.Address{
					Name:    "郵便イーブ",
					Address: "eve.yubin@example.com",
				},
			},
			Bcc: []*mail.Address{
				&mail.Address{
					Name:    "郵便フランク",
					Address: "frank.yuubin@example.com",
				},
				&mail.Address{
					Name:    "郵便グレイス",
					Address: "grace.yubin@example.com",
				},
			},
			MessageID: "Message-Id-1@example.com",
			InReplyTo: []string{
				"Message-Id-0@example.com",
			},
			References: []string{
				"Message-Id-0@example.com",
			},
			Subject:  "📧 Signed Test いろは歌",
			Comments: "Message Header Comment",
			Keywords: []string{
				"Keyword 1",
				"Keyword 2",
			},
			ResentDate: time.Time(time.Date(2019, 3, 31, 22, 55, 0, 0, time.UTC)),
			ResentFrom: []*mail.Address{
				&mail.Address{
					Name:    "郵便アリス",
					Address: "alice.yuubin@example.net",
				},
				&mail.Address{
					Name:    "郵便アリス",
					Address: "alice.yuubin@example.com",
				},
			},
			ResentSender: &mail.Address{
				Name:    "郵便アリス",
				Address: "alice.yuubin@example.net",
			},
			ResentTo: []*mail.Address{
				&mail.Address{
					Name:    "郵便ボブ",
					Address: "bob.yuubin@example.net",
				},
				&mail.Address{
					Name:    "郵便キャロル",
					Address: "carol.yuubin@example.net",
				},
			},
			ResentCc: []*mail.Address{
				&mail.Address{
					Name:    "郵便ダン",
					Address: "dan.yuubin@example.net",
				},
				&mail.Address{
					Name:    "郵便イーブ",
					Address: "eve.yubin@example.net",
				},
			},
			ResentBcc: []*mail.Address{
				&mail.Address{
					Name:    "郵便フランク",
					Address: "frank.yuubin@example.net",
				},
				&mail.Address{
					Name:    "郵便グレイス",
					Address: "grace.yubin@example.net",
				},
			},
			ResentMessageID: "Message-Id-1@example.net",
			ExtraHeaders: map[string][]string{
				"X-Clacks-Overhead": []string{
					"GNU Terry Pratchett",
				},
				"X-Script/function/\t !\"#$%&'()*+,-./;<=>?@[\\]^_`{|}~": []string{
					"TEST VALUE 1\t !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_` abcdefghijklmnopqrstuvwxyz{|}~",
					"TEST VALUE 2\t !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_` abcdefghijklmnopqrstuvwxyz{|}~",
				},
			},
			ContentInfo: &email.ContentInfo{
				Type: "multipart/signed",
				TypeParams: map[string]string{
					"boundary": "SignedBoundaryString",
					"charset":  "iso-2022-jp",
					"micalg":   "sha1",
					"protocol": "application/pkcs7-signature",
				},
				Disposition:       "",
				DispositionParams: map[string]string(nil), // p0
				TransferEncoding:  "7bit",
				ID:                "",
				Charset:           "iso-2022-jp",
			},
			Received: nil,
		},
		Text: "色は匂えど\n" +
			"散りぬるを\n" +
			"我が世誰ぞ\n" +
			"常ならん\n" +
			"有為の奥山\n" +
			"今日越えて\n" +
			"浅き夢見じ\n" +
			"酔いもせず。\n" +
			"\n" +
			"Iro wa nioedo / Chirinuru o / Wa ga yo tare zo / Tsune naran / Ui no okuyama / Kyo koete Asaki yume miji / Yoi mo sezu.\n" +
			"\n" +
			"とりなくこゑすゆめさませみよあけわたるひんかしをそらいろはえておきつへにほふねむれゐぬもやのうち。\n" +
			"\n" +
			"天地星空\n" +
			"山川峰谷\n" +
			"雲霧室苔\n" +
			"人犬上末\n" +
			"硫黄猿生ふ為よ\n" +
			"榎の枝を馴れ居て。\n" +
			"\n" +
			"田居に出で菜摘むわれをぞ君召すと求食り追ひゆく山城の打酔へる子ら藻葉干せよえ舟繋けぬ。",
		EnrichedText: "",
		HTML:         "",
		Files: []*email.File{
			&email.File{
				FileType: "attachment",
				Name:     "smime.p7s",
				ContentInfo: &email.ContentInfo{
					Type: "application/pkcs7-signature",
					TypeParams: map[string]string{
						"name": "smime.p7s",
					},
					Disposition: "attachment",
					DispositionParams: map[string]string{
						"filename": "smime.p7s",
					},
					TransferEncoding: "base64",
					ID:               "",
					Charset:          "iso-2022-jp",
				},
				Data: []byte{
					239, 191, 189, 28, 239, 191, 189, 239, 191, 189, 117, 46, 239, 191, 189, 18, 97,
					239, 191, 189, 126, 239, 191, 189, 239, 191, 189, 239, 191, 189, 239, 191, 189, 25,
					58, 239, 191, 189, 239, 191, 189, 239, 191, 189, 239, 191, 189, 239, 191, 189, 239,
					191, 189, 239, 191, 189, 108, 31, 71, 239, 191, 189, 239, 191, 189, 80, 239, 191,
					189, 239, 191, 189, 239, 191, 189, 239, 191, 189, 239, 191, 189, 239, 191, 189, 239,
					191, 189, 239, 191, 189, 239, 191, 189, 29, 239, 191, 189, 19, 239, 191, 189, 239,
					191, 189, 80, 239, 191, 189, 239, 191, 189, 239, 191, 189, 239, 191, 189, 239, 191,
					189, 239, 191, 189, 239, 191, 189, 239, 191, 189, 239, 191, 189, 29, 239, 191, 189,
					19, 239, 191, 189, 49, 239, 191, 189, 239, 191, 189, 127, 7, 28, 104, 33, 239, 191,
					189, 120, 71, 82, 239, 191, 189, 239, 191, 189, 38, 30, 239, 191, 189, 239, 191,
					189, 239, 191, 189, 239, 191, 189, 239, 191, 189, 113, 239, 191, 189, 239, 191, 189,
					239, 191, 189, 239, 191, 189, 239, 191, 189, 57, 239, 191, 189, 28, 113, 239, 191,
					189, 239, 191, 189, 239, 191, 189, 239, 191, 189, 38, 24, 239, 191, 189, 239, 191,
					189, 239, 191, 189, 239, 191, 189, 108, 31, 71, 239, 191, 189, 239, 191, 189, 80,
					110, 120, 239, 191, 189, 239, 191, 189, 239, 191, 189, 239, 191, 189, 239, 191, 189,
					239, 191, 189, 239, 191, 189, 29, 239, 191, 189, 19, 239, 191, 189, 8, 114, 30, 17,
					239, 191, 189, 239, 191, 189, 58, 95, 239, 191, 189, 94, 59, 26, 18, 6, 124, 119,
					239, 191, 189, 79, 239, 191, 189, 21, 65, 239, 191, 189, 239, 191, 189, 239, 191,
					189, 239, 191, 189,
				},
			},
		},
	}
	testEmailFromFile(t, fp, expectedEmail)
}

func TestParseEmailJapaneseMultipartSignedIso2022jpOverBase64(t *testing.T) {
	fp := "tests/test_japanese_multipart_signed_iso-2022-jp_over_base64.txt"
	expectedEmail := &email.Email{
		Headers: email.Headers{
			Date: time.Time(time.Date(2019, 3, 31, 22, 55, 0, 0, time.UTC)),
			Sender: &mail.Address{
				Name:    "郵便アリス",
				Address: "alice.yuubin@example.com",
			},
			From: []*mail.Address{
				&mail.Address{
					Name:    "郵便アリス",
					Address: "alice.yuubin@example.com",
				},
				&mail.Address{
					Name:    "郵便アリス",
					Address: "alice.yuubin@example.net",
				},
			},
			ReplyTo: []*mail.Address{
				&mail.Address{
					Name:    "郵便アリス",
					Address: "alice.yuubin@example.net",
				},
			},
			To: []*mail.Address{
				&mail.Address{
					Name:    "郵便ボブ",
					Address: "bob.yuubin@example.com",
				},
				&mail.Address{
					Name:    "郵便キャロル",
					Address: "carol.yuubin@example.com",
				},
			},
			Cc: []*mail.Address{
				&mail.Address{
					Name:    "郵便ダン",
					Address: "dan.yuubin@example.com",
				},
				&mail.Address{
					Name:    "郵便イーブ",
					Address: "eve.yubin@example.com",
				},
			},
			Bcc: []*mail.Address{
				&mail.Address{
					Name:    "郵便フランク",
					Address: "frank.yuubin@example.com",
				},
				&mail.Address{
					Name:    "郵便グレイス",
					Address: "grace.yubin@example.com",
				},
			},
			MessageID: "Message-Id-1@example.com",
			InReplyTo: []string{
				"Message-Id-0@example.com",
			},
			References: []string{
				"Message-Id-0@example.com",
			},
			Subject:  "📧 Signed Test いろは歌",
			Comments: "Message Header Comment",
			Keywords: []string{
				"Keyword 1",
				"Keyword 2",
			},
			ResentDate: time.Time(time.Date(2019, 3, 31, 22, 55, 0, 0, time.UTC)),
			ResentFrom: []*mail.Address{
				&mail.Address{
					Name:    "郵便アリス",
					Address: "alice.yuubin@example.net",
				},
				&mail.Address{
					Name:    "郵便アリス",
					Address: "alice.yuubin@example.com",
				},
			},
			ResentSender: &mail.Address{
				Name:    "郵便アリス",
				Address: "alice.yuubin@example.net",
			},
			ResentTo: []*mail.Address{
				&mail.Address{
					Name:    "郵便ボブ",
					Address: "bob.yuubin@example.net",
				},
				&mail.Address{
					Name:    "郵便キャロル",
					Address: "carol.yuubin@example.net",
				},
			},
			ResentCc: []*mail.Address{
				&mail.Address{
					Name:    "郵便ダン",
					Address: "dan.yuubin@example.net",
				},
				&mail.Address{
					Name:    "郵便イーブ",
					Address: "eve.yubin@example.net",
				},
			},
			ResentBcc: []*mail.Address{
				&mail.Address{
					Name:    "郵便フランク",
					Address: "frank.yuubin@example.net",
				},
				&mail.Address{
					Name:    "郵便グレイス",
					Address: "grace.yubin@example.net",
				},
			},
			ResentMessageID: "Message-Id-1@example.net",
			ExtraHeaders: map[string][]string{
				"X-Clacks-Overhead": []string{
					"GNU Terry Pratchett",
				},
				"X-Script/function/\t !\"#$%&'()*+,-./;<=>?@[\\]^_`{|}~": []string{
					"TEST VALUE 1\t !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_` abcdefghijklmnopqrstuvwxyz{|}~",
					"TEST VALUE 2\t !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_` abcdefghijklmnopqrstuvwxyz{|}~",
				},
			},
			ContentInfo: &email.ContentInfo{
				Type: "multipart/signed",
				TypeParams: map[string]string{
					"boundary": "SignedBoundaryString",
					"charset":  "iso-2022-jp",
					"micalg":   "sha1",
					"protocol": "application/pkcs7-signature",
				},
				Disposition:       "",
				DispositionParams: map[string]string(nil), // p0
				TransferEncoding:  "base64",
				ID:                "",
				Charset:           "iso-2022-jp",
			},
			Received: nil,
		},
		Text: "色は匂えど\n" +
			"散りぬるを\n" +
			"我が世誰ぞ\n" +
			"常ならん\n" +
			"有為の奥山\n" +
			"今日越えて\n" +
			"浅き夢見じ\n" +
			"酔いもせず。\n" +
			"\n" +
			"Iro wa nioedo / Chirinuru o / Wa ga yo tare zo / Tsune naran / Ui no okuyama / Kyo koete Asaki yume miji / Yoi mo sezu.\n" +
			"\n" +
			"とりなくこゑすゆめさませみよあけわたるひんかしをそらいろはえておきつへにほふねむれゐぬもやのうち。\n" +
			"\n" +
			"天地星空\n" +
			"山川峰谷\n" +
			"雲霧室苔\n" +
			"人犬上末\n" +
			"硫黄猿生ふ為よ\n" +
			"榎の枝を馴れ居て。\n" +
			"\n" +
			"田居に出で菜摘むわれをぞ君召すと求食り追ひゆく山城の打酔へる子ら藻葉干せよえ舟繋けぬ。",
		EnrichedText: "",
		HTML:         "",
		Files: []*email.File{
			&email.File{
				FileType: "attachment",
				Name:     "smime.p7s",
				ContentInfo: &email.ContentInfo{
					Type: "application/pkcs7-signature",
					TypeParams: map[string]string{
						"name": "smime.p7s",
					},
					Disposition: "attachment",
					DispositionParams: map[string]string{
						"filename": "smime.p7s",
					},
					TransferEncoding: "base64",
					ID:               "",
					Charset:          "iso-2022-jp",
				},
				Data: []byte{
					239, 191, 189, 28, 239, 191, 189, 239, 191, 189, 117, 46, 239, 191, 189, 18, 97,
					239, 191, 189, 126, 239, 191, 189, 239, 191, 189, 239, 191, 189, 239, 191, 189, 25,
					58, 239, 191, 189, 239, 191, 189, 239, 191, 189, 239, 191, 189, 239, 191, 189, 239,
					191, 189, 239, 191, 189, 108, 31, 71, 239, 191, 189, 239, 191, 189, 80, 239, 191,
					189, 239, 191, 189, 239, 191, 189, 239, 191, 189, 239, 191, 189, 239, 191, 189, 239,
					191, 189, 239, 191, 189, 239, 191, 189, 29, 239, 191, 189, 19, 239, 191, 189, 239,
					191, 189, 80, 239, 191, 189, 239, 191, 189, 239, 191, 189, 239, 191, 189, 239, 191,
					189, 239, 191, 189, 239, 191, 189, 239, 191, 189, 239, 191, 189, 29, 239, 191, 189,
					19, 239, 191, 189, 49, 239, 191, 189, 239, 191, 189, 127, 7, 28, 104, 33, 239, 191,
					189, 120, 71, 82, 239, 191, 189, 239, 191, 189, 38, 30, 239, 191, 189, 239, 191,
					189, 239, 191, 189, 239, 191, 189, 239, 191, 189, 113, 239, 191, 189, 239, 191, 189,
					239, 191, 189, 239, 191, 189, 239, 191, 189, 57, 239, 191, 189, 28, 113, 239, 191,
					189, 239, 191, 189, 239, 191, 189, 239, 191, 189, 38, 24, 239, 191, 189, 239, 191,
					189, 239, 191, 189, 239, 191, 189, 108, 31, 71, 239, 191, 189, 239, 191, 189, 80,
					110, 120, 239, 191, 189, 239, 191, 189, 239, 191, 189, 239, 191, 189, 239, 191, 189,
					239, 191, 189, 239, 191, 189, 29, 239, 191, 189, 19, 239, 191, 189, 8, 114, 30, 17,
					239, 191, 189, 239, 191, 189, 58, 95, 239, 191, 189, 94, 59, 26, 18, 6, 124, 119,
					239, 191, 189, 79, 239, 191, 189, 21, 65, 239, 191, 189, 239, 191, 189, 239, 191,
					189, 239, 191, 189,
				},
			},
		},
	}
	testEmailFromFile(t, fp, expectedEmail)
}

func TestParseEmailJapaneseMultipartSignedIso2022jpOverQuotedprintable(t *testing.T) {
	fp := "tests/test_japanese_multipart_signed_iso-2022-jp_over_quoted-printable.txt"
	expectedEmail := &email.Email{
		Headers: email.Headers{
			Date: time.Time(time.Date(2019, 3, 31, 22, 55, 0, 0, time.UTC)),
			Sender: &mail.Address{
				Name:    "郵便アリス",
				Address: "alice.yuubin@example.com",
			},
			From: []*mail.Address{
				&mail.Address{
					Name:    "郵便アリス",
					Address: "alice.yuubin@example.com",
				},
				&mail.Address{
					Name:    "郵便アリス",
					Address: "alice.yuubin@example.net",
				},
			},
			ReplyTo: []*mail.Address{
				&mail.Address{
					Name:    "郵便アリス",
					Address: "alice.yuubin@example.net",
				},
			},
			To: []*mail.Address{
				&mail.Address{
					Name:    "郵便ボブ",
					Address: "bob.yuubin@example.com",
				},
				&mail.Address{
					Name:    "郵便キャロル",
					Address: "carol.yuubin@example.com",
				},
			},
			Cc: []*mail.Address{
				&mail.Address{
					Name:    "郵便ダン",
					Address: "dan.yuubin@example.com",
				},
				&mail.Address{
					Name:    "郵便イーブ",
					Address: "eve.yubin@example.com",
				},
			},
			Bcc: []*mail.Address{
				&mail.Address{
					Name:    "郵便フランク",
					Address: "frank.yuubin@example.com",
				},
				&mail.Address{
					Name:    "郵便グレイス",
					Address: "grace.yubin@example.com",
				},
			},
			MessageID: "Message-Id-1@example.com",
			InReplyTo: []string{
				"Message-Id-0@example.com",
			},
			References: []string{
				"Message-Id-0@example.com",
			},
			Subject:  "📧 Signed Test いろは歌",
			Comments: "Message Header Comment",
			Keywords: []string{
				"Keyword 1",
				"Keyword 2",
			},
			ResentDate: time.Time(time.Date(2019, 3, 31, 22, 55, 0, 0, time.UTC)),
			ResentFrom: []*mail.Address{
				&mail.Address{
					Name:    "郵便アリス",
					Address: "alice.yuubin@example.net",
				},
				&mail.Address{
					Name:    "郵便アリス",
					Address: "alice.yuubin@example.com",
				},
			},
			ResentSender: &mail.Address{
				Name:    "郵便アリス",
				Address: "alice.yuubin@example.net",
			},
			ResentTo: []*mail.Address{
				&mail.Address{
					Name:    "郵便ボブ",
					Address: "bob.yuubin@example.net",
				},
				&mail.Address{
					Name:    "郵便キャロル",
					Address: "carol.yuubin@example.net",
				},
			},
			ResentCc: []*mail.Address{
				&mail.Address{
					Name:    "郵便ダン",
					Address: "dan.yuubin@example.net",
				},
				&mail.Address{
					Name:    "郵便イーブ",
					Address: "eve.yubin@example.net",
				},
			},
			ResentBcc: []*mail.Address{
				&mail.Address{
					Name:    "郵便フランク",
					Address: "frank.yuubin@example.net",
				},
				&mail.Address{
					Name:    "郵便グレイス",
					Address: "grace.yubin@example.net",
				},
			},
			ResentMessageID: "Message-Id-1@example.net",
			ExtraHeaders: map[string][]string{
				"X-Clacks-Overhead": []string{
					"GNU Terry Pratchett",
				},
				"X-Script/function/\t !\"#$%&'()*+,-./;<=>?@[\\]^_`{|}~": []string{
					"TEST VALUE 1\t !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_` abcdefghijklmnopqrstuvwxyz{|}~",
					"TEST VALUE 2\t !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_` abcdefghijklmnopqrstuvwxyz{|}~",
				},
			},
			ContentInfo: &email.ContentInfo{
				Type: "multipart/signed",
				TypeParams: map[string]string{
					"boundary": "SignedBoundaryString",
					"charset":  "iso-2022-jp",
					"micalg":   "sha1",
					"protocol": "application/pkcs7-signature",
				},
				Disposition:       "",
				DispositionParams: map[string]string(nil), // p0
				TransferEncoding:  "quoted-printable",
				ID:                "",
				Charset:           "iso-2022-jp",
			},
			Received: nil,
		},
		Text: "色は匂えど\n" +
			"散りぬるを\n" +
			"我が世誰ぞ\n" +
			"常ならん\n" +
			"有為の奥山\n" +
			"今日越えて\n" +
			"浅き夢見じ\n" +
			"酔いもせず。\n" +
			"\n" +
			"Iro wa nioedo / Chirinuru o / Wa ga yo tare zo / Tsune naran / Ui no okuyama / Kyo koete Asaki yume miji / Yoi mo sezu.\n" +
			"\n" +
			"とりなくこゑすゆめさませみよあけわたるひんかしをそらいろはえておきつへにほふねむれゐぬもやのうち。\n" +
			"\n" +
			"天地星空\n" +
			"山川峰谷\n" +
			"雲霧室苔\n" +
			"人犬上末\n" +
			"硫黄猿生ふ為よ\n" +
			"榎の枝を馴れ居て。\n" +
			"\n" +
			"田居に出で菜摘むわれをぞ君召すと求食り追ひゆく山城の打酔へる子ら藻葉干せよえ舟繋けぬ。",
		EnrichedText: "",
		HTML:         "",
		Files: []*email.File{
			&email.File{
				FileType: "attachment",
				Name:     "smime.p7s",
				ContentInfo: &email.ContentInfo{
					Type: "application/pkcs7-signature",
					TypeParams: map[string]string{
						"name": "smime.p7s",
					},
					Disposition: "attachment",
					DispositionParams: map[string]string{
						"filename": "smime.p7s",
					},
					TransferEncoding: "base64",
					ID:               "",
					Charset:          "iso-2022-jp",
				},
				Data: []byte{
					239, 191, 189, 28, 239, 191, 189, 239, 191, 189, 117, 46, 239, 191, 189, 18, 97,
					239, 191, 189, 126, 239, 191, 189, 239, 191, 189, 239, 191, 189, 239, 191, 189, 25,
					58, 239, 191, 189, 239, 191, 189, 239, 191, 189, 239, 191, 189, 239, 191, 189, 239,
					191, 189, 239, 191, 189, 108, 31, 71, 239, 191, 189, 239, 191, 189, 80, 239, 191,
					189, 239, 191, 189, 239, 191, 189, 239, 191, 189, 239, 191, 189, 239, 191, 189, 239,
					191, 189, 239, 191, 189, 239, 191, 189, 29, 239, 191, 189, 19, 239, 191, 189, 239,
					191, 189, 80, 239, 191, 189, 239, 191, 189, 239, 191, 189, 239, 191, 189, 239, 191,
					189, 239, 191, 189, 239, 191, 189, 239, 191, 189, 239, 191, 189, 29, 239, 191, 189,
					19, 239, 191, 189, 49, 239, 191, 189, 239, 191, 189, 127, 7, 28, 104, 33, 239, 191,
					189, 120, 71, 82, 239, 191, 189, 239, 191, 189, 38, 30, 239, 191, 189, 239, 191,
					189, 239, 191, 189, 239, 191, 189, 239, 191, 189, 113, 239, 191, 189, 239, 191, 189,
					239, 191, 189, 239, 191, 189, 239, 191, 189, 57, 239, 191, 189, 28, 113, 239, 191,
					189, 239, 191, 189, 239, 191, 189, 239, 191, 189, 38, 24, 239, 191, 189, 239, 191,
					189, 239, 191, 189, 239, 191, 189, 108, 31, 71, 239, 191, 189, 239, 191, 189, 80,
					110, 120, 239, 191, 189, 239, 191, 189, 239, 191, 189, 239, 191, 189, 239, 191, 189,
					239, 191, 189, 239, 191, 189, 29, 239, 191, 189, 19, 239, 191, 189, 8, 114, 30, 17,
					239, 191, 189, 239, 191, 189, 58, 95, 239, 191, 189, 94, 59, 26, 18, 6, 124, 119,
					239, 191, 189, 79, 239, 191, 189, 21, 65, 239, 191, 189, 239, 191, 189, 239, 191,
					189, 239, 191, 189,
				},
			},
		},
	}
	testEmailFromFile(t, fp, expectedEmail)
}

func TestParseEmailJapaneseMultipartSignedEucjpOverBase64(t *testing.T) {
	fp := "tests/test_japanese_multipart_signed_euc-jp_over_base64.txt"
	expectedEmail := &email.Email{
		Headers: email.Headers{
			Date: time.Time(time.Date(2019, 3, 31, 22, 55, 0, 0, time.UTC)),
			Sender: &mail.Address{
				Name:    "郵便アリス",
				Address: "alice.yuubin@example.com",
			},
			From: []*mail.Address{
				&mail.Address{
					Name:    "郵便アリス",
					Address: "alice.yuubin@example.com",
				},
				&mail.Address{
					Name:    "郵便アリス",
					Address: "alice.yuubin@example.net",
				},
			},
			ReplyTo: []*mail.Address{
				&mail.Address{
					Name:    "郵便アリス",
					Address: "alice.yuubin@example.net",
				},
			},
			To: []*mail.Address{
				&mail.Address{
					Name:    "郵便ボブ",
					Address: "bob.yuubin@example.com",
				},
				&mail.Address{
					Name:    "郵便キャロル",
					Address: "carol.yuubin@example.com",
				},
			},
			Cc: []*mail.Address{
				&mail.Address{
					Name:    "郵便ダン",
					Address: "dan.yuubin@example.com",
				},
				&mail.Address{
					Name:    "郵便イーブ",
					Address: "eve.yubin@example.com",
				},
			},
			Bcc: []*mail.Address{
				&mail.Address{
					Name:    "郵便フランク",
					Address: "frank.yuubin@example.com",
				},
				&mail.Address{
					Name:    "郵便グレイス",
					Address: "grace.yubin@example.com",
				},
			},
			MessageID: "Message-Id-1@example.com",
			InReplyTo: []string{
				"Message-Id-0@example.com",
			},
			References: []string{
				"Message-Id-0@example.com",
			},
			Subject:  "📧 Signed Test いろは歌",
			Comments: "Message Header Comment",
			Keywords: []string{
				"Keyword 1",
				"Keyword 2",
			},
			ResentDate: time.Time(time.Date(2019, 3, 31, 22, 55, 0, 0, time.UTC)),
			ResentFrom: []*mail.Address{
				&mail.Address{
					Name:    "郵便アリス",
					Address: "alice.yuubin@example.net",
				},
				&mail.Address{
					Name:    "郵便アリス",
					Address: "alice.yuubin@example.com",
				},
			},
			ResentSender: &mail.Address{
				Name:    "郵便アリス",
				Address: "alice.yuubin@example.net",
			},
			ResentTo: []*mail.Address{
				&mail.Address{
					Name:    "郵便ボブ",
					Address: "bob.yuubin@example.net",
				},
				&mail.Address{
					Name:    "郵便キャロル",
					Address: "carol.yuubin@example.net",
				},
			},
			ResentCc: []*mail.Address{
				&mail.Address{
					Name:    "郵便ダン",
					Address: "dan.yuubin@example.net",
				},
				&mail.Address{
					Name:    "郵便イーブ",
					Address: "eve.yubin@example.net",
				},
			},
			ResentBcc: []*mail.Address{
				&mail.Address{
					Name:    "郵便フランク",
					Address: "frank.yuubin@example.net",
				},
				&mail.Address{
					Name:    "郵便グレイス",
					Address: "grace.yubin@example.net",
				},
			},
			ResentMessageID: "Message-Id-1@example.net",
			ExtraHeaders: map[string][]string{
				"X-Clacks-Overhead": []string{
					"GNU Terry Pratchett",
				},
				"X-Script/function/\t !\"#$%&'()*+,-./;<=>?@[\\]^_`{|}~": []string{
					"TEST VALUE 1\t !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_` abcdefghijklmnopqrstuvwxyz{|}~",
					"TEST VALUE 2\t !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_` abcdefghijklmnopqrstuvwxyz{|}~",
				},
			},
			ContentInfo: &email.ContentInfo{
				Type: "multipart/signed",
				TypeParams: map[string]string{
					"boundary": "SignedBoundaryString",
					"charset":  "euc-jp",
					"micalg":   "sha1",
					"protocol": "application/pkcs7-signature",
				},
				Disposition:       "",
				DispositionParams: map[string]string(nil), // p0
				TransferEncoding:  "base64",
				ID:                "",
				Charset:           "euc-jp",
			},
			Received: nil,
		},
		Text: "色は匂えど\n" +
			"散りぬるを\n" +
			"我が世誰ぞ\n" +
			"常ならん\n" +
			"有為の奥山\n" +
			"今日越えて\n" +
			"浅き夢見じ\n" +
			"酔いもせず。\n" +
			"\n" +
			"Iro wa nioedo / Chirinuru o / Wa ga yo tare zo / Tsune naran / Ui no okuyama / Kyo koete Asaki yume miji / Yoi mo sezu.\n" +
			"\n" +
			"とりなくこゑすゆめさませみよあけわたるひんかしをそらいろはえておきつへにほふねむれゐぬもやのうち。\n" +
			"\n" +
			"天地星空\n" +
			"山川峰谷\n" +
			"雲霧室苔\n" +
			"人犬上末\n" +
			"硫黄猿生ふ為よ\n" +
			"榎の枝を馴れ居て。\n" +
			"\n" +
			"田居に出で菜摘むわれをぞ君召すと求食り追ひゆく山城の打酔へる子ら藻葉干せよえ舟繋けぬ。",
		EnrichedText: "",
		HTML:         "",
		Files: []*email.File{
			&email.File{
				FileType: "attachment",
				Name:     "smime.p7s",
				ContentInfo: &email.ContentInfo{
					Type: "application/pkcs7-signature",
					TypeParams: map[string]string{
						"name": "smime.p7s",
					},
					Disposition: "attachment",
					DispositionParams: map[string]string{
						"filename": "smime.p7s",
					},
					TransferEncoding: "base64",
					ID:               "",
					Charset:          "euc-jp",
				},
				Data: []byte{
					239, 191, 189, 28, 239, 191, 189, 239, 191, 189, 117, 46, 239, 191, 189, 18, 97,
					239, 191, 189, 126, 239, 191, 189, 239, 191, 189, 231, 180, 160, 25, 58, 230, 191,
					172, 233, 180, 187, 239, 191, 189, 239, 191, 189, 239, 191, 189, 108, 31, 71, 27,
					239, 191, 189, 80, 239, 191, 189, 239, 191, 189, 231, 165, 159, 239, 191, 189, 239,
					191, 189, 239, 191, 189, 239, 191, 189, 29, 239, 191, 189, 19, 239, 191, 189, 239,
					191, 189, 80, 239, 191, 189, 239, 191, 189, 231, 165, 159, 239, 191, 189, 239, 191,
					189, 239, 191, 189, 239, 191, 189, 29, 239, 191, 189, 19, 239, 191, 189, 49, 232,
					171, 182, 127, 7, 28, 104, 33, 239, 191, 189, 120, 71, 82, 232, 145, 185, 38, 30,
					229, 173, 150, 229, 180, 155, 239, 191, 189, 113, 239, 191, 189, 226, 136, 169, 239,
					191, 189, 239, 191, 189, 57, 239, 191, 189, 28, 113, 239, 191, 189, 226, 136, 169,
					239, 191, 189, 38, 24, 230, 139, 141, 229, 176, 134, 108, 31, 71, 27, 239, 191, 189,
					80, 110, 120, 232, 168, 146, 239, 191, 189, 239, 191, 189, 239, 191, 189, 239, 191,
					189, 29, 239, 191, 189, 19, 239, 191, 189, 8, 114, 30, 17, 229, 158, 170, 58, 95,
					239, 191, 189, 94, 59, 26, 18, 6, 124, 119, 239, 191, 189, 79, 239, 191, 189, 21,
					65, 233, 180, 187, 239, 191, 189, 239, 191, 189,
				},
			},
		},
	}
	testEmailFromFile(t, fp, expectedEmail)
}

func TestParseEmailJapaneseMultipartSignedEucjpOverQuotedprintable(t *testing.T) {
	fp := "tests/test_japanese_multipart_signed_euc-jp_over_quoted-printable.txt"
	expectedEmail := &email.Email{
		Headers: email.Headers{
			Date: time.Time(time.Date(2019, 3, 31, 22, 55, 0, 0, time.UTC)),
			Sender: &mail.Address{
				Name:    "郵便アリス",
				Address: "alice.yuubin@example.com",
			},
			From: []*mail.Address{
				&mail.Address{
					Name:    "郵便アリス",
					Address: "alice.yuubin@example.com",
				},
				&mail.Address{
					Name:    "郵便アリス",
					Address: "alice.yuubin@example.net",
				},
			},
			ReplyTo: []*mail.Address{
				&mail.Address{
					Name:    "郵便アリス",
					Address: "alice.yuubin@example.net",
				},
			},
			To: []*mail.Address{
				&mail.Address{
					Name:    "郵便ボブ",
					Address: "bob.yuubin@example.com",
				},
				&mail.Address{
					Name:    "郵便キャロル",
					Address: "carol.yuubin@example.com",
				},
			},
			Cc: []*mail.Address{
				&mail.Address{
					Name:    "郵便ダン",
					Address: "dan.yuubin@example.com",
				},
				&mail.Address{
					Name:    "郵便イーブ",
					Address: "eve.yubin@example.com",
				},
			},
			Bcc: []*mail.Address{
				&mail.Address{
					Name:    "郵便フランク",
					Address: "frank.yuubin@example.com",
				},
				&mail.Address{
					Name:    "郵便グレイス",
					Address: "grace.yubin@example.com",
				},
			},
			MessageID: "Message-Id-1@example.com",
			InReplyTo: []string{
				"Message-Id-0@example.com",
			},
			References: []string{
				"Message-Id-0@example.com",
			},
			Subject:  "📧 Signed Test いろは歌",
			Comments: "Message Header Comment",
			Keywords: []string{
				"Keyword 1",
				"Keyword 2",
			},
			ResentDate: time.Time(time.Date(2019, 3, 31, 22, 55, 0, 0, time.UTC)),
			ResentFrom: []*mail.Address{
				&mail.Address{
					Name:    "郵便アリス",
					Address: "alice.yuubin@example.net",
				},
				&mail.Address{
					Name:    "郵便アリス",
					Address: "alice.yuubin@example.com",
				},
			},
			ResentSender: &mail.Address{
				Name:    "郵便アリス",
				Address: "alice.yuubin@example.net",
			},
			ResentTo: []*mail.Address{
				&mail.Address{
					Name:    "郵便ボブ",
					Address: "bob.yuubin@example.net",
				},
				&mail.Address{
					Name:    "郵便キャロル",
					Address: "carol.yuubin@example.net",
				},
			},
			ResentCc: []*mail.Address{
				&mail.Address{
					Name:    "郵便ダン",
					Address: "dan.yuubin@example.net",
				},
				&mail.Address{
					Name:    "郵便イーブ",
					Address: "eve.yubin@example.net",
				},
			},
			ResentBcc: []*mail.Address{
				&mail.Address{
					Name:    "郵便フランク",
					Address: "frank.yuubin@example.net",
				},
				&mail.Address{
					Name:    "郵便グレイス",
					Address: "grace.yubin@example.net",
				},
			},
			ResentMessageID: "Message-Id-1@example.net",
			ExtraHeaders: map[string][]string{
				"X-Clacks-Overhead": []string{
					"GNU Terry Pratchett",
				},
				"X-Script/function/\t !\"#$%&'()*+,-./;<=>?@[\\]^_`{|}~": []string{
					"TEST VALUE 1\t !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_` abcdefghijklmnopqrstuvwxyz{|}~",
					"TEST VALUE 2\t !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_` abcdefghijklmnopqrstuvwxyz{|}~",
				},
			},
			ContentInfo: &email.ContentInfo{
				Type: "multipart/signed",
				TypeParams: map[string]string{
					"boundary": "SignedBoundaryString",
					"charset":  "euc-jp",
					"micalg":   "sha1",
					"protocol": "application/pkcs7-signature",
				},
				Disposition:       "",
				DispositionParams: map[string]string(nil), // p0
				TransferEncoding:  "quoted-printable",
				ID:                "",
				Charset:           "euc-jp",
			},
			Received: nil,
		},
		Text: "色は匂えど\n" +
			"散りぬるを\n" +
			"我が世誰ぞ\n" +
			"常ならん\n" +
			"有為の奥山\n" +
			"今日越えて\n" +
			"浅き夢見じ\n" +
			"酔いもせず。\n" +
			"\n" +
			"Iro wa nioedo / Chirinuru o / Wa ga yo tare zo / Tsune naran / Ui no okuyama / Kyo koete Asaki yume miji / Yoi mo sezu.\n" +
			"\n" +
			"とりなくこゑすゆめさませみよあけわたるひんかしをそらいろはえておきつへにほふねむれゐぬもやのうち。\n" +
			"\n" +
			"天地星空\n" +
			"山川峰谷\n" +
			"雲霧室苔\n" +
			"人犬上末\n" +
			"硫黄猿生ふ為よ\n" +
			"榎の枝を馴れ居て。\n" +
			"\n" +
			"田居に出で菜摘むわれをぞ君召すと求食り追ひゆく山城の打酔へる子ら藻葉干せよえ舟繋けぬ。",
		EnrichedText: "",
		HTML:         "",
		Files: []*email.File{
			&email.File{
				FileType: "attachment",
				Name:     "smime.p7s",
				ContentInfo: &email.ContentInfo{
					Type: "application/pkcs7-signature",
					TypeParams: map[string]string{
						"name": "smime.p7s",
					},
					Disposition: "attachment",
					DispositionParams: map[string]string{
						"filename": "smime.p7s",
					},
					TransferEncoding: "base64",
					ID:               "",
					Charset:          "euc-jp",
				},
				Data: []byte{
					239, 191, 189, 28, 239, 191, 189, 239, 191, 189, 117, 46, 239, 191, 189, 18, 97,
					239, 191, 189, 126, 239, 191, 189, 239, 191, 189, 231, 180, 160, 25, 58, 230, 191,
					172, 233, 180, 187, 239, 191, 189, 239, 191, 189, 239, 191, 189, 108, 31, 71, 27,
					239, 191, 189, 80, 239, 191, 189, 239, 191, 189, 231, 165, 159, 239, 191, 189, 239,
					191, 189, 239, 191, 189, 239, 191, 189, 29, 239, 191, 189, 19, 239, 191, 189, 239,
					191, 189, 80, 239, 191, 189, 239, 191, 189, 231, 165, 159, 239, 191, 189, 239, 191,
					189, 239, 191, 189, 239, 191, 189, 29, 239, 191, 189, 19, 239, 191, 189, 49, 232,
					171, 182, 127, 7, 28, 104, 33, 239, 191, 189, 120, 71, 82, 232, 145, 185, 38, 30,
					229, 173, 150, 229, 180, 155, 239, 191, 189, 113, 239, 191, 189, 226, 136, 169, 239,
					191, 189, 239, 191, 189, 57, 239, 191, 189, 28, 113, 239, 191, 189, 226, 136, 169,
					239, 191, 189, 38, 24, 230, 139, 141, 229, 176, 134, 108, 31, 71, 27, 239, 191, 189,
					80, 110, 120, 232, 168, 146, 239, 191, 189, 239, 191, 189, 239, 191, 189, 239, 191,
					189, 29, 239, 191, 189, 19, 239, 191, 189, 8, 114, 30, 17, 229, 158, 170, 58, 95,
					239, 191, 189, 94, 59, 26, 18, 6, 124, 119, 239, 191, 189, 79, 239, 191, 189, 21,
					65, 233, 180, 187, 239, 191, 189, 239, 191, 189,
				},
			},
		},
	}
	testEmailFromFile(t, fp, expectedEmail)
}

func TestParseEmailKoreanPlaintextUtf8OverBase64(t *testing.T) {
	fp := "tests/test_korean_plaintext_utf-8_over_base64.txt"
	expectedEmail := &email.Email{
		Headers: email.Headers{
			Date: time.Time(time.Date(2019, 3, 31, 22, 55, 0, 0, time.UTC)),
			Sender: &mail.Address{
				Name:    "앨리스 보내는사람",
				Address: "alice.bonaeneunsalam@example.com",
			},
			From: []*mail.Address{
				&mail.Address{
					Name:    "앨리스 보내는사람",
					Address: "alice.bonaeneunsalam@example.com",
				},
				&mail.Address{
					Name:    "앨리스 보내는사람",
					Address: "alice.bonaeneunsalam@example.net",
				},
			},
			ReplyTo: []*mail.Address{
				&mail.Address{
					Name:    "앨리스 보내는사람",
					Address: "alice.bonaeneunsalam@example.net",
				},
			},
			To: []*mail.Address{
				&mail.Address{
					Name:    "밥 수신자",
					Address: "bob.susinja@example.com",
				},
				&mail.Address{
					Name:    "캐롤 수신자",
					Address: "carol.susinja@example.com",
				},
			},
			Cc: []*mail.Address{
				&mail.Address{
					Name:    "댄 수신자",
					Address: "dan.susinja@example.com",
				},
				&mail.Address{
					Name:    "이브 수신자",
					Address: "eve.susinja@example.com",
				},
			},
			Bcc: []*mail.Address{
				&mail.Address{
					Name:    "프랭크 수신자",
					Address: "frank.susinja@example.com",
				},
				&mail.Address{
					Name:    "그레이스 수신자",
					Address: "grace.susinja@example.com",
				},
			},
			MessageID: "Message-Id-1@example.com",
			InReplyTo: []string{
				"Message-Id-0@example.com",
			},
			References: []string{
				"Message-Id-0@example.com",
			},
			Subject:  "📧 Test 한국어 팬그램",
			Comments: "Message Header Comment",
			Keywords: []string{
				"Keyword 1",
				"Keyword 2",
			},
			ResentDate: time.Time(time.Date(2019, 3, 31, 22, 55, 0, 0, time.UTC)),
			ResentFrom: []*mail.Address{
				&mail.Address{
					Name:    "앨리스 보내는사람",
					Address: "alice.bonaeneunsalam@example.net",
				},
				&mail.Address{
					Name:    "앨리스 보내는사람",
					Address: "alice.bonaeneunsalam@example.com",
				},
			},
			ResentSender: &mail.Address{
				Name:    "앨리스 보내는사람",
				Address: "alice.bonaeneunsalam@example.net",
			},
			ResentTo: []*mail.Address{
				&mail.Address{
					Name:    "밥 수신자",
					Address: "bob.susinja@example.net",
				},
				&mail.Address{
					Name:    "캐롤 수신자",
					Address: "carol.susinja@example.net",
				},
			},
			ResentCc: []*mail.Address{
				&mail.Address{
					Name:    "댄 수신자",
					Address: "dan.susinja@example.net",
				},
				&mail.Address{
					Name:    "이브 수신자",
					Address: "eve.susinja@example.net",
				},
			},
			ResentBcc: []*mail.Address{
				&mail.Address{
					Name:    "프랭크 수신자",
					Address: "frank.susinja@example.net",
				},
				&mail.Address{
					Name:    "그레이스 수신자",
					Address: "grace.susinja@example.net",
				},
			},
			ResentMessageID: "Message-Id-1@example.net",
			ExtraHeaders: map[string][]string{
				"X-Clacks-Overhead": []string{
					"GNU Terry Pratchett",
				},
				"X-Script/function/\t !\"#$%&'()*+,-./;<=>?@[\\]^_`{|}~": []string{
					"TEST VALUE 1\t !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_` abcdefghijklmnopqrstuvwxyz{|}~",
					"TEST VALUE 2\t !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_` abcdefghijklmnopqrstuvwxyz{|}~",
				},
			},
			ContentInfo: &email.ContentInfo{
				Type: "text/plain",
				TypeParams: map[string]string{
					"charset": "utf-8",
				},
				Disposition:       "",
				DispositionParams: map[string]string(nil),
				TransferEncoding:  "base64",
				ID:                "",
				Charset:           "utf-8",
			},
			Received: nil,
		},
		Text:         "키스의 고유조건은 입술끼리 만나야 하고 특별한 기술은 필요치 않다.",
		EnrichedText: "",
		HTML:         "",
		Files:        nil,
	}
	testEmailFromFile(t, fp, expectedEmail)
}

func TestParseEmailKoreanPlaintextUtf8OverQuotedprintable(t *testing.T) {
	fp := "tests/test_korean_plaintext_utf-8_over_quoted-printable.txt"
	expectedEmail := &email.Email{
		Headers: email.Headers{
			Date: time.Time(time.Date(2019, 3, 31, 22, 55, 0, 0, time.UTC)),
			Sender: &mail.Address{
				Name:    "앨리스 보내는사람",
				Address: "alice.bonaeneunsalam@example.com",
			},
			From: []*mail.Address{
				&mail.Address{
					Name:    "앨리스 보내는사람",
					Address: "alice.bonaeneunsalam@example.com",
				},
				&mail.Address{
					Name:    "앨리스 보내는사람",
					Address: "alice.bonaeneunsalam@example.net",
				},
			},
			ReplyTo: []*mail.Address{
				&mail.Address{
					Name:    "앨리스 보내는사람",
					Address: "alice.bonaeneunsalam@example.net",
				},
			},
			To: []*mail.Address{
				&mail.Address{
					Name:    "밥 수신자",
					Address: "bob.susinja@example.com",
				},
				&mail.Address{
					Name:    "캐롤 수신자",
					Address: "carol.susinja@example.com",
				},
			},
			Cc: []*mail.Address{
				&mail.Address{
					Name:    "댄 수신자",
					Address: "dan.susinja@example.com",
				},
				&mail.Address{
					Name:    "이브 수신자",
					Address: "eve.susinja@example.com",
				},
			},
			Bcc: []*mail.Address{
				&mail.Address{
					Name:    "프랭크 수신자",
					Address: "frank.susinja@example.com",
				},
				&mail.Address{
					Name:    "그레이스 수신자",
					Address: "grace.susinja@example.com",
				},
			},
			MessageID: "Message-Id-1@example.com",
			InReplyTo: []string{
				"Message-Id-0@example.com",
			},
			References: []string{
				"Message-Id-0@example.com",
			},
			Subject:  "📧 Test 한국어 팬그램",
			Comments: "Message Header Comment",
			Keywords: []string{
				"Keyword 1",
				"Keyword 2",
			},
			ResentDate: time.Time(time.Date(2019, 3, 31, 22, 55, 0, 0, time.UTC)),
			ResentFrom: []*mail.Address{
				&mail.Address{
					Name:    "앨리스 보내는사람",
					Address: "alice.bonaeneunsalam@example.net",
				},
				&mail.Address{
					Name:    "앨리스 보내는사람",
					Address: "alice.bonaeneunsalam@example.com",
				},
			},
			ResentSender: &mail.Address{
				Name:    "앨리스 보내는사람",
				Address: "alice.bonaeneunsalam@example.net",
			},
			ResentTo: []*mail.Address{
				&mail.Address{
					Name:    "밥 수신자",
					Address: "bob.susinja@example.net",
				},
				&mail.Address{
					Name:    "캐롤 수신자",
					Address: "carol.susinja@example.net",
				},
			},
			ResentCc: []*mail.Address{
				&mail.Address{
					Name:    "댄 수신자",
					Address: "dan.susinja@example.net",
				},
				&mail.Address{
					Name:    "이브 수신자",
					Address: "eve.susinja@example.net",
				},
			},
			ResentBcc: []*mail.Address{
				&mail.Address{
					Name:    "프랭크 수신자",
					Address: "frank.susinja@example.net",
				},
				&mail.Address{
					Name:    "그레이스 수신자",
					Address: "grace.susinja@example.net",
				},
			},
			ResentMessageID: "Message-Id-1@example.net",
			ExtraHeaders: map[string][]string{
				"X-Clacks-Overhead": []string{
					"GNU Terry Pratchett",
				},
				"X-Script/function/\t !\"#$%&'()*+,-./;<=>?@[\\]^_`{|}~": []string{
					"TEST VALUE 1\t !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_` abcdefghijklmnopqrstuvwxyz{|}~",
					"TEST VALUE 2\t !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_` abcdefghijklmnopqrstuvwxyz{|}~",
				},
			},
			ContentInfo: &email.ContentInfo{
				Type: "text/plain",
				TypeParams: map[string]string{
					"charset": "utf-8",
				},
				Disposition:       "",
				DispositionParams: map[string]string(nil),
				TransferEncoding:  "quoted-printable",
				ID:                "",
				Charset:           "utf-8",
			},
			Received: nil,
		},
		Text:         "키스의 고유조건은 입술끼리 만나야 하고 특별한 기술은 필요치 않다.",
		EnrichedText: "",
		HTML:         "",
		Files:        nil,
	}
	testEmailFromFile(t, fp, expectedEmail)
}

func TestParseEmailKoreanPlaintextEuckrOverBase64(t *testing.T) {
	fp := "tests/test_korean_plaintext_euc-kr_over_base64.txt"
	expectedEmail := &email.Email{
		Headers: email.Headers{
			Date: time.Time(time.Date(2019, 3, 31, 22, 55, 0, 0, time.UTC)),
			Sender: &mail.Address{
				Name:    "앨리스 보내는사람",
				Address: "alice.bonaeneunsalam@example.com",
			},
			From: []*mail.Address{
				&mail.Address{
					Name:    "앨리스 보내는사람",
					Address: "alice.bonaeneunsalam@example.com",
				},
				&mail.Address{
					Name:    "앨리스 보내는사람",
					Address: "alice.bonaeneunsalam@example.net",
				},
			},
			ReplyTo: []*mail.Address{
				&mail.Address{
					Name:    "앨리스 보내는사람",
					Address: "alice.bonaeneunsalam@example.net",
				},
			},
			To: []*mail.Address{
				&mail.Address{
					Name:    "밥 수신자",
					Address: "bob.susinja@example.com",
				},
				&mail.Address{
					Name:    "캐롤 수신자",
					Address: "carol.susinja@example.com",
				},
			},
			Cc: []*mail.Address{
				&mail.Address{
					Name:    "댄 수신자",
					Address: "dan.susinja@example.com",
				},
				&mail.Address{
					Name:    "이브 수신자",
					Address: "eve.susinja@example.com",
				},
			},
			Bcc: []*mail.Address{
				&mail.Address{
					Name:    "프랭크 수신자",
					Address: "frank.susinja@example.com",
				},
				&mail.Address{
					Name:    "그레이스 수신자",
					Address: "grace.susinja@example.com",
				},
			},
			MessageID: "Message-Id-1@example.com",
			InReplyTo: []string{
				"Message-Id-0@example.com",
			},
			References: []string{
				"Message-Id-0@example.com",
			},
			Subject:  "📧 Test 한국어 팬그램",
			Comments: "Message Header Comment",
			Keywords: []string{
				"Keyword 1",
				"Keyword 2",
			},
			ResentDate: time.Time(time.Date(2019, 3, 31, 22, 55, 0, 0, time.UTC)),
			ResentFrom: []*mail.Address{
				&mail.Address{
					Name:    "앨리스 보내는사람",
					Address: "alice.bonaeneunsalam@example.net",
				},
				&mail.Address{
					Name:    "앨리스 보내는사람",
					Address: "alice.bonaeneunsalam@example.com",
				},
			},
			ResentSender: &mail.Address{
				Name:    "앨리스 보내는사람",
				Address: "alice.bonaeneunsalam@example.net",
			},
			ResentTo: []*mail.Address{
				&mail.Address{
					Name:    "밥 수신자",
					Address: "bob.susinja@example.net",
				},
				&mail.Address{
					Name:    "캐롤 수신자",
					Address: "carol.susinja@example.net",
				},
			},
			ResentCc: []*mail.Address{
				&mail.Address{
					Name:    "댄 수신자",
					Address: "dan.susinja@example.net",
				},
				&mail.Address{
					Name:    "이브 수신자",
					Address: "eve.susinja@example.net",
				},
			},
			ResentBcc: []*mail.Address{
				&mail.Address{
					Name:    "프랭크 수신자",
					Address: "frank.susinja@example.net",
				},
				&mail.Address{
					Name:    "그레이스 수신자",
					Address: "grace.susinja@example.net",
				},
			},
			ResentMessageID: "Message-Id-1@example.net",
			ExtraHeaders: map[string][]string{
				"X-Clacks-Overhead": []string{
					"GNU Terry Pratchett",
				},
				"X-Script/function/\t !\"#$%&'()*+,-./;<=>?@[\\]^_`{|}~": []string{
					"TEST VALUE 1\t !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_` abcdefghijklmnopqrstuvwxyz{|}~",
					"TEST VALUE 2\t !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_` abcdefghijklmnopqrstuvwxyz{|}~",
				},
			},
			ContentInfo: &email.ContentInfo{
				Type: "text/plain",
				TypeParams: map[string]string{
					"charset": "euc-kr",
				},
				Disposition:       "",
				DispositionParams: map[string]string(nil),
				TransferEncoding:  "base64",
				ID:                "",
				Charset:           "euc-kr",
			},
			Received: nil,
		},
		Text:         "키스의 고유조건은 입술끼리 만나야 하고 특별한 기술은 필요치 않다.",
		EnrichedText: "",
		HTML:         "",
		Files:        nil,
	}
	testEmailFromFile(t, fp, expectedEmail)
}

func TestParseEmailKoreanPlaintextEuckrOverQuotedprintable(t *testing.T) {
	fp := "tests/test_korean_plaintext_euc-kr_over_quoted-printable.txt"
	expectedEmail := &email.Email{
		Headers: email.Headers{
			Date: time.Time(time.Date(2019, 3, 31, 22, 55, 0, 0, time.UTC)),
			Sender: &mail.Address{
				Name:    "앨리스 보내는사람",
				Address: "alice.bonaeneunsalam@example.com",
			},
			From: []*mail.Address{
				&mail.Address{
					Name:    "앨리스 보내는사람",
					Address: "alice.bonaeneunsalam@example.com",
				},
				&mail.Address{
					Name:    "앨리스 보내는사람",
					Address: "alice.bonaeneunsalam@example.net",
				},
			},
			ReplyTo: []*mail.Address{
				&mail.Address{
					Name:    "앨리스 보내는사람",
					Address: "alice.bonaeneunsalam@example.net",
				},
			},
			To: []*mail.Address{
				&mail.Address{
					Name:    "밥 수신자",
					Address: "bob.susinja@example.com",
				},
				&mail.Address{
					Name:    "캐롤 수신자",
					Address: "carol.susinja@example.com",
				},
			},
			Cc: []*mail.Address{
				&mail.Address{
					Name:    "댄 수신자",
					Address: "dan.susinja@example.com",
				},
				&mail.Address{
					Name:    "이브 수신자",
					Address: "eve.susinja@example.com",
				},
			},
			Bcc: []*mail.Address{
				&mail.Address{
					Name:    "프랭크 수신자",
					Address: "frank.susinja@example.com",
				},
				&mail.Address{
					Name:    "그레이스 수신자",
					Address: "grace.susinja@example.com",
				},
			},
			MessageID: "Message-Id-1@example.com",
			InReplyTo: []string{
				"Message-Id-0@example.com",
			},
			References: []string{
				"Message-Id-0@example.com",
			},
			Subject:  "📧 Test 한국어 팬그램",
			Comments: "Message Header Comment",
			Keywords: []string{
				"Keyword 1",
				"Keyword 2",
			},
			ResentDate: time.Time(time.Date(2019, 3, 31, 22, 55, 0, 0, time.UTC)),
			ResentFrom: []*mail.Address{
				&mail.Address{
					Name:    "앨리스 보내는사람",
					Address: "alice.bonaeneunsalam@example.net",
				},
				&mail.Address{
					Name:    "앨리스 보내는사람",
					Address: "alice.bonaeneunsalam@example.com",
				},
			},
			ResentSender: &mail.Address{
				Name:    "앨리스 보내는사람",
				Address: "alice.bonaeneunsalam@example.net",
			},
			ResentTo: []*mail.Address{
				&mail.Address{
					Name:    "밥 수신자",
					Address: "bob.susinja@example.net",
				},
				&mail.Address{
					Name:    "캐롤 수신자",
					Address: "carol.susinja@example.net",
				},
			},
			ResentCc: []*mail.Address{
				&mail.Address{
					Name:    "댄 수신자",
					Address: "dan.susinja@example.net",
				},
				&mail.Address{
					Name:    "이브 수신자",
					Address: "eve.susinja@example.net",
				},
			},
			ResentBcc: []*mail.Address{
				&mail.Address{
					Name:    "프랭크 수신자",
					Address: "frank.susinja@example.net",
				},
				&mail.Address{
					Name:    "그레이스 수신자",
					Address: "grace.susinja@example.net",
				},
			},
			ResentMessageID: "Message-Id-1@example.net",
			ExtraHeaders: map[string][]string{
				"X-Clacks-Overhead": []string{
					"GNU Terry Pratchett",
				},
				"X-Script/function/\t !\"#$%&'()*+,-./;<=>?@[\\]^_`{|}~": []string{
					"TEST VALUE 1\t !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_` abcdefghijklmnopqrstuvwxyz{|}~",
					"TEST VALUE 2\t !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_` abcdefghijklmnopqrstuvwxyz{|}~",
				},
			},
			ContentInfo: &email.ContentInfo{
				Type: "text/plain",
				TypeParams: map[string]string{
					"charset": "euc-kr",
				},
				Disposition:       "",
				DispositionParams: map[string]string(nil),
				TransferEncoding:  "quoted-printable",
				ID:                "",
				Charset:           "euc-kr",
			},
			Received: nil,
		},
		Text:         "키스의 고유조건은 입술끼리 만나야 하고 특별한 기술은 필요치 않다.",
		EnrichedText: "",
		HTML:         "",
		Files:        nil,
	}
	testEmailFromFile(t, fp, expectedEmail)
}

func TestParseEmailKoreanMultipartRelatedUtf8OverBase64(t *testing.T) {
	fp := "tests/test_korean_multipart_related_utf-8_over_base64.txt"
	expectedEmail := &email.Email{
		Headers: email.Headers{
			Date: time.Time(time.Date(2019, 3, 31, 22, 55, 0, 0, time.UTC)),
			Sender: &mail.Address{
				Name:    "앨리스 보내는사람",
				Address: "alice.bonaeneunsalam@example.com",
			},
			From: []*mail.Address{
				&mail.Address{
					Name:    "앨리스 보내는사람",
					Address: "alice.bonaeneunsalam@example.com",
				},
				&mail.Address{
					Name:    "앨리스 보내는사람",
					Address: "alice.bonaeneunsalam@example.net",
				},
			},
			ReplyTo: []*mail.Address{
				&mail.Address{
					Name:    "앨리스 보내는사람",
					Address: "alice.bonaeneunsalam@example.net",
				},
			},
			To: []*mail.Address{
				&mail.Address{
					Name:    "밥 수신자",
					Address: "bob.susinja@example.com",
				},
				&mail.Address{
					Name:    "캐롤 수신자",
					Address: "carol.susinja@example.com",
				},
			},
			Cc: []*mail.Address{
				&mail.Address{
					Name:    "댄 수신자",
					Address: "dan.susinja@example.com",
				},
				&mail.Address{
					Name:    "이브 수신자",
					Address: "eve.susinja@example.com",
				},
			},
			Bcc: []*mail.Address{
				&mail.Address{
					Name:    "프랭크 수신자",
					Address: "frank.susinja@example.com",
				},
				&mail.Address{
					Name:    "그레이스 수신자",
					Address: "grace.susinja@example.com",
				},
			},
			MessageID: "Message-Id-1@example.com",
			InReplyTo: []string{
				"Message-Id-0@example.com",
			},
			References: []string{
				"Message-Id-0@example.com",
			},
			Subject:  "📧 Test 한국어 팬그램",
			Comments: "Message Header Comment",
			Keywords: []string{
				"Keyword 1",
				"Keyword 2",
			},
			ResentDate: time.Time(time.Date(2019, 3, 31, 22, 55, 0, 0, time.UTC)),
			ResentFrom: []*mail.Address{
				&mail.Address{
					Name:    "앨리스 보내는사람",
					Address: "alice.bonaeneunsalam@example.net",
				},
				&mail.Address{
					Name:    "앨리스 보내는사람",
					Address: "alice.bonaeneunsalam@example.com",
				},
			},
			ResentSender: &mail.Address{
				Name:    "앨리스 보내는사람",
				Address: "alice.bonaeneunsalam@example.net",
			},
			ResentTo: []*mail.Address{
				&mail.Address{
					Name:    "밥 수신자",
					Address: "bob.susinja@example.net",
				},
				&mail.Address{
					Name:    "캐롤 수신자",
					Address: "carol.susinja@example.net",
				},
			},
			ResentCc: []*mail.Address{
				&mail.Address{
					Name:    "댄 수신자",
					Address: "dan.susinja@example.net",
				},
				&mail.Address{
					Name:    "이브 수신자",
					Address: "eve.susinja@example.net",
				},
			},
			ResentBcc: []*mail.Address{
				&mail.Address{
					Name:    "프랭크 수신자",
					Address: "frank.susinja@example.net",
				},
				&mail.Address{
					Name:    "그레이스 수신자",
					Address: "grace.susinja@example.net",
				},
			},
			ResentMessageID: "Message-Id-1@example.net",
			ExtraHeaders: map[string][]string{
				"X-Clacks-Overhead": []string{
					"GNU Terry Pratchett",
				},
				"X-Script/function/\t !\"#$%&'()*+,-./;<=>?@[\\]^_`{|}~": []string{
					"TEST VALUE 1\t !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_` abcdefghijklmnopqrstuvwxyz{|}~",
					"TEST VALUE 2\t !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_` abcdefghijklmnopqrstuvwxyz{|}~",
				},
			},
			ContentInfo: &email.ContentInfo{
				Type: "multipart/related",
				TypeParams: map[string]string{
					"boundary": "RelatedBoundaryString",
					"charset":  "utf-8",
				},
				Disposition:       "",
				DispositionParams: map[string]string(nil), // p0
				TransferEncoding:  "base64",
				ID:                "",
				Charset:           "utf-8",
			},
			Received: nil,
		},
		Text:         "키스의 고유조건은 입술끼리 만나야 하고 특별한 기술은 필요치 않다.",
		EnrichedText: "<bold>키스의</bold> <italic>고유조건은</italic> <fixed>입술끼리</fixed> <underline>만나야</underline> 하고 특별한 기술은 필요치 않다.",
		HTML: "<html>\n" +
			"<div dir=\"ltr\">\n" +
			"<p>키스의 고유조건은 입술끼리 만나야 하고 특별한 기술은 필요치 않다.</p>\n" +
			"</div>\n" +
			"</html>",
		Files: []*email.File{
			&email.File{
				FileType: "inline",
				Name:     "inline-jpg-image-filename.jpg",
				ContentInfo: &email.ContentInfo{
					Type: "image/jpeg",
					TypeParams: map[string]string{
						"name": "inline-jpg-image-name.jpg",
					},
					Disposition: "inline",
					DispositionParams: map[string]string{
						"filename": "inline-jpg-image-filename.jpg",
					},
					TransferEncoding: "base64",
					ID:               "inline-jpg-image.jpg@example.com",
					Charset:          "utf-8",
				},
				Data: []byte{
					239, 191, 189, 239, 191, 189, 239, 191, 189, 239, 191, 189, 0, 67, 0, 3, 2, 2, 2,
					2, 2, 3, 2, 2, 2, 3, 3, 3, 3, 4, 6, 4, 4, 4, 4, 4, 8, 6, 6, 5, 6, 9, 8, 10, 10, 9,
					8, 9, 9, 10, 12, 15, 12, 10, 11, 14, 11, 9, 9, 13, 17, 13, 14, 15, 16, 16, 17, 16,
					10, 12, 18, 19, 18, 16, 19, 15, 16, 16, 16, 239, 191, 189, 239, 191, 189, 0, 11,
					8, 0, 1, 0, 1, 1, 1, 17, 0, 239, 191, 189, 239, 191, 189, 0, 6, 0, 16, 16, 5, 239,
					191, 189, 239, 191, 189, 0, 8, 1, 1, 0, 0, 63, 0, 239, 191, 189, 239, 191, 189, 32,
					239, 191, 189, 239, 191, 189,
				},
			},
		},
	}
	testEmailFromFile(t, fp, expectedEmail)
}

func TestParseEmailKoreanMultipartRelatedUtf8OverQuotedprintable(t *testing.T) {
	fp := "tests/test_korean_multipart_related_utf-8_over_quoted-printable.txt"
	expectedEmail := &email.Email{
		Headers: email.Headers{
			Date: time.Time(time.Date(2019, 3, 31, 22, 55, 0, 0, time.UTC)),
			Sender: &mail.Address{
				Name:    "앨리스 보내는사람",
				Address: "alice.bonaeneunsalam@example.com",
			},
			From: []*mail.Address{
				&mail.Address{
					Name:    "앨리스 보내는사람",
					Address: "alice.bonaeneunsalam@example.com",
				},
				&mail.Address{
					Name:    "앨리스 보내는사람",
					Address: "alice.bonaeneunsalam@example.net",
				},
			},
			ReplyTo: []*mail.Address{
				&mail.Address{
					Name:    "앨리스 보내는사람",
					Address: "alice.bonaeneunsalam@example.net",
				},
			},
			To: []*mail.Address{
				&mail.Address{
					Name:    "밥 수신자",
					Address: "bob.susinja@example.com",
				},
				&mail.Address{
					Name:    "캐롤 수신자",
					Address: "carol.susinja@example.com",
				},
			},
			Cc: []*mail.Address{
				&mail.Address{
					Name:    "댄 수신자",
					Address: "dan.susinja@example.com",
				},
				&mail.Address{
					Name:    "이브 수신자",
					Address: "eve.susinja@example.com",
				},
			},
			Bcc: []*mail.Address{
				&mail.Address{
					Name:    "프랭크 수신자",
					Address: "frank.susinja@example.com",
				},
				&mail.Address{
					Name:    "그레이스 수신자",
					Address: "grace.susinja@example.com",
				},
			},
			MessageID: "Message-Id-1@example.com",
			InReplyTo: []string{
				"Message-Id-0@example.com",
			},
			References: []string{
				"Message-Id-0@example.com",
			},
			Subject:  "📧 Test 한국어 팬그램",
			Comments: "Message Header Comment",
			Keywords: []string{
				"Keyword 1",
				"Keyword 2",
			},
			ResentDate: time.Time(time.Date(2019, 3, 31, 22, 55, 0, 0, time.UTC)),
			ResentFrom: []*mail.Address{
				&mail.Address{
					Name:    "앨리스 보내는사람",
					Address: "alice.bonaeneunsalam@example.net",
				},
				&mail.Address{
					Name:    "앨리스 보내는사람",
					Address: "alice.bonaeneunsalam@example.com",
				},
			},
			ResentSender: &mail.Address{
				Name:    "앨리스 보내는사람",
				Address: "alice.bonaeneunsalam@example.net",
			},
			ResentTo: []*mail.Address{
				&mail.Address{
					Name:    "밥 수신자",
					Address: "bob.susinja@example.net",
				},
				&mail.Address{
					Name:    "캐롤 수신자",
					Address: "carol.susinja@example.net",
				},
			},
			ResentCc: []*mail.Address{
				&mail.Address{
					Name:    "댄 수신자",
					Address: "dan.susinja@example.net",
				},
				&mail.Address{
					Name:    "이브 수신자",
					Address: "eve.susinja@example.net",
				},
			},
			ResentBcc: []*mail.Address{
				&mail.Address{
					Name:    "프랭크 수신자",
					Address: "frank.susinja@example.net",
				},
				&mail.Address{
					Name:    "그레이스 수신자",
					Address: "grace.susinja@example.net",
				},
			},
			ResentMessageID: "Message-Id-1@example.net",
			ExtraHeaders: map[string][]string{
				"X-Clacks-Overhead": []string{
					"GNU Terry Pratchett",
				},
				"X-Script/function/\t !\"#$%&'()*+,-./;<=>?@[\\]^_`{|}~": []string{
					"TEST VALUE 1\t !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_` abcdefghijklmnopqrstuvwxyz{|}~",
					"TEST VALUE 2\t !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_` abcdefghijklmnopqrstuvwxyz{|}~",
				},
			},
			ContentInfo: &email.ContentInfo{
				Type: "multipart/related",
				TypeParams: map[string]string{
					"boundary": "RelatedBoundaryString",
					"charset":  "utf-8",
				},
				Disposition:       "",
				DispositionParams: map[string]string(nil), // p0
				TransferEncoding:  "quoted-printable",
				ID:                "",
				Charset:           "utf-8",
			},
			Received: nil,
		},
		Text:         "키스의 고유조건은 입술끼리 만나야 하고 특별한 기술은 필요치 않다.",
		EnrichedText: "<bold>키스의</bold> <italic>고유조건은</italic> <fixed>입술끼리</fixed> <underline>만나야</underline> 하고 특별한 기술은 필요치 않다.",
		HTML: "<html>\n" +
			"<div dir=\"ltr\">\n" +
			"<p>키스의 고유조건은 입술끼리 만나야 하고 특별한 기술은 필요치 않다.</p>\n" +
			"</div>\n" +
			"</html>",
		Files: []*email.File{
			&email.File{
				FileType: "inline",
				Name:     "inline-jpg-image-filename.jpg",
				ContentInfo: &email.ContentInfo{
					Type: "image/jpeg",
					TypeParams: map[string]string{
						"name": "inline-jpg-image-name.jpg",
					},
					Disposition: "inline",
					DispositionParams: map[string]string{
						"filename": "inline-jpg-image-filename.jpg",
					},
					TransferEncoding: "base64",
					ID:               "inline-jpg-image.jpg@example.com",
					Charset:          "utf-8",
				},
				Data: []byte{
					239, 191, 189, 239, 191, 189, 239, 191, 189, 239, 191, 189, 0, 67, 0, 3, 2, 2, 2,
					2, 2, 3, 2, 2, 2, 3, 3, 3, 3, 4, 6, 4, 4, 4, 4, 4, 8, 6, 6, 5, 6, 9, 8, 10, 10, 9,
					8, 9, 9, 10, 12, 15, 12, 10, 11, 14, 11, 9, 9, 13, 17, 13, 14, 15, 16, 16, 17, 16,
					10, 12, 18, 19, 18, 16, 19, 15, 16, 16, 16, 239, 191, 189, 239, 191, 189, 0, 11,
					8, 0, 1, 0, 1, 1, 1, 17, 0, 239, 191, 189, 239, 191, 189, 0, 6, 0, 16, 16, 5, 239,
					191, 189, 239, 191, 189, 0, 8, 1, 1, 0, 0, 63, 0, 239, 191, 189, 239, 191, 189, 32,
					239, 191, 189, 239, 191, 189,
				},
			},
		},
	}
	testEmailFromFile(t, fp, expectedEmail)
}

func TestParseEmailKoreanMultipartRelatedEuckrOverBase64(t *testing.T) {
	fp := "tests/test_korean_multipart_related_euc-kr_over_base64.txt"
	expectedEmail := &email.Email{
		Headers: email.Headers{
			Date: time.Time(time.Date(2019, 3, 31, 22, 55, 0, 0, time.UTC)),
			Sender: &mail.Address{
				Name:    "앨리스 보내는사람",
				Address: "alice.bonaeneunsalam@example.com",
			},
			From: []*mail.Address{
				&mail.Address{
					Name:    "앨리스 보내는사람",
					Address: "alice.bonaeneunsalam@example.com",
				},
				&mail.Address{
					Name:    "앨리스 보내는사람",
					Address: "alice.bonaeneunsalam@example.net",
				},
			},
			ReplyTo: []*mail.Address{
				&mail.Address{
					Name:    "앨리스 보내는사람",
					Address: "alice.bonaeneunsalam@example.net",
				},
			},
			To: []*mail.Address{
				&mail.Address{
					Name:    "밥 수신자",
					Address: "bob.susinja@example.com",
				},
				&mail.Address{
					Name:    "캐롤 수신자",
					Address: "carol.susinja@example.com",
				},
			},
			Cc: []*mail.Address{
				&mail.Address{
					Name:    "댄 수신자",
					Address: "dan.susinja@example.com",
				},
				&mail.Address{
					Name:    "이브 수신자",
					Address: "eve.susinja@example.com",
				},
			},
			Bcc: []*mail.Address{
				&mail.Address{
					Name:    "프랭크 수신자",
					Address: "frank.susinja@example.com",
				},
				&mail.Address{
					Name:    "그레이스 수신자",
					Address: "grace.susinja@example.com",
				},
			},
			MessageID: "Message-Id-1@example.com",
			InReplyTo: []string{
				"Message-Id-0@example.com",
			},
			References: []string{
				"Message-Id-0@example.com",
			},
			Subject:  "📧 Test 한국어 팬그램",
			Comments: "Message Header Comment",
			Keywords: []string{
				"Keyword 1",
				"Keyword 2",
			},
			ResentDate: time.Time(time.Date(2019, 3, 31, 22, 55, 0, 0, time.UTC)),
			ResentFrom: []*mail.Address{
				&mail.Address{
					Name:    "앨리스 보내는사람",
					Address: "alice.bonaeneunsalam@example.net",
				},
				&mail.Address{
					Name:    "앨리스 보내는사람",
					Address: "alice.bonaeneunsalam@example.com",
				},
			},
			ResentSender: &mail.Address{
				Name:    "앨리스 보내는사람",
				Address: "alice.bonaeneunsalam@example.net",
			},
			ResentTo: []*mail.Address{
				&mail.Address{
					Name:    "밥 수신자",
					Address: "bob.susinja@example.net",
				},
				&mail.Address{
					Name:    "캐롤 수신자",
					Address: "carol.susinja@example.net",
				},
			},
			ResentCc: []*mail.Address{
				&mail.Address{
					Name:    "댄 수신자",
					Address: "dan.susinja@example.net",
				},
				&mail.Address{
					Name:    "이브 수신자",
					Address: "eve.susinja@example.net",
				},
			},
			ResentBcc: []*mail.Address{
				&mail.Address{
					Name:    "프랭크 수신자",
					Address: "frank.susinja@example.net",
				},
				&mail.Address{
					Name:    "그레이스 수신자",
					Address: "grace.susinja@example.net",
				},
			},
			ResentMessageID: "Message-Id-1@example.net",
			ExtraHeaders: map[string][]string{
				"X-Clacks-Overhead": []string{
					"GNU Terry Pratchett",
				},
				"X-Script/function/\t !\"#$%&'()*+,-./;<=>?@[\\]^_`{|}~": []string{
					"TEST VALUE 1\t !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_` abcdefghijklmnopqrstuvwxyz{|}~",
					"TEST VALUE 2\t !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_` abcdefghijklmnopqrstuvwxyz{|}~",
				},
			},
			ContentInfo: &email.ContentInfo{
				Type: "multipart/related",
				TypeParams: map[string]string{
					"boundary": "RelatedBoundaryString",
					"charset":  "euc-kr",
				},
				Disposition:       "",
				DispositionParams: map[string]string(nil), // p0
				TransferEncoding:  "base64",
				ID:                "",
				Charset:           "euc-kr",
			},
			Received: nil,
		},
		Text:         "키스의 고유조건은 입술끼리 만나야 하고 특별한 기술은 필요치 않다.",
		EnrichedText: "<bold>키스의</bold> <italic>고유조건은</italic> <fixed>입술끼리</fixed> <underline>만나야</underline> 하고 특별한 기술은 필요치 않다.",
		HTML: "<html>\n" +
			"<div dir=\"ltr\">\n" +
			"<p>키스의 고유조건은 입술끼리 만나야 하고 특별한 기술은 필요치 않다.</p>\n" +
			"</div>\n" +
			"</html>",
		Files: []*email.File{
			&email.File{
				FileType: "inline",
				Name:     "inline-jpg-image-filename.jpg",
				ContentInfo: &email.ContentInfo{
					Type: "image/jpeg",
					TypeParams: map[string]string{
						"name": "inline-jpg-image-name.jpg",
					},
					Disposition: "inline",
					DispositionParams: map[string]string{
						"filename": "inline-jpg-image-filename.jpg",
					},
					TransferEncoding: "base64",
					ID:               "inline-jpg-image.jpg@example.com",
					Charset:          "euc-kr",
				},
				Data: []byte{
					239, 191, 189, 239, 191, 189, 239, 191, 189, 0, 67, 0, 3, 2, 2, 2, 2, 2, 3, 2, 2,
					2, 3, 3, 3, 3, 4, 6, 4, 4, 4, 4, 4, 8, 6, 6, 5, 6, 9, 8, 10, 10, 9, 8, 9, 9, 10,
					12, 15, 12, 10, 11, 14, 11, 9, 9, 13, 17, 13, 14, 15, 16, 16, 17, 16, 10, 12, 18,
					19, 18, 16, 19, 15, 16, 16, 16, 239, 191, 189, 239, 191, 189, 0, 11, 8, 0, 1, 0,
					1, 1, 1, 17, 0, 239, 191, 189, 239, 191, 189, 0, 6, 0, 16, 16, 5, 239, 191, 189,
					239, 191, 189, 0, 8, 1, 1, 0, 0, 63, 0, 239, 164, 187, 32, 239, 191, 189, 239, 191,
					189,
				},
			},
		},
	}
	testEmailFromFile(t, fp, expectedEmail)
}

func TestParseEmailKoreanMultipartRelatedEuckrOverQuotedprintable(t *testing.T) {
	fp := "tests/test_korean_multipart_related_euc-kr_over_quoted-printable.txt"
	expectedEmail := &email.Email{
		Headers: email.Headers{
			Date: time.Time(time.Date(2019, 3, 31, 22, 55, 0, 0, time.UTC)),
			Sender: &mail.Address{
				Name:    "앨리스 보내는사람",
				Address: "alice.bonaeneunsalam@example.com",
			},
			From: []*mail.Address{
				&mail.Address{
					Name:    "앨리스 보내는사람",
					Address: "alice.bonaeneunsalam@example.com",
				},
				&mail.Address{
					Name:    "앨리스 보내는사람",
					Address: "alice.bonaeneunsalam@example.net",
				},
			},
			ReplyTo: []*mail.Address{
				&mail.Address{
					Name:    "앨리스 보내는사람",
					Address: "alice.bonaeneunsalam@example.net",
				},
			},
			To: []*mail.Address{
				&mail.Address{
					Name:    "밥 수신자",
					Address: "bob.susinja@example.com",
				},
				&mail.Address{
					Name:    "캐롤 수신자",
					Address: "carol.susinja@example.com",
				},
			},
			Cc: []*mail.Address{
				&mail.Address{
					Name:    "댄 수신자",
					Address: "dan.susinja@example.com",
				},
				&mail.Address{
					Name:    "이브 수신자",
					Address: "eve.susinja@example.com",
				},
			},
			Bcc: []*mail.Address{
				&mail.Address{
					Name:    "프랭크 수신자",
					Address: "frank.susinja@example.com",
				},
				&mail.Address{
					Name:    "그레이스 수신자",
					Address: "grace.susinja@example.com",
				},
			},
			MessageID: "Message-Id-1@example.com",
			InReplyTo: []string{
				"Message-Id-0@example.com",
			},
			References: []string{
				"Message-Id-0@example.com",
			},
			Subject:  "📧 Test 한국어 팬그램",
			Comments: "Message Header Comment",
			Keywords: []string{
				"Keyword 1",
				"Keyword 2",
			},
			ResentDate: time.Time(time.Date(2019, 3, 31, 22, 55, 0, 0, time.UTC)),
			ResentFrom: []*mail.Address{
				&mail.Address{
					Name:    "앨리스 보내는사람",
					Address: "alice.bonaeneunsalam@example.net",
				},
				&mail.Address{
					Name:    "앨리스 보내는사람",
					Address: "alice.bonaeneunsalam@example.com",
				},
			},
			ResentSender: &mail.Address{
				Name:    "앨리스 보내는사람",
				Address: "alice.bonaeneunsalam@example.net",
			},
			ResentTo: []*mail.Address{
				&mail.Address{
					Name:    "밥 수신자",
					Address: "bob.susinja@example.net",
				},
				&mail.Address{
					Name:    "캐롤 수신자",
					Address: "carol.susinja@example.net",
				},
			},
			ResentCc: []*mail.Address{
				&mail.Address{
					Name:    "댄 수신자",
					Address: "dan.susinja@example.net",
				},
				&mail.Address{
					Name:    "이브 수신자",
					Address: "eve.susinja@example.net",
				},
			},
			ResentBcc: []*mail.Address{
				&mail.Address{
					Name:    "프랭크 수신자",
					Address: "frank.susinja@example.net",
				},
				&mail.Address{
					Name:    "그레이스 수신자",
					Address: "grace.susinja@example.net",
				},
			},
			ResentMessageID: "Message-Id-1@example.net",
			ExtraHeaders: map[string][]string{
				"X-Clacks-Overhead": []string{
					"GNU Terry Pratchett",
				},
				"X-Script/function/\t !\"#$%&'()*+,-./;<=>?@[\\]^_`{|}~": []string{
					"TEST VALUE 1\t !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_` abcdefghijklmnopqrstuvwxyz{|}~",
					"TEST VALUE 2\t !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_` abcdefghijklmnopqrstuvwxyz{|}~",
				},
			},
			ContentInfo: &email.ContentInfo{
				Type: "multipart/related",
				TypeParams: map[string]string{
					"boundary": "RelatedBoundaryString",
					"charset":  "euc-kr",
				},
				Disposition:       "",
				DispositionParams: map[string]string(nil), // p0
				TransferEncoding:  "quoted-printable",
				ID:                "",
				Charset:           "euc-kr",
			},
			Received: nil,
		},
		Text:         "키스의 고유조건은 입술끼리 만나야 하고 특별한 기술은 필요치 않다.",
		EnrichedText: "<bold>키스의</bold> <italic>고유조건은</italic> <fixed>입술끼리</fixed> <underline>만나야</underline> 하고 특별한 기술은 필요치 않다.",
		HTML: "<html>\n" +
			"<div dir=\"ltr\">\n" +
			"<p>키스의 고유조건은 입술끼리 만나야 하고 특별한 기술은 필요치 않다.</p>\n" +
			"</div>\n" +
			"</html>",
		Files: []*email.File{
			&email.File{
				FileType: "inline",
				Name:     "inline-jpg-image-filename.jpg",
				ContentInfo: &email.ContentInfo{
					Type: "image/jpeg",
					TypeParams: map[string]string{
						"name": "inline-jpg-image-name.jpg",
					},
					Disposition: "inline",
					DispositionParams: map[string]string{
						"filename": "inline-jpg-image-filename.jpg",
					},
					TransferEncoding: "base64",
					ID:               "inline-jpg-image.jpg@example.com",
					Charset:          "euc-kr",
				},
				Data: []byte{
					239, 191, 189, 239, 191, 189, 239, 191, 189, 0, 67, 0, 3, 2, 2, 2, 2, 2, 3, 2, 2,
					2, 3, 3, 3, 3, 4, 6, 4, 4, 4, 4, 4, 8, 6, 6, 5, 6, 9, 8, 10, 10, 9, 8, 9, 9, 10,
					12, 15, 12, 10, 11, 14, 11, 9, 9, 13, 17, 13, 14, 15, 16, 16, 17, 16, 10, 12, 18,
					19, 18, 16, 19, 15, 16, 16, 16, 239, 191, 189, 239, 191, 189, 0, 11, 8, 0, 1, 0,
					1, 1, 1, 17, 0, 239, 191, 189, 239, 191, 189, 0, 6, 0, 16, 16, 5, 239, 191, 189,
					239, 191, 189, 0, 8, 1, 1, 0, 0, 63, 0, 239, 164, 187, 32, 239, 191, 189, 239, 191,
					189,
				},
			},
		},
	}
	testEmailFromFile(t, fp, expectedEmail)
}

func TestParseEmailKoreanMultipartMixedUtf8OverBase64(t *testing.T) {
	fp := "tests/test_korean_multipart_mixed_utf-8_over_base64.txt"
	expectedEmail := &email.Email{
		Headers: email.Headers{
			Date: time.Time(time.Date(2019, 3, 31, 22, 55, 0, 0, time.UTC)),
			Sender: &mail.Address{
				Name:    "앨리스 보내는사람",
				Address: "alice.bonaeneunsalam@example.com",
			},
			From: []*mail.Address{
				&mail.Address{
					Name:    "앨리스 보내는사람",
					Address: "alice.bonaeneunsalam@example.com",
				},
				&mail.Address{
					Name:    "앨리스 보내는사람",
					Address: "alice.bonaeneunsalam@example.net",
				},
			},
			ReplyTo: []*mail.Address{
				&mail.Address{
					Name:    "앨리스 보내는사람",
					Address: "alice.bonaeneunsalam@example.net",
				},
			},
			To: []*mail.Address{
				&mail.Address{
					Name:    "밥 수신자",
					Address: "bob.susinja@example.com",
				},
				&mail.Address{
					Name:    "캐롤 수신자",
					Address: "carol.susinja@example.com",
				},
			},
			Cc: []*mail.Address{
				&mail.Address{
					Name:    "댄 수신자",
					Address: "dan.susinja@example.com",
				},
				&mail.Address{
					Name:    "이브 수신자",
					Address: "eve.susinja@example.com",
				},
			},
			Bcc: []*mail.Address{
				&mail.Address{
					Name:    "프랭크 수신자",
					Address: "frank.susinja@example.com",
				},
				&mail.Address{
					Name:    "그레이스 수신자",
					Address: "grace.susinja@example.com",
				},
			},
			MessageID: "Message-Id-1@example.com",
			InReplyTo: []string{
				"Message-Id-0@example.com",
			},
			References: []string{
				"Message-Id-0@example.com",
			},
			Subject:  "📧 Test 한국어 팬그램",
			Comments: "Message Header Comment",
			Keywords: []string{
				"Keyword 1",
				"Keyword 2",
			},
			ResentDate: time.Time(time.Date(2019, 3, 31, 22, 55, 0, 0, time.UTC)),
			ResentFrom: []*mail.Address{
				&mail.Address{
					Name:    "앨리스 보내는사람",
					Address: "alice.bonaeneunsalam@example.net",
				},
				&mail.Address{
					Name:    "앨리스 보내는사람",
					Address: "alice.bonaeneunsalam@example.com",
				},
			},
			ResentSender: &mail.Address{
				Name:    "앨리스 보내는사람",
				Address: "alice.bonaeneunsalam@example.net",
			},
			ResentTo: []*mail.Address{
				&mail.Address{
					Name:    "밥 수신자",
					Address: "bob.susinja@example.net",
				},
				&mail.Address{
					Name:    "캐롤 수신자",
					Address: "carol.susinja@example.net",
				},
			},
			ResentCc: []*mail.Address{
				&mail.Address{
					Name:    "댄 수신자",
					Address: "dan.susinja@example.net",
				},
				&mail.Address{
					Name:    "이브 수신자",
					Address: "eve.susinja@example.net",
				},
			},
			ResentBcc: []*mail.Address{
				&mail.Address{
					Name:    "프랭크 수신자",
					Address: "frank.susinja@example.net",
				},
				&mail.Address{
					Name:    "그레이스 수신자",
					Address: "grace.susinja@example.net",
				},
			},
			ResentMessageID: "Message-Id-1@example.net",
			ExtraHeaders: map[string][]string{
				"X-Clacks-Overhead": []string{
					"GNU Terry Pratchett",
				},
				"X-Script/function/\t !\"#$%&'()*+,-./;<=>?@[\\]^_`{|}~": []string{
					"TEST VALUE 1\t !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_` abcdefghijklmnopqrstuvwxyz{|}~",
					"TEST VALUE 2\t !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_` abcdefghijklmnopqrstuvwxyz{|}~",
				},
			},
			ContentInfo: &email.ContentInfo{
				Type: "multipart/mixed",
				TypeParams: map[string]string{
					"boundary": "MixedBoundaryString",
					"charset":  "utf-8",
				},
				Disposition:       "",
				DispositionParams: map[string]string(nil), // p0
				TransferEncoding:  "base64",
				ID:                "",
				Charset:           "utf-8",
			},
			Received: nil,
		},
		Text:         "키스의 고유조건은 입술끼리 만나야 하고 특별한 기술은 필요치 않다.",
		EnrichedText: "<bold>키스의</bold> <italic>고유조건은</italic> <fixed>입술끼리</fixed> <underline>만나야</underline> 하고 특별한 기술은 필요치 않다.",
		HTML: "<html>\n" +
			"<div dir=\"ltr\">\n" +
			"<p>키스의 고유조건은 입술끼리 만나야 하고 특별한 기술은 필요치 않다.</p>\n" +
			"</div>\n" +
			"</html>",
		Files: []*email.File{
			&email.File{
				FileType: "",
				Name:     "inline-jpg-image-without-disposition.jpg",
				ContentInfo: &email.ContentInfo{
					Type: "image/jpeg",
					TypeParams: map[string]string{
						"name": "inline-jpg-image-without-disposition.jpg",
					},
					Disposition:       "",
					DispositionParams: map[string]string(nil), // p0
					TransferEncoding:  "base64",
					ID:                "",
					Charset:           "utf-8",
				},
				Data: []byte{
					239, 191, 189, 239, 191, 189, 239, 191, 189, 239, 191, 189, 0, 67, 0, 3, 2, 2, 2,
					2, 2, 3, 2, 2, 2, 3, 3, 3, 3, 4, 6, 4, 4, 4, 4, 4, 8, 6, 6, 5, 6, 9, 8, 10, 10, 9,
					8, 9, 9, 10, 12, 15, 12, 10, 11, 14, 11, 9, 9, 13, 17, 13, 14, 15, 16, 16, 17, 16,
					10, 12, 18, 19, 18, 16, 19, 15, 16, 16, 16, 239, 191, 189, 239, 191, 189, 0, 11,
					8, 0, 1, 0, 1, 1, 1, 17, 0, 239, 191, 189, 239, 191, 189, 0, 6, 0, 16, 16, 5, 239,
					191, 189, 239, 191, 189, 0, 8, 1, 1, 0, 0, 63, 0, 239, 191, 189, 239, 191, 189, 32,
					239, 191, 189, 239, 191, 189,
				},
			},
			&email.File{
				FileType: "inline",
				Name:     "inline-jpg-image-filename.jpg",
				ContentInfo: &email.ContentInfo{
					Type: "image/jpeg",
					TypeParams: map[string]string{
						"name": "inline-jpg-image-name.jpg",
					},
					Disposition: "inline",
					DispositionParams: map[string]string{
						"filename": "inline-jpg-image-filename.jpg",
					},
					TransferEncoding: "base64",
					ID:               "inline-jpg-image.jpg@example.com",
					Charset:          "utf-8",
				},
				Data: []byte{
					239, 191, 189, 239, 191, 189, 239, 191, 189, 239, 191, 189, 0, 67, 0, 3, 2, 2, 2,
					2, 2, 3, 2, 2, 2, 3, 3, 3, 3, 4, 6, 4, 4, 4, 4, 4, 8, 6, 6, 5, 6, 9, 8, 10, 10, 9,
					8, 9, 9, 10, 12, 15, 12, 10, 11, 14, 11, 9, 9, 13, 17, 13, 14, 15, 16, 16, 17, 16,
					10, 12, 18, 19, 18, 16, 19, 15, 16, 16, 16, 239, 191, 189, 239, 191, 189, 0, 11,
					8, 0, 1, 0, 1, 1, 1, 17, 0, 239, 191, 189, 239, 191, 189, 0, 6, 0, 16, 16, 5, 239,
					191, 189, 239, 191, 189, 0, 8, 1, 1, 0, 0, 63, 0, 239, 191, 189, 239, 191, 189, 32,
					239, 191, 189, 239, 191, 189,
				},
			},
			&email.File{
				FileType: "attachment",
				Name:     "attached-pdf-filename.pdf",
				ContentInfo: &email.ContentInfo{
					Type: "application/pdf",
					TypeParams: map[string]string{
						"name": "attached-pdf-name.pdf",
					},
					Disposition: "attachment",
					DispositionParams: map[string]string{
						"filename": "attached-pdf-filename.pdf",
					},
					TransferEncoding: "base64",
					ID:               "",
					Charset:          "utf-8",
				},
				Data: []byte{
					37, 80, 68, 70, 45, 49, 46, 13, 116, 114, 97, 105, 108, 101, 114, 60, 60, 47, 82,
					111, 111, 116, 60, 60, 47, 80, 97, 103, 101, 115, 60, 60, 47, 75, 105, 100, 115,
					91, 60, 60, 47, 77, 101, 100, 105, 97, 66, 111, 120, 91, 48, 32, 48, 32, 51, 32,
					51, 93, 62, 62, 93, 62, 62, 62, 62, 62, 62,
				},
			},
			&email.File{
				FileType: "",
				Name:     "attached-pdf-without-disposition.pdf",
				ContentInfo: &email.ContentInfo{
					Type: "application/pdf",
					TypeParams: map[string]string{
						"name": "attached-pdf-without-disposition.pdf",
					},
					Disposition:       "",
					DispositionParams: map[string]string(nil), // p0
					TransferEncoding:  "base64",
					ID:                "",
					Charset:           "utf-8",
				},
				Data: []byte{
					37, 80, 68, 70, 45, 49, 46, 13, 116, 114, 97, 105, 108, 101, 114, 60, 60, 47, 82,
					111, 111, 116, 60, 60, 47, 80, 97, 103, 101, 115, 60, 60, 47, 75, 105, 100, 115,
					91, 60, 60, 47, 77, 101, 100, 105, 97, 66, 111, 120, 91, 48, 32, 48, 32, 51, 32,
					51, 93, 62, 62, 93, 62, 62, 62, 62, 62, 62,
				},
			},
			&email.File{
				FileType: "attachment",
				Name:     "attached-json-filename.json",
				ContentInfo: &email.ContentInfo{
					Type: "application/json",
					TypeParams: map[string]string{
						"name": "attached-json-name.json",
					},
					Disposition: "attachment",
					DispositionParams: map[string]string{
						"filename": "attached-json-filename.json",
					},
					TransferEncoding: "7bit",
					ID:               "",
					Charset:          "utf-8",
				},
				Data: []byte{
					123, 34, 102, 111, 111, 34, 58, 34, 98, 97, 114, 34, 125,
				},
			},
			&email.File{
				FileType: "attachment",
				Name:     "attached-text-plain-filename.txt",
				ContentInfo: &email.ContentInfo{
					Type: "text/plain",
					TypeParams: map[string]string{
						"name": "attached-text-plain-name.txt",
					},
					Disposition: "attachment",
					DispositionParams: map[string]string{
						"filename": "attached-text-plain-filename.txt",
					},
					TransferEncoding: "base64",
					ID:               "",
					Charset:          "utf-8",
				},
				Data: []byte{
					84, 101, 120, 116, 47, 112, 108, 97, 105, 110, 32, 99, 111, 110, 116, 101, 110, 116,
					32, 97, 115, 32, 97, 110, 32, 97, 116, 116, 97, 99, 104, 101, 100, 32, 46, 116, 120,
					116, 32, 102, 105, 108, 101, 46,
				},
			},
			&email.File{
				FileType: "attachment",
				Name:     "attached-text-html-filename.html",
				ContentInfo: &email.ContentInfo{
					Type: "text/html",
					TypeParams: map[string]string{
						"name": "attached-text-html-name.html",
					},
					Disposition: "attachment",
					DispositionParams: map[string]string{
						"filename": "attached-text-html-filename.html",
					},
					TransferEncoding: "base64",
					ID:               "",
					Charset:          "utf-8",
				},
				Data: []byte{
					84, 101, 120, 116, 47, 104, 116, 109, 108, 32, 99, 111, 110, 116, 101, 110, 116,
					32, 97, 115, 32, 97, 110, 32, 97, 116, 116, 97, 99, 104, 101, 100, 32, 46, 104, 116,
					109, 108, 32, 102, 105, 108, 101, 46,
				},
			},
		},
	}
	testEmailFromFile(t, fp, expectedEmail)
}

func TestParseEmailKoreanMultipartMixedUtf8OverQuotedprintable(t *testing.T) {
	fp := "tests/test_korean_multipart_mixed_utf-8_over_quoted-printable.txt"
	expectedEmail := &email.Email{
		Headers: email.Headers{
			Date: time.Time(time.Date(2019, 3, 31, 22, 55, 0, 0, time.UTC)),
			Sender: &mail.Address{
				Name:    "앨리스 보내는사람",
				Address: "alice.bonaeneunsalam@example.com",
			},
			From: []*mail.Address{
				&mail.Address{
					Name:    "앨리스 보내는사람",
					Address: "alice.bonaeneunsalam@example.com",
				},
				&mail.Address{
					Name:    "앨리스 보내는사람",
					Address: "alice.bonaeneunsalam@example.net",
				},
			},
			ReplyTo: []*mail.Address{
				&mail.Address{
					Name:    "앨리스 보내는사람",
					Address: "alice.bonaeneunsalam@example.net",
				},
			},
			To: []*mail.Address{
				&mail.Address{
					Name:    "밥 수신자",
					Address: "bob.susinja@example.com",
				},
				&mail.Address{
					Name:    "캐롤 수신자",
					Address: "carol.susinja@example.com",
				},
			},
			Cc: []*mail.Address{
				&mail.Address{
					Name:    "댄 수신자",
					Address: "dan.susinja@example.com",
				},
				&mail.Address{
					Name:    "이브 수신자",
					Address: "eve.susinja@example.com",
				},
			},
			Bcc: []*mail.Address{
				&mail.Address{
					Name:    "프랭크 수신자",
					Address: "frank.susinja@example.com",
				},
				&mail.Address{
					Name:    "그레이스 수신자",
					Address: "grace.susinja@example.com",
				},
			},
			MessageID: "Message-Id-1@example.com",
			InReplyTo: []string{
				"Message-Id-0@example.com",
			},
			References: []string{
				"Message-Id-0@example.com",
			},
			Subject:  "📧 Test 한국어 팬그램",
			Comments: "Message Header Comment",
			Keywords: []string{
				"Keyword 1",
				"Keyword 2",
			},
			ResentDate: time.Time(time.Date(2019, 3, 31, 22, 55, 0, 0, time.UTC)),
			ResentFrom: []*mail.Address{
				&mail.Address{
					Name:    "앨리스 보내는사람",
					Address: "alice.bonaeneunsalam@example.net",
				},
				&mail.Address{
					Name:    "앨리스 보내는사람",
					Address: "alice.bonaeneunsalam@example.com",
				},
			},
			ResentSender: &mail.Address{
				Name:    "앨리스 보내는사람",
				Address: "alice.bonaeneunsalam@example.net",
			},
			ResentTo: []*mail.Address{
				&mail.Address{
					Name:    "밥 수신자",
					Address: "bob.susinja@example.net",
				},
				&mail.Address{
					Name:    "캐롤 수신자",
					Address: "carol.susinja@example.net",
				},
			},
			ResentCc: []*mail.Address{
				&mail.Address{
					Name:    "댄 수신자",
					Address: "dan.susinja@example.net",
				},
				&mail.Address{
					Name:    "이브 수신자",
					Address: "eve.susinja@example.net",
				},
			},
			ResentBcc: []*mail.Address{
				&mail.Address{
					Name:    "프랭크 수신자",
					Address: "frank.susinja@example.net",
				},
				&mail.Address{
					Name:    "그레이스 수신자",
					Address: "grace.susinja@example.net",
				},
			},
			ResentMessageID: "Message-Id-1@example.net",
			ExtraHeaders: map[string][]string{
				"X-Clacks-Overhead": []string{
					"GNU Terry Pratchett",
				},
				"X-Script/function/\t !\"#$%&'()*+,-./;<=>?@[\\]^_`{|}~": []string{
					"TEST VALUE 1\t !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_` abcdefghijklmnopqrstuvwxyz{|}~",
					"TEST VALUE 2\t !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_` abcdefghijklmnopqrstuvwxyz{|}~",
				},
			},
			ContentInfo: &email.ContentInfo{
				Type: "multipart/mixed",
				TypeParams: map[string]string{
					"boundary": "MixedBoundaryString",
					"charset":  "utf-8",
				},
				Disposition:       "",
				DispositionParams: map[string]string(nil), // p0
				TransferEncoding:  "quoted-printable",
				ID:                "",
				Charset:           "utf-8",
			},
			Received: nil,
		},
		Text:         "키스의 고유조건은 입술끼리 만나야 하고 특별한 기술은 필요치 않다.",
		EnrichedText: "<bold>키스의</bold> <italic>고유조건은</italic> <fixed>입술끼리</fixed> <underline>만나야</underline> 하고 특별한 기술은 필요치 않다.",
		HTML: "<html>\n" +
			"<div dir=\"ltr\">\n" +
			"<p>키스의 고유조건은 입술끼리 만나야 하고 특별한 기술은 필요치 않다.</p>\n" +
			"</div>\n" +
			"</html>",
		Files: []*email.File{
			&email.File{
				FileType: "",
				Name:     "inline-jpg-image-without-disposition.jpg",
				ContentInfo: &email.ContentInfo{
					Type: "image/jpeg",
					TypeParams: map[string]string{
						"name": "inline-jpg-image-without-disposition.jpg",
					},
					Disposition:       "",
					DispositionParams: map[string]string(nil), // p0
					TransferEncoding:  "base64",
					ID:                "",
					Charset:           "utf-8",
				},
				Data: []byte{
					239, 191, 189, 239, 191, 189, 239, 191, 189, 239, 191, 189, 0, 67, 0, 3, 2, 2, 2,
					2, 2, 3, 2, 2, 2, 3, 3, 3, 3, 4, 6, 4, 4, 4, 4, 4, 8, 6, 6, 5, 6, 9, 8, 10, 10, 9,
					8, 9, 9, 10, 12, 15, 12, 10, 11, 14, 11, 9, 9, 13, 17, 13, 14, 15, 16, 16, 17, 16,
					10, 12, 18, 19, 18, 16, 19, 15, 16, 16, 16, 239, 191, 189, 239, 191, 189, 0, 11,
					8, 0, 1, 0, 1, 1, 1, 17, 0, 239, 191, 189, 239, 191, 189, 0, 6, 0, 16, 16, 5, 239,
					191, 189, 239, 191, 189, 0, 8, 1, 1, 0, 0, 63, 0, 239, 191, 189, 239, 191, 189, 32,
					239, 191, 189, 239, 191, 189,
				},
			},
			&email.File{
				FileType: "inline",
				Name:     "inline-jpg-image-filename.jpg",
				ContentInfo: &email.ContentInfo{
					Type: "image/jpeg",
					TypeParams: map[string]string{
						"name": "inline-jpg-image-name.jpg",
					},
					Disposition: "inline",
					DispositionParams: map[string]string{
						"filename": "inline-jpg-image-filename.jpg",
					},
					TransferEncoding: "base64",
					ID:               "inline-jpg-image.jpg@example.com",
					Charset:          "utf-8",
				},
				Data: []byte{
					239, 191, 189, 239, 191, 189, 239, 191, 189, 239, 191, 189, 0, 67, 0, 3, 2, 2, 2,
					2, 2, 3, 2, 2, 2, 3, 3, 3, 3, 4, 6, 4, 4, 4, 4, 4, 8, 6, 6, 5, 6, 9, 8, 10, 10, 9,
					8, 9, 9, 10, 12, 15, 12, 10, 11, 14, 11, 9, 9, 13, 17, 13, 14, 15, 16, 16, 17, 16,
					10, 12, 18, 19, 18, 16, 19, 15, 16, 16, 16, 239, 191, 189, 239, 191, 189, 0, 11,
					8, 0, 1, 0, 1, 1, 1, 17, 0, 239, 191, 189, 239, 191, 189, 0, 6, 0, 16, 16, 5, 239,
					191, 189, 239, 191, 189, 0, 8, 1, 1, 0, 0, 63, 0, 239, 191, 189, 239, 191, 189, 32,
					239, 191, 189, 239, 191, 189,
				},
			},
			&email.File{
				FileType: "attachment",
				Name:     "attached-pdf-filename.pdf",
				ContentInfo: &email.ContentInfo{
					Type: "application/pdf",
					TypeParams: map[string]string{
						"name": "attached-pdf-name.pdf",
					},
					Disposition: "attachment",
					DispositionParams: map[string]string{
						"filename": "attached-pdf-filename.pdf",
					},
					TransferEncoding: "base64",
					ID:               "",
					Charset:          "utf-8",
				},
				Data: []byte{
					37, 80, 68, 70, 45, 49, 46, 13, 116, 114, 97, 105, 108, 101, 114, 60, 60, 47, 82,
					111, 111, 116, 60, 60, 47, 80, 97, 103, 101, 115, 60, 60, 47, 75, 105, 100, 115,
					91, 60, 60, 47, 77, 101, 100, 105, 97, 66, 111, 120, 91, 48, 32, 48, 32, 51, 32,
					51, 93, 62, 62, 93, 62, 62, 62, 62, 62, 62,
				},
			},
			&email.File{
				FileType: "",
				Name:     "attached-pdf-without-disposition.pdf",
				ContentInfo: &email.ContentInfo{
					Type: "application/pdf",
					TypeParams: map[string]string{
						"name": "attached-pdf-without-disposition.pdf",
					},
					Disposition:       "",
					DispositionParams: map[string]string(nil), // p0
					TransferEncoding:  "base64",
					ID:                "",
					Charset:           "utf-8",
				},
				Data: []byte{
					37, 80, 68, 70, 45, 49, 46, 13, 116, 114, 97, 105, 108, 101, 114, 60, 60, 47, 82,
					111, 111, 116, 60, 60, 47, 80, 97, 103, 101, 115, 60, 60, 47, 75, 105, 100, 115,
					91, 60, 60, 47, 77, 101, 100, 105, 97, 66, 111, 120, 91, 48, 32, 48, 32, 51, 32,
					51, 93, 62, 62, 93, 62, 62, 62, 62, 62, 62,
				},
			},
			&email.File{
				FileType: "attachment",
				Name:     "attached-json-filename.json",
				ContentInfo: &email.ContentInfo{
					Type: "application/json",
					TypeParams: map[string]string{
						"name": "attached-json-name.json",
					},
					Disposition: "attachment",
					DispositionParams: map[string]string{
						"filename": "attached-json-filename.json",
					},
					TransferEncoding: "7bit",
					ID:               "",
					Charset:          "utf-8",
				},
				Data: []byte{
					123, 34, 102, 111, 111, 34, 58, 34, 98, 97, 114, 34, 125,
				},
			},
			&email.File{
				FileType: "attachment",
				Name:     "attached-text-plain-filename.txt",
				ContentInfo: &email.ContentInfo{
					Type: "text/plain",
					TypeParams: map[string]string{
						"name": "attached-text-plain-name.txt",
					},
					Disposition: "attachment",
					DispositionParams: map[string]string{
						"filename": "attached-text-plain-filename.txt",
					},
					TransferEncoding: "base64",
					ID:               "",
					Charset:          "utf-8",
				},
				Data: []byte{
					84, 101, 120, 116, 47, 112, 108, 97, 105, 110, 32, 99, 111, 110, 116, 101, 110, 116,
					32, 97, 115, 32, 97, 110, 32, 97, 116, 116, 97, 99, 104, 101, 100, 32, 46, 116, 120,
					116, 32, 102, 105, 108, 101, 46,
				},
			},
			&email.File{
				FileType: "attachment",
				Name:     "attached-text-html-filename.html",
				ContentInfo: &email.ContentInfo{
					Type: "text/html",
					TypeParams: map[string]string{
						"name": "attached-text-html-name.html",
					},
					Disposition: "attachment",
					DispositionParams: map[string]string{
						"filename": "attached-text-html-filename.html",
					},
					TransferEncoding: "base64",
					ID:               "",
					Charset:          "utf-8",
				},
				Data: []byte{
					84, 101, 120, 116, 47, 104, 116, 109, 108, 32, 99, 111, 110, 116, 101, 110, 116,
					32, 97, 115, 32, 97, 110, 32, 97, 116, 116, 97, 99, 104, 101, 100, 32, 46, 104, 116,
					109, 108, 32, 102, 105, 108, 101, 46,
				},
			},
		},
	}
	testEmailFromFile(t, fp, expectedEmail)
}

func TestParseEmailKoreanMultipartMixedEuckrOverBase64(t *testing.T) {
	fp := "tests/test_korean_multipart_mixed_euc-kr_over_base64.txt"
	expectedEmail := &email.Email{
		Headers: email.Headers{
			Date: time.Time(time.Date(2019, 3, 31, 22, 55, 0, 0, time.UTC)),
			Sender: &mail.Address{
				Name:    "앨리스 보내는사람",
				Address: "alice.bonaeneunsalam@example.com",
			},
			From: []*mail.Address{
				&mail.Address{
					Name:    "앨리스 보내는사람",
					Address: "alice.bonaeneunsalam@example.com",
				},
				&mail.Address{
					Name:    "앨리스 보내는사람",
					Address: "alice.bonaeneunsalam@example.net",
				},
			},
			ReplyTo: []*mail.Address{
				&mail.Address{
					Name:    "앨리스 보내는사람",
					Address: "alice.bonaeneunsalam@example.net",
				},
			},
			To: []*mail.Address{
				&mail.Address{
					Name:    "밥 수신자",
					Address: "bob.susinja@example.com",
				},
				&mail.Address{
					Name:    "캐롤 수신자",
					Address: "carol.susinja@example.com",
				},
			},
			Cc: []*mail.Address{
				&mail.Address{
					Name:    "댄 수신자",
					Address: "dan.susinja@example.com",
				},
				&mail.Address{
					Name:    "이브 수신자",
					Address: "eve.susinja@example.com",
				},
			},
			Bcc: []*mail.Address{
				&mail.Address{
					Name:    "프랭크 수신자",
					Address: "frank.susinja@example.com",
				},
				&mail.Address{
					Name:    "그레이스 수신자",
					Address: "grace.susinja@example.com",
				},
			},
			MessageID: "Message-Id-1@example.com",
			InReplyTo: []string{
				"Message-Id-0@example.com",
			},
			References: []string{
				"Message-Id-0@example.com",
			},
			Subject:  "📧 Test 한국어 팬그램",
			Comments: "Message Header Comment",
			Keywords: []string{
				"Keyword 1",
				"Keyword 2",
			},
			ResentDate: time.Time(time.Date(2019, 3, 31, 22, 55, 0, 0, time.UTC)),
			ResentFrom: []*mail.Address{
				&mail.Address{
					Name:    "앨리스 보내는사람",
					Address: "alice.bonaeneunsalam@example.net",
				},
				&mail.Address{
					Name:    "앨리스 보내는사람",
					Address: "alice.bonaeneunsalam@example.com",
				},
			},
			ResentSender: &mail.Address{
				Name:    "앨리스 보내는사람",
				Address: "alice.bonaeneunsalam@example.net",
			},
			ResentTo: []*mail.Address{
				&mail.Address{
					Name:    "밥 수신자",
					Address: "bob.susinja@example.net",
				},
				&mail.Address{
					Name:    "캐롤 수신자",
					Address: "carol.susinja@example.net",
				},
			},
			ResentCc: []*mail.Address{
				&mail.Address{
					Name:    "댄 수신자",
					Address: "dan.susinja@example.net",
				},
				&mail.Address{
					Name:    "이브 수신자",
					Address: "eve.susinja@example.net",
				},
			},
			ResentBcc: []*mail.Address{
				&mail.Address{
					Name:    "프랭크 수신자",
					Address: "frank.susinja@example.net",
				},
				&mail.Address{
					Name:    "그레이스 수신자",
					Address: "grace.susinja@example.net",
				},
			},
			ResentMessageID: "Message-Id-1@example.net",
			ExtraHeaders: map[string][]string{
				"X-Clacks-Overhead": []string{
					"GNU Terry Pratchett",
				},
				"X-Script/function/\t !\"#$%&'()*+,-./;<=>?@[\\]^_`{|}~": []string{
					"TEST VALUE 1\t !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_` abcdefghijklmnopqrstuvwxyz{|}~",
					"TEST VALUE 2\t !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_` abcdefghijklmnopqrstuvwxyz{|}~",
				},
			},
			ContentInfo: &email.ContentInfo{
				Type: "multipart/mixed",
				TypeParams: map[string]string{
					"boundary": "MixedBoundaryString",
					"charset":  "euc-kr",
				},
				Disposition:       "",
				DispositionParams: map[string]string(nil), // p0
				TransferEncoding:  "base64",
				ID:                "",
				Charset:           "euc-kr",
			},
			Received: nil,
		},
		Text:         "키스의 고유조건은 입술끼리 만나야 하고 특별한 기술은 필요치 않다.",
		EnrichedText: "<bold>키스의</bold> <italic>고유조건은</italic> <fixed>입술끼리</fixed> <underline>만나야</underline> 하고 특별한 기술은 필요치 않다.",
		HTML: "<html>\n" +
			"<div dir=\"ltr\">\n" +
			"<p>키스의 고유조건은 입술끼리 만나야 하고 특별한 기술은 필요치 않다.</p>\n" +
			"</div>\n" +
			"</html>",
		Files: []*email.File{
			&email.File{
				FileType: "",
				Name:     "inline-jpg-image-without-disposition.jpg",
				ContentInfo: &email.ContentInfo{
					Type: "image/jpeg",
					TypeParams: map[string]string{
						"name": "inline-jpg-image-without-disposition.jpg",
					},
					Disposition:       "",
					DispositionParams: map[string]string(nil), // p0
					TransferEncoding:  "base64",
					ID:                "",
					Charset:           "euc-kr",
				},
				Data: []byte{
					239, 191, 189, 239, 191, 189, 239, 191, 189, 0, 67, 0, 3, 2, 2, 2, 2, 2, 3, 2, 2,
					2, 3, 3, 3, 3, 4, 6, 4, 4, 4, 4, 4, 8, 6, 6, 5, 6, 9, 8, 10, 10, 9, 8, 9, 9, 10,
					12, 15, 12, 10, 11, 14, 11, 9, 9, 13, 17, 13, 14, 15, 16, 16, 17, 16, 10, 12, 18,
					19, 18, 16, 19, 15, 16, 16, 16, 239, 191, 189, 239, 191, 189, 0, 11, 8, 0, 1, 0,
					1, 1, 1, 17, 0, 239, 191, 189, 239, 191, 189, 0, 6, 0, 16, 16, 5, 239, 191, 189,
					239, 191, 189, 0, 8, 1, 1, 0, 0, 63, 0, 239, 164, 187, 32, 239, 191, 189, 239, 191,
					189,
				},
			},
			&email.File{
				FileType: "inline",
				Name:     "inline-jpg-image-filename.jpg",
				ContentInfo: &email.ContentInfo{
					Type: "image/jpeg",
					TypeParams: map[string]string{
						"name": "inline-jpg-image-name.jpg",
					},
					Disposition: "inline",
					DispositionParams: map[string]string{
						"filename": "inline-jpg-image-filename.jpg",
					},
					TransferEncoding: "base64",
					ID:               "inline-jpg-image.jpg@example.com",
					Charset:          "euc-kr",
				},
				Data: []byte{
					239, 191, 189, 239, 191, 189, 239, 191, 189, 0, 67, 0, 3, 2, 2, 2, 2, 2, 3, 2, 2,
					2, 3, 3, 3, 3, 4, 6, 4, 4, 4, 4, 4, 8, 6, 6, 5, 6, 9, 8, 10, 10, 9, 8, 9, 9, 10,
					12, 15, 12, 10, 11, 14, 11, 9, 9, 13, 17, 13, 14, 15, 16, 16, 17, 16, 10, 12, 18,
					19, 18, 16, 19, 15, 16, 16, 16, 239, 191, 189, 239, 191, 189, 0, 11, 8, 0, 1, 0,
					1, 1, 1, 17, 0, 239, 191, 189, 239, 191, 189, 0, 6, 0, 16, 16, 5, 239, 191, 189,
					239, 191, 189, 0, 8, 1, 1, 0, 0, 63, 0, 239, 164, 187, 32, 239, 191, 189, 239, 191,
					189,
				},
			},
			&email.File{
				FileType: "attachment",
				Name:     "attached-pdf-filename.pdf",
				ContentInfo: &email.ContentInfo{
					Type: "application/pdf",
					TypeParams: map[string]string{
						"name": "attached-pdf-name.pdf",
					},
					Disposition: "attachment",
					DispositionParams: map[string]string{
						"filename": "attached-pdf-filename.pdf",
					},
					TransferEncoding: "base64",
					ID:               "",
					Charset:          "euc-kr",
				},
				Data: []byte{
					37, 80, 68, 70, 45, 49, 46, 13, 116, 114, 97, 105, 108, 101, 114, 60, 60, 47, 82,
					111, 111, 116, 60, 60, 47, 80, 97, 103, 101, 115, 60, 60, 47, 75, 105, 100, 115,
					91, 60, 60, 47, 77, 101, 100, 105, 97, 66, 111, 120, 91, 48, 32, 48, 32, 51, 32,
					51, 93, 62, 62, 93, 62, 62, 62, 62, 62, 62,
				},
			},
			&email.File{
				FileType: "",
				Name:     "attached-pdf-without-disposition.pdf",
				ContentInfo: &email.ContentInfo{
					Type: "application/pdf",
					TypeParams: map[string]string{
						"name": "attached-pdf-without-disposition.pdf",
					},
					Disposition:       "",
					DispositionParams: map[string]string(nil), // p0
					TransferEncoding:  "base64",
					ID:                "",
					Charset:           "euc-kr",
				},
				Data: []byte{
					37, 80, 68, 70, 45, 49, 46, 13, 116, 114, 97, 105, 108, 101, 114, 60, 60, 47, 82,
					111, 111, 116, 60, 60, 47, 80, 97, 103, 101, 115, 60, 60, 47, 75, 105, 100, 115,
					91, 60, 60, 47, 77, 101, 100, 105, 97, 66, 111, 120, 91, 48, 32, 48, 32, 51, 32,
					51, 93, 62, 62, 93, 62, 62, 62, 62, 62, 62,
				},
			},
			&email.File{
				FileType: "attachment",
				Name:     "attached-json-filename.json",
				ContentInfo: &email.ContentInfo{
					Type: "application/json",
					TypeParams: map[string]string{
						"name": "attached-json-name.json",
					},
					Disposition: "attachment",
					DispositionParams: map[string]string{
						"filename": "attached-json-filename.json",
					},
					TransferEncoding: "7bit",
					ID:               "",
					Charset:          "euc-kr",
				},
				Data: []byte{
					123, 34, 102, 111, 111, 34, 58, 34, 98, 97, 114, 34, 125,
				},
			},
			&email.File{
				FileType: "attachment",
				Name:     "attached-text-plain-filename.txt",
				ContentInfo: &email.ContentInfo{
					Type: "text/plain",
					TypeParams: map[string]string{
						"name": "attached-text-plain-name.txt",
					},
					Disposition: "attachment",
					DispositionParams: map[string]string{
						"filename": "attached-text-plain-filename.txt",
					},
					TransferEncoding: "base64",
					ID:               "",
					Charset:          "euc-kr",
				},
				Data: []byte{
					84, 101, 120, 116, 47, 112, 108, 97, 105, 110, 32, 99, 111, 110, 116, 101, 110, 116,
					32, 97, 115, 32, 97, 110, 32, 97, 116, 116, 97, 99, 104, 101, 100, 32, 46, 116, 120,
					116, 32, 102, 105, 108, 101, 46,
				},
			},
			&email.File{
				FileType: "attachment",
				Name:     "attached-text-html-filename.html",
				ContentInfo: &email.ContentInfo{
					Type: "text/html",
					TypeParams: map[string]string{
						"name": "attached-text-html-name.html",
					},
					Disposition: "attachment",
					DispositionParams: map[string]string{
						"filename": "attached-text-html-filename.html",
					},
					TransferEncoding: "base64",
					ID:               "",
					Charset:          "euc-kr",
				},
				Data: []byte{
					84, 101, 120, 116, 47, 104, 116, 109, 108, 32, 99, 111, 110, 116, 101, 110, 116,
					32, 97, 115, 32, 97, 110, 32, 97, 116, 116, 97, 99, 104, 101, 100, 32, 46, 104, 116,
					109, 108, 32, 102, 105, 108, 101, 46,
				},
			},
		},
	}
	testEmailFromFile(t, fp, expectedEmail)
}

func TestParseEmailKoreanMultipartMixedEuckrOverQuotedprintable(t *testing.T) {
	fp := "tests/test_korean_multipart_mixed_euc-kr_over_quoted-printable.txt"
	expectedEmail := &email.Email{
		Headers: email.Headers{
			Date: time.Time(time.Date(2019, 3, 31, 22, 55, 0, 0, time.UTC)),
			Sender: &mail.Address{
				Name:    "앨리스 보내는사람",
				Address: "alice.bonaeneunsalam@example.com",
			},
			From: []*mail.Address{
				&mail.Address{
					Name:    "앨리스 보내는사람",
					Address: "alice.bonaeneunsalam@example.com",
				},
				&mail.Address{
					Name:    "앨리스 보내는사람",
					Address: "alice.bonaeneunsalam@example.net",
				},
			},
			ReplyTo: []*mail.Address{
				&mail.Address{
					Name:    "앨리스 보내는사람",
					Address: "alice.bonaeneunsalam@example.net",
				},
			},
			To: []*mail.Address{
				&mail.Address{
					Name:    "밥 수신자",
					Address: "bob.susinja@example.com",
				},
				&mail.Address{
					Name:    "캐롤 수신자",
					Address: "carol.susinja@example.com",
				},
			},
			Cc: []*mail.Address{
				&mail.Address{
					Name:    "댄 수신자",
					Address: "dan.susinja@example.com",
				},
				&mail.Address{
					Name:    "이브 수신자",
					Address: "eve.susinja@example.com",
				},
			},
			Bcc: []*mail.Address{
				&mail.Address{
					Name:    "프랭크 수신자",
					Address: "frank.susinja@example.com",
				},
				&mail.Address{
					Name:    "그레이스 수신자",
					Address: "grace.susinja@example.com",
				},
			},
			MessageID: "Message-Id-1@example.com",
			InReplyTo: []string{
				"Message-Id-0@example.com",
			},
			References: []string{
				"Message-Id-0@example.com",
			},
			Subject:  "📧 Test 한국어 팬그램",
			Comments: "Message Header Comment",
			Keywords: []string{
				"Keyword 1",
				"Keyword 2",
			},
			ResentDate: time.Time(time.Date(2019, 3, 31, 22, 55, 0, 0, time.UTC)),
			ResentFrom: []*mail.Address{
				&mail.Address{
					Name:    "앨리스 보내는사람",
					Address: "alice.bonaeneunsalam@example.net",
				},
				&mail.Address{
					Name:    "앨리스 보내는사람",
					Address: "alice.bonaeneunsalam@example.com",
				},
			},
			ResentSender: &mail.Address{
				Name:    "앨리스 보내는사람",
				Address: "alice.bonaeneunsalam@example.net",
			},
			ResentTo: []*mail.Address{
				&mail.Address{
					Name:    "밥 수신자",
					Address: "bob.susinja@example.net",
				},
				&mail.Address{
					Name:    "캐롤 수신자",
					Address: "carol.susinja@example.net",
				},
			},
			ResentCc: []*mail.Address{
				&mail.Address{
					Name:    "댄 수신자",
					Address: "dan.susinja@example.net",
				},
				&mail.Address{
					Name:    "이브 수신자",
					Address: "eve.susinja@example.net",
				},
			},
			ResentBcc: []*mail.Address{
				&mail.Address{
					Name:    "프랭크 수신자",
					Address: "frank.susinja@example.net",
				},
				&mail.Address{
					Name:    "그레이스 수신자",
					Address: "grace.susinja@example.net",
				},
			},
			ResentMessageID: "Message-Id-1@example.net",
			ExtraHeaders: map[string][]string{
				"X-Clacks-Overhead": []string{
					"GNU Terry Pratchett",
				},
				"X-Script/function/\t !\"#$%&'()*+,-./;<=>?@[\\]^_`{|}~": []string{
					"TEST VALUE 1\t !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_` abcdefghijklmnopqrstuvwxyz{|}~",
					"TEST VALUE 2\t !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_` abcdefghijklmnopqrstuvwxyz{|}~",
				},
			},
			ContentInfo: &email.ContentInfo{
				Type: "multipart/mixed",
				TypeParams: map[string]string{
					"boundary": "MixedBoundaryString",
					"charset":  "euc-kr",
				},
				Disposition:       "",
				DispositionParams: map[string]string(nil), // p0
				TransferEncoding:  "quoted-printable",
				ID:                "",
				Charset:           "euc-kr",
			},
			Received: nil,
		},
		Text:         "키스의 고유조건은 입술끼리 만나야 하고 특별한 기술은 필요치 않다.",
		EnrichedText: "<bold>키스의</bold> <italic>고유조건은</italic> <fixed>입술끼리</fixed> <underline>만나야</underline> 하고 특별한 기술은 필요치 않다.",
		HTML: "<html>\n" +
			"<div dir=\"ltr\">\n" +
			"<p>키스의 고유조건은 입술끼리 만나야 하고 특별한 기술은 필요치 않다.</p>\n" +
			"</div>\n" +
			"</html>",
		Files: []*email.File{
			&email.File{
				FileType: "",
				Name:     "inline-jpg-image-without-disposition.jpg",
				ContentInfo: &email.ContentInfo{
					Type: "image/jpeg",
					TypeParams: map[string]string{
						"name": "inline-jpg-image-without-disposition.jpg",
					},
					Disposition:       "",
					DispositionParams: map[string]string(nil), // p0
					TransferEncoding:  "base64",
					ID:                "",
					Charset:           "euc-kr",
				},
				Data: []byte{
					239, 191, 189, 239, 191, 189, 239, 191, 189, 0, 67, 0, 3, 2, 2, 2, 2, 2, 3, 2, 2,
					2, 3, 3, 3, 3, 4, 6, 4, 4, 4, 4, 4, 8, 6, 6, 5, 6, 9, 8, 10, 10, 9, 8, 9, 9, 10,
					12, 15, 12, 10, 11, 14, 11, 9, 9, 13, 17, 13, 14, 15, 16, 16, 17, 16, 10, 12, 18,
					19, 18, 16, 19, 15, 16, 16, 16, 239, 191, 189, 239, 191, 189, 0, 11, 8, 0, 1, 0,
					1, 1, 1, 17, 0, 239, 191, 189, 239, 191, 189, 0, 6, 0, 16, 16, 5, 239, 191, 189,
					239, 191, 189, 0, 8, 1, 1, 0, 0, 63, 0, 239, 164, 187, 32, 239, 191, 189, 239, 191,
					189,
				},
			},
			&email.File{
				FileType: "inline",
				Name:     "inline-jpg-image-filename.jpg",
				ContentInfo: &email.ContentInfo{
					Type: "image/jpeg",
					TypeParams: map[string]string{
						"name": "inline-jpg-image-name.jpg",
					},
					Disposition: "inline",
					DispositionParams: map[string]string{
						"filename": "inline-jpg-image-filename.jpg",
					},
					TransferEncoding: "base64",
					ID:               "inline-jpg-image.jpg@example.com",
					Charset:          "euc-kr",
				},
				Data: []byte{
					239, 191, 189, 239, 191, 189, 239, 191, 189, 0, 67, 0, 3, 2, 2, 2, 2, 2, 3, 2, 2,
					2, 3, 3, 3, 3, 4, 6, 4, 4, 4, 4, 4, 8, 6, 6, 5, 6, 9, 8, 10, 10, 9, 8, 9, 9, 10,
					12, 15, 12, 10, 11, 14, 11, 9, 9, 13, 17, 13, 14, 15, 16, 16, 17, 16, 10, 12, 18,
					19, 18, 16, 19, 15, 16, 16, 16, 239, 191, 189, 239, 191, 189, 0, 11, 8, 0, 1, 0,
					1, 1, 1, 17, 0, 239, 191, 189, 239, 191, 189, 0, 6, 0, 16, 16, 5, 239, 191, 189,
					239, 191, 189, 0, 8, 1, 1, 0, 0, 63, 0, 239, 164, 187, 32, 239, 191, 189, 239, 191,
					189,
				},
			},
			&email.File{
				FileType: "attachment",
				Name:     "attached-pdf-filename.pdf",
				ContentInfo: &email.ContentInfo{
					Type: "application/pdf",
					TypeParams: map[string]string{
						"name": "attached-pdf-name.pdf",
					},
					Disposition: "attachment",
					DispositionParams: map[string]string{
						"filename": "attached-pdf-filename.pdf",
					},
					TransferEncoding: "base64",
					ID:               "",
					Charset:          "euc-kr",
				},
				Data: []byte{
					37, 80, 68, 70, 45, 49, 46, 13, 116, 114, 97, 105, 108, 101, 114, 60, 60, 47, 82,
					111, 111, 116, 60, 60, 47, 80, 97, 103, 101, 115, 60, 60, 47, 75, 105, 100, 115,
					91, 60, 60, 47, 77, 101, 100, 105, 97, 66, 111, 120, 91, 48, 32, 48, 32, 51, 32,
					51, 93, 62, 62, 93, 62, 62, 62, 62, 62, 62,
				},
			},
			&email.File{
				FileType: "",
				Name:     "attached-pdf-without-disposition.pdf",
				ContentInfo: &email.ContentInfo{
					Type: "application/pdf",
					TypeParams: map[string]string{
						"name": "attached-pdf-without-disposition.pdf",
					},
					Disposition:       "",
					DispositionParams: map[string]string(nil), // p0
					TransferEncoding:  "base64",
					ID:                "",
					Charset:           "euc-kr",
				},
				Data: []byte{
					37, 80, 68, 70, 45, 49, 46, 13, 116, 114, 97, 105, 108, 101, 114, 60, 60, 47, 82,
					111, 111, 116, 60, 60, 47, 80, 97, 103, 101, 115, 60, 60, 47, 75, 105, 100, 115,
					91, 60, 60, 47, 77, 101, 100, 105, 97, 66, 111, 120, 91, 48, 32, 48, 32, 51, 32,
					51, 93, 62, 62, 93, 62, 62, 62, 62, 62, 62,
				},
			},
			&email.File{
				FileType: "attachment",
				Name:     "attached-json-filename.json",
				ContentInfo: &email.ContentInfo{
					Type: "application/json",
					TypeParams: map[string]string{
						"name": "attached-json-name.json",
					},
					Disposition: "attachment",
					DispositionParams: map[string]string{
						"filename": "attached-json-filename.json",
					},
					TransferEncoding: "7bit",
					ID:               "",
					Charset:          "euc-kr",
				},
				Data: []byte{
					123, 34, 102, 111, 111, 34, 58, 34, 98, 97, 114, 34, 125,
				},
			},
			&email.File{
				FileType: "attachment",
				Name:     "attached-text-plain-filename.txt",
				ContentInfo: &email.ContentInfo{
					Type: "text/plain",
					TypeParams: map[string]string{
						"name": "attached-text-plain-name.txt",
					},
					Disposition: "attachment",
					DispositionParams: map[string]string{
						"filename": "attached-text-plain-filename.txt",
					},
					TransferEncoding: "base64",
					ID:               "",
					Charset:          "euc-kr",
				},
				Data: []byte{
					84, 101, 120, 116, 47, 112, 108, 97, 105, 110, 32, 99, 111, 110, 116, 101, 110, 116,
					32, 97, 115, 32, 97, 110, 32, 97, 116, 116, 97, 99, 104, 101, 100, 32, 46, 116, 120,
					116, 32, 102, 105, 108, 101, 46,
				},
			},
			&email.File{
				FileType: "attachment",
				Name:     "attached-text-html-filename.html",
				ContentInfo: &email.ContentInfo{
					Type: "text/html",
					TypeParams: map[string]string{
						"name": "attached-text-html-name.html",
					},
					Disposition: "attachment",
					DispositionParams: map[string]string{
						"filename": "attached-text-html-filename.html",
					},
					TransferEncoding: "base64",
					ID:               "",
					Charset:          "euc-kr",
				},
				Data: []byte{
					84, 101, 120, 116, 47, 104, 116, 109, 108, 32, 99, 111, 110, 116, 101, 110, 116,
					32, 97, 115, 32, 97, 110, 32, 97, 116, 116, 97, 99, 104, 101, 100, 32, 46, 104, 116,
					109, 108, 32, 102, 105, 108, 101, 46,
				},
			},
		},
	}
	testEmailFromFile(t, fp, expectedEmail)
}

func TestParseEmailKoreanMultipartSignedUtf8OverBase64(t *testing.T) {
	fp := "tests/test_korean_multipart_signed_utf-8_over_base64.txt"
	expectedEmail := &email.Email{
		Headers: email.Headers{
			Date: time.Time(time.Date(2019, 3, 31, 22, 55, 0, 0, time.UTC)),
			Sender: &mail.Address{
				Name:    "앨리스 보내는사람",
				Address: "alice.bonaeneunsalam@example.com",
			},
			From: []*mail.Address{
				&mail.Address{
					Name:    "앨리스 보내는사람",
					Address: "alice.bonaeneunsalam@example.com",
				},
				&mail.Address{
					Name:    "앨리스 보내는사람",
					Address: "alice.bonaeneunsalam@example.net",
				},
			},
			ReplyTo: []*mail.Address{
				&mail.Address{
					Name:    "앨리스 보내는사람",
					Address: "alice.bonaeneunsalam@example.net",
				},
			},
			To: []*mail.Address{
				&mail.Address{
					Name:    "밥 수신자",
					Address: "bob.susinja@example.com",
				},
				&mail.Address{
					Name:    "캐롤 수신자",
					Address: "carol.susinja@example.com",
				},
			},
			Cc: []*mail.Address{
				&mail.Address{
					Name:    "댄 수신자",
					Address: "dan.susinja@example.com",
				},
				&mail.Address{
					Name:    "이브 수신자",
					Address: "eve.susinja@example.com",
				},
			},
			Bcc: []*mail.Address{
				&mail.Address{
					Name:    "프랭크 수신자",
					Address: "frank.susinja@example.com",
				},
				&mail.Address{
					Name:    "그레이스 수신자",
					Address: "grace.susinja@example.com",
				},
			},
			MessageID: "Message-Id-1@example.com",
			InReplyTo: []string{
				"Message-Id-0@example.com",
			},
			References: []string{
				"Message-Id-0@example.com",
			},
			Subject:  "📧 Signed Test 한국어 팬그램",
			Comments: "Message Header Comment",
			Keywords: []string{
				"Keyword 1",
				"Keyword 2",
			},
			ResentDate: time.Time(time.Date(2019, 3, 31, 22, 55, 0, 0, time.UTC)),
			ResentFrom: []*mail.Address{
				&mail.Address{
					Name:    "앨리스 보내는사람",
					Address: "alice.bonaeneunsalam@example.net",
				},
				&mail.Address{
					Name:    "앨리스 보내는사람",
					Address: "alice.bonaeneunsalam@example.com",
				},
			},
			ResentSender: &mail.Address{
				Name:    "앨리스 보내는사람",
				Address: "alice.bonaeneunsalam@example.net",
			},
			ResentTo: []*mail.Address{
				&mail.Address{
					Name:    "밥 수신자",
					Address: "bob.susinja@example.net",
				},
				&mail.Address{
					Name:    "캐롤 수신자",
					Address: "carol.susinja@example.net",
				},
			},
			ResentCc: []*mail.Address{
				&mail.Address{
					Name:    "댄 수신자",
					Address: "dan.susinja@example.net",
				},
				&mail.Address{
					Name:    "이브 수신자",
					Address: "eve.susinja@example.net",
				},
			},
			ResentBcc: []*mail.Address{
				&mail.Address{
					Name:    "프랭크 수신자",
					Address: "frank.susinja@example.net",
				},
				&mail.Address{
					Name:    "그레이스 수신자",
					Address: "grace.susinja@example.net",
				},
			},
			ResentMessageID: "Message-Id-1@example.net",
			ExtraHeaders: map[string][]string{
				"X-Clacks-Overhead": []string{
					"GNU Terry Pratchett",
				},
				"X-Script/function/\t !\"#$%&'()*+,-./;<=>?@[\\]^_`{|}~": []string{
					"TEST VALUE 1\t !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_` abcdefghijklmnopqrstuvwxyz{|}~",
					"TEST VALUE 2\t !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_` abcdefghijklmnopqrstuvwxyz{|}~",
				},
			},
			ContentInfo: &email.ContentInfo{
				Type: "multipart/signed",
				TypeParams: map[string]string{
					"boundary": "SignedBoundaryString",
					"charset":  "utf-8",
					"micalg":   "sha1",
					"protocol": "application/pkcs7-signature",
				},
				Disposition:       "",
				DispositionParams: map[string]string(nil), // p0
				TransferEncoding:  "base64",
				ID:                "",
				Charset:           "utf-8",
			},
			Received: nil,
		},
		Text:         "키스의 고유조건은 입술끼리 만나야 하고 특별한 기술은 필요치 않다.",
		EnrichedText: "",
		HTML:         "",
		Files: []*email.File{
			&email.File{
				FileType: "attachment",
				Name:     "smime.p7s",
				ContentInfo: &email.ContentInfo{
					Type: "application/pkcs7-signature",
					TypeParams: map[string]string{
						"name": "smime.p7s",
					},
					Disposition: "attachment",
					DispositionParams: map[string]string{
						"filename": "smime.p7s",
					},
					TransferEncoding: "base64",
					ID:               "",
					Charset:          "utf-8",
				},
				Data: []byte{
					239, 191, 189, 28, 239, 191, 189, 239, 191, 189, 117, 46, 239, 191, 189, 18, 97,
					239, 191, 189, 126, 239, 191, 189, 239, 191, 189, 239, 191, 189, 239, 191, 189, 25,
					58, 223, 189, 239, 191, 189, 239, 191, 189, 239, 158, 173, 108, 31, 71, 27, 239,
					191, 189, 80, 239, 191, 189, 239, 191, 189, 239, 191, 189, 239, 191, 189, 198, 132,
					239, 191, 189, 239, 191, 189, 29, 239, 191, 189, 19, 239, 191, 189, 80, 239, 191,
					189, 239, 191, 189, 239, 191, 189, 239, 191, 189, 198, 132, 239, 191, 189, 239, 191,
					189, 29, 239, 191, 189, 19, 239, 191, 189, 49, 239, 191, 189, 239, 191, 189, 127,
					7, 28, 104, 33, 239, 191, 189, 120, 71, 82, 239, 191, 189, 239, 191, 189, 38, 30,
					239, 191, 189, 239, 191, 189, 239, 191, 189, 239, 191, 189, 239, 191, 189, 113, 239,
					191, 189, 239, 191, 189, 239, 191, 189, 219, 158, 57, 239, 191, 189, 28, 113, 239,
					191, 189, 239, 191, 189, 239, 191, 189, 239, 191, 189, 38, 24, 239, 191, 189, 239,
					190, 173, 108, 31, 71, 27, 239, 191, 189, 80, 110, 120, 239, 191, 189, 239, 191,
					189, 198, 132, 239, 191, 189, 239, 191, 189, 29, 239, 191, 189, 19, 239, 191, 189,
					8, 114, 30, 17, 212, 186, 58, 95, 239, 191, 189, 94, 59, 26, 18, 6, 124, 119, 239,
					191, 189, 79, 239, 191, 189, 21, 65, 239, 191, 189, 239, 191, 189, 239, 191, 189,
				},
			},
		},
	}
	testEmailFromFile(t, fp, expectedEmail)
}

func TestParseEmailKoreanMultipartSignedUtf8OverQuotedprintable(t *testing.T) {
	fp := "tests/test_korean_multipart_signed_utf-8_over_quoted-printable.txt"
	expectedEmail := &email.Email{
		Headers: email.Headers{
			Date: time.Time(time.Date(2019, 3, 31, 22, 55, 0, 0, time.UTC)),
			Sender: &mail.Address{
				Name:    "앨리스 보내는사람",
				Address: "alice.bonaeneunsalam@example.com",
			},
			From: []*mail.Address{
				&mail.Address{
					Name:    "앨리스 보내는사람",
					Address: "alice.bonaeneunsalam@example.com",
				},
				&mail.Address{
					Name:    "앨리스 보내는사람",
					Address: "alice.bonaeneunsalam@example.net",
				},
			},
			ReplyTo: []*mail.Address{
				&mail.Address{
					Name:    "앨리스 보내는사람",
					Address: "alice.bonaeneunsalam@example.net",
				},
			},
			To: []*mail.Address{
				&mail.Address{
					Name:    "밥 수신자",
					Address: "bob.susinja@example.com",
				},
				&mail.Address{
					Name:    "캐롤 수신자",
					Address: "carol.susinja@example.com",
				},
			},
			Cc: []*mail.Address{
				&mail.Address{
					Name:    "댄 수신자",
					Address: "dan.susinja@example.com",
				},
				&mail.Address{
					Name:    "이브 수신자",
					Address: "eve.susinja@example.com",
				},
			},
			Bcc: []*mail.Address{
				&mail.Address{
					Name:    "프랭크 수신자",
					Address: "frank.susinja@example.com",
				},
				&mail.Address{
					Name:    "그레이스 수신자",
					Address: "grace.susinja@example.com",
				},
			},
			MessageID: "Message-Id-1@example.com",
			InReplyTo: []string{
				"Message-Id-0@example.com",
			},
			References: []string{
				"Message-Id-0@example.com",
			},
			Subject:  "📧 Signed Test 한국어 팬그램",
			Comments: "Message Header Comment",
			Keywords: []string{
				"Keyword 1",
				"Keyword 2",
			},
			ResentDate: time.Time(time.Date(2019, 3, 31, 22, 55, 0, 0, time.UTC)),
			ResentFrom: []*mail.Address{
				&mail.Address{
					Name:    "앨리스 보내는사람",
					Address: "alice.bonaeneunsalam@example.net",
				},
				&mail.Address{
					Name:    "앨리스 보내는사람",
					Address: "alice.bonaeneunsalam@example.com",
				},
			},
			ResentSender: &mail.Address{
				Name:    "앨리스 보내는사람",
				Address: "alice.bonaeneunsalam@example.net",
			},
			ResentTo: []*mail.Address{
				&mail.Address{
					Name:    "밥 수신자",
					Address: "bob.susinja@example.net",
				},
				&mail.Address{
					Name:    "캐롤 수신자",
					Address: "carol.susinja@example.net",
				},
			},
			ResentCc: []*mail.Address{
				&mail.Address{
					Name:    "댄 수신자",
					Address: "dan.susinja@example.net",
				},
				&mail.Address{
					Name:    "이브 수신자",
					Address: "eve.susinja@example.net",
				},
			},
			ResentBcc: []*mail.Address{
				&mail.Address{
					Name:    "프랭크 수신자",
					Address: "frank.susinja@example.net",
				},
				&mail.Address{
					Name:    "그레이스 수신자",
					Address: "grace.susinja@example.net",
				},
			},
			ResentMessageID: "Message-Id-1@example.net",
			ExtraHeaders: map[string][]string{
				"X-Clacks-Overhead": []string{
					"GNU Terry Pratchett",
				},
				"X-Script/function/\t !\"#$%&'()*+,-./;<=>?@[\\]^_`{|}~": []string{
					"TEST VALUE 1\t !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_` abcdefghijklmnopqrstuvwxyz{|}~",
					"TEST VALUE 2\t !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_` abcdefghijklmnopqrstuvwxyz{|}~",
				},
			},
			ContentInfo: &email.ContentInfo{
				Type: "multipart/signed",
				TypeParams: map[string]string{
					"boundary": "SignedBoundaryString",
					"charset":  "utf-8",
					"micalg":   "sha1",
					"protocol": "application/pkcs7-signature",
				},
				Disposition:       "",
				DispositionParams: map[string]string(nil), // p0
				TransferEncoding:  "quoted-printable",
				ID:                "",
				Charset:           "utf-8",
			},
			Received: nil,
		},
		Text:         "키스의 고유조건은 입술끼리 만나야 하고 특별한 기술은 필요치 않다.",
		EnrichedText: "",
		HTML:         "",
		Files: []*email.File{
			&email.File{
				FileType: "attachment",
				Name:     "smime.p7s",
				ContentInfo: &email.ContentInfo{
					Type: "application/pkcs7-signature",
					TypeParams: map[string]string{
						"name": "smime.p7s",
					},
					Disposition: "attachment",
					DispositionParams: map[string]string{
						"filename": "smime.p7s",
					},
					TransferEncoding: "base64",
					ID:               "",
					Charset:          "utf-8",
				},
				Data: []byte{
					239, 191, 189, 28, 239, 191, 189, 239, 191, 189, 117, 46, 239, 191, 189, 18, 97,
					239, 191, 189, 126, 239, 191, 189, 239, 191, 189, 239, 191, 189, 239, 191, 189, 25,
					58, 223, 189, 239, 191, 189, 239, 191, 189, 239, 158, 173, 108, 31, 71, 27, 239,
					191, 189, 80, 239, 191, 189, 239, 191, 189, 239, 191, 189, 239, 191, 189, 198, 132,
					239, 191, 189, 239, 191, 189, 29, 239, 191, 189, 19, 239, 191, 189, 80, 239, 191,
					189, 239, 191, 189, 239, 191, 189, 239, 191, 189, 198, 132, 239, 191, 189, 239, 191,
					189, 29, 239, 191, 189, 19, 239, 191, 189, 49, 239, 191, 189, 239, 191, 189, 127,
					7, 28, 104, 33, 239, 191, 189, 120, 71, 82, 239, 191, 189, 239, 191, 189, 38, 30,
					239, 191, 189, 239, 191, 189, 239, 191, 189, 239, 191, 189, 239, 191, 189, 113, 239,
					191, 189, 239, 191, 189, 239, 191, 189, 219, 158, 57, 239, 191, 189, 28, 113, 239,
					191, 189, 239, 191, 189, 239, 191, 189, 239, 191, 189, 38, 24, 239, 191, 189, 239,
					190, 173, 108, 31, 71, 27, 239, 191, 189, 80, 110, 120, 239, 191, 189, 239, 191,
					189, 198, 132, 239, 191, 189, 239, 191, 189, 29, 239, 191, 189, 19, 239, 191, 189,
					8, 114, 30, 17, 212, 186, 58, 95, 239, 191, 189, 94, 59, 26, 18, 6, 124, 119, 239,
					191, 189, 79, 239, 191, 189, 21, 65, 239, 191, 189, 239, 191, 189, 239, 191, 189,
				},
			},
		},
	}
	testEmailFromFile(t, fp, expectedEmail)
}

func TestParseEmailKoreanMultipartSignedEuckrOverBase64(t *testing.T) {
	fp := "tests/test_korean_multipart_signed_euc-kr_over_base64.txt"
	expectedEmail := &email.Email{
		Headers: email.Headers{
			Date: time.Time(time.Date(2019, 3, 31, 22, 55, 0, 0, time.UTC)),
			Sender: &mail.Address{
				Name:    "앨리스 보내는사람",
				Address: "alice.bonaeneunsalam@example.com",
			},
			From: []*mail.Address{
				&mail.Address{
					Name:    "앨리스 보내는사람",
					Address: "alice.bonaeneunsalam@example.com",
				},
				&mail.Address{
					Name:    "앨리스 보내는사람",
					Address: "alice.bonaeneunsalam@example.net",
				},
			},
			ReplyTo: []*mail.Address{
				&mail.Address{
					Name:    "앨리스 보내는사람",
					Address: "alice.bonaeneunsalam@example.net",
				},
			},
			To: []*mail.Address{
				&mail.Address{
					Name:    "밥 수신자",
					Address: "bob.susinja@example.com",
				},
				&mail.Address{
					Name:    "캐롤 수신자",
					Address: "carol.susinja@example.com",
				},
			},
			Cc: []*mail.Address{
				&mail.Address{
					Name:    "댄 수신자",
					Address: "dan.susinja@example.com",
				},
				&mail.Address{
					Name:    "이브 수신자",
					Address: "eve.susinja@example.com",
				},
			},
			Bcc: []*mail.Address{
				&mail.Address{
					Name:    "프랭크 수신자",
					Address: "frank.susinja@example.com",
				},
				&mail.Address{
					Name:    "그레이스 수신자",
					Address: "grace.susinja@example.com",
				},
			},
			MessageID: "Message-Id-1@example.com",
			InReplyTo: []string{
				"Message-Id-0@example.com",
			},
			References: []string{
				"Message-Id-0@example.com",
			},
			Subject:  "📧 Signed Test 한국어 팬그램",
			Comments: "Message Header Comment",
			Keywords: []string{
				"Keyword 1",
				"Keyword 2",
			},
			ResentDate: time.Time(time.Date(2019, 3, 31, 22, 55, 0, 0, time.UTC)),
			ResentFrom: []*mail.Address{
				&mail.Address{
					Name:    "앨리스 보내는사람",
					Address: "alice.bonaeneunsalam@example.net",
				},
				&mail.Address{
					Name:    "앨리스 보내는사람",
					Address: "alice.bonaeneunsalam@example.com",
				},
			},
			ResentSender: &mail.Address{
				Name:    "앨리스 보내는사람",
				Address: "alice.bonaeneunsalam@example.net",
			},
			ResentTo: []*mail.Address{
				&mail.Address{
					Name:    "밥 수신자",
					Address: "bob.susinja@example.net",
				},
				&mail.Address{
					Name:    "캐롤 수신자",
					Address: "carol.susinja@example.net",
				},
			},
			ResentCc: []*mail.Address{
				&mail.Address{
					Name:    "댄 수신자",
					Address: "dan.susinja@example.net",
				},
				&mail.Address{
					Name:    "이브 수신자",
					Address: "eve.susinja@example.net",
				},
			},
			ResentBcc: []*mail.Address{
				&mail.Address{
					Name:    "프랭크 수신자",
					Address: "frank.susinja@example.net",
				},
				&mail.Address{
					Name:    "그레이스 수신자",
					Address: "grace.susinja@example.net",
				},
			},
			ResentMessageID: "Message-Id-1@example.net",
			ExtraHeaders: map[string][]string{
				"X-Clacks-Overhead": []string{
					"GNU Terry Pratchett",
				},
				"X-Script/function/\t !\"#$%&'()*+,-./;<=>?@[\\]^_`{|}~": []string{
					"TEST VALUE 1\t !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_` abcdefghijklmnopqrstuvwxyz{|}~",
					"TEST VALUE 2\t !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_` abcdefghijklmnopqrstuvwxyz{|}~",
				},
			},
			ContentInfo: &email.ContentInfo{
				Type: "multipart/signed",
				TypeParams: map[string]string{
					"boundary": "SignedBoundaryString",
					"charset":  "euc-kr",
					"micalg":   "sha1",
					"protocol": "application/pkcs7-signature",
				},
				Disposition:       "",
				DispositionParams: map[string]string(nil), // p0
				TransferEncoding:  "base64",
				ID:                "",
				Charset:           "euc-kr",
			},
			Received: nil,
		},
		Text:         "키스의 고유조건은 입술끼리 만나야 하고 특별한 기술은 필요치 않다.",
		EnrichedText: "",
		HTML:         "",
		Files: []*email.File{
			&email.File{
				FileType: "attachment",
				Name:     "smime.p7s",
				ContentInfo: &email.ContentInfo{
					Type: "application/pkcs7-signature",
					TypeParams: map[string]string{
						"name": "smime.p7s",
					},
					Disposition: "attachment",
					DispositionParams: map[string]string{
						"filename": "smime.p7s",
					},
					TransferEncoding: "base64",
					ID:               "",
					Charset:          "euc-kr",
				},
				Data: []byte{
					239, 191, 189, 28, 235, 135, 153, 117, 46, 239, 191, 189, 18, 97, 239, 191, 189,
					126, 239, 191, 189, 236, 162, 161, 25, 58, 233, 162, 175, 235, 176, 164, 239, 191,
					189, 236, 182, 141, 31, 71, 27, 234, 191, 150, 239, 191, 189, 235, 129, 185, 239,
					191, 189, 234, 188, 164, 239, 191, 189, 29, 239, 191, 189, 19, 239, 191, 189, 80,
					239, 191, 189, 235, 129, 185, 239, 191, 189, 234, 188, 164, 239, 191, 189, 29, 239,
					191, 189, 19, 239, 191, 189, 49, 231, 172, 143, 127, 7, 28, 104, 33, 239, 191, 189,
					120, 71, 82, 231, 159, 174, 38, 30, 229, 144, 136, 233, 128, 158, 239, 191, 189,
					113, 235, 178, 138, 232, 153, 142, 239, 191, 189, 57, 239, 191, 189, 28, 113, 235,
					178, 138, 233, 160, 128, 38, 24, 237, 151, 172, 236, 146, 148, 108, 31, 71, 27, 234,
					191, 150, 110, 120, 230, 152, 143, 239, 191, 189, 234, 188, 164, 239, 191, 189, 29,
					239, 191, 189, 19, 239, 191, 189, 8, 114, 30, 17, 231, 137, 152, 58, 95, 239, 191,
					189, 94, 59, 26, 18, 6, 124, 119, 239, 191, 189, 79, 239, 191, 189, 21, 65, 235,
					176, 164, 239, 191, 189,
				},
			},
		},
	}
	testEmailFromFile(t, fp, expectedEmail)
}

func TestParseEmailKoreanMultipartSignedEuckrOverQuotedprintable(t *testing.T) {
	fp := "tests/test_korean_multipart_signed_euc-kr_over_quoted-printable.txt"
	expectedEmail := &email.Email{
		Headers: email.Headers{
			Date: time.Time(time.Date(2019, 3, 31, 22, 55, 0, 0, time.UTC)),
			Sender: &mail.Address{
				Name:    "앨리스 보내는사람",
				Address: "alice.bonaeneunsalam@example.com",
			},
			From: []*mail.Address{
				&mail.Address{
					Name:    "앨리스 보내는사람",
					Address: "alice.bonaeneunsalam@example.com",
				},
				&mail.Address{
					Name:    "앨리스 보내는사람",
					Address: "alice.bonaeneunsalam@example.net",
				},
			},
			ReplyTo: []*mail.Address{
				&mail.Address{
					Name:    "앨리스 보내는사람",
					Address: "alice.bonaeneunsalam@example.net",
				},
			},
			To: []*mail.Address{
				&mail.Address{
					Name:    "밥 수신자",
					Address: "bob.susinja@example.com",
				},
				&mail.Address{
					Name:    "캐롤 수신자",
					Address: "carol.susinja@example.com",
				},
			},
			Cc: []*mail.Address{
				&mail.Address{
					Name:    "댄 수신자",
					Address: "dan.susinja@example.com",
				},
				&mail.Address{
					Name:    "이브 수신자",
					Address: "eve.susinja@example.com",
				},
			},
			Bcc: []*mail.Address{
				&mail.Address{
					Name:    "프랭크 수신자",
					Address: "frank.susinja@example.com",
				},
				&mail.Address{
					Name:    "그레이스 수신자",
					Address: "grace.susinja@example.com",
				},
			},
			MessageID: "Message-Id-1@example.com",
			InReplyTo: []string{
				"Message-Id-0@example.com",
			},
			References: []string{
				"Message-Id-0@example.com",
			},
			Subject:  "📧 Signed Test 한국어 팬그램",
			Comments: "Message Header Comment",
			Keywords: []string{
				"Keyword 1",
				"Keyword 2",
			},
			ResentDate: time.Time(time.Date(2019, 3, 31, 22, 55, 0, 0, time.UTC)),
			ResentFrom: []*mail.Address{
				&mail.Address{
					Name:    "앨리스 보내는사람",
					Address: "alice.bonaeneunsalam@example.net",
				},
				&mail.Address{
					Name:    "앨리스 보내는사람",
					Address: "alice.bonaeneunsalam@example.com",
				},
			},
			ResentSender: &mail.Address{
				Name:    "앨리스 보내는사람",
				Address: "alice.bonaeneunsalam@example.net",
			},
			ResentTo: []*mail.Address{
				&mail.Address{
					Name:    "밥 수신자",
					Address: "bob.susinja@example.net",
				},
				&mail.Address{
					Name:    "캐롤 수신자",
					Address: "carol.susinja@example.net",
				},
			},
			ResentCc: []*mail.Address{
				&mail.Address{
					Name:    "댄 수신자",
					Address: "dan.susinja@example.net",
				},
				&mail.Address{
					Name:    "이브 수신자",
					Address: "eve.susinja@example.net",
				},
			},
			ResentBcc: []*mail.Address{
				&mail.Address{
					Name:    "프랭크 수신자",
					Address: "frank.susinja@example.net",
				},
				&mail.Address{
					Name:    "그레이스 수신자",
					Address: "grace.susinja@example.net",
				},
			},
			ResentMessageID: "Message-Id-1@example.net",
			ExtraHeaders: map[string][]string{
				"X-Clacks-Overhead": []string{
					"GNU Terry Pratchett",
				},
				"X-Script/function/\t !\"#$%&'()*+,-./;<=>?@[\\]^_`{|}~": []string{
					"TEST VALUE 1\t !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_` abcdefghijklmnopqrstuvwxyz{|}~",
					"TEST VALUE 2\t !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_` abcdefghijklmnopqrstuvwxyz{|}~",
				},
			},
			ContentInfo: &email.ContentInfo{
				Type: "multipart/signed",
				TypeParams: map[string]string{
					"boundary": "SignedBoundaryString",
					"charset":  "euc-kr",
					"micalg":   "sha1",
					"protocol": "application/pkcs7-signature",
				},
				Disposition:       "",
				DispositionParams: map[string]string(nil), // p0
				TransferEncoding:  "quoted-printable",
				ID:                "",
				Charset:           "euc-kr",
			},
			Received: nil,
		},
		Text:         "키스의 고유조건은 입술끼리 만나야 하고 특별한 기술은 필요치 않다.",
		EnrichedText: "",
		HTML:         "",
		Files: []*email.File{
			&email.File{
				FileType: "attachment",
				Name:     "smime.p7s",
				ContentInfo: &email.ContentInfo{
					Type: "application/pkcs7-signature",
					TypeParams: map[string]string{
						"name": "smime.p7s",
					},
					Disposition: "attachment",
					DispositionParams: map[string]string{
						"filename": "smime.p7s",
					},
					TransferEncoding: "base64",
					ID:               "",
					Charset:          "euc-kr",
				},
				Data: []byte{
					239, 191, 189, 28, 235, 135, 153, 117, 46, 239, 191, 189, 18, 97, 239, 191, 189,
					126, 239, 191, 189, 236, 162, 161, 25, 58, 233, 162, 175, 235, 176, 164, 239, 191,
					189, 236, 182, 141, 31, 71, 27, 234, 191, 150, 239, 191, 189, 235, 129, 185, 239,
					191, 189, 234, 188, 164, 239, 191, 189, 29, 239, 191, 189, 19, 239, 191, 189, 80,
					239, 191, 189, 235, 129, 185, 239, 191, 189, 234, 188, 164, 239, 191, 189, 29, 239,
					191, 189, 19, 239, 191, 189, 49, 231, 172, 143, 127, 7, 28, 104, 33, 239, 191, 189,
					120, 71, 82, 231, 159, 174, 38, 30, 229, 144, 136, 233, 128, 158, 239, 191, 189,
					113, 235, 178, 138, 232, 153, 142, 239, 191, 189, 57, 239, 191, 189, 28, 113, 235,
					178, 138, 233, 160, 128, 38, 24, 237, 151, 172, 236, 146, 148, 108, 31, 71, 27, 234,
					191, 150, 110, 120, 230, 152, 143, 239, 191, 189, 234, 188, 164, 239, 191, 189, 29,
					239, 191, 189, 19, 239, 191, 189, 8, 114, 30, 17, 231, 137, 152, 58, 95, 239, 191,
					189, 94, 59, 26, 18, 6, 124, 119, 239, 191, 189, 79, 239, 191, 189, 21, 65, 235,
					176, 164, 239, 191, 189,
				},
			},
		},
	}
	testEmailFromFile(t, fp, expectedEmail)
}

func TestParseEmailPolishPlaintextUtf8OverBase64(t *testing.T) {
	fp := "tests/test_polish_plaintext_utf-8_over_base64.txt"
	expectedEmail := &email.Email{
		Headers: email.Headers{
			Date: time.Time(time.Date(2019, 4, 1, 5, 55, 0, 0, time.UTC)),
			Sender: &mail.Address{
				Name:    "Nadająca, Alicja",
				Address: "alicja.nadajaca@example.com",
			},
			From: []*mail.Address{
				&mail.Address{
					Name:    "Nadająca, Alicja",
					Address: "alicja.nadajaca@example.com",
				},
				&mail.Address{
					Name:    "Nadająca, Alicja",
					Address: "alicja.nadajaca@example.net",
				},
			},
			ReplyTo: []*mail.Address{
				&mail.Address{
					Name:    "Nadająca, Alicja",
					Address: "alicja.nadajaca@example.net",
				},
			},
			To: []*mail.Address{
				&mail.Address{
					Name:    "Odbierający, Bob",
					Address: "bob.odbierajacy@example.com",
				},
				&mail.Address{
					Name:    "Odbierająca, Karolina",
					Address: "karolina.odbierajaca@example.com",
				},
			},
			Cc: []*mail.Address{
				&mail.Address{
					Name:    "Odbierający, Daniel",
					Address: "daniel.odbierajacy@example.com",
				},
				&mail.Address{
					Name:    "Odbierająca, Ewa",
					Address: "ewa.odbierajaca@example.com",
				},
			},
			Bcc: []*mail.Address{
				&mail.Address{
					Name:    "Odbierający, Franek",
					Address: "franek.odbierajacy@example.com",
				},
				&mail.Address{
					Name:    "Odbierająca, Grażyna",
					Address: "grazyna.odbierajaca@example.com",
				},
			},
			MessageID: "Message-Id-1@example.com",
			InReplyTo: []string{
				"Message-Id-0@example.com",
			},
			References: []string{
				"Message-Id-0@example.com",
			},
			Subject:  "📧 Test Polskie pangramy",
			Comments: "Message Header Comment",
			Keywords: []string{
				"Keyword 1",
				"Keyword 2",
			},
			ResentDate: time.Time(time.Date(2019, 4, 1, 5, 55, 0, 0, time.UTC)),
			ResentFrom: []*mail.Address{
				&mail.Address{
					Name:    "Nadająca, Alicja",
					Address: "alicja.nadajaca@example.net",
				},
				&mail.Address{
					Name:    "Nadająca, Alicja",
					Address: "alicja.nadajaca@example.com",
				},
			},
			ResentSender: &mail.Address{
				Name:    "Nadająca, Alicja",
				Address: "alicja.nadajaca@example.net",
			},
			ResentTo: []*mail.Address{
				&mail.Address{
					Name:    "Odbierający, Bob",
					Address: "bob.odbierajacy@example.net",
				},
				&mail.Address{
					Name:    "Odbierająca, Karolina",
					Address: "karolina.odbierajaca@example.net",
				},
			},
			ResentCc: []*mail.Address{
				&mail.Address{
					Name:    "Odbierający, Daniel",
					Address: "daniel.odbierajacy@example.net",
				},
				&mail.Address{
					Name:    "Odbierająca, Ewa",
					Address: "ewa.odbierajaca@example.net",
				},
			},
			ResentBcc: []*mail.Address{
				&mail.Address{
					Name:    "Odbierający, Franek",
					Address: "franek.odbierajacy@example.net",
				},
				&mail.Address{
					Name:    "Odbierająca, Grażyna",
					Address: "grazyna.odbierajaca@example.net",
				},
			},
			ResentMessageID: "Message-Id-1@example.net",
			ExtraHeaders: map[string][]string{
				"X-Clacks-Overhead": []string{
					"GNU Terry Pratchett",
				},
				"X-Script/function/\t !\"#$%&'()*+,-./;<=>?@[\\]^_`{|}~": []string{
					"TEST VALUE 1\t !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_` abcdefghijklmnopqrstuvwxyz{|}~",
					"TEST VALUE 2\t !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_` abcdefghijklmnopqrstuvwxyz{|}~",
				},
			},
			ContentInfo: &email.ContentInfo{
				Type: "text/plain",
				TypeParams: map[string]string{
					"charset": "utf-8",
				},
				Disposition:       "",
				DispositionParams: map[string]string(nil),
				TransferEncoding:  "base64",
				ID:                "",
				Charset:           "utf-8",
			},
			Received: nil,
		},
		Text: "Jeżu klątw, spłódź Finom część gry hańb!\n" +
			"Pójdźże, kiń tę chmurność w głąb flaszy!\n" +
			"Mężny bądź chroń pułk twój i sześć flag.\n" +
			"Filmuj rzeź żądań, pość, gnęb chłystków!\n" +
			"Pchnąć w tę łódź jeża lub ośm skrzyń fig.\n" +
			"Dość gróźb fuzją, klnę, pych i małżeństw!\n" +
			"Pójdź w loch zbić małżeńską gęś futryn!\n" +
			"Chwyć małżonkę, strój bądź pleśń z fugi.",
		EnrichedText: "",
		HTML:         "",
		Files:        nil,
	}
	testEmailFromFile(t, fp, expectedEmail)
}

func TestParseEmailPolishPlaintextUtf8OverQuotedprintable(t *testing.T) {
	fp := "tests/test_polish_plaintext_utf-8_over_quoted-printable.txt"
	expectedEmail := &email.Email{
		Headers: email.Headers{
			Date: time.Time(time.Date(2019, 4, 1, 5, 55, 0, 0, time.UTC)),
			Sender: &mail.Address{
				Name:    "Nadająca, Alicja",
				Address: "alicja.nadajaca@example.com",
			},
			From: []*mail.Address{
				&mail.Address{
					Name:    "Nadająca, Alicja",
					Address: "alicja.nadajaca@example.com",
				},
				&mail.Address{
					Name:    "Nadająca, Alicja",
					Address: "alicja.nadajaca@example.net",
				},
			},
			ReplyTo: []*mail.Address{
				&mail.Address{
					Name:    "Nadająca, Alicja",
					Address: "alicja.nadajaca@example.net",
				},
			},
			To: []*mail.Address{
				&mail.Address{
					Name:    "Odbierający, Bob",
					Address: "bob.odbierajacy@example.com",
				},
				&mail.Address{
					Name:    "Odbierająca, Karolina",
					Address: "karolina.odbierajaca@example.com",
				},
			},
			Cc: []*mail.Address{
				&mail.Address{
					Name:    "Odbierający, Daniel",
					Address: "daniel.odbierajacy@example.com",
				},
				&mail.Address{
					Name:    "Odbierająca, Ewa",
					Address: "ewa.odbierajaca@example.com",
				},
			},
			Bcc: []*mail.Address{
				&mail.Address{
					Name:    "Odbierający, Franek",
					Address: "franek.odbierajacy@example.com",
				},
				&mail.Address{
					Name:    "Odbierająca, Grażyna",
					Address: "grazyna.odbierajaca@example.com",
				},
			},
			MessageID: "Message-Id-1@example.com",
			InReplyTo: []string{
				"Message-Id-0@example.com",
			},
			References: []string{
				"Message-Id-0@example.com",
			},
			Subject:  "📧 Test Polskie pangramy",
			Comments: "Message Header Comment",
			Keywords: []string{
				"Keyword 1",
				"Keyword 2",
			},
			ResentDate: time.Time(time.Date(2019, 4, 1, 5, 55, 0, 0, time.UTC)),
			ResentFrom: []*mail.Address{
				&mail.Address{
					Name:    "Nadająca, Alicja",
					Address: "alicja.nadajaca@example.net",
				},
				&mail.Address{
					Name:    "Nadająca, Alicja",
					Address: "alicja.nadajaca@example.com",
				},
			},
			ResentSender: &mail.Address{
				Name:    "Nadająca, Alicja",
				Address: "alicja.nadajaca@example.net",
			},
			ResentTo: []*mail.Address{
				&mail.Address{
					Name:    "Odbierający, Bob",
					Address: "bob.odbierajacy@example.net",
				},
				&mail.Address{
					Name:    "Odbierająca, Karolina",
					Address: "karolina.odbierajaca@example.net",
				},
			},
			ResentCc: []*mail.Address{
				&mail.Address{
					Name:    "Odbierający, Daniel",
					Address: "daniel.odbierajacy@example.net",
				},
				&mail.Address{
					Name:    "Odbierająca, Ewa",
					Address: "ewa.odbierajaca@example.net",
				},
			},
			ResentBcc: []*mail.Address{
				&mail.Address{
					Name:    "Odbierający, Franek",
					Address: "franek.odbierajacy@example.net",
				},
				&mail.Address{
					Name:    "Odbierająca, Grażyna",
					Address: "grazyna.odbierajaca@example.net",
				},
			},
			ResentMessageID: "Message-Id-1@example.net",
			ExtraHeaders: map[string][]string{
				"X-Clacks-Overhead": []string{
					"GNU Terry Pratchett",
				},
				"X-Script/function/\t !\"#$%&'()*+,-./;<=>?@[\\]^_`{|}~": []string{
					"TEST VALUE 1\t !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_` abcdefghijklmnopqrstuvwxyz{|}~",
					"TEST VALUE 2\t !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_` abcdefghijklmnopqrstuvwxyz{|}~",
				},
			},
			ContentInfo: &email.ContentInfo{
				Type: "text/plain",
				TypeParams: map[string]string{
					"charset": "utf-8",
				},
				Disposition:       "",
				DispositionParams: map[string]string(nil),
				TransferEncoding:  "quoted-printable",
				ID:                "",
				Charset:           "utf-8",
			},
			Received: nil,
		},
		Text: "Jeżu klątw, spłódź Finom część gry hańb!\n" +
			"Pójdźże, kiń tę chmurność w głąb flaszy!\n" +
			"Mężny bądź chroń pułk twój i sześć flag.\n" +
			"Filmuj rzeź żądań, pość, gnęb chłystków!\n" +
			"Pchnąć w tę łódź jeża lub ośm skrzyń fig.\n" +
			"Dość gróźb fuzją, klnę, pych i małżeństw!\n" +
			"Pójdź w loch zbić małżeńską gęś futryn!\n" +
			"Chwyć małżonkę, strój bądź pleśń z fugi.",
		EnrichedText: "",
		HTML:         "",
		Files:        nil,
	}
	testEmailFromFile(t, fp, expectedEmail)
}

func TestParseEmailPolishPlaintextIso88592OverBase64(t *testing.T) {
	fp := "tests/test_polish_plaintext_iso-8859-2_over_base64.txt"
	expectedEmail := &email.Email{
		Headers: email.Headers{
			Date: time.Time(time.Date(2019, 4, 1, 5, 55, 0, 0, time.UTC)),
			Sender: &mail.Address{
				Name:    "Nadająca, Alicja",
				Address: "alicja.nadajaca@example.com",
			},
			From: []*mail.Address{
				&mail.Address{
					Name:    "Nadająca, Alicja",
					Address: "alicja.nadajaca@example.com",
				},
				&mail.Address{
					Name:    "Nadająca, Alicja",
					Address: "alicja.nadajaca@example.net",
				},
			},
			ReplyTo: []*mail.Address{
				&mail.Address{
					Name:    "Nadająca, Alicja",
					Address: "alicja.nadajaca@example.net",
				},
			},
			To: []*mail.Address{
				&mail.Address{
					Name:    "Odbierający, Bob",
					Address: "bob.odbierajacy@example.com",
				},
				&mail.Address{
					Name:    "Odbierająca, Karolina",
					Address: "karolina.odbierajaca@example.com",
				},
			},
			Cc: []*mail.Address{
				&mail.Address{
					Name:    "Odbierający, Daniel",
					Address: "daniel.odbierajacy@example.com",
				},
				&mail.Address{
					Name:    "Odbierająca, Ewa",
					Address: "ewa.odbierajaca@example.com",
				},
			},
			Bcc: []*mail.Address{
				&mail.Address{
					Name:    "Odbierający, Franek",
					Address: "franek.odbierajacy@example.com",
				},
				&mail.Address{
					Name:    "Odbierająca, Grażyna",
					Address: "grazyna.odbierajaca@example.com",
				},
			},
			MessageID: "Message-Id-1@example.com",
			InReplyTo: []string{
				"Message-Id-0@example.com",
			},
			References: []string{
				"Message-Id-0@example.com",
			},
			Subject:  "📧 Test Polskie pangramy",
			Comments: "Message Header Comment",
			Keywords: []string{
				"Keyword 1",
				"Keyword 2",
			},
			ResentDate: time.Time(time.Date(2019, 4, 1, 5, 55, 0, 0, time.UTC)),
			ResentFrom: []*mail.Address{
				&mail.Address{
					Name:    "Nadająca, Alicja",
					Address: "alicja.nadajaca@example.net",
				},
				&mail.Address{
					Name:    "Nadająca, Alicja",
					Address: "alicja.nadajaca@example.com",
				},
			},
			ResentSender: &mail.Address{
				Name:    "Nadająca, Alicja",
				Address: "alicja.nadajaca@example.net",
			},
			ResentTo: []*mail.Address{
				&mail.Address{
					Name:    "Odbierający, Bob",
					Address: "bob.odbierajacy@example.net",
				},
				&mail.Address{
					Name:    "Odbierająca, Karolina",
					Address: "karolina.odbierajaca@example.net",
				},
			},
			ResentCc: []*mail.Address{
				&mail.Address{
					Name:    "Odbierający, Daniel",
					Address: "daniel.odbierajacy@example.net",
				},
				&mail.Address{
					Name:    "Odbierająca, Ewa",
					Address: "ewa.odbierajaca@example.net",
				},
			},
			ResentBcc: []*mail.Address{
				&mail.Address{
					Name:    "Odbierający, Franek",
					Address: "franek.odbierajacy@example.net",
				},
				&mail.Address{
					Name:    "Odbierająca, Grażyna",
					Address: "grazyna.odbierajaca@example.net",
				},
			},
			ResentMessageID: "Message-Id-1@example.net",
			ExtraHeaders: map[string][]string{
				"X-Clacks-Overhead": []string{
					"GNU Terry Pratchett",
				},
				"X-Script/function/\t !\"#$%&'()*+,-./;<=>?@[\\]^_`{|}~": []string{
					"TEST VALUE 1\t !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_` abcdefghijklmnopqrstuvwxyz{|}~",
					"TEST VALUE 2\t !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_` abcdefghijklmnopqrstuvwxyz{|}~",
				},
			},
			ContentInfo: &email.ContentInfo{
				Type: "text/plain",
				TypeParams: map[string]string{
					"charset": "iso-8859-2",
				},
				Disposition:       "",
				DispositionParams: map[string]string(nil),
				TransferEncoding:  "base64",
				ID:                "",
				Charset:           "iso-8859-2",
			},
			Received: nil,
		},
		Text: "Jeżu klątw, spłódź Finom część gry hańb!\n" +
			"Pójdźże, kiń tę chmurność w głąb flaszy!\n" +
			"Mężny bądź chroń pułk twój i sześć flag.\n" +
			"Filmuj rzeź żądań, pość, gnęb chłystków!\n" +
			"Pchnąć w tę łódź jeża lub ośm skrzyń fig.\n" +
			"Dość gróźb fuzją, klnę, pych i małżeństw!\n" +
			"Pójdź w loch zbić małżeńską gęś futryn!\n" +
			"Chwyć małżonkę, strój bądź pleśń z fugi.",
		EnrichedText: "",
		HTML:         "",
		Files:        nil,
	}
	testEmailFromFile(t, fp, expectedEmail)
}

func TestParseEmailPolishPlaintextIso88592OverQuotedprintable(t *testing.T) {
	fp := "tests/test_polish_plaintext_iso-8859-2_over_quoted-printable.txt"
	expectedEmail := &email.Email{
		Headers: email.Headers{
			Date: time.Time(time.Date(2019, 4, 1, 5, 55, 0, 0, time.UTC)),
			Sender: &mail.Address{
				Name:    "Nadająca, Alicja",
				Address: "alicja.nadajaca@example.com",
			},
			From: []*mail.Address{
				&mail.Address{
					Name:    "Nadająca, Alicja",
					Address: "alicja.nadajaca@example.com",
				},
				&mail.Address{
					Name:    "Nadająca, Alicja",
					Address: "alicja.nadajaca@example.net",
				},
			},
			ReplyTo: []*mail.Address{
				&mail.Address{
					Name:    "Nadająca, Alicja",
					Address: "alicja.nadajaca@example.net",
				},
			},
			To: []*mail.Address{
				&mail.Address{
					Name:    "Odbierający, Bob",
					Address: "bob.odbierajacy@example.com",
				},
				&mail.Address{
					Name:    "Odbierająca, Karolina",
					Address: "karolina.odbierajaca@example.com",
				},
			},
			Cc: []*mail.Address{
				&mail.Address{
					Name:    "Odbierający, Daniel",
					Address: "daniel.odbierajacy@example.com",
				},
				&mail.Address{
					Name:    "Odbierająca, Ewa",
					Address: "ewa.odbierajaca@example.com",
				},
			},
			Bcc: []*mail.Address{
				&mail.Address{
					Name:    "Odbierający, Franek",
					Address: "franek.odbierajacy@example.com",
				},
				&mail.Address{
					Name:    "Odbierająca, Grażyna",
					Address: "grazyna.odbierajaca@example.com",
				},
			},
			MessageID: "Message-Id-1@example.com",
			InReplyTo: []string{
				"Message-Id-0@example.com",
			},
			References: []string{
				"Message-Id-0@example.com",
			},
			Subject:  "📧 Test Polskie pangramy",
			Comments: "Message Header Comment",
			Keywords: []string{
				"Keyword 1",
				"Keyword 2",
			},
			ResentDate: time.Time(time.Date(2019, 4, 1, 5, 55, 0, 0, time.UTC)),
			ResentFrom: []*mail.Address{
				&mail.Address{
					Name:    "Nadająca, Alicja",
					Address: "alicja.nadajaca@example.net",
				},
				&mail.Address{
					Name:    "Nadająca, Alicja",
					Address: "alicja.nadajaca@example.com",
				},
			},
			ResentSender: &mail.Address{
				Name:    "Nadająca, Alicja",
				Address: "alicja.nadajaca@example.net",
			},
			ResentTo: []*mail.Address{
				&mail.Address{
					Name:    "Odbierający, Bob",
					Address: "bob.odbierajacy@example.net",
				},
				&mail.Address{
					Name:    "Odbierająca, Karolina",
					Address: "karolina.odbierajaca@example.net",
				},
			},
			ResentCc: []*mail.Address{
				&mail.Address{
					Name:    "Odbierający, Daniel",
					Address: "daniel.odbierajacy@example.net",
				},
				&mail.Address{
					Name:    "Odbierająca, Ewa",
					Address: "ewa.odbierajaca@example.net",
				},
			},
			ResentBcc: []*mail.Address{
				&mail.Address{
					Name:    "Odbierający, Franek",
					Address: "franek.odbierajacy@example.net",
				},
				&mail.Address{
					Name:    "Odbierająca, Grażyna",
					Address: "grazyna.odbierajaca@example.net",
				},
			},
			ResentMessageID: "Message-Id-1@example.net",
			ExtraHeaders: map[string][]string{
				"X-Clacks-Overhead": []string{
					"GNU Terry Pratchett",
				},
				"X-Script/function/\t !\"#$%&'()*+,-./;<=>?@[\\]^_`{|}~": []string{
					"TEST VALUE 1\t !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_` abcdefghijklmnopqrstuvwxyz{|}~",
					"TEST VALUE 2\t !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_` abcdefghijklmnopqrstuvwxyz{|}~",
				},
			},
			ContentInfo: &email.ContentInfo{
				Type: "text/plain",
				TypeParams: map[string]string{
					"charset": "iso-8859-2",
				},
				Disposition:       "",
				DispositionParams: map[string]string(nil),
				TransferEncoding:  "quoted-printable",
				ID:                "",
				Charset:           "iso-8859-2",
			},
			Received: nil,
		},
		Text: "Jeżu klątw, spłódź Finom część gry hańb!\n" +
			"Pójdźże, kiń tę chmurność w głąb flaszy!\n" +
			"Mężny bądź chroń pułk twój i sześć flag.\n" +
			"Filmuj rzeź żądań, pość, gnęb chłystków!\n" +
			"Pchnąć w tę łódź jeża lub ośm skrzyń fig.\n" +
			"Dość gróźb fuzją, klnę, pych i małżeństw!\n" +
			"Pójdź w loch zbić małżeńską gęś futryn!\n" +
			"Chwyć małżonkę, strój bądź pleśń z fugi.",
		EnrichedText: "",
		HTML:         "",
		Files:        nil,
	}
	testEmailFromFile(t, fp, expectedEmail)
}

func TestParseEmailPolishMultipartRelatedUtf8OverBase64(t *testing.T) {
	fp := "tests/test_polish_multipart_related_utf-8_over_base64.txt"
	expectedEmail := &email.Email{
		Headers: email.Headers{
			Date: time.Time(time.Date(2019, 4, 1, 5, 55, 0, 0, time.UTC)),
			Sender: &mail.Address{
				Name:    "Nadająca, Alicja",
				Address: "alicja.nadajaca@example.com",
			},
			From: []*mail.Address{
				&mail.Address{
					Name:    "Nadająca, Alicja",
					Address: "alicja.nadajaca@example.com",
				},
				&mail.Address{
					Name:    "Nadająca, Alicja",
					Address: "alicja.nadajaca@example.net",
				},
			},
			ReplyTo: []*mail.Address{
				&mail.Address{
					Name:    "Nadająca, Alicja",
					Address: "alicja.nadajaca@example.net",
				},
			},
			To: []*mail.Address{
				&mail.Address{
					Name:    "Odbierający, Bob",
					Address: "bob.odbierajacy@example.com",
				},
				&mail.Address{
					Name:    "Odbierająca, Karolina",
					Address: "karolina.odbierajaca@example.com",
				},
			},
			Cc: []*mail.Address{
				&mail.Address{
					Name:    "Odbierający, Daniel",
					Address: "daniel.odbierajacy@example.com",
				},
				&mail.Address{
					Name:    "Odbierająca, Ewa",
					Address: "ewa.odbierajaca@example.com",
				},
			},
			Bcc: []*mail.Address{
				&mail.Address{
					Name:    "Odbierający, Franek",
					Address: "franek.odbierajacy@example.com",
				},
				&mail.Address{
					Name:    "Odbierająca, Grażyna",
					Address: "grazyna.odbierajaca@example.com",
				},
			},
			MessageID: "Message-Id-1@example.com",
			InReplyTo: []string{
				"Message-Id-0@example.com",
			},
			References: []string{
				"Message-Id-0@example.com",
			},
			Subject:  "📧 Test Polskie pangramy",
			Comments: "Message Header Comment",
			Keywords: []string{
				"Keyword 1",
				"Keyword 2",
			},
			ResentDate: time.Time(time.Date(2019, 4, 1, 5, 55, 0, 0, time.UTC)),
			ResentFrom: []*mail.Address{
				&mail.Address{
					Name:    "Nadająca, Alicja",
					Address: "alicja.nadajaca@example.net",
				},
				&mail.Address{
					Name:    "Nadająca, Alicja",
					Address: "alicja.nadajaca@example.com",
				},
			},
			ResentSender: &mail.Address{
				Name:    "Nadająca, Alicja",
				Address: "alicja.nadajaca@example.net",
			},
			ResentTo: []*mail.Address{
				&mail.Address{
					Name:    "Odbierający, Bob",
					Address: "bob.odbierajacy@example.net",
				},
				&mail.Address{
					Name:    "Odbierająca, Karolina",
					Address: "karolina.odbierajaca@example.net",
				},
			},
			ResentCc: []*mail.Address{
				&mail.Address{
					Name:    "Odbierający, Daniel",
					Address: "daniel.odbierajacy@example.net",
				},
				&mail.Address{
					Name:    "Odbierająca, Ewa",
					Address: "ewa.odbierajaca@example.net",
				},
			},
			ResentBcc: []*mail.Address{
				&mail.Address{
					Name:    "Odbierający, Franek",
					Address: "franek.odbierajacy@example.net",
				},
				&mail.Address{
					Name:    "Odbierająca, Grażyna",
					Address: "grazyna.odbierajaca@example.net",
				},
			},
			ResentMessageID: "Message-Id-1@example.net",
			ExtraHeaders: map[string][]string{
				"X-Clacks-Overhead": []string{
					"GNU Terry Pratchett",
				},
				"X-Script/function/\t !\"#$%&'()*+,-./;<=>?@[\\]^_`{|}~": []string{
					"TEST VALUE 1\t !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_` abcdefghijklmnopqrstuvwxyz{|}~",
					"TEST VALUE 2\t !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_` abcdefghijklmnopqrstuvwxyz{|}~",
				},
			},
			ContentInfo: &email.ContentInfo{
				Type: "multipart/related",
				TypeParams: map[string]string{
					"boundary": "RelatedBoundaryString",
					"charset":  "utf-8",
				},
				Disposition:       "",
				DispositionParams: map[string]string(nil), // p0
				TransferEncoding:  "base64",
				ID:                "",
				Charset:           "utf-8",
			},
			Received: nil,
		},
		Text: "Jeżu klątw, spłódź Finom część gry hańb!\n" +
			"Pójdźże, kiń tę chmurność w głąb flaszy!\n" +
			"Mężny bądź chroń pułk twój i sześć flag.\n" +
			"Filmuj rzeź żądań, pość, gnęb chłystków!\n" +
			"Pchnąć w tę łódź jeża lub ośm skrzyń fig.\n" +
			"Dość gróźb fuzją, klnę, pych i małżeństw!\n" +
			"Pójdź w loch zbić małżeńską gęś futryn!\n" +
			"Chwyć małżonkę, strój bądź pleśń z fugi.",
		EnrichedText: "<bold>Jeżu klątw, spłódź Finom część gry hańb!</bold>\n" +
			"<italic>Pójdźże, kiń tę chmurność w głąb flaszy!</italic>\n" +
			"<fixed>Mężny bądź chroń pułk twój i sześć flag.</fixed>\n" +
			"<underline>Filmuj rzeź żądań, pość, gnęb chłystków!</underline>\n" +
			"Pchnąć w tę łódź jeża lub ośm skrzyń fig.\n" +
			"Dość gróźb fuzją, klnę, pych i małżeństw!\n" +
			"Pójdź w loch zbić małżeńską gęś futryn!\n" +
			"Chwyć małżonkę, strój bądź pleśń z fugi.",
		HTML: "<html>\n" +
			"<div dir=\"ltr\">\n" +
			"<p>Jeżu klątw, spłódź Finom część gry hańb!</p>\n" +
			"<p>Pójdźże, kiń tę chmurność w głąb flaszy!</p>\n" +
			"<p>Mężny bądź chroń pułk twój i sześć flag.</p>\n" +
			"<p>Filmuj rzeź żądań, pość, gnęb chłystków!</p>\n" +
			"<p>Pchnąć w tę łódź jeża lub ośm skrzyń fig.</p>\n" +
			"<p>Dość gróźb fuzją, klnę, pych i małżeństw!</p>\n" +
			"<p>Pójdź w loch zbić małżeńską gęś futryn!</p>\n" +
			"<p>Chwyć małżonkę, strój bądź pleśń z fugi.</p>\n" +
			"</div>\n" +
			"</html>",
		Files: []*email.File{
			&email.File{
				FileType: "inline",
				Name:     "inline-jpg-image-filename.jpg",
				ContentInfo: &email.ContentInfo{
					Type: "image/jpeg",
					TypeParams: map[string]string{
						"name": "inline-jpg-image-name.jpg",
					},
					Disposition: "inline",
					DispositionParams: map[string]string{
						"filename": "inline-jpg-image-filename.jpg",
					},
					TransferEncoding: "base64",
					ID:               "inline-jpg-image.jpg@example.com",
					Charset:          "utf-8",
				},
				Data: []byte{
					239, 191, 189, 239, 191, 189, 239, 191, 189, 239, 191, 189, 0, 67, 0, 3, 2, 2, 2,
					2, 2, 3, 2, 2, 2, 3, 3, 3, 3, 4, 6, 4, 4, 4, 4, 4, 8, 6, 6, 5, 6, 9, 8, 10, 10, 9,
					8, 9, 9, 10, 12, 15, 12, 10, 11, 14, 11, 9, 9, 13, 17, 13, 14, 15, 16, 16, 17, 16,
					10, 12, 18, 19, 18, 16, 19, 15, 16, 16, 16, 239, 191, 189, 239, 191, 189, 0, 11,
					8, 0, 1, 0, 1, 1, 1, 17, 0, 239, 191, 189, 239, 191, 189, 0, 6, 0, 16, 16, 5, 239,
					191, 189, 239, 191, 189, 0, 8, 1, 1, 0, 0, 63, 0, 239, 191, 189, 239, 191, 189, 32,
					239, 191, 189, 239, 191, 189,
				},
			},
		},
	}
	testEmailFromFile(t, fp, expectedEmail)
}

func TestParseEmailPolishMultipartRelatedUtf8OverQuotedprintable(t *testing.T) {
	fp := "tests/test_polish_multipart_related_utf-8_over_quoted-printable.txt"
	expectedEmail := &email.Email{
		Headers: email.Headers{
			Date: time.Time(time.Date(2019, 4, 1, 5, 55, 0, 0, time.UTC)),
			Sender: &mail.Address{
				Name:    "Nadająca, Alicja",
				Address: "alicja.nadajaca@example.com",
			},
			From: []*mail.Address{
				&mail.Address{
					Name:    "Nadająca, Alicja",
					Address: "alicja.nadajaca@example.com",
				},
				&mail.Address{
					Name:    "Nadająca, Alicja",
					Address: "alicja.nadajaca@example.net",
				},
			},
			ReplyTo: []*mail.Address{
				&mail.Address{
					Name:    "Nadająca, Alicja",
					Address: "alicja.nadajaca@example.net",
				},
			},
			To: []*mail.Address{
				&mail.Address{
					Name:    "Odbierający, Bob",
					Address: "bob.odbierajacy@example.com",
				},
				&mail.Address{
					Name:    "Odbierająca, Karolina",
					Address: "karolina.odbierajaca@example.com",
				},
			},
			Cc: []*mail.Address{
				&mail.Address{
					Name:    "Odbierający, Daniel",
					Address: "daniel.odbierajacy@example.com",
				},
				&mail.Address{
					Name:    "Odbierająca, Ewa",
					Address: "ewa.odbierajaca@example.com",
				},
			},
			Bcc: []*mail.Address{
				&mail.Address{
					Name:    "Odbierający, Franek",
					Address: "franek.odbierajacy@example.com",
				},
				&mail.Address{
					Name:    "Odbierająca, Grażyna",
					Address: "grazyna.odbierajaca@example.com",
				},
			},
			MessageID: "Message-Id-1@example.com",
			InReplyTo: []string{
				"Message-Id-0@example.com",
			},
			References: []string{
				"Message-Id-0@example.com",
			},
			Subject:  "📧 Test Polskie pangramy",
			Comments: "Message Header Comment",
			Keywords: []string{
				"Keyword 1",
				"Keyword 2",
			},
			ResentDate: time.Time(time.Date(2019, 4, 1, 5, 55, 0, 0, time.UTC)),
			ResentFrom: []*mail.Address{
				&mail.Address{
					Name:    "Nadająca, Alicja",
					Address: "alicja.nadajaca@example.net",
				},
				&mail.Address{
					Name:    "Nadająca, Alicja",
					Address: "alicja.nadajaca@example.com",
				},
			},
			ResentSender: &mail.Address{
				Name:    "Nadająca, Alicja",
				Address: "alicja.nadajaca@example.net",
			},
			ResentTo: []*mail.Address{
				&mail.Address{
					Name:    "Odbierający, Bob",
					Address: "bob.odbierajacy@example.net",
				},
				&mail.Address{
					Name:    "Odbierająca, Karolina",
					Address: "karolina.odbierajaca@example.net",
				},
			},
			ResentCc: []*mail.Address{
				&mail.Address{
					Name:    "Odbierający, Daniel",
					Address: "daniel.odbierajacy@example.net",
				},
				&mail.Address{
					Name:    "Odbierająca, Ewa",
					Address: "ewa.odbierajaca@example.net",
				},
			},
			ResentBcc: []*mail.Address{
				&mail.Address{
					Name:    "Odbierający, Franek",
					Address: "franek.odbierajacy@example.net",
				},
				&mail.Address{
					Name:    "Odbierająca, Grażyna",
					Address: "grazyna.odbierajaca@example.net",
				},
			},
			ResentMessageID: "Message-Id-1@example.net",
			ExtraHeaders: map[string][]string{
				"X-Clacks-Overhead": []string{
					"GNU Terry Pratchett",
				},
				"X-Script/function/\t !\"#$%&'()*+,-./;<=>?@[\\]^_`{|}~": []string{
					"TEST VALUE 1\t !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_` abcdefghijklmnopqrstuvwxyz{|}~",
					"TEST VALUE 2\t !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_` abcdefghijklmnopqrstuvwxyz{|}~",
				},
			},
			ContentInfo: &email.ContentInfo{
				Type: "multipart/related",
				TypeParams: map[string]string{
					"boundary": "RelatedBoundaryString",
					"charset":  "utf-8",
				},
				Disposition:       "",
				DispositionParams: map[string]string(nil), // p0
				TransferEncoding:  "quoted-printable",
				ID:                "",
				Charset:           "utf-8",
			},
			Received: nil,
		},
		Text: "Jeżu klątw, spłódź Finom część gry hańb!\n" +
			"Pójdźże, kiń tę chmurność w głąb flaszy!\n" +
			"Mężny bądź chroń pułk twój i sześć flag.\n" +
			"Filmuj rzeź żądań, pość, gnęb chłystków!\n" +
			"Pchnąć w tę łódź jeża lub ośm skrzyń fig.\n" +
			"Dość gróźb fuzją, klnę, pych i małżeństw!\n" +
			"Pójdź w loch zbić małżeńską gęś futryn!\n" +
			"Chwyć małżonkę, strój bądź pleśń z fugi.",
		EnrichedText: "<bold>Jeżu klątw, spłódź Finom część gry hańb!</bold>\n" +
			"<italic>Pójdźże, kiń tę chmurność w głąb flaszy!</italic>\n" +
			"<fixed>Mężny bądź chroń pułk twój i sześć flag.</fixed>\n" +
			"<underline>Filmuj rzeź żądań, pość, gnęb chłystków!</underline>\n" +
			"Pchnąć w tę łódź jeża lub ośm skrzyń fig.\n" +
			"Dość gróźb fuzją, klnę, pych i małżeństw!\n" +
			"Pójdź w loch zbić małżeńską gęś futryn!\n" +
			"Chwyć małżonkę, strój bądź pleśń z fugi.",
		HTML: "<html>\n" +
			"<div dir=\"ltr\">\n" +
			"<p>Jeżu klątw, spłódź Finom część gry hańb!</p>\n" +
			"<p>Pójdźże, kiń tę chmurność w głąb flaszy!</p>\n" +
			"<p>Mężny bądź chroń pułk twój i sześć flag.</p>\n" +
			"<p>Filmuj rzeź żądań, pość, gnęb chłystków!</p>\n" +
			"<p>Pchnąć w tę łódź jeża lub ośm skrzyń fig.</p>\n" +
			"<p>Dość gróźb fuzją, klnę, pych i małżeństw!</p>\n" +
			"<p>Pójdź w loch zbić małżeńską gęś futryn!</p>\n" +
			"<p>Chwyć małżonkę, strój bądź pleśń z fugi.</p>\n" +
			"</div>\n" +
			"</html>",
		Files: []*email.File{
			&email.File{
				FileType: "inline",
				Name:     "inline-jpg-image-filename.jpg",
				ContentInfo: &email.ContentInfo{
					Type: "image/jpeg",
					TypeParams: map[string]string{
						"name": "inline-jpg-image-name.jpg",
					},
					Disposition: "inline",
					DispositionParams: map[string]string{
						"filename": "inline-jpg-image-filename.jpg",
					},
					TransferEncoding: "base64",
					ID:               "inline-jpg-image.jpg@example.com",
					Charset:          "utf-8",
				},
				Data: []byte{
					239, 191, 189, 239, 191, 189, 239, 191, 189, 239, 191, 189, 0, 67, 0, 3, 2, 2, 2,
					2, 2, 3, 2, 2, 2, 3, 3, 3, 3, 4, 6, 4, 4, 4, 4, 4, 8, 6, 6, 5, 6, 9, 8, 10, 10, 9,
					8, 9, 9, 10, 12, 15, 12, 10, 11, 14, 11, 9, 9, 13, 17, 13, 14, 15, 16, 16, 17, 16,
					10, 12, 18, 19, 18, 16, 19, 15, 16, 16, 16, 239, 191, 189, 239, 191, 189, 0, 11,
					8, 0, 1, 0, 1, 1, 1, 17, 0, 239, 191, 189, 239, 191, 189, 0, 6, 0, 16, 16, 5, 239,
					191, 189, 239, 191, 189, 0, 8, 1, 1, 0, 0, 63, 0, 239, 191, 189, 239, 191, 189, 32,
					239, 191, 189, 239, 191, 189,
				},
			},
		},
	}
	testEmailFromFile(t, fp, expectedEmail)
}

func TestParseEmailPolishMultipartRelatedIso88592OverBase64(t *testing.T) {
	fp := "tests/test_polish_multipart_related_iso-8859-2_over_base64.txt"
	expectedEmail := &email.Email{
		Headers: email.Headers{
			Date: time.Time(time.Date(2019, 4, 1, 5, 55, 0, 0, time.UTC)),
			Sender: &mail.Address{
				Name:    "Nadająca, Alicja",
				Address: "alicja.nadajaca@example.com",
			},
			From: []*mail.Address{
				&mail.Address{
					Name:    "Nadająca, Alicja",
					Address: "alicja.nadajaca@example.com",
				},
				&mail.Address{
					Name:    "Nadająca, Alicja",
					Address: "alicja.nadajaca@example.net",
				},
			},
			ReplyTo: []*mail.Address{
				&mail.Address{
					Name:    "Nadająca, Alicja",
					Address: "alicja.nadajaca@example.net",
				},
			},
			To: []*mail.Address{
				&mail.Address{
					Name:    "Odbierający, Bob",
					Address: "bob.odbierajacy@example.com",
				},
				&mail.Address{
					Name:    "Odbierająca, Karolina",
					Address: "karolina.odbierajaca@example.com",
				},
			},
			Cc: []*mail.Address{
				&mail.Address{
					Name:    "Odbierający, Daniel",
					Address: "daniel.odbierajacy@example.com",
				},
				&mail.Address{
					Name:    "Odbierająca, Ewa",
					Address: "ewa.odbierajaca@example.com",
				},
			},
			Bcc: []*mail.Address{
				&mail.Address{
					Name:    "Odbierający, Franek",
					Address: "franek.odbierajacy@example.com",
				},
				&mail.Address{
					Name:    "Odbierająca, Grażyna",
					Address: "grazyna.odbierajaca@example.com",
				},
			},
			MessageID: "Message-Id-1@example.com",
			InReplyTo: []string{
				"Message-Id-0@example.com",
			},
			References: []string{
				"Message-Id-0@example.com",
			},
			Subject:  "📧 Test Polskie pangramy",
			Comments: "Message Header Comment",
			Keywords: []string{
				"Keyword 1",
				"Keyword 2",
			},
			ResentDate: time.Time(time.Date(2019, 4, 1, 5, 55, 0, 0, time.UTC)),
			ResentFrom: []*mail.Address{
				&mail.Address{
					Name:    "Nadająca, Alicja",
					Address: "alicja.nadajaca@example.net",
				},
				&mail.Address{
					Name:    "Nadająca, Alicja",
					Address: "alicja.nadajaca@example.com",
				},
			},
			ResentSender: &mail.Address{
				Name:    "Nadająca, Alicja",
				Address: "alicja.nadajaca@example.net",
			},
			ResentTo: []*mail.Address{
				&mail.Address{
					Name:    "Odbierający, Bob",
					Address: "bob.odbierajacy@example.net",
				},
				&mail.Address{
					Name:    "Odbierająca, Karolina",
					Address: "karolina.odbierajaca@example.net",
				},
			},
			ResentCc: []*mail.Address{
				&mail.Address{
					Name:    "Odbierający, Daniel",
					Address: "daniel.odbierajacy@example.net",
				},
				&mail.Address{
					Name:    "Odbierająca, Ewa",
					Address: "ewa.odbierajaca@example.net",
				},
			},
			ResentBcc: []*mail.Address{
				&mail.Address{
					Name:    "Odbierający, Franek",
					Address: "franek.odbierajacy@example.net",
				},
				&mail.Address{
					Name:    "Odbierająca, Grażyna",
					Address: "grazyna.odbierajaca@example.net",
				},
			},
			ResentMessageID: "Message-Id-1@example.net",
			ExtraHeaders: map[string][]string{
				"X-Clacks-Overhead": []string{
					"GNU Terry Pratchett",
				},
				"X-Script/function/\t !\"#$%&'()*+,-./;<=>?@[\\]^_`{|}~": []string{
					"TEST VALUE 1\t !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_` abcdefghijklmnopqrstuvwxyz{|}~",
					"TEST VALUE 2\t !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_` abcdefghijklmnopqrstuvwxyz{|}~",
				},
			},
			ContentInfo: &email.ContentInfo{
				Type: "multipart/related",
				TypeParams: map[string]string{
					"boundary": "RelatedBoundaryString",
					"charset":  "iso-8859-2",
				},
				Disposition:       "",
				DispositionParams: map[string]string(nil), // p0
				TransferEncoding:  "base64",
				ID:                "",
				Charset:           "iso-8859-2",
			},
			Received: nil,
		},
		Text: "Jeżu klątw, spłódź Finom część gry hańb!\n" +
			"Pójdźże, kiń tę chmurność w głąb flaszy!\n" +
			"Mężny bądź chroń pułk twój i sześć flag.\n" +
			"Filmuj rzeź żądań, pość, gnęb chłystków!\n" +
			"Pchnąć w tę łódź jeża lub ośm skrzyń fig.\n" +
			"Dość gróźb fuzją, klnę, pych i małżeństw!\n" +
			"Pójdź w loch zbić małżeńską gęś futryn!\n" +
			"Chwyć małżonkę, strój bądź pleśń z fugi.",
		EnrichedText: "<bold>Jeżu klątw, spłódź Finom część gry hańb!</bold>\n" +
			"<italic>Pójdźże, kiń tę chmurność w głąb flaszy!</italic>\n" +
			"<fixed>Mężny bądź chroń pułk twój i sześć flag.</fixed>\n" +
			"<underline>Filmuj rzeź żądań, pość, gnęb chłystków!</underline>\n" +
			"Pchnąć w tę łódź jeża lub ośm skrzyń fig.\n" +
			"Dość gróźb fuzją, klnę, pych i małżeństw!\n" +
			"Pójdź w loch zbić małżeńską gęś futryn!\n" +
			"Chwyć małżonkę, strój bądź pleśń z fugi.",
		HTML: "<html>\n" +
			"<div dir=\"ltr\">\n" +
			"<p>Jeżu klątw, spłódź Finom część gry hańb!</p>\n" +
			"<p>Pójdźże, kiń tę chmurność w głąb flaszy!</p>\n" +
			"<p>Mężny bądź chroń pułk twój i sześć flag.</p>\n" +
			"<p>Filmuj rzeź żądań, pość, gnęb chłystków!</p>\n" +
			"<p>Pchnąć w tę łódź jeża lub ośm skrzyń fig.</p>\n" +
			"<p>Dość gróźb fuzją, klnę, pych i małżeństw!</p>\n" +
			"<p>Pójdź w loch zbić małżeńską gęś futryn!</p>\n" +
			"<p>Chwyć małżonkę, strój bądź pleśń z fugi.</p>\n" +
			"</div>\n" +
			"</html>",
		Files: []*email.File{
			&email.File{
				FileType: "inline",
				Name:     "inline-jpg-image-filename.jpg",
				ContentInfo: &email.ContentInfo{
					Type: "image/jpeg",
					TypeParams: map[string]string{
						"name": "inline-jpg-image-name.jpg",
					},
					Disposition: "inline",
					DispositionParams: map[string]string{
						"filename": "inline-jpg-image-filename.jpg",
					},
					TransferEncoding: "base64",
					ID:               "inline-jpg-image.jpg@example.com",
					Charset:          "iso-8859-2",
				},
				Data: []byte{
					203, 153, 197, 152, 203, 153, 197, 176, 0, 67, 0, 3, 2, 2, 2, 2, 2, 3, 2, 2, 2, 3,
					3, 3, 3, 4, 6, 4, 4, 4, 4, 4, 8, 6, 6, 5, 6, 9, 8, 10, 10, 9, 8, 9, 9, 10, 12, 15,
					12, 10, 11, 14, 11, 9, 9, 13, 17, 13, 14, 15, 16, 16, 17, 16, 10, 12, 18, 19, 18,
					16, 19, 15, 16, 16, 16, 203, 153, 195, 137, 0, 11, 8, 0, 1, 0, 1, 1, 1, 17, 0, 203,
					153, 196, 154, 0, 6, 0, 16, 16, 5, 203, 153, 195, 154, 0, 8, 1, 1, 0, 0, 63, 0, 197,
					135, 196, 142, 32, 203, 153, 197, 174,
				},
			},
		},
	}
	testEmailFromFile(t, fp, expectedEmail)
}

func TestParseEmailPolishMultipartRelatedIso88592OverQuotedprintable(t *testing.T) {
	fp := "tests/test_polish_multipart_related_iso-8859-2_over_quoted-printable.txt"
	expectedEmail := &email.Email{
		Headers: email.Headers{
			Date: time.Time(time.Date(2019, 4, 1, 5, 55, 0, 0, time.UTC)),
			Sender: &mail.Address{
				Name:    "Nadająca, Alicja",
				Address: "alicja.nadajaca@example.com",
			},
			From: []*mail.Address{
				&mail.Address{
					Name:    "Nadająca, Alicja",
					Address: "alicja.nadajaca@example.com",
				},
				&mail.Address{
					Name:    "Nadająca, Alicja",
					Address: "alicja.nadajaca@example.net",
				},
			},
			ReplyTo: []*mail.Address{
				&mail.Address{
					Name:    "Nadająca, Alicja",
					Address: "alicja.nadajaca@example.net",
				},
			},
			To: []*mail.Address{
				&mail.Address{
					Name:    "Odbierający, Bob",
					Address: "bob.odbierajacy@example.com",
				},
				&mail.Address{
					Name:    "Odbierająca, Karolina",
					Address: "karolina.odbierajaca@example.com",
				},
			},
			Cc: []*mail.Address{
				&mail.Address{
					Name:    "Odbierający, Daniel",
					Address: "daniel.odbierajacy@example.com",
				},
				&mail.Address{
					Name:    "Odbierająca, Ewa",
					Address: "ewa.odbierajaca@example.com",
				},
			},
			Bcc: []*mail.Address{
				&mail.Address{
					Name:    "Odbierający, Franek",
					Address: "franek.odbierajacy@example.com",
				},
				&mail.Address{
					Name:    "Odbierająca, Grażyna",
					Address: "grazyna.odbierajaca@example.com",
				},
			},
			MessageID: "Message-Id-1@example.com",
			InReplyTo: []string{
				"Message-Id-0@example.com",
			},
			References: []string{
				"Message-Id-0@example.com",
			},
			Subject:  "📧 Test Polskie pangramy",
			Comments: "Message Header Comment",
			Keywords: []string{
				"Keyword 1",
				"Keyword 2",
			},
			ResentDate: time.Time(time.Date(2019, 4, 1, 5, 55, 0, 0, time.UTC)),
			ResentFrom: []*mail.Address{
				&mail.Address{
					Name:    "Nadająca, Alicja",
					Address: "alicja.nadajaca@example.net",
				},
				&mail.Address{
					Name:    "Nadająca, Alicja",
					Address: "alicja.nadajaca@example.com",
				},
			},
			ResentSender: &mail.Address{
				Name:    "Nadająca, Alicja",
				Address: "alicja.nadajaca@example.net",
			},
			ResentTo: []*mail.Address{
				&mail.Address{
					Name:    "Odbierający, Bob",
					Address: "bob.odbierajacy@example.net",
				},
				&mail.Address{
					Name:    "Odbierająca, Karolina",
					Address: "karolina.odbierajaca@example.net",
				},
			},
			ResentCc: []*mail.Address{
				&mail.Address{
					Name:    "Odbierający, Daniel",
					Address: "daniel.odbierajacy@example.net",
				},
				&mail.Address{
					Name:    "Odbierająca, Ewa",
					Address: "ewa.odbierajaca@example.net",
				},
			},
			ResentBcc: []*mail.Address{
				&mail.Address{
					Name:    "Odbierający, Franek",
					Address: "franek.odbierajacy@example.net",
				},
				&mail.Address{
					Name:    "Odbierająca, Grażyna",
					Address: "grazyna.odbierajaca@example.net",
				},
			},
			ResentMessageID: "Message-Id-1@example.net",
			ExtraHeaders: map[string][]string{
				"X-Clacks-Overhead": []string{
					"GNU Terry Pratchett",
				},
				"X-Script/function/\t !\"#$%&'()*+,-./;<=>?@[\\]^_`{|}~": []string{
					"TEST VALUE 1\t !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_` abcdefghijklmnopqrstuvwxyz{|}~",
					"TEST VALUE 2\t !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_` abcdefghijklmnopqrstuvwxyz{|}~",
				},
			},
			ContentInfo: &email.ContentInfo{
				Type: "multipart/related",
				TypeParams: map[string]string{
					"boundary": "RelatedBoundaryString",
					"charset":  "iso-8859-2",
				},
				Disposition:       "",
				DispositionParams: map[string]string(nil), // p0
				TransferEncoding:  "quoted-printable",
				ID:                "",
				Charset:           "iso-8859-2",
			},
			Received: nil,
		},
		Text: "Jeżu klątw, spłódź Finom część gry hańb!\n" +
			"Pójdźże, kiń tę chmurność w głąb flaszy!\n" +
			"Mężny bądź chroń pułk twój i sześć flag.\n" +
			"Filmuj rzeź żądań, pość, gnęb chłystków!\n" +
			"Pchnąć w tę łódź jeża lub ośm skrzyń fig.\n" +
			"Dość gróźb fuzją, klnę, pych i małżeństw!\n" +
			"Pójdź w loch zbić małżeńską gęś futryn!\n" +
			"Chwyć małżonkę, strój bądź pleśń z fugi.",
		EnrichedText: "<bold>Jeżu klątw, spłódź Finom część gry hańb!</bold>\n" +
			"<italic>Pójdźże, kiń tę chmurność w głąb flaszy!</italic>\n" +
			"<fixed>Mężny bądź chroń pułk twój i sześć flag.</fixed>\n" +
			"<underline>Filmuj rzeź żądań, pość, gnęb chłystków!</underline>\n" +
			"Pchnąć w tę łódź jeża lub ośm skrzyń fig.\n" +
			"Dość gróźb fuzją, klnę, pych i małżeństw!\n" +
			"Pójdź w loch zbić małżeńską gęś futryn!\n" +
			"Chwyć małżonkę, strój bądź pleśń z fugi.",
		HTML: "<html>\n" +
			"<div dir=\"ltr\">\n" +
			"<p>Jeżu klątw, spłódź Finom część gry hańb!</p>\n" +
			"<p>Pójdźże, kiń tę chmurność w głąb flaszy!</p>\n" +
			"<p>Mężny bądź chroń pułk twój i sześć flag.</p>\n" +
			"<p>Filmuj rzeź żądań, pość, gnęb chłystków!</p>\n" +
			"<p>Pchnąć w tę łódź jeża lub ośm skrzyń fig.</p>\n" +
			"<p>Dość gróźb fuzją, klnę, pych i małżeństw!</p>\n" +
			"<p>Pójdź w loch zbić małżeńską gęś futryn!</p>\n" +
			"<p>Chwyć małżonkę, strój bądź pleśń z fugi.</p>\n" +
			"</div>\n" +
			"</html>",
		Files: []*email.File{
			&email.File{
				FileType: "inline",
				Name:     "inline-jpg-image-filename.jpg",
				ContentInfo: &email.ContentInfo{
					Type: "image/jpeg",
					TypeParams: map[string]string{
						"name": "inline-jpg-image-name.jpg",
					},
					Disposition: "inline",
					DispositionParams: map[string]string{
						"filename": "inline-jpg-image-filename.jpg",
					},
					TransferEncoding: "base64",
					ID:               "inline-jpg-image.jpg@example.com",
					Charset:          "iso-8859-2",
				},
				Data: []byte{
					203, 153, 197, 152, 203, 153, 197, 176, 0, 67, 0, 3, 2, 2, 2, 2, 2, 3, 2, 2, 2, 3,
					3, 3, 3, 4, 6, 4, 4, 4, 4, 4, 8, 6, 6, 5, 6, 9, 8, 10, 10, 9, 8, 9, 9, 10, 12, 15,
					12, 10, 11, 14, 11, 9, 9, 13, 17, 13, 14, 15, 16, 16, 17, 16, 10, 12, 18, 19, 18,
					16, 19, 15, 16, 16, 16, 203, 153, 195, 137, 0, 11, 8, 0, 1, 0, 1, 1, 1, 17, 0, 203,
					153, 196, 154, 0, 6, 0, 16, 16, 5, 203, 153, 195, 154, 0, 8, 1, 1, 0, 0, 63, 0, 197,
					135, 196, 142, 32, 203, 153, 197, 174,
				},
			},
		},
	}
	testEmailFromFile(t, fp, expectedEmail)
}

func TestParseEmailPolishMultipartMixedUtf8OverBase64(t *testing.T) {
	fp := "tests/test_polish_multipart_mixed_utf-8_over_base64.txt"
	expectedEmail := &email.Email{
		Headers: email.Headers{
			Date: time.Time(time.Date(2019, 4, 1, 5, 55, 0, 0, time.UTC)),
			Sender: &mail.Address{
				Name:    "Nadająca, Alicja",
				Address: "alicja.nadajaca@example.com",
			},
			From: []*mail.Address{
				&mail.Address{
					Name:    "Nadająca, Alicja",
					Address: "alicja.nadajaca@example.com",
				},
				&mail.Address{
					Name:    "Nadająca, Alicja",
					Address: "alicja.nadajaca@example.net",
				},
			},
			ReplyTo: []*mail.Address{
				&mail.Address{
					Name:    "Nadająca, Alicja",
					Address: "alicja.nadajaca@example.net",
				},
			},
			To: []*mail.Address{
				&mail.Address{
					Name:    "Odbierający, Bob",
					Address: "bob.odbierajacy@example.com",
				},
				&mail.Address{
					Name:    "Odbierająca, Karolina",
					Address: "karolina.odbierajaca@example.com",
				},
			},
			Cc: []*mail.Address{
				&mail.Address{
					Name:    "Odbierający, Daniel",
					Address: "daniel.odbierajacy@example.com",
				},
				&mail.Address{
					Name:    "Odbierająca, Ewa",
					Address: "ewa.odbierajaca@example.com",
				},
			},
			Bcc: []*mail.Address{
				&mail.Address{
					Name:    "Odbierający, Franek",
					Address: "franek.odbierajacy@example.com",
				},
				&mail.Address{
					Name:    "Odbierająca, Grażyna",
					Address: "grazyna.odbierajaca@example.com",
				},
			},
			MessageID: "Message-Id-1@example.com",
			InReplyTo: []string{
				"Message-Id-0@example.com",
			},
			References: []string{
				"Message-Id-0@example.com",
			},
			Subject:  "📧 Test Polskie pangramy",
			Comments: "Message Header Comment",
			Keywords: []string{
				"Keyword 1",
				"Keyword 2",
			},
			ResentDate: time.Time(time.Date(2019, 4, 1, 5, 55, 0, 0, time.UTC)),
			ResentFrom: []*mail.Address{
				&mail.Address{
					Name:    "Nadająca, Alicja",
					Address: "alicja.nadajaca@example.net",
				},
				&mail.Address{
					Name:    "Nadająca, Alicja",
					Address: "alicja.nadajaca@example.com",
				},
			},
			ResentSender: &mail.Address{
				Name:    "Nadająca, Alicja",
				Address: "alicja.nadajaca@example.net",
			},
			ResentTo: []*mail.Address{
				&mail.Address{
					Name:    "Odbierający, Bob",
					Address: "bob.odbierajacy@example.net",
				},
				&mail.Address{
					Name:    "Odbierająca, Karolina",
					Address: "karolina.odbierajaca@example.net",
				},
			},
			ResentCc: []*mail.Address{
				&mail.Address{
					Name:    "Odbierający, Daniel",
					Address: "daniel.odbierajacy@example.net",
				},
				&mail.Address{
					Name:    "Odbierająca, Ewa",
					Address: "ewa.odbierajaca@example.net",
				},
			},
			ResentBcc: []*mail.Address{
				&mail.Address{
					Name:    "Odbierający, Franek",
					Address: "franek.odbierajacy@example.net",
				},
				&mail.Address{
					Name:    "Odbierająca, Grażyna",
					Address: "grazyna.odbierajaca@example.net",
				},
			},
			ResentMessageID: "Message-Id-1@example.net",
			ExtraHeaders: map[string][]string{
				"X-Clacks-Overhead": []string{
					"GNU Terry Pratchett",
				},
				"X-Script/function/\t !\"#$%&'()*+,-./;<=>?@[\\]^_`{|}~": []string{
					"TEST VALUE 1\t !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_` abcdefghijklmnopqrstuvwxyz{|}~",
					"TEST VALUE 2\t !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_` abcdefghijklmnopqrstuvwxyz{|}~",
				},
			},
			ContentInfo: &email.ContentInfo{
				Type: "multipart/mixed",
				TypeParams: map[string]string{
					"boundary": "MixedBoundaryString",
					"charset":  "utf-8",
				},
				Disposition:       "",
				DispositionParams: map[string]string(nil), // p0
				TransferEncoding:  "base64",
				ID:                "",
				Charset:           "utf-8",
			},
			Received: nil,
		},
		Text: "Jeżu klątw, spłódź Finom część gry hańb!\n" +
			"Pójdźże, kiń tę chmurność w głąb flaszy!\n" +
			"Mężny bądź chroń pułk twój i sześć flag.\n" +
			"Filmuj rzeź żądań, pość, gnęb chłystków!\n" +
			"Pchnąć w tę łódź jeża lub ośm skrzyń fig.\n" +
			"Dość gróźb fuzją, klnę, pych i małżeństw!\n" +
			"Pójdź w loch zbić małżeńską gęś futryn!\n" +
			"Chwyć małżonkę, strój bądź pleśń z fugi.",
		EnrichedText: "<bold>Jeżu klątw, spłódź Finom część gry hańb!</bold>\n" +
			"<italic>Pójdźże, kiń tę chmurność w głąb flaszy!</italic>\n" +
			"<fixed>Mężny bądź chroń pułk twój i sześć flag.</fixed>\n" +
			"<underline>Filmuj rzeź żądań, pość, gnęb chłystków!</underline>\n" +
			"Pchnąć w tę łódź jeża lub ośm skrzyń fig.\n" +
			"Dość gróźb fuzją, klnę, pych i małżeństw!\n" +
			"Pójdź w loch zbić małżeńską gęś futryn!\n" +
			"Chwyć małżonkę, strój bądź pleśń z fugi.",
		HTML: "<html>\n" +
			"<div dir=\"ltr\">\n" +
			"<p>Jeżu klątw, spłódź Finom część gry hańb!</p>\n" +
			"<p>Pójdźże, kiń tę chmurność w głąb flaszy!</p>\n" +
			"<p>Mężny bądź chroń pułk twój i sześć flag.</p>\n" +
			"<p>Filmuj rzeź żądań, pość, gnęb chłystków!</p>\n" +
			"<p>Pchnąć w tę łódź jeża lub ośm skrzyń fig.</p>\n" +
			"<p>Dość gróźb fuzją, klnę, pych i małżeństw!</p>\n" +
			"<p>Pójdź w loch zbić małżeńską gęś futryn!</p>\n" +
			"<p>Chwyć małżonkę, strój bądź pleśń z fugi.</p>\n" +
			"</div>\n" +
			"</html>",
		Files: []*email.File{
			&email.File{
				FileType: "",
				Name:     "inline-jpg-image-without-disposition.jpg",
				ContentInfo: &email.ContentInfo{
					Type: "image/jpeg",
					TypeParams: map[string]string{
						"name": "inline-jpg-image-without-disposition.jpg",
					},
					Disposition:       "",
					DispositionParams: map[string]string(nil), // p0
					TransferEncoding:  "base64",
					ID:                "",
					Charset:           "utf-8",
				},
				Data: []byte{
					239, 191, 189, 239, 191, 189, 239, 191, 189, 239, 191, 189, 0, 67, 0, 3, 2, 2, 2,
					2, 2, 3, 2, 2, 2, 3, 3, 3, 3, 4, 6, 4, 4, 4, 4, 4, 8, 6, 6, 5, 6, 9, 8, 10, 10, 9,
					8, 9, 9, 10, 12, 15, 12, 10, 11, 14, 11, 9, 9, 13, 17, 13, 14, 15, 16, 16, 17, 16,
					10, 12, 18, 19, 18, 16, 19, 15, 16, 16, 16, 239, 191, 189, 239, 191, 189, 0, 11,
					8, 0, 1, 0, 1, 1, 1, 17, 0, 239, 191, 189, 239, 191, 189, 0, 6, 0, 16, 16, 5, 239,
					191, 189, 239, 191, 189, 0, 8, 1, 1, 0, 0, 63, 0, 239, 191, 189, 239, 191, 189, 32,
					239, 191, 189, 239, 191, 189,
				},
			},
			&email.File{
				FileType: "inline",
				Name:     "inline-jpg-image-filename.jpg",
				ContentInfo: &email.ContentInfo{
					Type: "image/jpeg",
					TypeParams: map[string]string{
						"name": "inline-jpg-image-name.jpg",
					},
					Disposition: "inline",
					DispositionParams: map[string]string{
						"filename": "inline-jpg-image-filename.jpg",
					},
					TransferEncoding: "base64",
					ID:               "inline-jpg-image.jpg@example.com",
					Charset:          "utf-8",
				},
				Data: []byte{
					239, 191, 189, 239, 191, 189, 239, 191, 189, 239, 191, 189, 0, 67, 0, 3, 2, 2, 2,
					2, 2, 3, 2, 2, 2, 3, 3, 3, 3, 4, 6, 4, 4, 4, 4, 4, 8, 6, 6, 5, 6, 9, 8, 10, 10, 9,
					8, 9, 9, 10, 12, 15, 12, 10, 11, 14, 11, 9, 9, 13, 17, 13, 14, 15, 16, 16, 17, 16,
					10, 12, 18, 19, 18, 16, 19, 15, 16, 16, 16, 239, 191, 189, 239, 191, 189, 0, 11,
					8, 0, 1, 0, 1, 1, 1, 17, 0, 239, 191, 189, 239, 191, 189, 0, 6, 0, 16, 16, 5, 239,
					191, 189, 239, 191, 189, 0, 8, 1, 1, 0, 0, 63, 0, 239, 191, 189, 239, 191, 189, 32,
					239, 191, 189, 239, 191, 189,
				},
			},
			&email.File{
				FileType: "attachment",
				Name:     "attached-pdf-filename.pdf",
				ContentInfo: &email.ContentInfo{
					Type: "application/pdf",
					TypeParams: map[string]string{
						"name": "attached-pdf-name.pdf",
					},
					Disposition: "attachment",
					DispositionParams: map[string]string{
						"filename": "attached-pdf-filename.pdf",
					},
					TransferEncoding: "base64",
					ID:               "",
					Charset:          "utf-8",
				},
				Data: []byte{
					37, 80, 68, 70, 45, 49, 46, 13, 116, 114, 97, 105, 108, 101, 114, 60, 60, 47, 82,
					111, 111, 116, 60, 60, 47, 80, 97, 103, 101, 115, 60, 60, 47, 75, 105, 100, 115,
					91, 60, 60, 47, 77, 101, 100, 105, 97, 66, 111, 120, 91, 48, 32, 48, 32, 51, 32,
					51, 93, 62, 62, 93, 62, 62, 62, 62, 62, 62,
				},
			},
			&email.File{
				FileType: "",
				Name:     "attached-pdf-without-disposition.pdf",
				ContentInfo: &email.ContentInfo{
					Type: "application/pdf",
					TypeParams: map[string]string{
						"name": "attached-pdf-without-disposition.pdf",
					},
					Disposition:       "",
					DispositionParams: map[string]string(nil), // p0
					TransferEncoding:  "base64",
					ID:                "",
					Charset:           "utf-8",
				},
				Data: []byte{
					37, 80, 68, 70, 45, 49, 46, 13, 116, 114, 97, 105, 108, 101, 114, 60, 60, 47, 82,
					111, 111, 116, 60, 60, 47, 80, 97, 103, 101, 115, 60, 60, 47, 75, 105, 100, 115,
					91, 60, 60, 47, 77, 101, 100, 105, 97, 66, 111, 120, 91, 48, 32, 48, 32, 51, 32,
					51, 93, 62, 62, 93, 62, 62, 62, 62, 62, 62,
				},
			},
			&email.File{
				FileType: "attachment",
				Name:     "attached-json-filename.json",
				ContentInfo: &email.ContentInfo{
					Type: "application/json",
					TypeParams: map[string]string{
						"name": "attached-json-name.json",
					},
					Disposition: "attachment",
					DispositionParams: map[string]string{
						"filename": "attached-json-filename.json",
					},
					TransferEncoding: "7bit",
					ID:               "",
					Charset:          "utf-8",
				},
				Data: []byte{
					123, 34, 102, 111, 111, 34, 58, 34, 98, 97, 114, 34, 125,
				},
			},
			&email.File{
				FileType: "attachment",
				Name:     "attached-text-plain-filename.txt",
				ContentInfo: &email.ContentInfo{
					Type: "text/plain",
					TypeParams: map[string]string{
						"name": "attached-text-plain-name.txt",
					},
					Disposition: "attachment",
					DispositionParams: map[string]string{
						"filename": "attached-text-plain-filename.txt",
					},
					TransferEncoding: "base64",
					ID:               "",
					Charset:          "utf-8",
				},
				Data: []byte{
					84, 101, 120, 116, 47, 112, 108, 97, 105, 110, 32, 99, 111, 110, 116, 101, 110, 116,
					32, 97, 115, 32, 97, 110, 32, 97, 116, 116, 97, 99, 104, 101, 100, 32, 46, 116, 120,
					116, 32, 102, 105, 108, 101, 46,
				},
			},
			&email.File{
				FileType: "attachment",
				Name:     "attached-text-html-filename.html",
				ContentInfo: &email.ContentInfo{
					Type: "text/html",
					TypeParams: map[string]string{
						"name": "attached-text-html-name.html",
					},
					Disposition: "attachment",
					DispositionParams: map[string]string{
						"filename": "attached-text-html-filename.html",
					},
					TransferEncoding: "base64",
					ID:               "",
					Charset:          "utf-8",
				},
				Data: []byte{
					84, 101, 120, 116, 47, 104, 116, 109, 108, 32, 99, 111, 110, 116, 101, 110, 116,
					32, 97, 115, 32, 97, 110, 32, 97, 116, 116, 97, 99, 104, 101, 100, 32, 46, 104, 116,
					109, 108, 32, 102, 105, 108, 101, 46,
				},
			},
		},
	}
	testEmailFromFile(t, fp, expectedEmail)
}

func TestParseEmailPolishMultipartMixedUtf8OverQuotedprintable(t *testing.T) {
	fp := "tests/test_polish_multipart_mixed_utf-8_over_quoted-printable.txt"
	expectedEmail := &email.Email{
		Headers: email.Headers{
			Date: time.Time(time.Date(2019, 4, 1, 5, 55, 0, 0, time.UTC)),
			Sender: &mail.Address{
				Name:    "Nadająca, Alicja",
				Address: "alicja.nadajaca@example.com",
			},
			From: []*mail.Address{
				&mail.Address{
					Name:    "Nadająca, Alicja",
					Address: "alicja.nadajaca@example.com",
				},
				&mail.Address{
					Name:    "Nadająca, Alicja",
					Address: "alicja.nadajaca@example.net",
				},
			},
			ReplyTo: []*mail.Address{
				&mail.Address{
					Name:    "Nadająca, Alicja",
					Address: "alicja.nadajaca@example.net",
				},
			},
			To: []*mail.Address{
				&mail.Address{
					Name:    "Odbierający, Bob",
					Address: "bob.odbierajacy@example.com",
				},
				&mail.Address{
					Name:    "Odbierająca, Karolina",
					Address: "karolina.odbierajaca@example.com",
				},
			},
			Cc: []*mail.Address{
				&mail.Address{
					Name:    "Odbierający, Daniel",
					Address: "daniel.odbierajacy@example.com",
				},
				&mail.Address{
					Name:    "Odbierająca, Ewa",
					Address: "ewa.odbierajaca@example.com",
				},
			},
			Bcc: []*mail.Address{
				&mail.Address{
					Name:    "Odbierający, Franek",
					Address: "franek.odbierajacy@example.com",
				},
				&mail.Address{
					Name:    "Odbierająca, Grażyna",
					Address: "grazyna.odbierajaca@example.com",
				},
			},
			MessageID: "Message-Id-1@example.com",
			InReplyTo: []string{
				"Message-Id-0@example.com",
			},
			References: []string{
				"Message-Id-0@example.com",
			},
			Subject:  "📧 Test Polskie pangramy",
			Comments: "Message Header Comment",
			Keywords: []string{
				"Keyword 1",
				"Keyword 2",
			},
			ResentDate: time.Time(time.Date(2019, 4, 1, 5, 55, 0, 0, time.UTC)),
			ResentFrom: []*mail.Address{
				&mail.Address{
					Name:    "Nadająca, Alicja",
					Address: "alicja.nadajaca@example.net",
				},
				&mail.Address{
					Name:    "Nadająca, Alicja",
					Address: "alicja.nadajaca@example.com",
				},
			},
			ResentSender: &mail.Address{
				Name:    "Nadająca, Alicja",
				Address: "alicja.nadajaca@example.net",
			},
			ResentTo: []*mail.Address{
				&mail.Address{
					Name:    "Odbierający, Bob",
					Address: "bob.odbierajacy@example.net",
				},
				&mail.Address{
					Name:    "Odbierająca, Karolina",
					Address: "karolina.odbierajaca@example.net",
				},
			},
			ResentCc: []*mail.Address{
				&mail.Address{
					Name:    "Odbierający, Daniel",
					Address: "daniel.odbierajacy@example.net",
				},
				&mail.Address{
					Name:    "Odbierająca, Ewa",
					Address: "ewa.odbierajaca@example.net",
				},
			},
			ResentBcc: []*mail.Address{
				&mail.Address{
					Name:    "Odbierający, Franek",
					Address: "franek.odbierajacy@example.net",
				},
				&mail.Address{
					Name:    "Odbierająca, Grażyna",
					Address: "grazyna.odbierajaca@example.net",
				},
			},
			ResentMessageID: "Message-Id-1@example.net",
			ExtraHeaders: map[string][]string{
				"X-Clacks-Overhead": []string{
					"GNU Terry Pratchett",
				},
				"X-Script/function/\t !\"#$%&'()*+,-./;<=>?@[\\]^_`{|}~": []string{
					"TEST VALUE 1\t !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_` abcdefghijklmnopqrstuvwxyz{|}~",
					"TEST VALUE 2\t !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_` abcdefghijklmnopqrstuvwxyz{|}~",
				},
			},
			ContentInfo: &email.ContentInfo{
				Type: "multipart/mixed",
				TypeParams: map[string]string{
					"boundary": "MixedBoundaryString",
					"charset":  "utf-8",
				},
				Disposition:       "",
				DispositionParams: map[string]string(nil), // p0
				TransferEncoding:  "quoted-printable",
				ID:                "",
				Charset:           "utf-8",
			},
			Received: nil,
		},
		Text: "Jeżu klątw, spłódź Finom część gry hańb!\n" +
			"Pójdźże, kiń tę chmurność w głąb flaszy!\n" +
			"Mężny bądź chroń pułk twój i sześć flag.\n" +
			"Filmuj rzeź żądań, pość, gnęb chłystków!\n" +
			"Pchnąć w tę łódź jeża lub ośm skrzyń fig.\n" +
			"Dość gróźb fuzją, klnę, pych i małżeństw!\n" +
			"Pójdź w loch zbić małżeńską gęś futryn!\n" +
			"Chwyć małżonkę, strój bądź pleśń z fugi.",
		EnrichedText: "<bold>Jeżu klątw, spłódź Finom część gry hańb!</bold>\n" +
			"<italic>Pójdźże, kiń tę chmurność w głąb flaszy!</italic>\n" +
			"<fixed>Mężny bądź chroń pułk twój i sześć flag.</fixed>\n" +
			"<underline>Filmuj rzeź żądań, pość, gnęb chłystków!</underline>\n" +
			"Pchnąć w tę łódź jeża lub ośm skrzyń fig.\n" +
			"Dość gróźb fuzją, klnę, pych i małżeństw!\n" +
			"Pójdź w loch zbić małżeńską gęś futryn!\n" +
			"Chwyć małżonkę, strój bądź pleśń z fugi.",
		HTML: "<html>\n" +
			"<div dir=\"ltr\">\n" +
			"<p>Jeżu klątw, spłódź Finom część gry hańb!</p>\n" +
			"<p>Pójdźże, kiń tę chmurność w głąb flaszy!</p>\n" +
			"<p>Mężny bądź chroń pułk twój i sześć flag.</p>\n" +
			"<p>Filmuj rzeź żądań, pość, gnęb chłystków!</p>\n" +
			"<p>Pchnąć w tę łódź jeża lub ośm skrzyń fig.</p>\n" +
			"<p>Dość gróźb fuzją, klnę, pych i małżeństw!</p>\n" +
			"<p>Pójdź w loch zbić małżeńską gęś futryn!</p>\n" +
			"<p>Chwyć małżonkę, strój bądź pleśń z fugi.</p>\n" +
			"</div>\n" +
			"</html>",
		Files: []*email.File{
			&email.File{
				FileType: "",
				Name:     "inline-jpg-image-without-disposition.jpg",
				ContentInfo: &email.ContentInfo{
					Type: "image/jpeg",
					TypeParams: map[string]string{
						"name": "inline-jpg-image-without-disposition.jpg",
					},
					Disposition:       "",
					DispositionParams: map[string]string(nil), // p0
					TransferEncoding:  "base64",
					ID:                "",
					Charset:           "utf-8",
				},
				Data: []byte{
					239, 191, 189, 239, 191, 189, 239, 191, 189, 239, 191, 189, 0, 67, 0, 3, 2, 2, 2,
					2, 2, 3, 2, 2, 2, 3, 3, 3, 3, 4, 6, 4, 4, 4, 4, 4, 8, 6, 6, 5, 6, 9, 8, 10, 10, 9,
					8, 9, 9, 10, 12, 15, 12, 10, 11, 14, 11, 9, 9, 13, 17, 13, 14, 15, 16, 16, 17, 16,
					10, 12, 18, 19, 18, 16, 19, 15, 16, 16, 16, 239, 191, 189, 239, 191, 189, 0, 11,
					8, 0, 1, 0, 1, 1, 1, 17, 0, 239, 191, 189, 239, 191, 189, 0, 6, 0, 16, 16, 5, 239,
					191, 189, 239, 191, 189, 0, 8, 1, 1, 0, 0, 63, 0, 239, 191, 189, 239, 191, 189, 32,
					239, 191, 189, 239, 191, 189,
				},
			},
			&email.File{
				FileType: "inline",
				Name:     "inline-jpg-image-filename.jpg",
				ContentInfo: &email.ContentInfo{
					Type: "image/jpeg",
					TypeParams: map[string]string{
						"name": "inline-jpg-image-name.jpg",
					},
					Disposition: "inline",
					DispositionParams: map[string]string{
						"filename": "inline-jpg-image-filename.jpg",
					},
					TransferEncoding: "base64",
					ID:               "inline-jpg-image.jpg@example.com",
					Charset:          "utf-8",
				},
				Data: []byte{
					239, 191, 189, 239, 191, 189, 239, 191, 189, 239, 191, 189, 0, 67, 0, 3, 2, 2, 2,
					2, 2, 3, 2, 2, 2, 3, 3, 3, 3, 4, 6, 4, 4, 4, 4, 4, 8, 6, 6, 5, 6, 9, 8, 10, 10, 9,
					8, 9, 9, 10, 12, 15, 12, 10, 11, 14, 11, 9, 9, 13, 17, 13, 14, 15, 16, 16, 17, 16,
					10, 12, 18, 19, 18, 16, 19, 15, 16, 16, 16, 239, 191, 189, 239, 191, 189, 0, 11,
					8, 0, 1, 0, 1, 1, 1, 17, 0, 239, 191, 189, 239, 191, 189, 0, 6, 0, 16, 16, 5, 239,
					191, 189, 239, 191, 189, 0, 8, 1, 1, 0, 0, 63, 0, 239, 191, 189, 239, 191, 189, 32,
					239, 191, 189, 239, 191, 189,
				},
			},
			&email.File{
				FileType: "attachment",
				Name:     "attached-pdf-filename.pdf",
				ContentInfo: &email.ContentInfo{
					Type: "application/pdf",
					TypeParams: map[string]string{
						"name": "attached-pdf-name.pdf",
					},
					Disposition: "attachment",
					DispositionParams: map[string]string{
						"filename": "attached-pdf-filename.pdf",
					},
					TransferEncoding: "base64",
					ID:               "",
					Charset:          "utf-8",
				},
				Data: []byte{
					37, 80, 68, 70, 45, 49, 46, 13, 116, 114, 97, 105, 108, 101, 114, 60, 60, 47, 82,
					111, 111, 116, 60, 60, 47, 80, 97, 103, 101, 115, 60, 60, 47, 75, 105, 100, 115,
					91, 60, 60, 47, 77, 101, 100, 105, 97, 66, 111, 120, 91, 48, 32, 48, 32, 51, 32,
					51, 93, 62, 62, 93, 62, 62, 62, 62, 62, 62,
				},
			},
			&email.File{
				FileType: "",
				Name:     "attached-pdf-without-disposition.pdf",
				ContentInfo: &email.ContentInfo{
					Type: "application/pdf",
					TypeParams: map[string]string{
						"name": "attached-pdf-without-disposition.pdf",
					},
					Disposition:       "",
					DispositionParams: map[string]string(nil), // p0
					TransferEncoding:  "base64",
					ID:                "",
					Charset:           "utf-8",
				},
				Data: []byte{
					37, 80, 68, 70, 45, 49, 46, 13, 116, 114, 97, 105, 108, 101, 114, 60, 60, 47, 82,
					111, 111, 116, 60, 60, 47, 80, 97, 103, 101, 115, 60, 60, 47, 75, 105, 100, 115,
					91, 60, 60, 47, 77, 101, 100, 105, 97, 66, 111, 120, 91, 48, 32, 48, 32, 51, 32,
					51, 93, 62, 62, 93, 62, 62, 62, 62, 62, 62,
				},
			},
			&email.File{
				FileType: "attachment",
				Name:     "attached-json-filename.json",
				ContentInfo: &email.ContentInfo{
					Type: "application/json",
					TypeParams: map[string]string{
						"name": "attached-json-name.json",
					},
					Disposition: "attachment",
					DispositionParams: map[string]string{
						"filename": "attached-json-filename.json",
					},
					TransferEncoding: "7bit",
					ID:               "",
					Charset:          "utf-8",
				},
				Data: []byte{
					123, 34, 102, 111, 111, 34, 58, 34, 98, 97, 114, 34, 125,
				},
			},
			&email.File{
				FileType: "attachment",
				Name:     "attached-text-plain-filename.txt",
				ContentInfo: &email.ContentInfo{
					Type: "text/plain",
					TypeParams: map[string]string{
						"name": "attached-text-plain-name.txt",
					},
					Disposition: "attachment",
					DispositionParams: map[string]string{
						"filename": "attached-text-plain-filename.txt",
					},
					TransferEncoding: "base64",
					ID:               "",
					Charset:          "utf-8",
				},
				Data: []byte{
					84, 101, 120, 116, 47, 112, 108, 97, 105, 110, 32, 99, 111, 110, 116, 101, 110, 116,
					32, 97, 115, 32, 97, 110, 32, 97, 116, 116, 97, 99, 104, 101, 100, 32, 46, 116, 120,
					116, 32, 102, 105, 108, 101, 46,
				},
			},
			&email.File{
				FileType: "attachment",
				Name:     "attached-text-html-filename.html",
				ContentInfo: &email.ContentInfo{
					Type: "text/html",
					TypeParams: map[string]string{
						"name": "attached-text-html-name.html",
					},
					Disposition: "attachment",
					DispositionParams: map[string]string{
						"filename": "attached-text-html-filename.html",
					},
					TransferEncoding: "base64",
					ID:               "",
					Charset:          "utf-8",
				},
				Data: []byte{
					84, 101, 120, 116, 47, 104, 116, 109, 108, 32, 99, 111, 110, 116, 101, 110, 116,
					32, 97, 115, 32, 97, 110, 32, 97, 116, 116, 97, 99, 104, 101, 100, 32, 46, 104, 116,
					109, 108, 32, 102, 105, 108, 101, 46,
				},
			},
		},
	}
	testEmailFromFile(t, fp, expectedEmail)
}

func TestParseEmailPolishMultipartMixedIso88592OverBase64(t *testing.T) {
	fp := "tests/test_polish_multipart_mixed_iso-8859-2_over_base64.txt"
	expectedEmail := &email.Email{
		Headers: email.Headers{
			Date: time.Time(time.Date(2019, 4, 1, 5, 55, 0, 0, time.UTC)),
			Sender: &mail.Address{
				Name:    "Nadająca, Alicja",
				Address: "alicja.nadajaca@example.com",
			},
			From: []*mail.Address{
				&mail.Address{
					Name:    "Nadająca, Alicja",
					Address: "alicja.nadajaca@example.com",
				},
				&mail.Address{
					Name:    "Nadająca, Alicja",
					Address: "alicja.nadajaca@example.net",
				},
			},
			ReplyTo: []*mail.Address{
				&mail.Address{
					Name:    "Nadająca, Alicja",
					Address: "alicja.nadajaca@example.net",
				},
			},
			To: []*mail.Address{
				&mail.Address{
					Name:    "Odbierający, Bob",
					Address: "bob.odbierajacy@example.com",
				},
				&mail.Address{
					Name:    "Odbierająca, Karolina",
					Address: "karolina.odbierajaca@example.com",
				},
			},
			Cc: []*mail.Address{
				&mail.Address{
					Name:    "Odbierający, Daniel",
					Address: "daniel.odbierajacy@example.com",
				},
				&mail.Address{
					Name:    "Odbierająca, Ewa",
					Address: "ewa.odbierajaca@example.com",
				},
			},
			Bcc: []*mail.Address{
				&mail.Address{
					Name:    "Odbierający, Franek",
					Address: "franek.odbierajacy@example.com",
				},
				&mail.Address{
					Name:    "Odbierająca, Grażyna",
					Address: "grazyna.odbierajaca@example.com",
				},
			},
			MessageID: "Message-Id-1@example.com",
			InReplyTo: []string{
				"Message-Id-0@example.com",
			},
			References: []string{
				"Message-Id-0@example.com",
			},
			Subject:  "📧 Test Polskie pangramy",
			Comments: "Message Header Comment",
			Keywords: []string{
				"Keyword 1",
				"Keyword 2",
			},
			ResentDate: time.Time(time.Date(2019, 4, 1, 5, 55, 0, 0, time.UTC)),
			ResentFrom: []*mail.Address{
				&mail.Address{
					Name:    "Nadająca, Alicja",
					Address: "alicja.nadajaca@example.net",
				},
				&mail.Address{
					Name:    "Nadająca, Alicja",
					Address: "alicja.nadajaca@example.com",
				},
			},
			ResentSender: &mail.Address{
				Name:    "Nadająca, Alicja",
				Address: "alicja.nadajaca@example.net",
			},
			ResentTo: []*mail.Address{
				&mail.Address{
					Name:    "Odbierający, Bob",
					Address: "bob.odbierajacy@example.net",
				},
				&mail.Address{
					Name:    "Odbierająca, Karolina",
					Address: "karolina.odbierajaca@example.net",
				},
			},
			ResentCc: []*mail.Address{
				&mail.Address{
					Name:    "Odbierający, Daniel",
					Address: "daniel.odbierajacy@example.net",
				},
				&mail.Address{
					Name:    "Odbierająca, Ewa",
					Address: "ewa.odbierajaca@example.net",
				},
			},
			ResentBcc: []*mail.Address{
				&mail.Address{
					Name:    "Odbierający, Franek",
					Address: "franek.odbierajacy@example.net",
				},
				&mail.Address{
					Name:    "Odbierająca, Grażyna",
					Address: "grazyna.odbierajaca@example.net",
				},
			},
			ResentMessageID: "Message-Id-1@example.net",
			ExtraHeaders: map[string][]string{
				"X-Clacks-Overhead": []string{
					"GNU Terry Pratchett",
				},
				"X-Script/function/\t !\"#$%&'()*+,-./;<=>?@[\\]^_`{|}~": []string{
					"TEST VALUE 1\t !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_` abcdefghijklmnopqrstuvwxyz{|}~",
					"TEST VALUE 2\t !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_` abcdefghijklmnopqrstuvwxyz{|}~",
				},
			},
			ContentInfo: &email.ContentInfo{
				Type: "multipart/mixed",
				TypeParams: map[string]string{
					"boundary": "MixedBoundaryString",
					"charset":  "iso-8859-2",
				},
				Disposition:       "",
				DispositionParams: map[string]string(nil), // p0
				TransferEncoding:  "base64",
				ID:                "",
				Charset:           "iso-8859-2",
			},
			Received: nil,
		},
		Text: "Jeżu klątw, spłódź Finom część gry hańb!\n" +
			"Pójdźże, kiń tę chmurność w głąb flaszy!\n" +
			"Mężny bądź chroń pułk twój i sześć flag.\n" +
			"Filmuj rzeź żądań, pość, gnęb chłystków!\n" +
			"Pchnąć w tę łódź jeża lub ośm skrzyń fig.\n" +
			"Dość gróźb fuzją, klnę, pych i małżeństw!\n" +
			"Pójdź w loch zbić małżeńską gęś futryn!\n" +
			"Chwyć małżonkę, strój bądź pleśń z fugi.",
		EnrichedText: "<bold>Jeżu klątw, spłódź Finom część gry hańb!</bold>\n" +
			"<italic>Pójdźże, kiń tę chmurność w głąb flaszy!</italic>\n" +
			"<fixed>Mężny bądź chroń pułk twój i sześć flag.</fixed>\n" +
			"<underline>Filmuj rzeź żądań, pość, gnęb chłystków!</underline>\n" +
			"Pchnąć w tę łódź jeża lub ośm skrzyń fig.\n" +
			"Dość gróźb fuzją, klnę, pych i małżeństw!\n" +
			"Pójdź w loch zbić małżeńską gęś futryn!\n" +
			"Chwyć małżonkę, strój bądź pleśń z fugi.",
		HTML: "<html>\n" +
			"<div dir=\"ltr\">\n" +
			"<p>Jeżu klątw, spłódź Finom część gry hańb!</p>\n" +
			"<p>Pójdźże, kiń tę chmurność w głąb flaszy!</p>\n" +
			"<p>Mężny bądź chroń pułk twój i sześć flag.</p>\n" +
			"<p>Filmuj rzeź żądań, pość, gnęb chłystków!</p>\n" +
			"<p>Pchnąć w tę łódź jeża lub ośm skrzyń fig.</p>\n" +
			"<p>Dość gróźb fuzją, klnę, pych i małżeństw!</p>\n" +
			"<p>Pójdź w loch zbić małżeńską gęś futryn!</p>\n" +
			"<p>Chwyć małżonkę, strój bądź pleśń z fugi.</p>\n" +
			"</div>\n" +
			"</html>",
		Files: []*email.File{
			&email.File{
				FileType: "",
				Name:     "inline-jpg-image-without-disposition.jpg",
				ContentInfo: &email.ContentInfo{
					Type: "image/jpeg",
					TypeParams: map[string]string{
						"name": "inline-jpg-image-without-disposition.jpg",
					},
					Disposition:       "",
					DispositionParams: map[string]string(nil), // p0
					TransferEncoding:  "base64",
					ID:                "",
					Charset:           "iso-8859-2",
				},
				Data: []byte{
					203, 153, 197, 152, 203, 153, 197, 176, 0, 67, 0, 3, 2, 2, 2, 2, 2, 3, 2, 2, 2, 3,
					3, 3, 3, 4, 6, 4, 4, 4, 4, 4, 8, 6, 6, 5, 6, 9, 8, 10, 10, 9, 8, 9, 9, 10, 12, 15,
					12, 10, 11, 14, 11, 9, 9, 13, 17, 13, 14, 15, 16, 16, 17, 16, 10, 12, 18, 19, 18,
					16, 19, 15, 16, 16, 16, 203, 153, 195, 137, 0, 11, 8, 0, 1, 0, 1, 1, 1, 17, 0, 203,
					153, 196, 154, 0, 6, 0, 16, 16, 5, 203, 153, 195, 154, 0, 8, 1, 1, 0, 0, 63, 0, 197,
					135, 196, 142, 32, 203, 153, 197, 174,
				},
			},
			&email.File{
				FileType: "inline",
				Name:     "inline-jpg-image-filename.jpg",
				ContentInfo: &email.ContentInfo{
					Type: "image/jpeg",
					TypeParams: map[string]string{
						"name": "inline-jpg-image-name.jpg",
					},
					Disposition: "inline",
					DispositionParams: map[string]string{
						"filename": "inline-jpg-image-filename.jpg",
					},
					TransferEncoding: "base64",
					ID:               "inline-jpg-image.jpg@example.com",
					Charset:          "iso-8859-2",
				},
				Data: []byte{
					203, 153, 197, 152, 203, 153, 197, 176, 0, 67, 0, 3, 2, 2, 2, 2, 2, 3, 2, 2, 2, 3,
					3, 3, 3, 4, 6, 4, 4, 4, 4, 4, 8, 6, 6, 5, 6, 9, 8, 10, 10, 9, 8, 9, 9, 10, 12, 15,
					12, 10, 11, 14, 11, 9, 9, 13, 17, 13, 14, 15, 16, 16, 17, 16, 10, 12, 18, 19, 18,
					16, 19, 15, 16, 16, 16, 203, 153, 195, 137, 0, 11, 8, 0, 1, 0, 1, 1, 1, 17, 0, 203,
					153, 196, 154, 0, 6, 0, 16, 16, 5, 203, 153, 195, 154, 0, 8, 1, 1, 0, 0, 63, 0, 197,
					135, 196, 142, 32, 203, 153, 197, 174,
				},
			},
			&email.File{
				FileType: "attachment",
				Name:     "attached-pdf-filename.pdf",
				ContentInfo: &email.ContentInfo{
					Type: "application/pdf",
					TypeParams: map[string]string{
						"name": "attached-pdf-name.pdf",
					},
					Disposition: "attachment",
					DispositionParams: map[string]string{
						"filename": "attached-pdf-filename.pdf",
					},
					TransferEncoding: "base64",
					ID:               "",
					Charset:          "iso-8859-2",
				},
				Data: []byte{
					37, 80, 68, 70, 45, 49, 46, 13, 116, 114, 97, 105, 108, 101, 114, 60, 60, 47, 82,
					111, 111, 116, 60, 60, 47, 80, 97, 103, 101, 115, 60, 60, 47, 75, 105, 100, 115,
					91, 60, 60, 47, 77, 101, 100, 105, 97, 66, 111, 120, 91, 48, 32, 48, 32, 51, 32,
					51, 93, 62, 62, 93, 62, 62, 62, 62, 62, 62,
				},
			},
			&email.File{
				FileType: "",
				Name:     "attached-pdf-without-disposition.pdf",
				ContentInfo: &email.ContentInfo{
					Type: "application/pdf",
					TypeParams: map[string]string{
						"name": "attached-pdf-without-disposition.pdf",
					},
					Disposition:       "",
					DispositionParams: map[string]string(nil), // p0
					TransferEncoding:  "base64",
					ID:                "",
					Charset:           "iso-8859-2",
				},
				Data: []byte{
					37, 80, 68, 70, 45, 49, 46, 13, 116, 114, 97, 105, 108, 101, 114, 60, 60, 47, 82,
					111, 111, 116, 60, 60, 47, 80, 97, 103, 101, 115, 60, 60, 47, 75, 105, 100, 115,
					91, 60, 60, 47, 77, 101, 100, 105, 97, 66, 111, 120, 91, 48, 32, 48, 32, 51, 32,
					51, 93, 62, 62, 93, 62, 62, 62, 62, 62, 62,
				},
			},
			&email.File{
				FileType: "attachment",
				Name:     "attached-json-filename.json",
				ContentInfo: &email.ContentInfo{
					Type: "application/json",
					TypeParams: map[string]string{
						"name": "attached-json-name.json",
					},
					Disposition: "attachment",
					DispositionParams: map[string]string{
						"filename": "attached-json-filename.json",
					},
					TransferEncoding: "7bit",
					ID:               "",
					Charset:          "iso-8859-2",
				},
				Data: []byte{
					123, 34, 102, 111, 111, 34, 58, 34, 98, 97, 114, 34, 125,
				},
			},
			&email.File{
				FileType: "attachment",
				Name:     "attached-text-plain-filename.txt",
				ContentInfo: &email.ContentInfo{
					Type: "text/plain",
					TypeParams: map[string]string{
						"name": "attached-text-plain-name.txt",
					},
					Disposition: "attachment",
					DispositionParams: map[string]string{
						"filename": "attached-text-plain-filename.txt",
					},
					TransferEncoding: "base64",
					ID:               "",
					Charset:          "iso-8859-2",
				},
				Data: []byte{
					84, 101, 120, 116, 47, 112, 108, 97, 105, 110, 32, 99, 111, 110, 116, 101, 110, 116,
					32, 97, 115, 32, 97, 110, 32, 97, 116, 116, 97, 99, 104, 101, 100, 32, 46, 116, 120,
					116, 32, 102, 105, 108, 101, 46,
				},
			},
			&email.File{
				FileType: "attachment",
				Name:     "attached-text-html-filename.html",
				ContentInfo: &email.ContentInfo{
					Type: "text/html",
					TypeParams: map[string]string{
						"name": "attached-text-html-name.html",
					},
					Disposition: "attachment",
					DispositionParams: map[string]string{
						"filename": "attached-text-html-filename.html",
					},
					TransferEncoding: "base64",
					ID:               "",
					Charset:          "iso-8859-2",
				},
				Data: []byte{
					84, 101, 120, 116, 47, 104, 116, 109, 108, 32, 99, 111, 110, 116, 101, 110, 116,
					32, 97, 115, 32, 97, 110, 32, 97, 116, 116, 97, 99, 104, 101, 100, 32, 46, 104, 116,
					109, 108, 32, 102, 105, 108, 101, 46,
				},
			},
		},
	}
	testEmailFromFile(t, fp, expectedEmail)
}

func TestParseEmailPolishMultipartMixedIso88592OverQuotedprintable(t *testing.T) {
	fp := "tests/test_polish_multipart_mixed_iso-8859-2_over_quoted-printable.txt"
	expectedEmail := &email.Email{
		Headers: email.Headers{
			Date: time.Time(time.Date(2019, 4, 1, 5, 55, 0, 0, time.UTC)),
			Sender: &mail.Address{
				Name:    "Nadająca, Alicja",
				Address: "alicja.nadajaca@example.com",
			},
			From: []*mail.Address{
				&mail.Address{
					Name:    "Nadająca, Alicja",
					Address: "alicja.nadajaca@example.com",
				},
				&mail.Address{
					Name:    "Nadająca, Alicja",
					Address: "alicja.nadajaca@example.net",
				},
			},
			ReplyTo: []*mail.Address{
				&mail.Address{
					Name:    "Nadająca, Alicja",
					Address: "alicja.nadajaca@example.net",
				},
			},
			To: []*mail.Address{
				&mail.Address{
					Name:    "Odbierający, Bob",
					Address: "bob.odbierajacy@example.com",
				},
				&mail.Address{
					Name:    "Odbierająca, Karolina",
					Address: "karolina.odbierajaca@example.com",
				},
			},
			Cc: []*mail.Address{
				&mail.Address{
					Name:    "Odbierający, Daniel",
					Address: "daniel.odbierajacy@example.com",
				},
				&mail.Address{
					Name:    "Odbierająca, Ewa",
					Address: "ewa.odbierajaca@example.com",
				},
			},
			Bcc: []*mail.Address{
				&mail.Address{
					Name:    "Odbierający, Franek",
					Address: "franek.odbierajacy@example.com",
				},
				&mail.Address{
					Name:    "Odbierająca, Grażyna",
					Address: "grazyna.odbierajaca@example.com",
				},
			},
			MessageID: "Message-Id-1@example.com",
			InReplyTo: []string{
				"Message-Id-0@example.com",
			},
			References: []string{
				"Message-Id-0@example.com",
			},
			Subject:  "📧 Test Polskie pangramy",
			Comments: "Message Header Comment",
			Keywords: []string{
				"Keyword 1",
				"Keyword 2",
			},
			ResentDate: time.Time(time.Date(2019, 4, 1, 5, 55, 0, 0, time.UTC)),
			ResentFrom: []*mail.Address{
				&mail.Address{
					Name:    "Nadająca, Alicja",
					Address: "alicja.nadajaca@example.net",
				},
				&mail.Address{
					Name:    "Nadająca, Alicja",
					Address: "alicja.nadajaca@example.com",
				},
			},
			ResentSender: &mail.Address{
				Name:    "Nadająca, Alicja",
				Address: "alicja.nadajaca@example.net",
			},
			ResentTo: []*mail.Address{
				&mail.Address{
					Name:    "Odbierający, Bob",
					Address: "bob.odbierajacy@example.net",
				},
				&mail.Address{
					Name:    "Odbierająca, Karolina",
					Address: "karolina.odbierajaca@example.net",
				},
			},
			ResentCc: []*mail.Address{
				&mail.Address{
					Name:    "Odbierający, Daniel",
					Address: "daniel.odbierajacy@example.net",
				},
				&mail.Address{
					Name:    "Odbierająca, Ewa",
					Address: "ewa.odbierajaca@example.net",
				},
			},
			ResentBcc: []*mail.Address{
				&mail.Address{
					Name:    "Odbierający, Franek",
					Address: "franek.odbierajacy@example.net",
				},
				&mail.Address{
					Name:    "Odbierająca, Grażyna",
					Address: "grazyna.odbierajaca@example.net",
				},
			},
			ResentMessageID: "Message-Id-1@example.net",
			ExtraHeaders: map[string][]string{
				"X-Clacks-Overhead": []string{
					"GNU Terry Pratchett",
				},
				"X-Script/function/\t !\"#$%&'()*+,-./;<=>?@[\\]^_`{|}~": []string{
					"TEST VALUE 1\t !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_` abcdefghijklmnopqrstuvwxyz{|}~",
					"TEST VALUE 2\t !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_` abcdefghijklmnopqrstuvwxyz{|}~",
				},
			},
			ContentInfo: &email.ContentInfo{
				Type: "multipart/mixed",
				TypeParams: map[string]string{
					"boundary": "MixedBoundaryString",
					"charset":  "iso-8859-2",
				},
				Disposition:       "",
				DispositionParams: map[string]string(nil), // p0
				TransferEncoding:  "quoted-printable",
				ID:                "",
				Charset:           "iso-8859-2",
			},
			Received: nil,
		},
		Text: "Jeżu klątw, spłódź Finom część gry hańb!\n" +
			"Pójdźże, kiń tę chmurność w głąb flaszy!\n" +
			"Mężny bądź chroń pułk twój i sześć flag.\n" +
			"Filmuj rzeź żądań, pość, gnęb chłystków!\n" +
			"Pchnąć w tę łódź jeża lub ośm skrzyń fig.\n" +
			"Dość gróźb fuzją, klnę, pych i małżeństw!\n" +
			"Pójdź w loch zbić małżeńską gęś futryn!\n" +
			"Chwyć małżonkę, strój bądź pleśń z fugi.",
		EnrichedText: "<bold>Jeżu klątw, spłódź Finom część gry hańb!</bold>\n" +
			"<italic>Pójdźże, kiń tę chmurność w głąb flaszy!</italic>\n" +
			"<fixed>Mężny bądź chroń pułk twój i sześć flag.</fixed>\n" +
			"<underline>Filmuj rzeź żądań, pość, gnęb chłystków!</underline>\n" +
			"Pchnąć w tę łódź jeża lub ośm skrzyń fig.\n" +
			"Dość gróźb fuzją, klnę, pych i małżeństw!\n" +
			"Pójdź w loch zbić małżeńską gęś futryn!\n" +
			"Chwyć małżonkę, strój bądź pleśń z fugi.",
		HTML: "<html>\n" +
			"<div dir=\"ltr\">\n" +
			"<p>Jeżu klątw, spłódź Finom część gry hańb!</p>\n" +
			"<p>Pójdźże, kiń tę chmurność w głąb flaszy!</p>\n" +
			"<p>Mężny bądź chroń pułk twój i sześć flag.</p>\n" +
			"<p>Filmuj rzeź żądań, pość, gnęb chłystków!</p>\n" +
			"<p>Pchnąć w tę łódź jeża lub ośm skrzyń fig.</p>\n" +
			"<p>Dość gróźb fuzją, klnę, pych i małżeństw!</p>\n" +
			"<p>Pójdź w loch zbić małżeńską gęś futryn!</p>\n" +
			"<p>Chwyć małżonkę, strój bądź pleśń z fugi.</p>\n" +
			"</div>\n" +
			"</html>",
		Files: []*email.File{
			&email.File{
				FileType: "",
				Name:     "inline-jpg-image-without-disposition.jpg",
				ContentInfo: &email.ContentInfo{
					Type: "image/jpeg",
					TypeParams: map[string]string{
						"name": "inline-jpg-image-without-disposition.jpg",
					},
					Disposition:       "",
					DispositionParams: map[string]string(nil), // p0
					TransferEncoding:  "base64",
					ID:                "",
					Charset:           "iso-8859-2",
				},
				Data: []byte{
					203, 153, 197, 152, 203, 153, 197, 176, 0, 67, 0, 3, 2, 2, 2, 2, 2, 3, 2, 2, 2, 3,
					3, 3, 3, 4, 6, 4, 4, 4, 4, 4, 8, 6, 6, 5, 6, 9, 8, 10, 10, 9, 8, 9, 9, 10, 12, 15,
					12, 10, 11, 14, 11, 9, 9, 13, 17, 13, 14, 15, 16, 16, 17, 16, 10, 12, 18, 19, 18,
					16, 19, 15, 16, 16, 16, 203, 153, 195, 137, 0, 11, 8, 0, 1, 0, 1, 1, 1, 17, 0, 203,
					153, 196, 154, 0, 6, 0, 16, 16, 5, 203, 153, 195, 154, 0, 8, 1, 1, 0, 0, 63, 0, 197,
					135, 196, 142, 32, 203, 153, 197, 174,
				},
			},
			&email.File{
				FileType: "inline",
				Name:     "inline-jpg-image-filename.jpg",
				ContentInfo: &email.ContentInfo{
					Type: "image/jpeg",
					TypeParams: map[string]string{
						"name": "inline-jpg-image-name.jpg",
					},
					Disposition: "inline",
					DispositionParams: map[string]string{
						"filename": "inline-jpg-image-filename.jpg",
					},
					TransferEncoding: "base64",
					ID:               "inline-jpg-image.jpg@example.com",
					Charset:          "iso-8859-2",
				},
				Data: []byte{
					203, 153, 197, 152, 203, 153, 197, 176, 0, 67, 0, 3, 2, 2, 2, 2, 2, 3, 2, 2, 2, 3,
					3, 3, 3, 4, 6, 4, 4, 4, 4, 4, 8, 6, 6, 5, 6, 9, 8, 10, 10, 9, 8, 9, 9, 10, 12, 15,
					12, 10, 11, 14, 11, 9, 9, 13, 17, 13, 14, 15, 16, 16, 17, 16, 10, 12, 18, 19, 18,
					16, 19, 15, 16, 16, 16, 203, 153, 195, 137, 0, 11, 8, 0, 1, 0, 1, 1, 1, 17, 0, 203,
					153, 196, 154, 0, 6, 0, 16, 16, 5, 203, 153, 195, 154, 0, 8, 1, 1, 0, 0, 63, 0, 197,
					135, 196, 142, 32, 203, 153, 197, 174,
				},
			},
			&email.File{
				FileType: "attachment",
				Name:     "attached-pdf-filename.pdf",
				ContentInfo: &email.ContentInfo{
					Type: "application/pdf",
					TypeParams: map[string]string{
						"name": "attached-pdf-name.pdf",
					},
					Disposition: "attachment",
					DispositionParams: map[string]string{
						"filename": "attached-pdf-filename.pdf",
					},
					TransferEncoding: "base64",
					ID:               "",
					Charset:          "iso-8859-2",
				},
				Data: []byte{
					37, 80, 68, 70, 45, 49, 46, 13, 116, 114, 97, 105, 108, 101, 114, 60, 60, 47, 82,
					111, 111, 116, 60, 60, 47, 80, 97, 103, 101, 115, 60, 60, 47, 75, 105, 100, 115,
					91, 60, 60, 47, 77, 101, 100, 105, 97, 66, 111, 120, 91, 48, 32, 48, 32, 51, 32,
					51, 93, 62, 62, 93, 62, 62, 62, 62, 62, 62,
				},
			},
			&email.File{
				FileType: "",
				Name:     "attached-pdf-without-disposition.pdf",
				ContentInfo: &email.ContentInfo{
					Type: "application/pdf",
					TypeParams: map[string]string{
						"name": "attached-pdf-without-disposition.pdf",
					},
					Disposition:       "",
					DispositionParams: map[string]string(nil), // p0
					TransferEncoding:  "base64",
					ID:                "",
					Charset:           "iso-8859-2",
				},
				Data: []byte{
					37, 80, 68, 70, 45, 49, 46, 13, 116, 114, 97, 105, 108, 101, 114, 60, 60, 47, 82,
					111, 111, 116, 60, 60, 47, 80, 97, 103, 101, 115, 60, 60, 47, 75, 105, 100, 115,
					91, 60, 60, 47, 77, 101, 100, 105, 97, 66, 111, 120, 91, 48, 32, 48, 32, 51, 32,
					51, 93, 62, 62, 93, 62, 62, 62, 62, 62, 62,
				},
			},
			&email.File{
				FileType: "attachment",
				Name:     "attached-json-filename.json",
				ContentInfo: &email.ContentInfo{
					Type: "application/json",
					TypeParams: map[string]string{
						"name": "attached-json-name.json",
					},
					Disposition: "attachment",
					DispositionParams: map[string]string{
						"filename": "attached-json-filename.json",
					},
					TransferEncoding: "7bit",
					ID:               "",
					Charset:          "iso-8859-2",
				},
				Data: []byte{
					123, 34, 102, 111, 111, 34, 58, 34, 98, 97, 114, 34, 125,
				},
			},
			&email.File{
				FileType: "attachment",
				Name:     "attached-text-plain-filename.txt",
				ContentInfo: &email.ContentInfo{
					Type: "text/plain",
					TypeParams: map[string]string{
						"name": "attached-text-plain-name.txt",
					},
					Disposition: "attachment",
					DispositionParams: map[string]string{
						"filename": "attached-text-plain-filename.txt",
					},
					TransferEncoding: "base64",
					ID:               "",
					Charset:          "iso-8859-2",
				},
				Data: []byte{
					84, 101, 120, 116, 47, 112, 108, 97, 105, 110, 32, 99, 111, 110, 116, 101, 110, 116,
					32, 97, 115, 32, 97, 110, 32, 97, 116, 116, 97, 99, 104, 101, 100, 32, 46, 116, 120,
					116, 32, 102, 105, 108, 101, 46,
				},
			},
			&email.File{
				FileType: "attachment",
				Name:     "attached-text-html-filename.html",
				ContentInfo: &email.ContentInfo{
					Type: "text/html",
					TypeParams: map[string]string{
						"name": "attached-text-html-name.html",
					},
					Disposition: "attachment",
					DispositionParams: map[string]string{
						"filename": "attached-text-html-filename.html",
					},
					TransferEncoding: "base64",
					ID:               "",
					Charset:          "iso-8859-2",
				},
				Data: []byte{
					84, 101, 120, 116, 47, 104, 116, 109, 108, 32, 99, 111, 110, 116, 101, 110, 116,
					32, 97, 115, 32, 97, 110, 32, 97, 116, 116, 97, 99, 104, 101, 100, 32, 46, 104, 116,
					109, 108, 32, 102, 105, 108, 101, 46,
				},
			},
		},
	}
	testEmailFromFile(t, fp, expectedEmail)
}

func TestParseEmailPolishMultipartSignedUtf8OverBase64(t *testing.T) {
	fp := "tests/test_polish_multipart_signed_utf-8_over_base64.txt"
	expectedEmail := &email.Email{
		Headers: email.Headers{
			Date: time.Time(time.Date(2019, 4, 1, 5, 55, 0, 0, time.UTC)),
			Sender: &mail.Address{
				Name:    "Nadająca, Alicja",
				Address: "alicja.nadajaca@example.com",
			},
			From: []*mail.Address{
				&mail.Address{
					Name:    "Nadająca, Alicja",
					Address: "alicja.nadajaca@example.com",
				},
				&mail.Address{
					Name:    "Nadająca, Alicja",
					Address: "alicja.nadajaca@example.net",
				},
			},
			ReplyTo: []*mail.Address{
				&mail.Address{
					Name:    "Nadająca, Alicja",
					Address: "alicja.nadajaca@example.net",
				},
			},
			To: []*mail.Address{
				&mail.Address{
					Name:    "Odbierający, Bob",
					Address: "bob.odbierajacy@example.com",
				},
				&mail.Address{
					Name:    "Odbierająca, Karolina",
					Address: "karolina.odbierajaca@example.com",
				},
			},
			Cc: []*mail.Address{
				&mail.Address{
					Name:    "Odbierający, Daniel",
					Address: "daniel.odbierajacy@example.com",
				},
				&mail.Address{
					Name:    "Odbierająca, Ewa",
					Address: "ewa.odbierajaca@example.com",
				},
			},
			Bcc: []*mail.Address{
				&mail.Address{
					Name:    "Odbierający, Franek",
					Address: "franek.odbierajacy@example.com",
				},
				&mail.Address{
					Name:    "Odbierająca, Grażyna",
					Address: "grazyna.odbierajaca@example.com",
				},
			},
			MessageID: "Message-Id-1@example.com",
			InReplyTo: []string{
				"Message-Id-0@example.com",
			},
			References: []string{
				"Message-Id-0@example.com",
			},
			Subject:  "📧 Signed Test Polskie pangramy",
			Comments: "Message Header Comment",
			Keywords: []string{
				"Keyword 1",
				"Keyword 2",
			},
			ResentDate: time.Time(time.Date(2019, 4, 1, 5, 55, 0, 0, time.UTC)),
			ResentFrom: []*mail.Address{
				&mail.Address{
					Name:    "Nadająca, Alicja",
					Address: "alicja.nadajaca@example.net",
				},
				&mail.Address{
					Name:    "Nadająca, Alicja",
					Address: "alicja.nadajaca@example.com",
				},
			},
			ResentSender: &mail.Address{
				Name:    "Nadająca, Alicja",
				Address: "alicja.nadajaca@example.net",
			},
			ResentTo: []*mail.Address{
				&mail.Address{
					Name:    "Odbierający, Bob",
					Address: "bob.odbierajacy@example.net",
				},
				&mail.Address{
					Name:    "Odbierająca, Karolina",
					Address: "karolina.odbierajaca@example.net",
				},
			},
			ResentCc: []*mail.Address{
				&mail.Address{
					Name:    "Odbierający, Daniel",
					Address: "daniel.odbierajacy@example.net",
				},
				&mail.Address{
					Name:    "Odbierająca, Ewa",
					Address: "ewa.odbierajaca@example.net",
				},
			},
			ResentBcc: []*mail.Address{
				&mail.Address{
					Name:    "Odbierający, Franek",
					Address: "franek.odbierajacy@example.net",
				},
				&mail.Address{
					Name:    "Odbierająca, Grażyna",
					Address: "grazyna.odbierajaca@example.net",
				},
			},
			ResentMessageID: "Message-Id-1@example.net",
			ExtraHeaders: map[string][]string{
				"X-Clacks-Overhead": []string{
					"GNU Terry Pratchett",
				},
				"X-Script/function/\t !\"#$%&'()*+,-./;<=>?@[\\]^_`{|}~": []string{
					"TEST VALUE 1\t !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_` abcdefghijklmnopqrstuvwxyz{|}~",
					"TEST VALUE 2\t !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_` abcdefghijklmnopqrstuvwxyz{|}~",
				},
			},
			ContentInfo: &email.ContentInfo{
				Type: "multipart/signed",
				TypeParams: map[string]string{
					"boundary": "SignedBoundaryString",
					"charset":  "utf-8",
					"micalg":   "sha1",
					"protocol": "application/pkcs7-signature",
				},
				Disposition:       "",
				DispositionParams: map[string]string(nil), // p0
				TransferEncoding:  "base64",
				ID:                "",
				Charset:           "utf-8",
			},
			Received: nil,
		},
		Text: "Jeżu klątw, spłódź Finom część gry hańb!\n" +
			"Pójdźże, kiń tę chmurność w głąb flaszy!\n" +
			"Mężny bądź chroń pułk twój i sześć flag.\n" +
			"Filmuj rzeź żądań, pość, gnęb chłystków!\n" +
			"Pchnąć w tę łódź jeża lub ośm skrzyń fig.\n" +
			"Dość gróźb fuzją, klnę, pych i małżeństw!\n" +
			"Pójdź w loch zbić małżeńską gęś futryn!\n" +
			"Chwyć małżonkę, strój bądź pleśń z fugi.",
		EnrichedText: "",
		HTML:         "",
		Files: []*email.File{
			&email.File{
				FileType: "attachment",
				Name:     "smime.p7s",
				ContentInfo: &email.ContentInfo{
					Type: "application/pkcs7-signature",
					TypeParams: map[string]string{
						"name": "smime.p7s",
					},
					Disposition: "attachment",
					DispositionParams: map[string]string{
						"filename": "smime.p7s",
					},
					TransferEncoding: "base64",
					ID:               "",
					Charset:          "utf-8",
				},
				Data: []byte{
					239, 191, 189, 28, 239, 191, 189, 239, 191, 189, 117, 46, 239, 191, 189, 18, 97,
					239, 191, 189, 126, 239, 191, 189, 239, 191, 189, 239, 191, 189, 239, 191, 189, 25,
					58, 223, 189, 239, 191, 189, 239, 191, 189, 239, 158, 173, 108, 31, 71, 27, 239,
					191, 189, 80, 239, 191, 189, 239, 191, 189, 239, 191, 189, 239, 191, 189, 198, 132,
					239, 191, 189, 239, 191, 189, 29, 239, 191, 189, 19, 239, 191, 189, 80, 239, 191,
					189, 239, 191, 189, 239, 191, 189, 239, 191, 189, 198, 132, 239, 191, 189, 239, 191,
					189, 29, 239, 191, 189, 19, 239, 191, 189, 49, 239, 191, 189, 239, 191, 189, 127,
					7, 28, 104, 33, 239, 191, 189, 120, 71, 82, 239, 191, 189, 239, 191, 189, 38, 30,
					239, 191, 189, 239, 191, 189, 239, 191, 189, 239, 191, 189, 239, 191, 189, 113, 239,
					191, 189, 239, 191, 189, 239, 191, 189, 219, 158, 57, 239, 191, 189, 28, 113, 239,
					191, 189, 239, 191, 189, 239, 191, 189, 239, 191, 189, 38, 24, 239, 191, 189, 239,
					190, 173, 108, 31, 71, 27, 239, 191, 189, 80, 110, 120, 239, 191, 189, 239, 191,
					189, 198, 132, 239, 191, 189, 239, 191, 189, 29, 239, 191, 189, 19, 239, 191, 189,
					8, 114, 30, 17, 212, 186, 58, 95, 239, 191, 189, 94, 59, 26, 18, 6, 124, 119, 239,
					191, 189, 79, 239, 191, 189, 21, 65, 239, 191, 189, 239, 191, 189, 239, 191, 189,
				},
			},
		},
	}
	testEmailFromFile(t, fp, expectedEmail)
}

func TestParseEmailPolishMultipartSignedUtf8OverQuotedprintable(t *testing.T) {
	fp := "tests/test_polish_multipart_signed_utf-8_over_quoted-printable.txt"
	expectedEmail := &email.Email{
		Headers: email.Headers{
			Date: time.Time(time.Date(2019, 4, 1, 5, 55, 0, 0, time.UTC)),
			Sender: &mail.Address{
				Name:    "Nadająca, Alicja",
				Address: "alicja.nadajaca@example.com",
			},
			From: []*mail.Address{
				&mail.Address{
					Name:    "Nadająca, Alicja",
					Address: "alicja.nadajaca@example.com",
				},
				&mail.Address{
					Name:    "Nadająca, Alicja",
					Address: "alicja.nadajaca@example.net",
				},
			},
			ReplyTo: []*mail.Address{
				&mail.Address{
					Name:    "Nadająca, Alicja",
					Address: "alicja.nadajaca@example.net",
				},
			},
			To: []*mail.Address{
				&mail.Address{
					Name:    "Odbierający, Bob",
					Address: "bob.odbierajacy@example.com",
				},
				&mail.Address{
					Name:    "Odbierająca, Karolina",
					Address: "karolina.odbierajaca@example.com",
				},
			},
			Cc: []*mail.Address{
				&mail.Address{
					Name:    "Odbierający, Daniel",
					Address: "daniel.odbierajacy@example.com",
				},
				&mail.Address{
					Name:    "Odbierająca, Ewa",
					Address: "ewa.odbierajaca@example.com",
				},
			},
			Bcc: []*mail.Address{
				&mail.Address{
					Name:    "Odbierający, Franek",
					Address: "franek.odbierajacy@example.com",
				},
				&mail.Address{
					Name:    "Odbierająca, Grażyna",
					Address: "grazyna.odbierajaca@example.com",
				},
			},
			MessageID: "Message-Id-1@example.com",
			InReplyTo: []string{
				"Message-Id-0@example.com",
			},
			References: []string{
				"Message-Id-0@example.com",
			},
			Subject:  "📧 Signed Test Polskie pangramy",
			Comments: "Message Header Comment",
			Keywords: []string{
				"Keyword 1",
				"Keyword 2",
			},
			ResentDate: time.Time(time.Date(2019, 4, 1, 5, 55, 0, 0, time.UTC)),
			ResentFrom: []*mail.Address{
				&mail.Address{
					Name:    "Nadająca, Alicja",
					Address: "alicja.nadajaca@example.net",
				},
				&mail.Address{
					Name:    "Nadająca, Alicja",
					Address: "alicja.nadajaca@example.com",
				},
			},
			ResentSender: &mail.Address{
				Name:    "Nadająca, Alicja",
				Address: "alicja.nadajaca@example.net",
			},
			ResentTo: []*mail.Address{
				&mail.Address{
					Name:    "Odbierający, Bob",
					Address: "bob.odbierajacy@example.net",
				},
				&mail.Address{
					Name:    "Odbierająca, Karolina",
					Address: "karolina.odbierajaca@example.net",
				},
			},
			ResentCc: []*mail.Address{
				&mail.Address{
					Name:    "Odbierający, Daniel",
					Address: "daniel.odbierajacy@example.net",
				},
				&mail.Address{
					Name:    "Odbierająca, Ewa",
					Address: "ewa.odbierajaca@example.net",
				},
			},
			ResentBcc: []*mail.Address{
				&mail.Address{
					Name:    "Odbierający, Franek",
					Address: "franek.odbierajacy@example.net",
				},
				&mail.Address{
					Name:    "Odbierająca, Grażyna",
					Address: "grazyna.odbierajaca@example.net",
				},
			},
			ResentMessageID: "Message-Id-1@example.net",
			ExtraHeaders: map[string][]string{
				"X-Clacks-Overhead": []string{
					"GNU Terry Pratchett",
				},
				"X-Script/function/\t !\"#$%&'()*+,-./;<=>?@[\\]^_`{|}~": []string{
					"TEST VALUE 1\t !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_` abcdefghijklmnopqrstuvwxyz{|}~",
					"TEST VALUE 2\t !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_` abcdefghijklmnopqrstuvwxyz{|}~",
				},
			},
			ContentInfo: &email.ContentInfo{
				Type: "multipart/signed",
				TypeParams: map[string]string{
					"boundary": "SignedBoundaryString",
					"charset":  "utf-8",
					"micalg":   "sha1",
					"protocol": "application/pkcs7-signature",
				},
				Disposition:       "",
				DispositionParams: map[string]string(nil), // p0
				TransferEncoding:  "quoted-printable",
				ID:                "",
				Charset:           "utf-8",
			},
			Received: nil,
		},
		Text: "Jeżu klątw, spłódź Finom część gry hańb!\n" +
			"Pójdźże, kiń tę chmurność w głąb flaszy!\n" +
			"Mężny bądź chroń pułk twój i sześć flag.\n" +
			"Filmuj rzeź żądań, pość, gnęb chłystków!\n" +
			"Pchnąć w tę łódź jeża lub ośm skrzyń fig.\n" +
			"Dość gróźb fuzją, klnę, pych i małżeństw!\n" +
			"Pójdź w loch zbić małżeńską gęś futryn!\n" +
			"Chwyć małżonkę, strój bądź pleśń z fugi.",
		EnrichedText: "",
		HTML:         "",
		Files: []*email.File{
			&email.File{
				FileType: "attachment",
				Name:     "smime.p7s",
				ContentInfo: &email.ContentInfo{
					Type: "application/pkcs7-signature",
					TypeParams: map[string]string{
						"name": "smime.p7s",
					},
					Disposition: "attachment",
					DispositionParams: map[string]string{
						"filename": "smime.p7s",
					},
					TransferEncoding: "base64",
					ID:               "",
					Charset:          "utf-8",
				},
				Data: []byte{
					239, 191, 189, 28, 239, 191, 189, 239, 191, 189, 117, 46, 239, 191, 189, 18, 97,
					239, 191, 189, 126, 239, 191, 189, 239, 191, 189, 239, 191, 189, 239, 191, 189, 25,
					58, 223, 189, 239, 191, 189, 239, 191, 189, 239, 158, 173, 108, 31, 71, 27, 239,
					191, 189, 80, 239, 191, 189, 239, 191, 189, 239, 191, 189, 239, 191, 189, 198, 132,
					239, 191, 189, 239, 191, 189, 29, 239, 191, 189, 19, 239, 191, 189, 80, 239, 191,
					189, 239, 191, 189, 239, 191, 189, 239, 191, 189, 198, 132, 239, 191, 189, 239, 191,
					189, 29, 239, 191, 189, 19, 239, 191, 189, 49, 239, 191, 189, 239, 191, 189, 127,
					7, 28, 104, 33, 239, 191, 189, 120, 71, 82, 239, 191, 189, 239, 191, 189, 38, 30,
					239, 191, 189, 239, 191, 189, 239, 191, 189, 239, 191, 189, 239, 191, 189, 113, 239,
					191, 189, 239, 191, 189, 239, 191, 189, 219, 158, 57, 239, 191, 189, 28, 113, 239,
					191, 189, 239, 191, 189, 239, 191, 189, 239, 191, 189, 38, 24, 239, 191, 189, 239,
					190, 173, 108, 31, 71, 27, 239, 191, 189, 80, 110, 120, 239, 191, 189, 239, 191,
					189, 198, 132, 239, 191, 189, 239, 191, 189, 29, 239, 191, 189, 19, 239, 191, 189,
					8, 114, 30, 17, 212, 186, 58, 95, 239, 191, 189, 94, 59, 26, 18, 6, 124, 119, 239,
					191, 189, 79, 239, 191, 189, 21, 65, 239, 191, 189, 239, 191, 189, 239, 191, 189,
				},
			},
		},
	}
	testEmailFromFile(t, fp, expectedEmail)
}

func TestParseEmailPolishMultipartSignedIso88592OverBase64(t *testing.T) {
	fp := "tests/test_polish_multipart_signed_iso-8859-2_over_base64.txt"
	expectedEmail := &email.Email{
		Headers: email.Headers{
			Date: time.Time(time.Date(2019, 4, 1, 5, 55, 0, 0, time.UTC)),
			Sender: &mail.Address{
				Name:    "Nadająca, Alicja",
				Address: "alicja.nadajaca@example.com",
			},
			From: []*mail.Address{
				&mail.Address{
					Name:    "Nadająca, Alicja",
					Address: "alicja.nadajaca@example.com",
				},
				&mail.Address{
					Name:    "Nadająca, Alicja",
					Address: "alicja.nadajaca@example.net",
				},
			},
			ReplyTo: []*mail.Address{
				&mail.Address{
					Name:    "Nadająca, Alicja",
					Address: "alicja.nadajaca@example.net",
				},
			},
			To: []*mail.Address{
				&mail.Address{
					Name:    "Odbierający, Bob",
					Address: "bob.odbierajacy@example.com",
				},
				&mail.Address{
					Name:    "Odbierająca, Karolina",
					Address: "karolina.odbierajaca@example.com",
				},
			},
			Cc: []*mail.Address{
				&mail.Address{
					Name:    "Odbierający, Daniel",
					Address: "daniel.odbierajacy@example.com",
				},
				&mail.Address{
					Name:    "Odbierająca, Ewa",
					Address: "ewa.odbierajaca@example.com",
				},
			},
			Bcc: []*mail.Address{
				&mail.Address{
					Name:    "Odbierający, Franek",
					Address: "franek.odbierajacy@example.com",
				},
				&mail.Address{
					Name:    "Odbierająca, Grażyna",
					Address: "grazyna.odbierajaca@example.com",
				},
			},
			MessageID: "Message-Id-1@example.com",
			InReplyTo: []string{
				"Message-Id-0@example.com",
			},
			References: []string{
				"Message-Id-0@example.com",
			},
			Subject:  "📧 Signed Test Polskie pangramy",
			Comments: "Message Header Comment",
			Keywords: []string{
				"Keyword 1",
				"Keyword 2",
			},
			ResentDate: time.Time(time.Date(2019, 4, 1, 5, 55, 0, 0, time.UTC)),
			ResentFrom: []*mail.Address{
				&mail.Address{
					Name:    "Nadająca, Alicja",
					Address: "alicja.nadajaca@example.net",
				},
				&mail.Address{
					Name:    "Nadająca, Alicja",
					Address: "alicja.nadajaca@example.com",
				},
			},
			ResentSender: &mail.Address{
				Name:    "Nadająca, Alicja",
				Address: "alicja.nadajaca@example.net",
			},
			ResentTo: []*mail.Address{
				&mail.Address{
					Name:    "Odbierający, Bob",
					Address: "bob.odbierajacy@example.net",
				},
				&mail.Address{
					Name:    "Odbierająca, Karolina",
					Address: "karolina.odbierajaca@example.net",
				},
			},
			ResentCc: []*mail.Address{
				&mail.Address{
					Name:    "Odbierający, Daniel",
					Address: "daniel.odbierajacy@example.net",
				},
				&mail.Address{
					Name:    "Odbierająca, Ewa",
					Address: "ewa.odbierajaca@example.net",
				},
			},
			ResentBcc: []*mail.Address{
				&mail.Address{
					Name:    "Odbierający, Franek",
					Address: "franek.odbierajacy@example.net",
				},
				&mail.Address{
					Name:    "Odbierająca, Grażyna",
					Address: "grazyna.odbierajaca@example.net",
				},
			},
			ResentMessageID: "Message-Id-1@example.net",
			ExtraHeaders: map[string][]string{
				"X-Clacks-Overhead": []string{
					"GNU Terry Pratchett",
				},
				"X-Script/function/\t !\"#$%&'()*+,-./;<=>?@[\\]^_`{|}~": []string{
					"TEST VALUE 1\t !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_` abcdefghijklmnopqrstuvwxyz{|}~",
					"TEST VALUE 2\t !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_` abcdefghijklmnopqrstuvwxyz{|}~",
				},
			},
			ContentInfo: &email.ContentInfo{
				Type: "multipart/signed",
				TypeParams: map[string]string{
					"boundary": "SignedBoundaryString",
					"charset":  "iso-8859-2",
					"micalg":   "sha1",
					"protocol": "application/pkcs7-signature",
				},
				Disposition:       "",
				DispositionParams: map[string]string(nil), // p0
				TransferEncoding:  "base64",
				ID:                "",
				Charset:           "iso-8859-2",
			},
			Received: nil,
		},
		Text: "Jeżu klątw, spłódź Finom część gry hańb!\n" +
			"Pójdźże, kiń tę chmurność w głąb flaszy!\n" +
			"Mężny bądź chroń pułk twój i sześć flag.\n" +
			"Filmuj rzeź żądań, pość, gnęb chłystków!\n" +
			"Pchnąć w tę łódź jeża lub ośm skrzyń fig.\n" +
			"Dość gróźb fuzją, klnę, pych i małżeństw!\n" +
			"Pójdź w loch zbić małżeńską gęś futryn!\n" +
			"Chwyć małżonkę, strój bądź pleśń z fugi.",
		EnrichedText: "",
		HTML:         "",
		Files: []*email.File{
			&email.File{
				FileType: "attachment",
				Name:     "smime.p7s",
				ContentInfo: &email.ContentInfo{
					Type: "application/pkcs7-signature",
					TypeParams: map[string]string{
						"name": "smime.p7s",
					},
					Disposition: "attachment",
					DispositionParams: map[string]string{
						"filename": "smime.p7s",
					},
					TransferEncoding: "base64",
					ID:               "",
					Charset:          "iso-8859-2",
				},
				Data: []byte{
					239, 191, 189, 28, 239, 191, 189, 239, 191, 189, 117, 46, 239, 191, 189, 18, 97,
					239, 191, 189, 126, 197, 177, 239, 191, 189, 195, 129, 195, 135, 25, 58, 195, 159,
					203, 157, 197, 161, 196, 131, 196, 143, 239, 191, 189, 194, 173, 108, 31, 71, 27,
					239, 191, 189, 80, 196, 189, 195, 188, 239, 191, 189, 196, 131, 197, 189, 196, 134,
					239, 191, 189, 239, 191, 189, 239, 191, 189, 29, 195, 182, 19, 195, 171, 239, 191,
					189, 80, 196, 189, 195, 188, 239, 191, 189, 196, 131, 197, 189, 196, 134, 239, 191,
					189, 239, 191, 189, 239, 191, 189, 29, 195, 182, 19, 196, 153, 49, 197, 177, 195,
					174, 127, 7, 28, 104, 33, 196, 140, 120, 71, 82, 196, 141, 195, 161, 38, 30, 197,
					175, 196, 153, 195, 150, 195, 129, 195, 180, 113, 239, 191, 189, 194, 173, 197, 177,
					197, 176, 239, 191, 189, 57, 195, 188, 28, 113, 239, 191, 189, 194, 173, 197, 177,
					195, 161, 38, 24, 195, 135, 196, 143, 197, 190, 194, 173, 108, 31, 71, 27, 239, 191,
					189, 80, 110, 120, 197, 177, 195, 167, 197, 189, 196, 134, 239, 191, 189, 239, 191,
					189, 239, 191, 189, 29, 195, 182, 19, 196, 153, 8, 114, 30, 17, 195, 148, 197, 159,
					58, 95, 196, 140, 94, 59, 26, 18, 6, 124, 119, 197, 152, 79, 197, 189, 21, 65, 197,
					161, 196, 131, 196, 143, 239, 191, 189,
				},
			},
		},
	}
	testEmailFromFile(t, fp, expectedEmail)
}

func TestParseEmailPolishMultipartSignedIso88592OverQuotedprintable(t *testing.T) {
	fp := "tests/test_polish_multipart_signed_iso-8859-2_over_quoted-printable.txt"
	expectedEmail := &email.Email{
		Headers: email.Headers{
			Date: time.Time(time.Date(2019, 4, 1, 5, 55, 0, 0, time.UTC)),
			Sender: &mail.Address{
				Name:    "Nadająca, Alicja",
				Address: "alicja.nadajaca@example.com",
			},
			From: []*mail.Address{
				&mail.Address{
					Name:    "Nadająca, Alicja",
					Address: "alicja.nadajaca@example.com",
				},
				&mail.Address{
					Name:    "Nadająca, Alicja",
					Address: "alicja.nadajaca@example.net",
				},
			},
			ReplyTo: []*mail.Address{
				&mail.Address{
					Name:    "Nadająca, Alicja",
					Address: "alicja.nadajaca@example.net",
				},
			},
			To: []*mail.Address{
				&mail.Address{
					Name:    "Odbierający, Bob",
					Address: "bob.odbierajacy@example.com",
				},
				&mail.Address{
					Name:    "Odbierająca, Karolina",
					Address: "karolina.odbierajaca@example.com",
				},
			},
			Cc: []*mail.Address{
				&mail.Address{
					Name:    "Odbierający, Daniel",
					Address: "daniel.odbierajacy@example.com",
				},
				&mail.Address{
					Name:    "Odbierająca, Ewa",
					Address: "ewa.odbierajaca@example.com",
				},
			},
			Bcc: []*mail.Address{
				&mail.Address{
					Name:    "Odbierający, Franek",
					Address: "franek.odbierajacy@example.com",
				},
				&mail.Address{
					Name:    "Odbierająca, Grażyna",
					Address: "grazyna.odbierajaca@example.com",
				},
			},
			MessageID: "Message-Id-1@example.com",
			InReplyTo: []string{
				"Message-Id-0@example.com",
			},
			References: []string{
				"Message-Id-0@example.com",
			},
			Subject:  "📧 Signed Test Polskie pangramy",
			Comments: "Message Header Comment",
			Keywords: []string{
				"Keyword 1",
				"Keyword 2",
			},
			ResentDate: time.Time(time.Date(2019, 4, 1, 5, 55, 0, 0, time.UTC)),
			ResentFrom: []*mail.Address{
				&mail.Address{
					Name:    "Nadająca, Alicja",
					Address: "alicja.nadajaca@example.net",
				},
				&mail.Address{
					Name:    "Nadająca, Alicja",
					Address: "alicja.nadajaca@example.com",
				},
			},
			ResentSender: &mail.Address{
				Name:    "Nadająca, Alicja",
				Address: "alicja.nadajaca@example.net",
			},
			ResentTo: []*mail.Address{
				&mail.Address{
					Name:    "Odbierający, Bob",
					Address: "bob.odbierajacy@example.net",
				},
				&mail.Address{
					Name:    "Odbierająca, Karolina",
					Address: "karolina.odbierajaca@example.net",
				},
			},
			ResentCc: []*mail.Address{
				&mail.Address{
					Name:    "Odbierający, Daniel",
					Address: "daniel.odbierajacy@example.net",
				},
				&mail.Address{
					Name:    "Odbierająca, Ewa",
					Address: "ewa.odbierajaca@example.net",
				},
			},
			ResentBcc: []*mail.Address{
				&mail.Address{
					Name:    "Odbierający, Franek",
					Address: "franek.odbierajacy@example.net",
				},
				&mail.Address{
					Name:    "Odbierająca, Grażyna",
					Address: "grazyna.odbierajaca@example.net",
				},
			},
			ResentMessageID: "Message-Id-1@example.net",
			ExtraHeaders: map[string][]string{
				"X-Clacks-Overhead": []string{
					"GNU Terry Pratchett",
				},
				"X-Script/function/\t !\"#$%&'()*+,-./;<=>?@[\\]^_`{|}~": []string{
					"TEST VALUE 1\t !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_` abcdefghijklmnopqrstuvwxyz{|}~",
					"TEST VALUE 2\t !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_` abcdefghijklmnopqrstuvwxyz{|}~",
				},
			},
			ContentInfo: &email.ContentInfo{
				Type: "multipart/signed",
				TypeParams: map[string]string{
					"boundary": "SignedBoundaryString",
					"charset":  "iso-8859-2",
					"micalg":   "sha1",
					"protocol": "application/pkcs7-signature",
				},
				Disposition:       "",
				DispositionParams: map[string]string(nil), // p0
				TransferEncoding:  "quoted-printable",
				ID:                "",
				Charset:           "iso-8859-2",
			},
			Received: nil,
		},
		Text: "Jeżu klątw, spłódź Finom część gry hańb!\n" +
			"Pójdźże, kiń tę chmurność w głąb flaszy!\n" +
			"Mężny bądź chroń pułk twój i sześć flag.\n" +
			"Filmuj rzeź żądań, pość, gnęb chłystków!\n" +
			"Pchnąć w tę łódź jeża lub ośm skrzyń fig.\n" +
			"Dość gróźb fuzją, klnę, pych i małżeństw!\n" +
			"Pójdź w loch zbić małżeńską gęś futryn!\n" +
			"Chwyć małżonkę, strój bądź pleśń z fugi.",
		EnrichedText: "",
		HTML:         "",
		Files: []*email.File{
			&email.File{
				FileType: "attachment",
				Name:     "smime.p7s",
				ContentInfo: &email.ContentInfo{
					Type: "application/pkcs7-signature",
					TypeParams: map[string]string{
						"name": "smime.p7s",
					},
					Disposition: "attachment",
					DispositionParams: map[string]string{
						"filename": "smime.p7s",
					},
					TransferEncoding: "base64",
					ID:               "",
					Charset:          "iso-8859-2",
				},
				Data: []byte{
					239, 191, 189, 28, 239, 191, 189, 239, 191, 189, 117, 46, 239, 191, 189, 18, 97,
					239, 191, 189, 126, 197, 177, 239, 191, 189, 195, 129, 195, 135, 25, 58, 195, 159,
					203, 157, 197, 161, 196, 131, 196, 143, 239, 191, 189, 194, 173, 108, 31, 71, 27,
					239, 191, 189, 80, 196, 189, 195, 188, 239, 191, 189, 196, 131, 197, 189, 196, 134,
					239, 191, 189, 239, 191, 189, 239, 191, 189, 29, 195, 182, 19, 195, 171, 239, 191,
					189, 80, 196, 189, 195, 188, 239, 191, 189, 196, 131, 197, 189, 196, 134, 239, 191,
					189, 239, 191, 189, 239, 191, 189, 29, 195, 182, 19, 196, 153, 49, 197, 177, 195,
					174, 127, 7, 28, 104, 33, 196, 140, 120, 71, 82, 196, 141, 195, 161, 38, 30, 197,
					175, 196, 153, 195, 150, 195, 129, 195, 180, 113, 239, 191, 189, 194, 173, 197, 177,
					197, 176, 239, 191, 189, 57, 195, 188, 28, 113, 239, 191, 189, 194, 173, 197, 177,
					195, 161, 38, 24, 195, 135, 196, 143, 197, 190, 194, 173, 108, 31, 71, 27, 239, 191,
					189, 80, 110, 120, 197, 177, 195, 167, 197, 189, 196, 134, 239, 191, 189, 239, 191,
					189, 239, 191, 189, 29, 195, 182, 19, 196, 153, 8, 114, 30, 17, 195, 148, 197, 159,
					58, 95, 196, 140, 94, 59, 26, 18, 6, 124, 119, 197, 152, 79, 197, 189, 21, 65, 197,
					161, 196, 131, 196, 143, 239, 191, 189,
				},
			},
		},
	}
	testEmailFromFile(t, fp, expectedEmail)
}

func TestParseEmailThaiPlaintextIso885911OverBase64(t *testing.T) {
	fp := "tests/test_thai_plaintext_iso-8859-11_over_base64.txt"
	expectedEmail := &email.Email{
		Headers: email.Headers{
			Date: time.Time(time.Date(2019, 4, 1, 0, 55, 0, 0, time.UTC)),
			Sender: &mail.Address{
				Name:    "อลิซ ผู้ส่งจดหมาย",
				Address: "alis.phusngcdhmay@example.com",
			},
			From: []*mail.Address{
				&mail.Address{
					Name:    "อลิซ ผู้ส่งจดหมาย",
					Address: "alis.phusngcdhmay@example.com",
				},
				&mail.Address{
					Name:    "อลิซ ผู้ส่งจดหมาย",
					Address: "alis.phusngcdhmay@example.net",
				},
			},
			ReplyTo: []*mail.Address{
				&mail.Address{
					Name:    "อลิซ ผู้ส่งจดหมาย",
					Address: "alis.phusngcdhmay@example.net",
				},
			},
			To: []*mail.Address{
				&mail.Address{
					Name:    "บ๊อบ ผู้รับ",
					Address: "bob.phurab@example.com",
				},
				&mail.Address{
					Name:    "คาโรล ผู้รับ",
					Address: "carol.phurab@example.com",
				},
			},
			Cc: []*mail.Address{
				&mail.Address{
					Name:    "แดน ผู้รับ",
					Address: "dan.phurab@example.com",
				},
				&mail.Address{
					Name:    "อีฟ ผู้รับ",
					Address: "eve.phurab@example.com",
				},
			},
			Bcc: []*mail.Address{
				&mail.Address{
					Name:    "แฟรงค์ ผู้รับ",
					Address: "frank.phurab@example.com",
				},
				&mail.Address{
					Name:    "เกรซ ผู้รับ",
					Address: "grace.phurab@example.com",
				},
			},
			MessageID: "Message-Id-1@example.com",
			InReplyTo: []string{
				"Message-Id-0@example.com",
			},
			References: []string{
				"Message-Id-0@example.com",
			},
			Subject:  "📧 Test แพนแกรมภาษาไทย",
			Comments: "Message Header Comment",
			Keywords: []string{
				"Keyword 1",
				"Keyword 2",
			},
			ResentDate: time.Time(time.Date(2019, 4, 1, 0, 55, 0, 0, time.UTC)),
			ResentFrom: []*mail.Address{
				&mail.Address{
					Name:    "อลิซ ผู้ส่งจดหมาย",
					Address: "alis.phusngcdhmay@example.net",
				},
				&mail.Address{
					Name:    "อลิซ ผู้ส่งจดหมาย",
					Address: "alis.phusngcdhmay@example.com",
				},
			},
			ResentSender: &mail.Address{
				Name:    "อลิซ ผู้ส่งจดหมาย",
				Address: "alis.phusngcdhmay@example.net",
			},
			ResentTo: []*mail.Address{
				&mail.Address{
					Name:    "บ๊อบ ผู้รับ",
					Address: "bob.phurab@example.net",
				},
				&mail.Address{
					Name:    "คาโรล ผู้รับ",
					Address: "carol.phurab@example.net",
				},
			},
			ResentCc: []*mail.Address{
				&mail.Address{
					Name:    "แดน ผู้รับ",
					Address: "dan.phurab@example.net",
				},
				&mail.Address{
					Name:    "อีฟ ผู้รับ",
					Address: "eve.phurab@example.net",
				},
			},
			ResentBcc: []*mail.Address{
				&mail.Address{
					Name:    "แฟรงค์ ผู้รับ",
					Address: "frank.phurab@example.net",
				},
				&mail.Address{
					Name:    "เกรซ ผู้รับ",
					Address: "grace.phurab@example.net",
				},
			},
			ResentMessageID: "Message-Id-1@example.net",
			ExtraHeaders: map[string][]string{
				"X-Clacks-Overhead": []string{
					"GNU Terry Pratchett",
				},
			},
			ContentInfo: &email.ContentInfo{
				Type: "text/plain",
				TypeParams: map[string]string{
					"charset": "iso-8859-11",
				},
				Disposition:       "",
				DispositionParams: map[string]string(nil),
				TransferEncoding:  "base64",
				ID:                "",
				Charset:           "iso-8859-11",
			},
			Received: nil,
		},
		Text: "เป็นมนุษย์สุดประเสริฐเลิศคุณค่า กว่าบรรดาฝูงสัตว์เดรัจฉาน จงฝ่าฟันพัฒนาวิชาการ อย่าล้างผลาญฤๅเข่นฆ่าบีฑาใคร ไม่ถือโทษโกรธแช่งซัดฮึดฮัดด่า หัดอภัยเหมือนกีฬาอัชฌาสัย ปฏิบัติประพฤติกฎกำหนดใจ พูดจาให้จ๊ะๆ จ๋าๆ น่าฟังเอยฯ\n" +
			"\n" +
			"นายสังฆภัณฑ์ เฮงพิทักษ์ฝั่ง ผู้เฒ่าซึ่งมีอาชีพเป็นฅนขายฃวด ถูกตำรวจปฏิบัติการจับฟ้องศาล ฐานลักนาฬิกาคุณหญิงฉัตรชฎา ฌานสมาธิ",
		EnrichedText: "",
		HTML:         "",
		Files:        nil,
	}
	testEmailFromFile(t, fp, expectedEmail)
}

func TestParseEmailThaiPlaintextIso885911OverQuotedprintable(t *testing.T) {
	fp := "tests/test_thai_plaintext_iso-8859-11_over_quoted-printable.txt"
	expectedEmail := &email.Email{
		Headers: email.Headers{
			Date: time.Time(time.Date(2019, 4, 1, 0, 55, 0, 0, time.UTC)),
			Sender: &mail.Address{
				Name:    "อลิซ ผู้ส่งจดหมาย",
				Address: "alis.phusngcdhmay@example.com",
			},
			From: []*mail.Address{
				&mail.Address{
					Name:    "อลิซ ผู้ส่งจดหมาย",
					Address: "alis.phusngcdhmay@example.com",
				},
				&mail.Address{
					Name:    "อลิซ ผู้ส่งจดหมาย",
					Address: "alis.phusngcdhmay@example.net",
				},
			},
			ReplyTo: []*mail.Address{
				&mail.Address{
					Name:    "อลิซ ผู้ส่งจดหมาย",
					Address: "alis.phusngcdhmay@example.net",
				},
			},
			To: []*mail.Address{
				&mail.Address{
					Name:    "บ๊อบ ผู้รับ",
					Address: "bob.phurab@example.com",
				},
				&mail.Address{
					Name:    "คาโรล ผู้รับ",
					Address: "carol.phurab@example.com",
				},
			},
			Cc: []*mail.Address{
				&mail.Address{
					Name:    "แดน ผู้รับ",
					Address: "dan.phurab@example.com",
				},
				&mail.Address{
					Name:    "อีฟ ผู้รับ",
					Address: "eve.phurab@example.com",
				},
			},
			Bcc: []*mail.Address{
				&mail.Address{
					Name:    "แฟรงค์ ผู้รับ",
					Address: "frank.phurab@example.com",
				},
				&mail.Address{
					Name:    "เกรซ ผู้รับ",
					Address: "grace.phurab@example.com",
				},
			},
			MessageID: "Message-Id-1@example.com",
			InReplyTo: []string{
				"Message-Id-0@example.com",
			},
			References: []string{
				"Message-Id-0@example.com",
			},
			Subject:  "📧 Test แพนแกรมภาษาไทย",
			Comments: "Message Header Comment",
			Keywords: []string{
				"Keyword 1",
				"Keyword 2",
			},
			ResentDate: time.Time(time.Date(2019, 4, 1, 0, 55, 0, 0, time.UTC)),
			ResentFrom: []*mail.Address{
				&mail.Address{
					Name:    "อลิซ ผู้ส่งจดหมาย",
					Address: "alis.phusngcdhmay@example.net",
				},
				&mail.Address{
					Name:    "อลิซ ผู้ส่งจดหมาย",
					Address: "alis.phusngcdhmay@example.com",
				},
			},
			ResentSender: &mail.Address{
				Name:    "อลิซ ผู้ส่งจดหมาย",
				Address: "alis.phusngcdhmay@example.net",
			},
			ResentTo: []*mail.Address{
				&mail.Address{
					Name:    "บ๊อบ ผู้รับ",
					Address: "bob.phurab@example.net",
				},
				&mail.Address{
					Name:    "คาโรล ผู้รับ",
					Address: "carol.phurab@example.net",
				},
			},
			ResentCc: []*mail.Address{
				&mail.Address{
					Name:    "แดน ผู้รับ",
					Address: "dan.phurab@example.net",
				},
				&mail.Address{
					Name:    "อีฟ ผู้รับ",
					Address: "eve.phurab@example.net",
				},
			},
			ResentBcc: []*mail.Address{
				&mail.Address{
					Name:    "แฟรงค์ ผู้รับ",
					Address: "frank.phurab@example.net",
				},
				&mail.Address{
					Name:    "เกรซ ผู้รับ",
					Address: "grace.phurab@example.net",
				},
			},
			ResentMessageID: "Message-Id-1@example.net",
			ExtraHeaders: map[string][]string{
				"X-Clacks-Overhead": []string{
					"GNU Terry Pratchett",
				},
			},
			ContentInfo: &email.ContentInfo{
				Type: "text/plain",
				TypeParams: map[string]string{
					"charset": "iso-8859-11",
				},
				Disposition:       "",
				DispositionParams: map[string]string(nil),
				TransferEncoding:  "quoted-printable",
				ID:                "",
				Charset:           "iso-8859-11",
			},
			Received: nil,
		},
		Text: "เป็นมนุษย์สุดประเสริฐเลิศคุณค่า กว่าบรรดาฝูงสัตว์เดรัจฉาน จงฝ่าฟันพัฒนาวิชาการ อย่าล้างผลาญฤๅเข่นฆ่าบีฑาใคร ไม่ถือโทษโกรธแช่งซัดฮึดฮัดด่า หัดอภัยเหมือนกีฬาอัชฌาสัย ปฏิบัติประพฤติกฎกำหนดใจ พูดจาให้จ๊ะๆ จ๋าๆ น่าฟังเอยฯ\n" +
			"\n" +
			"นายสังฆภัณฑ์ เฮงพิทักษ์ฝั่ง ผู้เฒ่าซึ่งมีอาชีพเป็นฅนขายฃวด ถูกตำรวจปฏิบัติการจับฟ้องศาล ฐานลักนาฬิกาคุณหญิงฉัตรชฎา ฌานสมาธิ",
		EnrichedText: "",
		HTML:         "",
		Files:        nil,
	}
	testEmailFromFile(t, fp, expectedEmail)
}

func TestParseEmailThaiPlaintextWindows874OverBase64(t *testing.T) {
	fp := "tests/test_thai_plaintext_windows-874_over_base64.txt"
	expectedEmail := &email.Email{
		Headers: email.Headers{
			Date: time.Time(time.Date(2019, 4, 1, 0, 55, 0, 0, time.UTC)),
			Sender: &mail.Address{
				Name:    "อลิซ ผู้ส่งจดหมาย",
				Address: "alis.phusngcdhmay@example.com",
			},
			From: []*mail.Address{
				&mail.Address{
					Name:    "อลิซ ผู้ส่งจดหมาย",
					Address: "alis.phusngcdhmay@example.com",
				},
				&mail.Address{
					Name:    "อลิซ ผู้ส่งจดหมาย",
					Address: "alis.phusngcdhmay@example.net",
				},
			},
			ReplyTo: []*mail.Address{
				&mail.Address{
					Name:    "อลิซ ผู้ส่งจดหมาย",
					Address: "alis.phusngcdhmay@example.net",
				},
			},
			To: []*mail.Address{
				&mail.Address{
					Name:    "บ๊อบ ผู้รับ",
					Address: "bob.phurab@example.com",
				},
				&mail.Address{
					Name:    "คาโรล ผู้รับ",
					Address: "carol.phurab@example.com",
				},
			},
			Cc: []*mail.Address{
				&mail.Address{
					Name:    "แดน ผู้รับ",
					Address: "dan.phurab@example.com",
				},
				&mail.Address{
					Name:    "อีฟ ผู้รับ",
					Address: "eve.phurab@example.com",
				},
			},
			Bcc: []*mail.Address{
				&mail.Address{
					Name:    "แฟรงค์ ผู้รับ",
					Address: "frank.phurab@example.com",
				},
				&mail.Address{
					Name:    "เกรซ ผู้รับ",
					Address: "grace.phurab@example.com",
				},
			},
			MessageID: "Message-Id-1@example.com",
			InReplyTo: []string{
				"Message-Id-0@example.com",
			},
			References: []string{
				"Message-Id-0@example.com",
			},
			Subject:  "📧 Test แพนแกรมภาษาไทย",
			Comments: "Message Header Comment",
			Keywords: []string{
				"Keyword 1",
				"Keyword 2",
			},
			ResentDate: time.Time(time.Date(2019, 4, 1, 0, 55, 0, 0, time.UTC)),
			ResentFrom: []*mail.Address{
				&mail.Address{
					Name:    "อลิซ ผู้ส่งจดหมาย",
					Address: "alis.phusngcdhmay@example.net",
				},
				&mail.Address{
					Name:    "อลิซ ผู้ส่งจดหมาย",
					Address: "alis.phusngcdhmay@example.com",
				},
			},
			ResentSender: &mail.Address{
				Name:    "อลิซ ผู้ส่งจดหมาย",
				Address: "alis.phusngcdhmay@example.net",
			},
			ResentTo: []*mail.Address{
				&mail.Address{
					Name:    "บ๊อบ ผู้รับ",
					Address: "bob.phurab@example.net",
				},
				&mail.Address{
					Name:    "คาโรล ผู้รับ",
					Address: "carol.phurab@example.net",
				},
			},
			ResentCc: []*mail.Address{
				&mail.Address{
					Name:    "แดน ผู้รับ",
					Address: "dan.phurab@example.net",
				},
				&mail.Address{
					Name:    "อีฟ ผู้รับ",
					Address: "eve.phurab@example.net",
				},
			},
			ResentBcc: []*mail.Address{
				&mail.Address{
					Name:    "แฟรงค์ ผู้รับ",
					Address: "frank.phurab@example.net",
				},
				&mail.Address{
					Name:    "เกรซ ผู้รับ",
					Address: "grace.phurab@example.net",
				},
			},
			ResentMessageID: "Message-Id-1@example.net",
			ExtraHeaders: map[string][]string{
				"X-Clacks-Overhead": []string{
					"GNU Terry Pratchett",
				},
			},
			ContentInfo: &email.ContentInfo{
				Type: "text/plain",
				TypeParams: map[string]string{
					"charset": "windows-874",
				},
				Disposition:       "",
				DispositionParams: map[string]string(nil),
				TransferEncoding:  "base64",
				ID:                "",
				Charset:           "windows-874",
			},
			Received: nil,
		},
		Text: "เป็นมนุษย์สุดประเสริฐเลิศคุณค่า กว่าบรรดาฝูงสัตว์เดรัจฉาน จงฝ่าฟันพัฒนาวิชาการ อย่าล้างผลาญฤๅเข่นฆ่าบีฑาใคร ไม่ถือโทษโกรธแช่งซัดฮึดฮัดด่า หัดอภัยเหมือนกีฬาอัชฌาสัย ปฏิบัติประพฤติกฎกำหนดใจ พูดจาให้จ๊ะๆ จ๋าๆ น่าฟังเอยฯ\n" +
			"\n" +
			"นายสังฆภัณฑ์ เฮงพิทักษ์ฝั่ง ผู้เฒ่าซึ่งมีอาชีพเป็นฅนขายฃวด ถูกตำรวจปฏิบัติการจับฟ้องศาล ฐานลักนาฬิกาคุณหญิงฉัตรชฎา ฌานสมาธิ",
		EnrichedText: "",
		HTML:         "",
		Files:        nil,
	}
	testEmailFromFile(t, fp, expectedEmail)
}

func TestParseEmailThaiPlaintextWindows874OverQuotedprintable(t *testing.T) {
	fp := "tests/test_thai_plaintext_windows-874_over_quoted-printable.txt"
	expectedEmail := &email.Email{
		Headers: email.Headers{
			Date: time.Time(time.Date(2019, 4, 1, 0, 55, 0, 0, time.UTC)),
			Sender: &mail.Address{
				Name:    "อลิซ ผู้ส่งจดหมาย",
				Address: "alis.phusngcdhmay@example.com",
			},
			From: []*mail.Address{
				&mail.Address{
					Name:    "อลิซ ผู้ส่งจดหมาย",
					Address: "alis.phusngcdhmay@example.com",
				},
				&mail.Address{
					Name:    "อลิซ ผู้ส่งจดหมาย",
					Address: "alis.phusngcdhmay@example.net",
				},
			},
			ReplyTo: []*mail.Address{
				&mail.Address{
					Name:    "อลิซ ผู้ส่งจดหมาย",
					Address: "alis.phusngcdhmay@example.net",
				},
			},
			To: []*mail.Address{
				&mail.Address{
					Name:    "บ๊อบ ผู้รับ",
					Address: "bob.phurab@example.com",
				},
				&mail.Address{
					Name:    "คาโรล ผู้รับ",
					Address: "carol.phurab@example.com",
				},
			},
			Cc: []*mail.Address{
				&mail.Address{
					Name:    "แดน ผู้รับ",
					Address: "dan.phurab@example.com",
				},
				&mail.Address{
					Name:    "อีฟ ผู้รับ",
					Address: "eve.phurab@example.com",
				},
			},
			Bcc: []*mail.Address{
				&mail.Address{
					Name:    "แฟรงค์ ผู้รับ",
					Address: "frank.phurab@example.com",
				},
				&mail.Address{
					Name:    "เกรซ ผู้รับ",
					Address: "grace.phurab@example.com",
				},
			},
			MessageID: "Message-Id-1@example.com",
			InReplyTo: []string{
				"Message-Id-0@example.com",
			},
			References: []string{
				"Message-Id-0@example.com",
			},
			Subject:  "📧 Test แพนแกรมภาษาไทย",
			Comments: "Message Header Comment",
			Keywords: []string{
				"Keyword 1",
				"Keyword 2",
			},
			ResentDate: time.Time(time.Date(2019, 4, 1, 0, 55, 0, 0, time.UTC)),
			ResentFrom: []*mail.Address{
				&mail.Address{
					Name:    "อลิซ ผู้ส่งจดหมาย",
					Address: "alis.phusngcdhmay@example.net",
				},
				&mail.Address{
					Name:    "อลิซ ผู้ส่งจดหมาย",
					Address: "alis.phusngcdhmay@example.com",
				},
			},
			ResentSender: &mail.Address{
				Name:    "อลิซ ผู้ส่งจดหมาย",
				Address: "alis.phusngcdhmay@example.net",
			},
			ResentTo: []*mail.Address{
				&mail.Address{
					Name:    "บ๊อบ ผู้รับ",
					Address: "bob.phurab@example.net",
				},
				&mail.Address{
					Name:    "คาโรล ผู้รับ",
					Address: "carol.phurab@example.net",
				},
			},
			ResentCc: []*mail.Address{
				&mail.Address{
					Name:    "แดน ผู้รับ",
					Address: "dan.phurab@example.net",
				},
				&mail.Address{
					Name:    "อีฟ ผู้รับ",
					Address: "eve.phurab@example.net",
				},
			},
			ResentBcc: []*mail.Address{
				&mail.Address{
					Name:    "แฟรงค์ ผู้รับ",
					Address: "frank.phurab@example.net",
				},
				&mail.Address{
					Name:    "เกรซ ผู้รับ",
					Address: "grace.phurab@example.net",
				},
			},
			ResentMessageID: "Message-Id-1@example.net",
			ExtraHeaders: map[string][]string{
				"X-Clacks-Overhead": []string{
					"GNU Terry Pratchett",
				},
			},
			ContentInfo: &email.ContentInfo{
				Type: "text/plain",
				TypeParams: map[string]string{
					"charset": "windows-874",
				},
				Disposition:       "",
				DispositionParams: map[string]string(nil),
				TransferEncoding:  "quoted-printable",
				ID:                "",
				Charset:           "windows-874",
			},
			Received: nil,
		},
		Text: "เป็นมนุษย์สุดประเสริฐเลิศคุณค่า กว่าบรรดาฝูงสัตว์เดรัจฉาน จงฝ่าฟันพัฒนาวิชาการ อย่าล้างผลาญฤๅเข่นฆ่าบีฑาใคร ไม่ถือโทษโกรธแช่งซัดฮึดฮัดด่า หัดอภัยเหมือนกีฬาอัชฌาสัย ปฏิบัติประพฤติกฎกำหนดใจ พูดจาให้จ๊ะๆ จ๋าๆ น่าฟังเอยฯ\n" +
			"\n" +
			"นายสังฆภัณฑ์ เฮงพิทักษ์ฝั่ง ผู้เฒ่าซึ่งมีอาชีพเป็นฅนขายฃวด ถูกตำรวจปฏิบัติการจับฟ้องศาล ฐานลักนาฬิกาคุณหญิงฉัตรชฎา ฌานสมาธิ",
		EnrichedText: "",
		HTML:         "",
		Files:        nil,
	}
	testEmailFromFile(t, fp, expectedEmail)
}

func TestParseEmailThaiPlaintextTis620OverBase64(t *testing.T) {
	fp := "tests/test_thai_plaintext_tis-620_over_base64.txt"
	expectedEmail := &email.Email{
		Headers: email.Headers{
			Date: time.Time(time.Date(2019, 4, 1, 0, 55, 0, 0, time.UTC)),
			Sender: &mail.Address{
				Name:    "อลิซ ผู้ส่งจดหมาย",
				Address: "alis.phusngcdhmay@example.com",
			},
			From: []*mail.Address{
				&mail.Address{
					Name:    "อลิซ ผู้ส่งจดหมาย",
					Address: "alis.phusngcdhmay@example.com",
				},
				&mail.Address{
					Name:    "อลิซ ผู้ส่งจดหมาย",
					Address: "alis.phusngcdhmay@example.net",
				},
			},
			ReplyTo: []*mail.Address{
				&mail.Address{
					Name:    "อลิซ ผู้ส่งจดหมาย",
					Address: "alis.phusngcdhmay@example.net",
				},
			},
			To: []*mail.Address{
				&mail.Address{
					Name:    "บ๊อบ ผู้รับ",
					Address: "bob.phurab@example.com",
				},
				&mail.Address{
					Name:    "คาโรล ผู้รับ",
					Address: "carol.phurab@example.com",
				},
			},
			Cc: []*mail.Address{
				&mail.Address{
					Name:    "แดน ผู้รับ",
					Address: "dan.phurab@example.com",
				},
				&mail.Address{
					Name:    "อีฟ ผู้รับ",
					Address: "eve.phurab@example.com",
				},
			},
			Bcc: []*mail.Address{
				&mail.Address{
					Name:    "แฟรงค์ ผู้รับ",
					Address: "frank.phurab@example.com",
				},
				&mail.Address{
					Name:    "เกรซ ผู้รับ",
					Address: "grace.phurab@example.com",
				},
			},
			MessageID: "Message-Id-1@example.com",
			InReplyTo: []string{
				"Message-Id-0@example.com",
			},
			References: []string{
				"Message-Id-0@example.com",
			},
			Subject:  "📧 Test แพนแกรมภาษาไทย",
			Comments: "Message Header Comment",
			Keywords: []string{
				"Keyword 1",
				"Keyword 2",
			},
			ResentDate: time.Time(time.Date(2019, 4, 1, 0, 55, 0, 0, time.UTC)),
			ResentFrom: []*mail.Address{
				&mail.Address{
					Name:    "อลิซ ผู้ส่งจดหมาย",
					Address: "alis.phusngcdhmay@example.net",
				},
				&mail.Address{
					Name:    "อลิซ ผู้ส่งจดหมาย",
					Address: "alis.phusngcdhmay@example.com",
				},
			},
			ResentSender: &mail.Address{
				Name:    "อลิซ ผู้ส่งจดหมาย",
				Address: "alis.phusngcdhmay@example.net",
			},
			ResentTo: []*mail.Address{
				&mail.Address{
					Name:    "บ๊อบ ผู้รับ",
					Address: "bob.phurab@example.net",
				},
				&mail.Address{
					Name:    "คาโรล ผู้รับ",
					Address: "carol.phurab@example.net",
				},
			},
			ResentCc: []*mail.Address{
				&mail.Address{
					Name:    "แดน ผู้รับ",
					Address: "dan.phurab@example.net",
				},
				&mail.Address{
					Name:    "อีฟ ผู้รับ",
					Address: "eve.phurab@example.net",
				},
			},
			ResentBcc: []*mail.Address{
				&mail.Address{
					Name:    "แฟรงค์ ผู้รับ",
					Address: "frank.phurab@example.net",
				},
				&mail.Address{
					Name:    "เกรซ ผู้รับ",
					Address: "grace.phurab@example.net",
				},
			},
			ResentMessageID: "Message-Id-1@example.net",
			ExtraHeaders: map[string][]string{
				"X-Clacks-Overhead": []string{
					"GNU Terry Pratchett",
				},
			},
			ContentInfo: &email.ContentInfo{
				Type: "text/plain",
				TypeParams: map[string]string{
					"charset": "tis-620",
				},
				Disposition:       "",
				DispositionParams: map[string]string(nil),
				TransferEncoding:  "base64",
				ID:                "",
				Charset:           "tis-620",
			},
			Received: nil,
		},
		Text: "เป็นมนุษย์สุดประเสริฐเลิศคุณค่า กว่าบรรดาฝูงสัตว์เดรัจฉาน จงฝ่าฟันพัฒนาวิชาการ อย่าล้างผลาญฤๅเข่นฆ่าบีฑาใคร ไม่ถือโทษโกรธแช่งซัดฮึดฮัดด่า หัดอภัยเหมือนกีฬาอัชฌาสัย ปฏิบัติประพฤติกฎกำหนดใจ พูดจาให้จ๊ะๆ จ๋าๆ น่าฟังเอยฯ\n" +
			"\n" +
			"นายสังฆภัณฑ์ เฮงพิทักษ์ฝั่ง ผู้เฒ่าซึ่งมีอาชีพเป็นฅนขายฃวด ถูกตำรวจปฏิบัติการจับฟ้องศาล ฐานลักนาฬิกาคุณหญิงฉัตรชฎา ฌานสมาธิ",
		EnrichedText: "",
		HTML:         "",
		Files:        nil,
	}
	testEmailFromFile(t, fp, expectedEmail)
}

func TestParseEmailThaiPlaintextTis620OverQuotedprintable(t *testing.T) {
	fp := "tests/test_thai_plaintext_tis-620_over_quoted-printable.txt"
	expectedEmail := &email.Email{
		Headers: email.Headers{
			Date: time.Time(time.Date(2019, 4, 1, 0, 55, 0, 0, time.UTC)),
			Sender: &mail.Address{
				Name:    "อลิซ ผู้ส่งจดหมาย",
				Address: "alis.phusngcdhmay@example.com",
			},
			From: []*mail.Address{
				&mail.Address{
					Name:    "อลิซ ผู้ส่งจดหมาย",
					Address: "alis.phusngcdhmay@example.com",
				},
				&mail.Address{
					Name:    "อลิซ ผู้ส่งจดหมาย",
					Address: "alis.phusngcdhmay@example.net",
				},
			},
			ReplyTo: []*mail.Address{
				&mail.Address{
					Name:    "อลิซ ผู้ส่งจดหมาย",
					Address: "alis.phusngcdhmay@example.net",
				},
			},
			To: []*mail.Address{
				&mail.Address{
					Name:    "บ๊อบ ผู้รับ",
					Address: "bob.phurab@example.com",
				},
				&mail.Address{
					Name:    "คาโรล ผู้รับ",
					Address: "carol.phurab@example.com",
				},
			},
			Cc: []*mail.Address{
				&mail.Address{
					Name:    "แดน ผู้รับ",
					Address: "dan.phurab@example.com",
				},
				&mail.Address{
					Name:    "อีฟ ผู้รับ",
					Address: "eve.phurab@example.com",
				},
			},
			Bcc: []*mail.Address{
				&mail.Address{
					Name:    "แฟรงค์ ผู้รับ",
					Address: "frank.phurab@example.com",
				},
				&mail.Address{
					Name:    "เกรซ ผู้รับ",
					Address: "grace.phurab@example.com",
				},
			},
			MessageID: "Message-Id-1@example.com",
			InReplyTo: []string{
				"Message-Id-0@example.com",
			},
			References: []string{
				"Message-Id-0@example.com",
			},
			Subject:  "📧 Test แพนแกรมภาษาไทย",
			Comments: "Message Header Comment",
			Keywords: []string{
				"Keyword 1",
				"Keyword 2",
			},
			ResentDate: time.Time(time.Date(2019, 4, 1, 0, 55, 0, 0, time.UTC)),
			ResentFrom: []*mail.Address{
				&mail.Address{
					Name:    "อลิซ ผู้ส่งจดหมาย",
					Address: "alis.phusngcdhmay@example.net",
				},
				&mail.Address{
					Name:    "อลิซ ผู้ส่งจดหมาย",
					Address: "alis.phusngcdhmay@example.com",
				},
			},
			ResentSender: &mail.Address{
				Name:    "อลิซ ผู้ส่งจดหมาย",
				Address: "alis.phusngcdhmay@example.net",
			},
			ResentTo: []*mail.Address{
				&mail.Address{
					Name:    "บ๊อบ ผู้รับ",
					Address: "bob.phurab@example.net",
				},
				&mail.Address{
					Name:    "คาโรล ผู้รับ",
					Address: "carol.phurab@example.net",
				},
			},
			ResentCc: []*mail.Address{
				&mail.Address{
					Name:    "แดน ผู้รับ",
					Address: "dan.phurab@example.net",
				},
				&mail.Address{
					Name:    "อีฟ ผู้รับ",
					Address: "eve.phurab@example.net",
				},
			},
			ResentBcc: []*mail.Address{
				&mail.Address{
					Name:    "แฟรงค์ ผู้รับ",
					Address: "frank.phurab@example.net",
				},
				&mail.Address{
					Name:    "เกรซ ผู้รับ",
					Address: "grace.phurab@example.net",
				},
			},
			ResentMessageID: "Message-Id-1@example.net",
			ExtraHeaders: map[string][]string{
				"X-Clacks-Overhead": []string{
					"GNU Terry Pratchett",
				},
			},
			ContentInfo: &email.ContentInfo{
				Type: "text/plain",
				TypeParams: map[string]string{
					"charset": "tis-620",
				},
				Disposition:       "",
				DispositionParams: map[string]string(nil),
				TransferEncoding:  "quoted-printable",
				ID:                "",
				Charset:           "tis-620",
			},
			Received: nil,
		},
		Text: "เป็นมนุษย์สุดประเสริฐเลิศคุณค่า กว่าบรรดาฝูงสัตว์เดรัจฉาน จงฝ่าฟันพัฒนาวิชาการ อย่าล้างผลาญฤๅเข่นฆ่าบีฑาใคร ไม่ถือโทษโกรธแช่งซัดฮึดฮัดด่า หัดอภัยเหมือนกีฬาอัชฌาสัย ปฏิบัติประพฤติกฎกำหนดใจ พูดจาให้จ๊ะๆ จ๋าๆ น่าฟังเอยฯ\n" +
			"\n" +
			"นายสังฆภัณฑ์ เฮงพิทักษ์ฝั่ง ผู้เฒ่าซึ่งมีอาชีพเป็นฅนขายฃวด ถูกตำรวจปฏิบัติการจับฟ้องศาล ฐานลักนาฬิกาคุณหญิงฉัตรชฎา ฌานสมาธิ",
		EnrichedText: "",
		HTML:         "",
		Files:        nil,
	}
	testEmailFromFile(t, fp, expectedEmail)
}

func TestParseEmailThaiMultipartRelatedIso885911OverBase64(t *testing.T) {
	fp := "tests/test_thai_multipart_related_iso-8859-11_over_base64.txt"
	expectedEmail := &email.Email{
		Headers: email.Headers{
			Date: time.Time(time.Date(2019, 4, 1, 0, 55, 0, 0, time.UTC)),
			Sender: &mail.Address{
				Name:    "อลิซ ผู้ส่งจดหมาย",
				Address: "alis.phusngcdhmay@example.com",
			},
			From: []*mail.Address{
				&mail.Address{
					Name:    "อลิซ ผู้ส่งจดหมาย",
					Address: "alis.phusngcdhmay@example.com",
				},
				&mail.Address{
					Name:    "อลิซ ผู้ส่งจดหมาย",
					Address: "alis.phusngcdhmay@example.net",
				},
			},
			ReplyTo: []*mail.Address{
				&mail.Address{
					Name:    "อลิซ ผู้ส่งจดหมาย",
					Address: "alis.phusngcdhmay@example.net",
				},
			},
			To: []*mail.Address{
				&mail.Address{
					Name:    "บ๊อบ ผู้รับ",
					Address: "bob.phurab@example.com",
				},
				&mail.Address{
					Name:    "คาโรล ผู้รับ",
					Address: "carol.phurab@example.com",
				},
			},
			Cc: []*mail.Address{
				&mail.Address{
					Name:    "แดน ผู้รับ",
					Address: "dan.phurab@example.com",
				},
				&mail.Address{
					Name:    "อีฟ ผู้รับ",
					Address: "eve.phurab@example.com",
				},
			},
			Bcc: []*mail.Address{
				&mail.Address{
					Name:    "แฟรงค์ ผู้รับ",
					Address: "frank.phurab@example.com",
				},
				&mail.Address{
					Name:    "เกรซ ผู้รับ",
					Address: "grace.phurab@example.com",
				},
			},
			MessageID: "Message-Id-1@example.com",
			InReplyTo: []string{
				"Message-Id-0@example.com",
			},
			References: []string{
				"Message-Id-0@example.com",
			},
			Subject:  "📧 Test แพนแกรมภาษาไทย",
			Comments: "Message Header Comment",
			Keywords: []string{
				"Keyword 1",
				"Keyword 2",
			},
			ResentDate: time.Time(time.Date(2019, 4, 1, 0, 55, 0, 0, time.UTC)),
			ResentFrom: []*mail.Address{
				&mail.Address{
					Name:    "อลิซ ผู้ส่งจดหมาย",
					Address: "alis.phusngcdhmay@example.net",
				},
				&mail.Address{
					Name:    "อลิซ ผู้ส่งจดหมาย",
					Address: "alis.phusngcdhmay@example.com",
				},
			},
			ResentSender: &mail.Address{
				Name:    "อลิซ ผู้ส่งจดหมาย",
				Address: "alis.phusngcdhmay@example.net",
			},
			ResentTo: []*mail.Address{
				&mail.Address{
					Name:    "บ๊อบ ผู้รับ",
					Address: "bob.phurab@example.net",
				},
				&mail.Address{
					Name:    "คาโรล ผู้รับ",
					Address: "carol.phurab@example.net",
				},
			},
			ResentCc: []*mail.Address{
				&mail.Address{
					Name:    "แดน ผู้รับ",
					Address: "dan.phurab@example.net",
				},
				&mail.Address{
					Name:    "อีฟ ผู้รับ",
					Address: "eve.phurab@example.net",
				},
			},
			ResentBcc: []*mail.Address{
				&mail.Address{
					Name:    "แฟรงค์ ผู้รับ",
					Address: "frank.phurab@example.net",
				},
				&mail.Address{
					Name:    "เกรซ ผู้รับ",
					Address: "grace.phurab@example.net",
				},
			},
			ResentMessageID: "Message-Id-1@example.net",
			ExtraHeaders: map[string][]string{
				"X-Clacks-Overhead": []string{
					"GNU Terry Pratchett",
				},
			},
			ContentInfo: &email.ContentInfo{
				Type: "multipart/related",
				TypeParams: map[string]string{
					"boundary": "RelatedBoundaryString",
					"charset":  "iso-8859-11",
				},
				Disposition:       "",
				DispositionParams: map[string]string(nil), // p0
				TransferEncoding:  "base64",
				ID:                "",
				Charset:           "iso-8859-11",
			},
			Received: nil,
		},
		Text: "เป็นมนุษย์สุดประเสริฐเลิศคุณค่า กว่าบรรดาฝูงสัตว์เดรัจฉาน จงฝ่าฟันพัฒนาวิชาการ อย่าล้างผลาญฤๅเข่นฆ่าบีฑาใคร ไม่ถือโทษโกรธแช่งซัดฮึดฮัดด่า หัดอภัยเหมือนกีฬาอัชฌาสัย ปฏิบัติประพฤติกฎกำหนดใจ พูดจาให้จ๊ะๆ จ๋าๆ น่าฟังเอยฯ\n" +
			"\n" +
			"นายสังฆภัณฑ์ เฮงพิทักษ์ฝั่ง ผู้เฒ่าซึ่งมีอาชีพเป็นฅนขายฃวด ถูกตำรวจปฏิบัติการจับฟ้องศาล ฐานลักนาฬิกาคุณหญิงฉัตรชฎา ฌานสมาธิ",
		EnrichedText: "<bold>เป็นมนุษย์สุดประเสริฐเลิศคุณค่า</bold> <italic>กว่าบรรดาฝูงสัตว์เดรัจฉาน</italic> <fixed>จงฝ่าฟันพัฒนาวิชาการ</fixed> <underline>อย่าล้างผลาญฤๅเข่นฆ่าบีฑาใคร</underline> ไม่ถือโทษโกรธแช่งซัดฮึดฮัดด่า หัดอภัยเหมือนกีฬาอัชฌาสัย ปฏิบัติประพฤติกฎกำหนดใจ พูดจาให้จ๊ะๆ จ๋าๆ น่าฟังเอยฯ\n" +
			"\n" +
			"นายสังฆภัณฑ์ เฮงพิทักษ์ฝั่ง ผู้เฒ่าซึ่งมีอาชีพเป็นฅนขายฃวด ถูกตำรวจปฏิบัติการจับฟ้องศาล ฐานลักนาฬิกาคุณหญิงฉัตรชฎา ฌานสมาธิ",
		HTML: "<html>\n" +
			"<div dir=\"ltr\">\n" +
			"<p>เป็นมนุษย์สุดประเสริฐเลิศคุณค่า กว่าบรรดาฝูงสัตว์เดรัจฉาน จงฝ่าฟันพัฒนาวิชาการ อย่าล้างผลาญฤๅเข่นฆ่าบีฑาใคร ไม่ถือโทษโกรธแช่งซัดฮึดฮัดด่า หัดอภัยเหมือนกีฬาอัชฌาสัย ปฏิบัติประพฤติกฎกำหนดใจ พูดจาให้จ๊ะๆ จ๋าๆ น่าฟังเอยฯ</p>\n" +
			"\n" +
			"<p>นายสังฆภัณฑ์ เฮงพิทักษ์ฝั่ง ผู้เฒ่าซึ่งมีอาชีพเป็นฅนขายฃวด ถูกตำรวจปฏิบัติการจับฟ้องศาล ฐานลักนาฬิกาคุณหญิงฉัตรชฎา ฌานสมาธิ</p>\n" +
			"</div>\n" +
			"</html>",
		Files: []*email.File{
			&email.File{
				FileType: "inline",
				Name:     "inline-jpg-image-filename.jpg",
				ContentInfo: &email.ContentInfo{
					Type: "image/jpeg",
					TypeParams: map[string]string{
						"name": "inline-jpg-image-name.jpg",
					},
					Disposition: "inline",
					DispositionParams: map[string]string{
						"filename": "inline-jpg-image-filename.jpg",
					},
					TransferEncoding: "base64",
					ID:               "inline-jpg-image.jpg@example.com",
					Charset:          "iso-8859-11",
				},
				Data: []byte{
					239, 191, 189, 224, 184, 184, 239, 191, 189, 239, 191, 189, 0, 67, 0, 3, 2, 2, 2,
					2, 2, 3, 2, 2, 2, 3, 3, 3, 3, 4, 6, 4, 4, 4, 4, 4, 8, 6, 6, 5, 6, 9, 8, 10, 10, 9,
					8, 9, 9, 10, 12, 15, 12, 10, 11, 14, 11, 9, 9, 13, 17, 13, 14, 15, 16, 16, 17, 16,
					10, 12, 18, 19, 18, 16, 19, 15, 16, 16, 16, 239, 191, 189, 224, 184, 169, 0, 11,
					8, 0, 1, 0, 1, 1, 1, 17, 0, 239, 191, 189, 224, 184, 172, 0, 6, 0, 16, 16, 5, 239,
					191, 189, 224, 184, 186, 0, 8, 1, 1, 0, 0, 63, 0, 224, 184, 178, 224, 184, 175, 32,
					239, 191, 189, 224, 184, 185,
				},
			},
		},
	}
	testEmailFromFile(t, fp, expectedEmail)
}

func TestParseEmailThaiMultipartRelatedIso885911OverQuotedprintable(t *testing.T) {
	fp := "tests/test_thai_multipart_related_iso-8859-11_over_quoted-printable.txt"
	expectedEmail := &email.Email{
		Headers: email.Headers{
			Date: time.Time(time.Date(2019, 4, 1, 0, 55, 0, 0, time.UTC)),
			Sender: &mail.Address{
				Name:    "อลิซ ผู้ส่งจดหมาย",
				Address: "alis.phusngcdhmay@example.com",
			},
			From: []*mail.Address{
				&mail.Address{
					Name:    "อลิซ ผู้ส่งจดหมาย",
					Address: "alis.phusngcdhmay@example.com",
				},
				&mail.Address{
					Name:    "อลิซ ผู้ส่งจดหมาย",
					Address: "alis.phusngcdhmay@example.net",
				},
			},
			ReplyTo: []*mail.Address{
				&mail.Address{
					Name:    "อลิซ ผู้ส่งจดหมาย",
					Address: "alis.phusngcdhmay@example.net",
				},
			},
			To: []*mail.Address{
				&mail.Address{
					Name:    "บ๊อบ ผู้รับ",
					Address: "bob.phurab@example.com",
				},
				&mail.Address{
					Name:    "คาโรล ผู้รับ",
					Address: "carol.phurab@example.com",
				},
			},
			Cc: []*mail.Address{
				&mail.Address{
					Name:    "แดน ผู้รับ",
					Address: "dan.phurab@example.com",
				},
				&mail.Address{
					Name:    "อีฟ ผู้รับ",
					Address: "eve.phurab@example.com",
				},
			},
			Bcc: []*mail.Address{
				&mail.Address{
					Name:    "แฟรงค์ ผู้รับ",
					Address: "frank.phurab@example.com",
				},
				&mail.Address{
					Name:    "เกรซ ผู้รับ",
					Address: "grace.phurab@example.com",
				},
			},
			MessageID: "Message-Id-1@example.com",
			InReplyTo: []string{
				"Message-Id-0@example.com",
			},
			References: []string{
				"Message-Id-0@example.com",
			},
			Subject:  "📧 Test แพนแกรมภาษาไทย",
			Comments: "Message Header Comment",
			Keywords: []string{
				"Keyword 1",
				"Keyword 2",
			},
			ResentDate: time.Time(time.Date(2019, 4, 1, 0, 55, 0, 0, time.UTC)),
			ResentFrom: []*mail.Address{
				&mail.Address{
					Name:    "อลิซ ผู้ส่งจดหมาย",
					Address: "alis.phusngcdhmay@example.net",
				},
				&mail.Address{
					Name:    "อลิซ ผู้ส่งจดหมาย",
					Address: "alis.phusngcdhmay@example.com",
				},
			},
			ResentSender: &mail.Address{
				Name:    "อลิซ ผู้ส่งจดหมาย",
				Address: "alis.phusngcdhmay@example.net",
			},
			ResentTo: []*mail.Address{
				&mail.Address{
					Name:    "บ๊อบ ผู้รับ",
					Address: "bob.phurab@example.net",
				},
				&mail.Address{
					Name:    "คาโรล ผู้รับ",
					Address: "carol.phurab@example.net",
				},
			},
			ResentCc: []*mail.Address{
				&mail.Address{
					Name:    "แดน ผู้รับ",
					Address: "dan.phurab@example.net",
				},
				&mail.Address{
					Name:    "อีฟ ผู้รับ",
					Address: "eve.phurab@example.net",
				},
			},
			ResentBcc: []*mail.Address{
				&mail.Address{
					Name:    "แฟรงค์ ผู้รับ",
					Address: "frank.phurab@example.net",
				},
				&mail.Address{
					Name:    "เกรซ ผู้รับ",
					Address: "grace.phurab@example.net",
				},
			},
			ResentMessageID: "Message-Id-1@example.net",
			ExtraHeaders: map[string][]string{
				"X-Clacks-Overhead": []string{
					"GNU Terry Pratchett",
				},
			},
			ContentInfo: &email.ContentInfo{
				Type: "multipart/related",
				TypeParams: map[string]string{
					"boundary": "RelatedBoundaryString",
					"charset":  "iso-8859-11",
				},
				Disposition:       "",
				DispositionParams: map[string]string(nil), // p0
				TransferEncoding:  "quoted-printable",
				ID:                "",
				Charset:           "iso-8859-11",
			},
			Received: nil,
		},
		Text: "เป็นมนุษย์สุดประเสริฐเลิศคุณค่า กว่าบรรดาฝูงสัตว์เดรัจฉาน จงฝ่าฟันพัฒนาวิชาการ อย่าล้างผลาญฤๅเข่นฆ่าบีฑาใคร ไม่ถือโทษโกรธแช่งซัดฮึดฮัดด่า หัดอภัยเหมือนกีฬาอัชฌาสัย ปฏิบัติประพฤติกฎกำหนดใจ พูดจาให้จ๊ะๆ จ๋าๆ น่าฟังเอยฯ\n" +
			"\n" +
			"นายสังฆภัณฑ์ เฮงพิทักษ์ฝั่ง ผู้เฒ่าซึ่งมีอาชีพเป็นฅนขายฃวด ถูกตำรวจปฏิบัติการจับฟ้องศาล ฐานลักนาฬิกาคุณหญิงฉัตรชฎา ฌานสมาธิ",
		EnrichedText: "<bold>เป็นมนุษย์สุดประเสริฐเลิศคุณค่า</bold> <italic>กว่าบรรดาฝูงสัตว์เดรัจฉาน</italic> <fixed>จงฝ่าฟันพัฒนาวิชาการ</fixed> <underline>อย่าล้างผลาญฤๅเข่นฆ่าบีฑาใคร</underline> ไม่ถือโทษโกรธแช่งซัดฮึดฮัดด่า หัดอภัยเหมือนกีฬาอัชฌาสัย ปฏิบัติประพฤติกฎกำหนดใจ พูดจาให้จ๊ะๆ จ๋าๆ น่าฟังเอยฯ\n" +
			"\n" +
			"นายสังฆภัณฑ์ เฮงพิทักษ์ฝั่ง ผู้เฒ่าซึ่งมีอาชีพเป็นฅนขายฃวด ถูกตำรวจปฏิบัติการจับฟ้องศาล ฐานลักนาฬิกาคุณหญิงฉัตรชฎา ฌานสมาธิ",
		HTML: "<html>\n" +
			"<div dir=\"ltr\">\n" +
			"<p>เป็นมนุษย์สุดประเสริฐเลิศคุณค่า กว่าบรรดาฝูงสัตว์เดรัจฉาน จงฝ่าฟันพัฒนาวิชาการ อย่าล้างผลาญฤๅเข่นฆ่าบีฑาใคร ไม่ถือโทษโกรธแช่งซัดฮึดฮัดด่า หัดอภัยเหมือนกีฬาอัชฌาสัย ปฏิบัติประพฤติกฎกำหนดใจ พูดจาให้จ๊ะๆ จ๋าๆ น่าฟังเอยฯ</p>\n" +
			"\n" +
			"<p>นายสังฆภัณฑ์ เฮงพิทักษ์ฝั่ง ผู้เฒ่าซึ่งมีอาชีพเป็นฅนขายฃวด ถูกตำรวจปฏิบัติการจับฟ้องศาล ฐานลักนาฬิกาคุณหญิงฉัตรชฎา ฌานสมาธิ</p>\n" +
			"</div>\n" +
			"</html>",
		Files: []*email.File{
			&email.File{
				FileType: "inline",
				Name:     "inline-jpg-image-filename.jpg",
				ContentInfo: &email.ContentInfo{
					Type: "image/jpeg",
					TypeParams: map[string]string{
						"name": "inline-jpg-image-name.jpg",
					},
					Disposition: "inline",
					DispositionParams: map[string]string{
						"filename": "inline-jpg-image-filename.jpg",
					},
					TransferEncoding: "base64",
					ID:               "inline-jpg-image.jpg@example.com",
					Charset:          "iso-8859-11",
				},
				Data: []byte{
					239, 191, 189, 224, 184, 184, 239, 191, 189, 239, 191, 189, 0, 67, 0, 3, 2, 2, 2,
					2, 2, 3, 2, 2, 2, 3, 3, 3, 3, 4, 6, 4, 4, 4, 4, 4, 8, 6, 6, 5, 6, 9, 8, 10, 10, 9,
					8, 9, 9, 10, 12, 15, 12, 10, 11, 14, 11, 9, 9, 13, 17, 13, 14, 15, 16, 16, 17, 16,
					10, 12, 18, 19, 18, 16, 19, 15, 16, 16, 16, 239, 191, 189, 224, 184, 169, 0, 11,
					8, 0, 1, 0, 1, 1, 1, 17, 0, 239, 191, 189, 224, 184, 172, 0, 6, 0, 16, 16, 5, 239,
					191, 189, 224, 184, 186, 0, 8, 1, 1, 0, 0, 63, 0, 224, 184, 178, 224, 184, 175, 32,
					239, 191, 189, 224, 184, 185,
				},
			},
		},
	}
	testEmailFromFile(t, fp, expectedEmail)
}

func TestParseEmailThaiMultipartRelatedWindows874OverBase64(t *testing.T) {
	fp := "tests/test_thai_multipart_related_windows-874_over_base64.txt"
	expectedEmail := &email.Email{
		Headers: email.Headers{
			Date: time.Time(time.Date(2019, 4, 1, 0, 55, 0, 0, time.UTC)),
			Sender: &mail.Address{
				Name:    "อลิซ ผู้ส่งจดหมาย",
				Address: "alis.phusngcdhmay@example.com",
			},
			From: []*mail.Address{
				&mail.Address{
					Name:    "อลิซ ผู้ส่งจดหมาย",
					Address: "alis.phusngcdhmay@example.com",
				},
				&mail.Address{
					Name:    "อลิซ ผู้ส่งจดหมาย",
					Address: "alis.phusngcdhmay@example.net",
				},
			},
			ReplyTo: []*mail.Address{
				&mail.Address{
					Name:    "อลิซ ผู้ส่งจดหมาย",
					Address: "alis.phusngcdhmay@example.net",
				},
			},
			To: []*mail.Address{
				&mail.Address{
					Name:    "บ๊อบ ผู้รับ",
					Address: "bob.phurab@example.com",
				},
				&mail.Address{
					Name:    "คาโรล ผู้รับ",
					Address: "carol.phurab@example.com",
				},
			},
			Cc: []*mail.Address{
				&mail.Address{
					Name:    "แดน ผู้รับ",
					Address: "dan.phurab@example.com",
				},
				&mail.Address{
					Name:    "อีฟ ผู้รับ",
					Address: "eve.phurab@example.com",
				},
			},
			Bcc: []*mail.Address{
				&mail.Address{
					Name:    "แฟรงค์ ผู้รับ",
					Address: "frank.phurab@example.com",
				},
				&mail.Address{
					Name:    "เกรซ ผู้รับ",
					Address: "grace.phurab@example.com",
				},
			},
			MessageID: "Message-Id-1@example.com",
			InReplyTo: []string{
				"Message-Id-0@example.com",
			},
			References: []string{
				"Message-Id-0@example.com",
			},
			Subject:  "📧 Test แพนแกรมภาษาไทย",
			Comments: "Message Header Comment",
			Keywords: []string{
				"Keyword 1",
				"Keyword 2",
			},
			ResentDate: time.Time(time.Date(2019, 4, 1, 0, 55, 0, 0, time.UTC)),
			ResentFrom: []*mail.Address{
				&mail.Address{
					Name:    "อลิซ ผู้ส่งจดหมาย",
					Address: "alis.phusngcdhmay@example.net",
				},
				&mail.Address{
					Name:    "อลิซ ผู้ส่งจดหมาย",
					Address: "alis.phusngcdhmay@example.com",
				},
			},
			ResentSender: &mail.Address{
				Name:    "อลิซ ผู้ส่งจดหมาย",
				Address: "alis.phusngcdhmay@example.net",
			},
			ResentTo: []*mail.Address{
				&mail.Address{
					Name:    "บ๊อบ ผู้รับ",
					Address: "bob.phurab@example.net",
				},
				&mail.Address{
					Name:    "คาโรล ผู้รับ",
					Address: "carol.phurab@example.net",
				},
			},
			ResentCc: []*mail.Address{
				&mail.Address{
					Name:    "แดน ผู้รับ",
					Address: "dan.phurab@example.net",
				},
				&mail.Address{
					Name:    "อีฟ ผู้รับ",
					Address: "eve.phurab@example.net",
				},
			},
			ResentBcc: []*mail.Address{
				&mail.Address{
					Name:    "แฟรงค์ ผู้รับ",
					Address: "frank.phurab@example.net",
				},
				&mail.Address{
					Name:    "เกรซ ผู้รับ",
					Address: "grace.phurab@example.net",
				},
			},
			ResentMessageID: "Message-Id-1@example.net",
			ExtraHeaders: map[string][]string{
				"X-Clacks-Overhead": []string{
					"GNU Terry Pratchett",
				},
			},
			ContentInfo: &email.ContentInfo{
				Type: "multipart/related",
				TypeParams: map[string]string{
					"boundary": "RelatedBoundaryString",
					"charset":  "windows-874",
				},
				Disposition:       "",
				DispositionParams: map[string]string(nil), // p0
				TransferEncoding:  "base64",
				ID:                "",
				Charset:           "windows-874",
			},
			Received: nil,
		},
		Text: "เป็นมนุษย์สุดประเสริฐเลิศคุณค่า กว่าบรรดาฝูงสัตว์เดรัจฉาน จงฝ่าฟันพัฒนาวิชาการ อย่าล้างผลาญฤๅเข่นฆ่าบีฑาใคร ไม่ถือโทษโกรธแช่งซัดฮึดฮัดด่า หัดอภัยเหมือนกีฬาอัชฌาสัย ปฏิบัติประพฤติกฎกำหนดใจ พูดจาให้จ๊ะๆ จ๋าๆ น่าฟังเอยฯ\n" +
			"\n" +
			"นายสังฆภัณฑ์ เฮงพิทักษ์ฝั่ง ผู้เฒ่าซึ่งมีอาชีพเป็นฅนขายฃวด ถูกตำรวจปฏิบัติการจับฟ้องศาล ฐานลักนาฬิกาคุณหญิงฉัตรชฎา ฌานสมาธิ",
		EnrichedText: "<bold>เป็นมนุษย์สุดประเสริฐเลิศคุณค่า</bold> <italic>กว่าบรรดาฝูงสัตว์เดรัจฉาน</italic> <fixed>จงฝ่าฟันพัฒนาวิชาการ</fixed> <underline>อย่าล้างผลาญฤๅเข่นฆ่าบีฑาใคร</underline> ไม่ถือโทษโกรธแช่งซัดฮึดฮัดด่า หัดอภัยเหมือนกีฬาอัชฌาสัย ปฏิบัติประพฤติกฎกำหนดใจ พูดจาให้จ๊ะๆ จ๋าๆ น่าฟังเอยฯ\n" +
			"\n" +
			"นายสังฆภัณฑ์ เฮงพิทักษ์ฝั่ง ผู้เฒ่าซึ่งมีอาชีพเป็นฅนขายฃวด ถูกตำรวจปฏิบัติการจับฟ้องศาล ฐานลักนาฬิกาคุณหญิงฉัตรชฎา ฌานสมาธิ",
		HTML: "<html>\n" +
			"<div dir=\"ltr\">\n" +
			"<p>เป็นมนุษย์สุดประเสริฐเลิศคุณค่า กว่าบรรดาฝูงสัตว์เดรัจฉาน จงฝ่าฟันพัฒนาวิชาการ อย่าล้างผลาญฤๅเข่นฆ่าบีฑาใคร ไม่ถือโทษโกรธแช่งซัดฮึดฮัดด่า หัดอภัยเหมือนกีฬาอัชฌาสัย ปฏิบัติประพฤติกฎกำหนดใจ พูดจาให้จ๊ะๆ จ๋าๆ น่าฟังเอยฯ</p>\n" +
			"\n" +
			"<p>นายสังฆภัณฑ์ เฮงพิทักษ์ฝั่ง ผู้เฒ่าซึ่งมีอาชีพเป็นฅนขายฃวด ถูกตำรวจปฏิบัติการจับฟ้องศาล ฐานลักนาฬิกาคุณหญิงฉัตรชฎา ฌานสมาธิ</p>\n" +
			"</div>\n" +
			"</html>",
		Files: []*email.File{
			&email.File{
				FileType: "inline",
				Name:     "inline-jpg-image-filename.jpg",
				ContentInfo: &email.ContentInfo{
					Type: "image/jpeg",
					TypeParams: map[string]string{
						"name": "inline-jpg-image-name.jpg",
					},
					Disposition: "inline",
					DispositionParams: map[string]string{
						"filename": "inline-jpg-image-filename.jpg",
					},
					TransferEncoding: "base64",
					ID:               "inline-jpg-image.jpg@example.com",
					Charset:          "windows-874",
				},
				Data: []byte{
					239, 191, 189, 224, 184, 184, 239, 191, 189, 239, 191, 189, 0, 67, 0, 3, 2, 2, 2,
					2, 2, 3, 2, 2, 2, 3, 3, 3, 3, 4, 6, 4, 4, 4, 4, 4, 8, 6, 6, 5, 6, 9, 8, 10, 10, 9,
					8, 9, 9, 10, 12, 15, 12, 10, 11, 14, 11, 9, 9, 13, 17, 13, 14, 15, 16, 16, 17, 16,
					10, 12, 18, 19, 18, 16, 19, 15, 16, 16, 16, 239, 191, 189, 224, 184, 169, 0, 11,
					8, 0, 1, 0, 1, 1, 1, 17, 0, 239, 191, 189, 224, 184, 172, 0, 6, 0, 16, 16, 5, 239,
					191, 189, 224, 184, 186, 0, 8, 1, 1, 0, 0, 63, 0, 224, 184, 178, 224, 184, 175, 32,
					239, 191, 189, 224, 184, 185,
				},
			},
		},
	}
	testEmailFromFile(t, fp, expectedEmail)
}

func TestParseEmailThaiMultipartRelatedWindows874OverQuotedprintable(t *testing.T) {
	fp := "tests/test_thai_multipart_related_windows-874_over_quoted-printable.txt"
	expectedEmail := &email.Email{
		Headers: email.Headers{
			Date: time.Time(time.Date(2019, 4, 1, 0, 55, 0, 0, time.UTC)),
			Sender: &mail.Address{
				Name:    "อลิซ ผู้ส่งจดหมาย",
				Address: "alis.phusngcdhmay@example.com",
			},
			From: []*mail.Address{
				&mail.Address{
					Name:    "อลิซ ผู้ส่งจดหมาย",
					Address: "alis.phusngcdhmay@example.com",
				},
				&mail.Address{
					Name:    "อลิซ ผู้ส่งจดหมาย",
					Address: "alis.phusngcdhmay@example.net",
				},
			},
			ReplyTo: []*mail.Address{
				&mail.Address{
					Name:    "อลิซ ผู้ส่งจดหมาย",
					Address: "alis.phusngcdhmay@example.net",
				},
			},
			To: []*mail.Address{
				&mail.Address{
					Name:    "บ๊อบ ผู้รับ",
					Address: "bob.phurab@example.com",
				},
				&mail.Address{
					Name:    "คาโรล ผู้รับ",
					Address: "carol.phurab@example.com",
				},
			},
			Cc: []*mail.Address{
				&mail.Address{
					Name:    "แดน ผู้รับ",
					Address: "dan.phurab@example.com",
				},
				&mail.Address{
					Name:    "อีฟ ผู้รับ",
					Address: "eve.phurab@example.com",
				},
			},
			Bcc: []*mail.Address{
				&mail.Address{
					Name:    "แฟรงค์ ผู้รับ",
					Address: "frank.phurab@example.com",
				},
				&mail.Address{
					Name:    "เกรซ ผู้รับ",
					Address: "grace.phurab@example.com",
				},
			},
			MessageID: "Message-Id-1@example.com",
			InReplyTo: []string{
				"Message-Id-0@example.com",
			},
			References: []string{
				"Message-Id-0@example.com",
			},
			Subject:  "📧 Test แพนแกรมภาษาไทย",
			Comments: "Message Header Comment",
			Keywords: []string{
				"Keyword 1",
				"Keyword 2",
			},
			ResentDate: time.Time(time.Date(2019, 4, 1, 0, 55, 0, 0, time.UTC)),
			ResentFrom: []*mail.Address{
				&mail.Address{
					Name:    "อลิซ ผู้ส่งจดหมาย",
					Address: "alis.phusngcdhmay@example.net",
				},
				&mail.Address{
					Name:    "อลิซ ผู้ส่งจดหมาย",
					Address: "alis.phusngcdhmay@example.com",
				},
			},
			ResentSender: &mail.Address{
				Name:    "อลิซ ผู้ส่งจดหมาย",
				Address: "alis.phusngcdhmay@example.net",
			},
			ResentTo: []*mail.Address{
				&mail.Address{
					Name:    "บ๊อบ ผู้รับ",
					Address: "bob.phurab@example.net",
				},
				&mail.Address{
					Name:    "คาโรล ผู้รับ",
					Address: "carol.phurab@example.net",
				},
			},
			ResentCc: []*mail.Address{
				&mail.Address{
					Name:    "แดน ผู้รับ",
					Address: "dan.phurab@example.net",
				},
				&mail.Address{
					Name:    "อีฟ ผู้รับ",
					Address: "eve.phurab@example.net",
				},
			},
			ResentBcc: []*mail.Address{
				&mail.Address{
					Name:    "แฟรงค์ ผู้รับ",
					Address: "frank.phurab@example.net",
				},
				&mail.Address{
					Name:    "เกรซ ผู้รับ",
					Address: "grace.phurab@example.net",
				},
			},
			ResentMessageID: "Message-Id-1@example.net",
			ExtraHeaders: map[string][]string{
				"X-Clacks-Overhead": []string{
					"GNU Terry Pratchett",
				},
			},
			ContentInfo: &email.ContentInfo{
				Type: "multipart/related",
				TypeParams: map[string]string{
					"boundary": "RelatedBoundaryString",
					"charset":  "windows-874",
				},
				Disposition:       "",
				DispositionParams: map[string]string(nil), // p0
				TransferEncoding:  "quoted-printable",
				ID:                "",
				Charset:           "windows-874",
			},
			Received: nil,
		},
		Text: "เป็นมนุษย์สุดประเสริฐเลิศคุณค่า กว่าบรรดาฝูงสัตว์เดรัจฉาน จงฝ่าฟันพัฒนาวิชาการ อย่าล้างผลาญฤๅเข่นฆ่าบีฑาใคร ไม่ถือโทษโกรธแช่งซัดฮึดฮัดด่า หัดอภัยเหมือนกีฬาอัชฌาสัย ปฏิบัติประพฤติกฎกำหนดใจ พูดจาให้จ๊ะๆ จ๋าๆ น่าฟังเอยฯ\n" +
			"\n" +
			"นายสังฆภัณฑ์ เฮงพิทักษ์ฝั่ง ผู้เฒ่าซึ่งมีอาชีพเป็นฅนขายฃวด ถูกตำรวจปฏิบัติการจับฟ้องศาล ฐานลักนาฬิกาคุณหญิงฉัตรชฎา ฌานสมาธิ",
		EnrichedText: "<bold>เป็นมนุษย์สุดประเสริฐเลิศคุณค่า</bold> <italic>กว่าบรรดาฝูงสัตว์เดรัจฉาน</italic> <fixed>จงฝ่าฟันพัฒนาวิชาการ</fixed> <underline>อย่าล้างผลาญฤๅเข่นฆ่าบีฑาใคร</underline> ไม่ถือโทษโกรธแช่งซัดฮึดฮัดด่า หัดอภัยเหมือนกีฬาอัชฌาสัย ปฏิบัติประพฤติกฎกำหนดใจ พูดจาให้จ๊ะๆ จ๋าๆ น่าฟังเอยฯ\n" +
			"\n" +
			"นายสังฆภัณฑ์ เฮงพิทักษ์ฝั่ง ผู้เฒ่าซึ่งมีอาชีพเป็นฅนขายฃวด ถูกตำรวจปฏิบัติการจับฟ้องศาล ฐานลักนาฬิกาคุณหญิงฉัตรชฎา ฌานสมาธิ",
		HTML: "<html>\n" +
			"<div dir=\"ltr\">\n" +
			"<p>เป็นมนุษย์สุดประเสริฐเลิศคุณค่า กว่าบรรดาฝูงสัตว์เดรัจฉาน จงฝ่าฟันพัฒนาวิชาการ อย่าล้างผลาญฤๅเข่นฆ่าบีฑาใคร ไม่ถือโทษโกรธแช่งซัดฮึดฮัดด่า หัดอภัยเหมือนกีฬาอัชฌาสัย ปฏิบัติประพฤติกฎกำหนดใจ พูดจาให้จ๊ะๆ จ๋าๆ น่าฟังเอยฯ</p>\n" +
			"\n" +
			"<p>นายสังฆภัณฑ์ เฮงพิทักษ์ฝั่ง ผู้เฒ่าซึ่งมีอาชีพเป็นฅนขายฃวด ถูกตำรวจปฏิบัติการจับฟ้องศาล ฐานลักนาฬิกาคุณหญิงฉัตรชฎา ฌานสมาธิ</p>\n" +
			"</div>\n" +
			"</html>",
		Files: []*email.File{
			&email.File{
				FileType: "inline",
				Name:     "inline-jpg-image-filename.jpg",
				ContentInfo: &email.ContentInfo{
					Type: "image/jpeg",
					TypeParams: map[string]string{
						"name": "inline-jpg-image-name.jpg",
					},
					Disposition: "inline",
					DispositionParams: map[string]string{
						"filename": "inline-jpg-image-filename.jpg",
					},
					TransferEncoding: "base64",
					ID:               "inline-jpg-image.jpg@example.com",
					Charset:          "windows-874",
				},
				Data: []byte{
					239, 191, 189, 224, 184, 184, 239, 191, 189, 239, 191, 189, 0, 67, 0, 3, 2, 2, 2,
					2, 2, 3, 2, 2, 2, 3, 3, 3, 3, 4, 6, 4, 4, 4, 4, 4, 8, 6, 6, 5, 6, 9, 8, 10, 10, 9,
					8, 9, 9, 10, 12, 15, 12, 10, 11, 14, 11, 9, 9, 13, 17, 13, 14, 15, 16, 16, 17, 16,
					10, 12, 18, 19, 18, 16, 19, 15, 16, 16, 16, 239, 191, 189, 224, 184, 169, 0, 11,
					8, 0, 1, 0, 1, 1, 1, 17, 0, 239, 191, 189, 224, 184, 172, 0, 6, 0, 16, 16, 5, 239,
					191, 189, 224, 184, 186, 0, 8, 1, 1, 0, 0, 63, 0, 224, 184, 178, 224, 184, 175, 32,
					239, 191, 189, 224, 184, 185,
				},
			},
		},
	}
	testEmailFromFile(t, fp, expectedEmail)
}

func TestParseEmailThaiMultipartRelatedTis620OverBase64(t *testing.T) {
	fp := "tests/test_thai_multipart_related_tis-620_over_base64.txt"
	expectedEmail := &email.Email{
		Headers: email.Headers{
			Date: time.Time(time.Date(2019, 4, 1, 0, 55, 0, 0, time.UTC)),
			Sender: &mail.Address{
				Name:    "อลิซ ผู้ส่งจดหมาย",
				Address: "alis.phusngcdhmay@example.com",
			},
			From: []*mail.Address{
				&mail.Address{
					Name:    "อลิซ ผู้ส่งจดหมาย",
					Address: "alis.phusngcdhmay@example.com",
				},
				&mail.Address{
					Name:    "อลิซ ผู้ส่งจดหมาย",
					Address: "alis.phusngcdhmay@example.net",
				},
			},
			ReplyTo: []*mail.Address{
				&mail.Address{
					Name:    "อลิซ ผู้ส่งจดหมาย",
					Address: "alis.phusngcdhmay@example.net",
				},
			},
			To: []*mail.Address{
				&mail.Address{
					Name:    "บ๊อบ ผู้รับ",
					Address: "bob.phurab@example.com",
				},
				&mail.Address{
					Name:    "คาโรล ผู้รับ",
					Address: "carol.phurab@example.com",
				},
			},
			Cc: []*mail.Address{
				&mail.Address{
					Name:    "แดน ผู้รับ",
					Address: "dan.phurab@example.com",
				},
				&mail.Address{
					Name:    "อีฟ ผู้รับ",
					Address: "eve.phurab@example.com",
				},
			},
			Bcc: []*mail.Address{
				&mail.Address{
					Name:    "แฟรงค์ ผู้รับ",
					Address: "frank.phurab@example.com",
				},
				&mail.Address{
					Name:    "เกรซ ผู้รับ",
					Address: "grace.phurab@example.com",
				},
			},
			MessageID: "Message-Id-1@example.com",
			InReplyTo: []string{
				"Message-Id-0@example.com",
			},
			References: []string{
				"Message-Id-0@example.com",
			},
			Subject:  "📧 Test แพนแกรมภาษาไทย",
			Comments: "Message Header Comment",
			Keywords: []string{
				"Keyword 1",
				"Keyword 2",
			},
			ResentDate: time.Time(time.Date(2019, 4, 1, 0, 55, 0, 0, time.UTC)),
			ResentFrom: []*mail.Address{
				&mail.Address{
					Name:    "อลิซ ผู้ส่งจดหมาย",
					Address: "alis.phusngcdhmay@example.net",
				},
				&mail.Address{
					Name:    "อลิซ ผู้ส่งจดหมาย",
					Address: "alis.phusngcdhmay@example.com",
				},
			},
			ResentSender: &mail.Address{
				Name:    "อลิซ ผู้ส่งจดหมาย",
				Address: "alis.phusngcdhmay@example.net",
			},
			ResentTo: []*mail.Address{
				&mail.Address{
					Name:    "บ๊อบ ผู้รับ",
					Address: "bob.phurab@example.net",
				},
				&mail.Address{
					Name:    "คาโรล ผู้รับ",
					Address: "carol.phurab@example.net",
				},
			},
			ResentCc: []*mail.Address{
				&mail.Address{
					Name:    "แดน ผู้รับ",
					Address: "dan.phurab@example.net",
				},
				&mail.Address{
					Name:    "อีฟ ผู้รับ",
					Address: "eve.phurab@example.net",
				},
			},
			ResentBcc: []*mail.Address{
				&mail.Address{
					Name:    "แฟรงค์ ผู้รับ",
					Address: "frank.phurab@example.net",
				},
				&mail.Address{
					Name:    "เกรซ ผู้รับ",
					Address: "grace.phurab@example.net",
				},
			},
			ResentMessageID: "Message-Id-1@example.net",
			ExtraHeaders: map[string][]string{
				"X-Clacks-Overhead": []string{
					"GNU Terry Pratchett",
				},
			},
			ContentInfo: &email.ContentInfo{
				Type: "multipart/related",
				TypeParams: map[string]string{
					"boundary": "RelatedBoundaryString",
					"charset":  "tis-620",
				},
				Disposition:       "",
				DispositionParams: map[string]string(nil), // p0
				TransferEncoding:  "base64",
				ID:                "",
				Charset:           "tis-620",
			},
			Received: nil,
		},
		Text: "เป็นมนุษย์สุดประเสริฐเลิศคุณค่า กว่าบรรดาฝูงสัตว์เดรัจฉาน จงฝ่าฟันพัฒนาวิชาการ อย่าล้างผลาญฤๅเข่นฆ่าบีฑาใคร ไม่ถือโทษโกรธแช่งซัดฮึดฮัดด่า หัดอภัยเหมือนกีฬาอัชฌาสัย ปฏิบัติประพฤติกฎกำหนดใจ พูดจาให้จ๊ะๆ จ๋าๆ น่าฟังเอยฯ\n" +
			"\n" +
			"นายสังฆภัณฑ์ เฮงพิทักษ์ฝั่ง ผู้เฒ่าซึ่งมีอาชีพเป็นฅนขายฃวด ถูกตำรวจปฏิบัติการจับฟ้องศาล ฐานลักนาฬิกาคุณหญิงฉัตรชฎา ฌานสมาธิ",
		EnrichedText: "<bold>เป็นมนุษย์สุดประเสริฐเลิศคุณค่า</bold> <italic>กว่าบรรดาฝูงสัตว์เดรัจฉาน</italic> <fixed>จงฝ่าฟันพัฒนาวิชาการ</fixed> <underline>อย่าล้างผลาญฤๅเข่นฆ่าบีฑาใคร</underline> ไม่ถือโทษโกรธแช่งซัดฮึดฮัดด่า หัดอภัยเหมือนกีฬาอัชฌาสัย ปฏิบัติประพฤติกฎกำหนดใจ พูดจาให้จ๊ะๆ จ๋าๆ น่าฟังเอยฯ\n" +
			"\n" +
			"นายสังฆภัณฑ์ เฮงพิทักษ์ฝั่ง ผู้เฒ่าซึ่งมีอาชีพเป็นฅนขายฃวด ถูกตำรวจปฏิบัติการจับฟ้องศาล ฐานลักนาฬิกาคุณหญิงฉัตรชฎา ฌานสมาธิ",
		HTML: "<html>\n" +
			"<div dir=\"ltr\">\n" +
			"<p>เป็นมนุษย์สุดประเสริฐเลิศคุณค่า กว่าบรรดาฝูงสัตว์เดรัจฉาน จงฝ่าฟันพัฒนาวิชาการ อย่าล้างผลาญฤๅเข่นฆ่าบีฑาใคร ไม่ถือโทษโกรธแช่งซัดฮึดฮัดด่า หัดอภัยเหมือนกีฬาอัชฌาสัย ปฏิบัติประพฤติกฎกำหนดใจ พูดจาให้จ๊ะๆ จ๋าๆ น่าฟังเอยฯ</p>\n" +
			"\n" +
			"<p>นายสังฆภัณฑ์ เฮงพิทักษ์ฝั่ง ผู้เฒ่าซึ่งมีอาชีพเป็นฅนขายฃวด ถูกตำรวจปฏิบัติการจับฟ้องศาล ฐานลักนาฬิกาคุณหญิงฉัตรชฎา ฌานสมาธิ</p>\n" +
			"</div>\n" +
			"</html>",
		Files: []*email.File{
			&email.File{
				FileType: "inline",
				Name:     "inline-jpg-image-filename.jpg",
				ContentInfo: &email.ContentInfo{
					Type: "image/jpeg",
					TypeParams: map[string]string{
						"name": "inline-jpg-image-name.jpg",
					},
					Disposition: "inline",
					DispositionParams: map[string]string{
						"filename": "inline-jpg-image-filename.jpg",
					},
					TransferEncoding: "base64",
					ID:               "inline-jpg-image.jpg@example.com",
					Charset:          "tis-620",
				},
				Data: []byte{
					239, 191, 189, 224, 184, 184, 239, 191, 189, 239, 191, 189, 0, 67, 0, 3, 2, 2, 2,
					2, 2, 3, 2, 2, 2, 3, 3, 3, 3, 4, 6, 4, 4, 4, 4, 4, 8, 6, 6, 5, 6, 9, 8, 10, 10, 9,
					8, 9, 9, 10, 12, 15, 12, 10, 11, 14, 11, 9, 9, 13, 17, 13, 14, 15, 16, 16, 17, 16,
					10, 12, 18, 19, 18, 16, 19, 15, 16, 16, 16, 239, 191, 189, 224, 184, 169, 0, 11,
					8, 0, 1, 0, 1, 1, 1, 17, 0, 239, 191, 189, 224, 184, 172, 0, 6, 0, 16, 16, 5, 239,
					191, 189, 224, 184, 186, 0, 8, 1, 1, 0, 0, 63, 0, 224, 184, 178, 224, 184, 175, 32,
					239, 191, 189, 224, 184, 185,
				},
			},
		},
	}
	testEmailFromFile(t, fp, expectedEmail)
}

func TestParseEmailThaiMultipartRelatedTis620OverQuotedprintable(t *testing.T) {
	fp := "tests/test_thai_multipart_related_tis-620_over_quoted-printable.txt"
	expectedEmail := &email.Email{
		Headers: email.Headers{
			Date: time.Time(time.Date(2019, 4, 1, 0, 55, 0, 0, time.UTC)),
			Sender: &mail.Address{
				Name:    "อลิซ ผู้ส่งจดหมาย",
				Address: "alis.phusngcdhmay@example.com",
			},
			From: []*mail.Address{
				&mail.Address{
					Name:    "อลิซ ผู้ส่งจดหมาย",
					Address: "alis.phusngcdhmay@example.com",
				},
				&mail.Address{
					Name:    "อลิซ ผู้ส่งจดหมาย",
					Address: "alis.phusngcdhmay@example.net",
				},
			},
			ReplyTo: []*mail.Address{
				&mail.Address{
					Name:    "อลิซ ผู้ส่งจดหมาย",
					Address: "alis.phusngcdhmay@example.net",
				},
			},
			To: []*mail.Address{
				&mail.Address{
					Name:    "บ๊อบ ผู้รับ",
					Address: "bob.phurab@example.com",
				},
				&mail.Address{
					Name:    "คาโรล ผู้รับ",
					Address: "carol.phurab@example.com",
				},
			},
			Cc: []*mail.Address{
				&mail.Address{
					Name:    "แดน ผู้รับ",
					Address: "dan.phurab@example.com",
				},
				&mail.Address{
					Name:    "อีฟ ผู้รับ",
					Address: "eve.phurab@example.com",
				},
			},
			Bcc: []*mail.Address{
				&mail.Address{
					Name:    "แฟรงค์ ผู้รับ",
					Address: "frank.phurab@example.com",
				},
				&mail.Address{
					Name:    "เกรซ ผู้รับ",
					Address: "grace.phurab@example.com",
				},
			},
			MessageID: "Message-Id-1@example.com",
			InReplyTo: []string{
				"Message-Id-0@example.com",
			},
			References: []string{
				"Message-Id-0@example.com",
			},
			Subject:  "📧 Test แพนแกรมภาษาไทย",
			Comments: "Message Header Comment",
			Keywords: []string{
				"Keyword 1",
				"Keyword 2",
			},
			ResentDate: time.Time(time.Date(2019, 4, 1, 0, 55, 0, 0, time.UTC)),
			ResentFrom: []*mail.Address{
				&mail.Address{
					Name:    "อลิซ ผู้ส่งจดหมาย",
					Address: "alis.phusngcdhmay@example.net",
				},
				&mail.Address{
					Name:    "อลิซ ผู้ส่งจดหมาย",
					Address: "alis.phusngcdhmay@example.com",
				},
			},
			ResentSender: &mail.Address{
				Name:    "อลิซ ผู้ส่งจดหมาย",
				Address: "alis.phusngcdhmay@example.net",
			},
			ResentTo: []*mail.Address{
				&mail.Address{
					Name:    "บ๊อบ ผู้รับ",
					Address: "bob.phurab@example.net",
				},
				&mail.Address{
					Name:    "คาโรล ผู้รับ",
					Address: "carol.phurab@example.net",
				},
			},
			ResentCc: []*mail.Address{
				&mail.Address{
					Name:    "แดน ผู้รับ",
					Address: "dan.phurab@example.net",
				},
				&mail.Address{
					Name:    "อีฟ ผู้รับ",
					Address: "eve.phurab@example.net",
				},
			},
			ResentBcc: []*mail.Address{
				&mail.Address{
					Name:    "แฟรงค์ ผู้รับ",
					Address: "frank.phurab@example.net",
				},
				&mail.Address{
					Name:    "เกรซ ผู้รับ",
					Address: "grace.phurab@example.net",
				},
			},
			ResentMessageID: "Message-Id-1@example.net",
			ExtraHeaders: map[string][]string{
				"X-Clacks-Overhead": []string{
					"GNU Terry Pratchett",
				},
			},
			ContentInfo: &email.ContentInfo{
				Type: "multipart/related",
				TypeParams: map[string]string{
					"boundary": "RelatedBoundaryString",
					"charset":  "tis-620",
				},
				Disposition:       "",
				DispositionParams: map[string]string(nil), // p0
				TransferEncoding:  "quoted-printable",
				ID:                "",
				Charset:           "tis-620",
			},
			Received: nil,
		},
		Text: "เป็นมนุษย์สุดประเสริฐเลิศคุณค่า กว่าบรรดาฝูงสัตว์เดรัจฉาน จงฝ่าฟันพัฒนาวิชาการ อย่าล้างผลาญฤๅเข่นฆ่าบีฑาใคร ไม่ถือโทษโกรธแช่งซัดฮึดฮัดด่า หัดอภัยเหมือนกีฬาอัชฌาสัย ปฏิบัติประพฤติกฎกำหนดใจ พูดจาให้จ๊ะๆ จ๋าๆ น่าฟังเอยฯ\n" +
			"\n" +
			"นายสังฆภัณฑ์ เฮงพิทักษ์ฝั่ง ผู้เฒ่าซึ่งมีอาชีพเป็นฅนขายฃวด ถูกตำรวจปฏิบัติการจับฟ้องศาล ฐานลักนาฬิกาคุณหญิงฉัตรชฎา ฌานสมาธิ",
		EnrichedText: "<bold>เป็นมนุษย์สุดประเสริฐเลิศคุณค่า</bold> <italic>กว่าบรรดาฝูงสัตว์เดรัจฉาน</italic> <fixed>จงฝ่าฟันพัฒนาวิชาการ</fixed> <underline>อย่าล้างผลาญฤๅเข่นฆ่าบีฑาใคร</underline> ไม่ถือโทษโกรธแช่งซัดฮึดฮัดด่า หัดอภัยเหมือนกีฬาอัชฌาสัย ปฏิบัติประพฤติกฎกำหนดใจ พูดจาให้จ๊ะๆ จ๋าๆ น่าฟังเอยฯ\n" +
			"\n" +
			"นายสังฆภัณฑ์ เฮงพิทักษ์ฝั่ง ผู้เฒ่าซึ่งมีอาชีพเป็นฅนขายฃวด ถูกตำรวจปฏิบัติการจับฟ้องศาล ฐานลักนาฬิกาคุณหญิงฉัตรชฎา ฌานสมาธิ",
		HTML: "<html>\n" +
			"<div dir=\"ltr\">\n" +
			"<p>เป็นมนุษย์สุดประเสริฐเลิศคุณค่า กว่าบรรดาฝูงสัตว์เดรัจฉาน จงฝ่าฟันพัฒนาวิชาการ อย่าล้างผลาญฤๅเข่นฆ่าบีฑาใคร ไม่ถือโทษโกรธแช่งซัดฮึดฮัดด่า หัดอภัยเหมือนกีฬาอัชฌาสัย ปฏิบัติประพฤติกฎกำหนดใจ พูดจาให้จ๊ะๆ จ๋าๆ น่าฟังเอยฯ</p>\n" +
			"\n" +
			"<p>นายสังฆภัณฑ์ เฮงพิทักษ์ฝั่ง ผู้เฒ่าซึ่งมีอาชีพเป็นฅนขายฃวด ถูกตำรวจปฏิบัติการจับฟ้องศาล ฐานลักนาฬิกาคุณหญิงฉัตรชฎา ฌานสมาธิ</p>\n" +
			"</div>\n" +
			"</html>",
		Files: []*email.File{
			&email.File{
				FileType: "inline",
				Name:     "inline-jpg-image-filename.jpg",
				ContentInfo: &email.ContentInfo{
					Type: "image/jpeg",
					TypeParams: map[string]string{
						"name": "inline-jpg-image-name.jpg",
					},
					Disposition: "inline",
					DispositionParams: map[string]string{
						"filename": "inline-jpg-image-filename.jpg",
					},
					TransferEncoding: "base64",
					ID:               "inline-jpg-image.jpg@example.com",
					Charset:          "tis-620",
				},
				Data: []byte{
					239, 191, 189, 224, 184, 184, 239, 191, 189, 239, 191, 189, 0, 67, 0, 3, 2, 2, 2,
					2, 2, 3, 2, 2, 2, 3, 3, 3, 3, 4, 6, 4, 4, 4, 4, 4, 8, 6, 6, 5, 6, 9, 8, 10, 10, 9,
					8, 9, 9, 10, 12, 15, 12, 10, 11, 14, 11, 9, 9, 13, 17, 13, 14, 15, 16, 16, 17, 16,
					10, 12, 18, 19, 18, 16, 19, 15, 16, 16, 16, 239, 191, 189, 224, 184, 169, 0, 11,
					8, 0, 1, 0, 1, 1, 1, 17, 0, 239, 191, 189, 224, 184, 172, 0, 6, 0, 16, 16, 5, 239,
					191, 189, 224, 184, 186, 0, 8, 1, 1, 0, 0, 63, 0, 224, 184, 178, 224, 184, 175, 32,
					239, 191, 189, 224, 184, 185,
				},
			},
		},
	}
	testEmailFromFile(t, fp, expectedEmail)
}

func TestParseEmailThaiMultipartMixedIso885911OverBase64(t *testing.T) {
	fp := "tests/test_thai_multipart_mixed_iso-8859-11_over_base64.txt"
	expectedEmail := &email.Email{
		Headers: email.Headers{
			Date: time.Time(time.Date(2019, 4, 1, 0, 55, 0, 0, time.UTC)),
			Sender: &mail.Address{
				Name:    "อลิซ ผู้ส่งจดหมาย",
				Address: "alis.phusngcdhmay@example.com",
			},
			From: []*mail.Address{
				&mail.Address{
					Name:    "อลิซ ผู้ส่งจดหมาย",
					Address: "alis.phusngcdhmay@example.com",
				},
				&mail.Address{
					Name:    "อลิซ ผู้ส่งจดหมาย",
					Address: "alis.phusngcdhmay@example.net",
				},
			},
			ReplyTo: []*mail.Address{
				&mail.Address{
					Name:    "อลิซ ผู้ส่งจดหมาย",
					Address: "alis.phusngcdhmay@example.net",
				},
			},
			To: []*mail.Address{
				&mail.Address{
					Name:    "บ๊อบ ผู้รับ",
					Address: "bob.phurab@example.com",
				},
				&mail.Address{
					Name:    "คาโรล ผู้รับ",
					Address: "carol.phurab@example.com",
				},
			},
			Cc: []*mail.Address{
				&mail.Address{
					Name:    "แดน ผู้รับ",
					Address: "dan.phurab@example.com",
				},
				&mail.Address{
					Name:    "อีฟ ผู้รับ",
					Address: "eve.phurab@example.com",
				},
			},
			Bcc: []*mail.Address{
				&mail.Address{
					Name:    "แฟรงค์ ผู้รับ",
					Address: "frank.phurab@example.com",
				},
				&mail.Address{
					Name:    "เกรซ ผู้รับ",
					Address: "grace.phurab@example.com",
				},
			},
			MessageID: "Message-Id-1@example.com",
			InReplyTo: []string{
				"Message-Id-0@example.com",
			},
			References: []string{
				"Message-Id-0@example.com",
			},
			Subject:  "📧 Test แพนแกรมภาษาไทย",
			Comments: "Message Header Comment",
			Keywords: []string{
				"Keyword 1",
				"Keyword 2",
			},
			ResentDate: time.Time(time.Date(2019, 4, 1, 0, 55, 0, 0, time.UTC)),
			ResentFrom: []*mail.Address{
				&mail.Address{
					Name:    "อลิซ ผู้ส่งจดหมาย",
					Address: "alis.phusngcdhmay@example.net",
				},
				&mail.Address{
					Name:    "อลิซ ผู้ส่งจดหมาย",
					Address: "alis.phusngcdhmay@example.com",
				},
			},
			ResentSender: &mail.Address{
				Name:    "อลิซ ผู้ส่งจดหมาย",
				Address: "alis.phusngcdhmay@example.net",
			},
			ResentTo: []*mail.Address{
				&mail.Address{
					Name:    "บ๊อบ ผู้รับ",
					Address: "bob.phurab@example.net",
				},
				&mail.Address{
					Name:    "คาโรล ผู้รับ",
					Address: "carol.phurab@example.net",
				},
			},
			ResentCc: []*mail.Address{
				&mail.Address{
					Name:    "แดน ผู้รับ",
					Address: "dan.phurab@example.net",
				},
				&mail.Address{
					Name:    "อีฟ ผู้รับ",
					Address: "eve.phurab@example.net",
				},
			},
			ResentBcc: []*mail.Address{
				&mail.Address{
					Name:    "แฟรงค์ ผู้รับ",
					Address: "frank.phurab@example.net",
				},
				&mail.Address{
					Name:    "เกรซ ผู้รับ",
					Address: "grace.phurab@example.net",
				},
			},
			ResentMessageID: "Message-Id-1@example.net",
			ExtraHeaders: map[string][]string{
				"X-Clacks-Overhead": []string{
					"GNU Terry Pratchett",
				},
			},
			ContentInfo: &email.ContentInfo{
				Type: "multipart/mixed",
				TypeParams: map[string]string{
					"boundary": "MixedBoundaryString",
					"charset":  "iso-8859-11",
				},
				Disposition:       "",
				DispositionParams: map[string]string(nil), // p0
				TransferEncoding:  "base64",
				ID:                "",
				Charset:           "iso-8859-11",
			},
			Received: nil,
		},
		Text: "เป็นมนุษย์สุดประเสริฐเลิศคุณค่า กว่าบรรดาฝูงสัตว์เดรัจฉาน จงฝ่าฟันพัฒนาวิชาการ อย่าล้างผลาญฤๅเข่นฆ่าบีฑาใคร ไม่ถือโทษโกรธแช่งซัดฮึดฮัดด่า หัดอภัยเหมือนกีฬาอัชฌาสัย ปฏิบัติประพฤติกฎกำหนดใจ พูดจาให้จ๊ะๆ จ๋าๆ น่าฟังเอยฯ\n" +
			"\n" +
			"นายสังฆภัณฑ์ เฮงพิทักษ์ฝั่ง ผู้เฒ่าซึ่งมีอาชีพเป็นฅนขายฃวด ถูกตำรวจปฏิบัติการจับฟ้องศาล ฐานลักนาฬิกาคุณหญิงฉัตรชฎา ฌานสมาธิ",
		EnrichedText: "<bold>เป็นมนุษย์สุดประเสริฐเลิศคุณค่า</bold> <italic>กว่าบรรดาฝูงสัตว์เดรัจฉาน</italic> <fixed>จงฝ่าฟันพัฒนาวิชาการ</fixed> <underline>อย่าล้างผลาญฤๅเข่นฆ่าบีฑาใคร</underline> ไม่ถือโทษโกรธแช่งซัดฮึดฮัดด่า หัดอภัยเหมือนกีฬาอัชฌาสัย ปฏิบัติประพฤติกฎกำหนดใจ พูดจาให้จ๊ะๆ จ๋าๆ น่าฟังเอยฯ\n" +
			"\n" +
			"นายสังฆภัณฑ์ เฮงพิทักษ์ฝั่ง ผู้เฒ่าซึ่งมีอาชีพเป็นฅนขายฃวด ถูกตำรวจปฏิบัติการจับฟ้องศาล ฐานลักนาฬิกาคุณหญิงฉัตรชฎา ฌานสมาธิ",
		HTML: "<html>\n" +
			"<div dir=\"ltr\">\n" +
			"<p>เป็นมนุษย์สุดประเสริฐเลิศคุณค่า กว่าบรรดาฝูงสัตว์เดรัจฉาน จงฝ่าฟันพัฒนาวิชาการ อย่าล้างผลาญฤๅเข่นฆ่าบีฑาใคร ไม่ถือโทษโกรธแช่งซัดฮึดฮัดด่า หัดอภัยเหมือนกีฬาอัชฌาสัย ปฏิบัติประพฤติกฎกำหนดใจ พูดจาให้จ๊ะๆ จ๋าๆ น่าฟังเอยฯ</p>\n" +
			"\n" +
			"<p>นายสังฆภัณฑ์ เฮงพิทักษ์ฝั่ง ผู้เฒ่าซึ่งมีอาชีพเป็นฅนขายฃวด ถูกตำรวจปฏิบัติการจับฟ้องศาล ฐานลักนาฬิกาคุณหญิงฉัตรชฎา ฌานสมาธิ</p>\n" +
			"</div>\n" +
			"</html>",
		Files: []*email.File{
			&email.File{
				FileType: "",
				Name:     "inline-jpg-image-without-disposition.jpg",
				ContentInfo: &email.ContentInfo{
					Type: "image/jpeg",
					TypeParams: map[string]string{
						"name": "inline-jpg-image-without-disposition.jpg",
					},
					Disposition:       "",
					DispositionParams: map[string]string(nil), // p0
					TransferEncoding:  "base64",
					ID:                "",
					Charset:           "iso-8859-11",
				},
				Data: []byte{
					239, 191, 189, 224, 184, 184, 239, 191, 189, 239, 191, 189, 0, 67, 0, 3, 2, 2, 2,
					2, 2, 3, 2, 2, 2, 3, 3, 3, 3, 4, 6, 4, 4, 4, 4, 4, 8, 6, 6, 5, 6, 9, 8, 10, 10, 9,
					8, 9, 9, 10, 12, 15, 12, 10, 11, 14, 11, 9, 9, 13, 17, 13, 14, 15, 16, 16, 17, 16,
					10, 12, 18, 19, 18, 16, 19, 15, 16, 16, 16, 239, 191, 189, 224, 184, 169, 0, 11,
					8, 0, 1, 0, 1, 1, 1, 17, 0, 239, 191, 189, 224, 184, 172, 0, 6, 0, 16, 16, 5, 239,
					191, 189, 224, 184, 186, 0, 8, 1, 1, 0, 0, 63, 0, 224, 184, 178, 224, 184, 175, 32,
					239, 191, 189, 224, 184, 185,
				},
			},
			&email.File{
				FileType: "inline",
				Name:     "inline-jpg-image-filename.jpg",
				ContentInfo: &email.ContentInfo{
					Type: "image/jpeg",
					TypeParams: map[string]string{
						"name": "inline-jpg-image-name.jpg",
					},
					Disposition: "inline",
					DispositionParams: map[string]string{
						"filename": "inline-jpg-image-filename.jpg",
					},
					TransferEncoding: "base64",
					ID:               "inline-jpg-image.jpg@example.com",
					Charset:          "iso-8859-11",
				},
				Data: []byte{
					239, 191, 189, 224, 184, 184, 239, 191, 189, 239, 191, 189, 0, 67, 0, 3, 2, 2, 2,
					2, 2, 3, 2, 2, 2, 3, 3, 3, 3, 4, 6, 4, 4, 4, 4, 4, 8, 6, 6, 5, 6, 9, 8, 10, 10, 9,
					8, 9, 9, 10, 12, 15, 12, 10, 11, 14, 11, 9, 9, 13, 17, 13, 14, 15, 16, 16, 17, 16,
					10, 12, 18, 19, 18, 16, 19, 15, 16, 16, 16, 239, 191, 189, 224, 184, 169, 0, 11,
					8, 0, 1, 0, 1, 1, 1, 17, 0, 239, 191, 189, 224, 184, 172, 0, 6, 0, 16, 16, 5, 239,
					191, 189, 224, 184, 186, 0, 8, 1, 1, 0, 0, 63, 0, 224, 184, 178, 224, 184, 175, 32,
					239, 191, 189, 224, 184, 185,
				},
			},
			&email.File{
				FileType: "attachment",
				Name:     "attached-pdf-filename.pdf",
				ContentInfo: &email.ContentInfo{
					Type: "application/pdf",
					TypeParams: map[string]string{
						"name": "attached-pdf-name.pdf",
					},
					Disposition: "attachment",
					DispositionParams: map[string]string{
						"filename": "attached-pdf-filename.pdf",
					},
					TransferEncoding: "base64",
					ID:               "",
					Charset:          "iso-8859-11",
				},
				Data: []byte{
					37, 80, 68, 70, 45, 49, 46, 13, 116, 114, 97, 105, 108, 101, 114, 60, 60, 47, 82,
					111, 111, 116, 60, 60, 47, 80, 97, 103, 101, 115, 60, 60, 47, 75, 105, 100, 115,
					91, 60, 60, 47, 77, 101, 100, 105, 97, 66, 111, 120, 91, 48, 32, 48, 32, 51, 32,
					51, 93, 62, 62, 93, 62, 62, 62, 62, 62, 62,
				},
			},
			&email.File{
				FileType: "",
				Name:     "attached-pdf-without-disposition.pdf",
				ContentInfo: &email.ContentInfo{
					Type: "application/pdf",
					TypeParams: map[string]string{
						"name": "attached-pdf-without-disposition.pdf",
					},
					Disposition:       "",
					DispositionParams: map[string]string(nil), // p0
					TransferEncoding:  "base64",
					ID:                "",
					Charset:           "iso-8859-11",
				},
				Data: []byte{
					37, 80, 68, 70, 45, 49, 46, 13, 116, 114, 97, 105, 108, 101, 114, 60, 60, 47, 82,
					111, 111, 116, 60, 60, 47, 80, 97, 103, 101, 115, 60, 60, 47, 75, 105, 100, 115,
					91, 60, 60, 47, 77, 101, 100, 105, 97, 66, 111, 120, 91, 48, 32, 48, 32, 51, 32,
					51, 93, 62, 62, 93, 62, 62, 62, 62, 62, 62,
				},
			},
			&email.File{
				FileType: "attachment",
				Name:     "attached-json-filename.json",
				ContentInfo: &email.ContentInfo{
					Type: "application/json",
					TypeParams: map[string]string{
						"name": "attached-json-name.json",
					},
					Disposition: "attachment",
					DispositionParams: map[string]string{
						"filename": "attached-json-filename.json",
					},
					TransferEncoding: "7bit",
					ID:               "",
					Charset:          "iso-8859-11",
				},
				Data: []byte{
					123, 34, 102, 111, 111, 34, 58, 34, 98, 97, 114, 34, 125,
				},
			},
			&email.File{
				FileType: "attachment",
				Name:     "attached-text-plain-filename.txt",
				ContentInfo: &email.ContentInfo{
					Type: "text/plain",
					TypeParams: map[string]string{
						"name": "attached-text-plain-name.txt",
					},
					Disposition: "attachment",
					DispositionParams: map[string]string{
						"filename": "attached-text-plain-filename.txt",
					},
					TransferEncoding: "base64",
					ID:               "",
					Charset:          "iso-8859-11",
				},
				Data: []byte{
					84, 101, 120, 116, 47, 112, 108, 97, 105, 110, 32, 99, 111, 110, 116, 101, 110, 116,
					32, 97, 115, 32, 97, 110, 32, 97, 116, 116, 97, 99, 104, 101, 100, 32, 46, 116, 120,
					116, 32, 102, 105, 108, 101, 46,
				},
			},
			&email.File{
				FileType: "attachment",
				Name:     "attached-text-html-filename.html",
				ContentInfo: &email.ContentInfo{
					Type: "text/html",
					TypeParams: map[string]string{
						"name": "attached-text-html-name.html",
					},
					Disposition: "attachment",
					DispositionParams: map[string]string{
						"filename": "attached-text-html-filename.html",
					},
					TransferEncoding: "base64",
					ID:               "",
					Charset:          "iso-8859-11",
				},
				Data: []byte{
					84, 101, 120, 116, 47, 104, 116, 109, 108, 32, 99, 111, 110, 116, 101, 110, 116,
					32, 97, 115, 32, 97, 110, 32, 97, 116, 116, 97, 99, 104, 101, 100, 32, 46, 104, 116,
					109, 108, 32, 102, 105, 108, 101, 46,
				},
			},
		},
	}
	testEmailFromFile(t, fp, expectedEmail)
}

func TestParseEmailThaiMultipartMixedIso885911OverQuotedprintable(t *testing.T) {
	fp := "tests/test_thai_multipart_mixed_iso-8859-11_over_quoted-printable.txt"
	expectedEmail := &email.Email{
		Headers: email.Headers{
			Date: time.Time(time.Date(2019, 4, 1, 0, 55, 0, 0, time.UTC)),
			Sender: &mail.Address{
				Name:    "อลิซ ผู้ส่งจดหมาย",
				Address: "alis.phusngcdhmay@example.com",
			},
			From: []*mail.Address{
				&mail.Address{
					Name:    "อลิซ ผู้ส่งจดหมาย",
					Address: "alis.phusngcdhmay@example.com",
				},
				&mail.Address{
					Name:    "อลิซ ผู้ส่งจดหมาย",
					Address: "alis.phusngcdhmay@example.net",
				},
			},
			ReplyTo: []*mail.Address{
				&mail.Address{
					Name:    "อลิซ ผู้ส่งจดหมาย",
					Address: "alis.phusngcdhmay@example.net",
				},
			},
			To: []*mail.Address{
				&mail.Address{
					Name:    "บ๊อบ ผู้รับ",
					Address: "bob.phurab@example.com",
				},
				&mail.Address{
					Name:    "คาโรล ผู้รับ",
					Address: "carol.phurab@example.com",
				},
			},
			Cc: []*mail.Address{
				&mail.Address{
					Name:    "แดน ผู้รับ",
					Address: "dan.phurab@example.com",
				},
				&mail.Address{
					Name:    "อีฟ ผู้รับ",
					Address: "eve.phurab@example.com",
				},
			},
			Bcc: []*mail.Address{
				&mail.Address{
					Name:    "แฟรงค์ ผู้รับ",
					Address: "frank.phurab@example.com",
				},
				&mail.Address{
					Name:    "เกรซ ผู้รับ",
					Address: "grace.phurab@example.com",
				},
			},
			MessageID: "Message-Id-1@example.com",
			InReplyTo: []string{
				"Message-Id-0@example.com",
			},
			References: []string{
				"Message-Id-0@example.com",
			},
			Subject:  "📧 Test แพนแกรมภาษาไทย",
			Comments: "Message Header Comment",
			Keywords: []string{
				"Keyword 1",
				"Keyword 2",
			},
			ResentDate: time.Time(time.Date(2019, 4, 1, 0, 55, 0, 0, time.UTC)),
			ResentFrom: []*mail.Address{
				&mail.Address{
					Name:    "อลิซ ผู้ส่งจดหมาย",
					Address: "alis.phusngcdhmay@example.net",
				},
				&mail.Address{
					Name:    "อลิซ ผู้ส่งจดหมาย",
					Address: "alis.phusngcdhmay@example.com",
				},
			},
			ResentSender: &mail.Address{
				Name:    "อลิซ ผู้ส่งจดหมาย",
				Address: "alis.phusngcdhmay@example.net",
			},
			ResentTo: []*mail.Address{
				&mail.Address{
					Name:    "บ๊อบ ผู้รับ",
					Address: "bob.phurab@example.net",
				},
				&mail.Address{
					Name:    "คาโรล ผู้รับ",
					Address: "carol.phurab@example.net",
				},
			},
			ResentCc: []*mail.Address{
				&mail.Address{
					Name:    "แดน ผู้รับ",
					Address: "dan.phurab@example.net",
				},
				&mail.Address{
					Name:    "อีฟ ผู้รับ",
					Address: "eve.phurab@example.net",
				},
			},
			ResentBcc: []*mail.Address{
				&mail.Address{
					Name:    "แฟรงค์ ผู้รับ",
					Address: "frank.phurab@example.net",
				},
				&mail.Address{
					Name:    "เกรซ ผู้รับ",
					Address: "grace.phurab@example.net",
				},
			},
			ResentMessageID: "Message-Id-1@example.net",
			ExtraHeaders: map[string][]string{
				"X-Clacks-Overhead": []string{
					"GNU Terry Pratchett",
				},
			},
			ContentInfo: &email.ContentInfo{
				Type: "multipart/mixed",
				TypeParams: map[string]string{
					"boundary": "MixedBoundaryString",
					"charset":  "iso-8859-11",
				},
				Disposition:       "",
				DispositionParams: map[string]string(nil), // p0
				TransferEncoding:  "quoted-printable",
				ID:                "",
				Charset:           "iso-8859-11",
			},
			Received: nil,
		},
		Text: "เป็นมนุษย์สุดประเสริฐเลิศคุณค่า กว่าบรรดาฝูงสัตว์เดรัจฉาน จงฝ่าฟันพัฒนาวิชาการ อย่าล้างผลาญฤๅเข่นฆ่าบีฑาใคร ไม่ถือโทษโกรธแช่งซัดฮึดฮัดด่า หัดอภัยเหมือนกีฬาอัชฌาสัย ปฏิบัติประพฤติกฎกำหนดใจ พูดจาให้จ๊ะๆ จ๋าๆ น่าฟังเอยฯ\n" +
			"\n" +
			"นายสังฆภัณฑ์ เฮงพิทักษ์ฝั่ง ผู้เฒ่าซึ่งมีอาชีพเป็นฅนขายฃวด ถูกตำรวจปฏิบัติการจับฟ้องศาล ฐานลักนาฬิกาคุณหญิงฉัตรชฎา ฌานสมาธิ",
		EnrichedText: "<bold>เป็นมนุษย์สุดประเสริฐเลิศคุณค่า</bold> <italic>กว่าบรรดาฝูงสัตว์เดรัจฉาน</italic> <fixed>จงฝ่าฟันพัฒนาวิชาการ</fixed> <underline>อย่าล้างผลาญฤๅเข่นฆ่าบีฑาใคร</underline> ไม่ถือโทษโกรธแช่งซัดฮึดฮัดด่า หัดอภัยเหมือนกีฬาอัชฌาสัย ปฏิบัติประพฤติกฎกำหนดใจ พูดจาให้จ๊ะๆ จ๋าๆ น่าฟังเอยฯ\n" +
			"\n" +
			"นายสังฆภัณฑ์ เฮงพิทักษ์ฝั่ง ผู้เฒ่าซึ่งมีอาชีพเป็นฅนขายฃวด ถูกตำรวจปฏิบัติการจับฟ้องศาล ฐานลักนาฬิกาคุณหญิงฉัตรชฎา ฌานสมาธิ",
		HTML: "<html>\n" +
			"<div dir=\"ltr\">\n" +
			"<p>เป็นมนุษย์สุดประเสริฐเลิศคุณค่า กว่าบรรดาฝูงสัตว์เดรัจฉาน จงฝ่าฟันพัฒนาวิชาการ อย่าล้างผลาญฤๅเข่นฆ่าบีฑาใคร ไม่ถือโทษโกรธแช่งซัดฮึดฮัดด่า หัดอภัยเหมือนกีฬาอัชฌาสัย ปฏิบัติประพฤติกฎกำหนดใจ พูดจาให้จ๊ะๆ จ๋าๆ น่าฟังเอยฯ</p>\n" +
			"\n" +
			"<p>นายสังฆภัณฑ์ เฮงพิทักษ์ฝั่ง ผู้เฒ่าซึ่งมีอาชีพเป็นฅนขายฃวด ถูกตำรวจปฏิบัติการจับฟ้องศาล ฐานลักนาฬิกาคุณหญิงฉัตรชฎา ฌานสมาธิ</p>\n" +
			"</div>\n" +
			"</html>",
		Files: []*email.File{
			&email.File{
				FileType: "",
				Name:     "inline-jpg-image-without-disposition.jpg",
				ContentInfo: &email.ContentInfo{
					Type: "image/jpeg",
					TypeParams: map[string]string{
						"name": "inline-jpg-image-without-disposition.jpg",
					},
					Disposition:       "",
					DispositionParams: map[string]string(nil), // p0
					TransferEncoding:  "base64",
					ID:                "",
					Charset:           "iso-8859-11",
				},
				Data: []byte{
					239, 191, 189, 224, 184, 184, 239, 191, 189, 239, 191, 189, 0, 67, 0, 3, 2, 2, 2,
					2, 2, 3, 2, 2, 2, 3, 3, 3, 3, 4, 6, 4, 4, 4, 4, 4, 8, 6, 6, 5, 6, 9, 8, 10, 10, 9,
					8, 9, 9, 10, 12, 15, 12, 10, 11, 14, 11, 9, 9, 13, 17, 13, 14, 15, 16, 16, 17, 16,
					10, 12, 18, 19, 18, 16, 19, 15, 16, 16, 16, 239, 191, 189, 224, 184, 169, 0, 11,
					8, 0, 1, 0, 1, 1, 1, 17, 0, 239, 191, 189, 224, 184, 172, 0, 6, 0, 16, 16, 5, 239,
					191, 189, 224, 184, 186, 0, 8, 1, 1, 0, 0, 63, 0, 224, 184, 178, 224, 184, 175, 32,
					239, 191, 189, 224, 184, 185,
				},
			},
			&email.File{
				FileType: "inline",
				Name:     "inline-jpg-image-filename.jpg",
				ContentInfo: &email.ContentInfo{
					Type: "image/jpeg",
					TypeParams: map[string]string{
						"name": "inline-jpg-image-name.jpg",
					},
					Disposition: "inline",
					DispositionParams: map[string]string{
						"filename": "inline-jpg-image-filename.jpg",
					},
					TransferEncoding: "base64",
					ID:               "inline-jpg-image.jpg@example.com",
					Charset:          "iso-8859-11",
				},
				Data: []byte{
					239, 191, 189, 224, 184, 184, 239, 191, 189, 239, 191, 189, 0, 67, 0, 3, 2, 2, 2,
					2, 2, 3, 2, 2, 2, 3, 3, 3, 3, 4, 6, 4, 4, 4, 4, 4, 8, 6, 6, 5, 6, 9, 8, 10, 10, 9,
					8, 9, 9, 10, 12, 15, 12, 10, 11, 14, 11, 9, 9, 13, 17, 13, 14, 15, 16, 16, 17, 16,
					10, 12, 18, 19, 18, 16, 19, 15, 16, 16, 16, 239, 191, 189, 224, 184, 169, 0, 11,
					8, 0, 1, 0, 1, 1, 1, 17, 0, 239, 191, 189, 224, 184, 172, 0, 6, 0, 16, 16, 5, 239,
					191, 189, 224, 184, 186, 0, 8, 1, 1, 0, 0, 63, 0, 224, 184, 178, 224, 184, 175, 32,
					239, 191, 189, 224, 184, 185,
				},
			},
			&email.File{
				FileType: "attachment",
				Name:     "attached-pdf-filename.pdf",
				ContentInfo: &email.ContentInfo{
					Type: "application/pdf",
					TypeParams: map[string]string{
						"name": "attached-pdf-name.pdf",
					},
					Disposition: "attachment",
					DispositionParams: map[string]string{
						"filename": "attached-pdf-filename.pdf",
					},
					TransferEncoding: "base64",
					ID:               "",
					Charset:          "iso-8859-11",
				},
				Data: []byte{
					37, 80, 68, 70, 45, 49, 46, 13, 116, 114, 97, 105, 108, 101, 114, 60, 60, 47, 82,
					111, 111, 116, 60, 60, 47, 80, 97, 103, 101, 115, 60, 60, 47, 75, 105, 100, 115,
					91, 60, 60, 47, 77, 101, 100, 105, 97, 66, 111, 120, 91, 48, 32, 48, 32, 51, 32,
					51, 93, 62, 62, 93, 62, 62, 62, 62, 62, 62,
				},
			},
			&email.File{
				FileType: "",
				Name:     "attached-pdf-without-disposition.pdf",
				ContentInfo: &email.ContentInfo{
					Type: "application/pdf",
					TypeParams: map[string]string{
						"name": "attached-pdf-without-disposition.pdf",
					},
					Disposition:       "",
					DispositionParams: map[string]string(nil), // p0
					TransferEncoding:  "base64",
					ID:                "",
					Charset:           "iso-8859-11",
				},
				Data: []byte{
					37, 80, 68, 70, 45, 49, 46, 13, 116, 114, 97, 105, 108, 101, 114, 60, 60, 47, 82,
					111, 111, 116, 60, 60, 47, 80, 97, 103, 101, 115, 60, 60, 47, 75, 105, 100, 115,
					91, 60, 60, 47, 77, 101, 100, 105, 97, 66, 111, 120, 91, 48, 32, 48, 32, 51, 32,
					51, 93, 62, 62, 93, 62, 62, 62, 62, 62, 62,
				},
			},
			&email.File{
				FileType: "attachment",
				Name:     "attached-json-filename.json",
				ContentInfo: &email.ContentInfo{
					Type: "application/json",
					TypeParams: map[string]string{
						"name": "attached-json-name.json",
					},
					Disposition: "attachment",
					DispositionParams: map[string]string{
						"filename": "attached-json-filename.json",
					},
					TransferEncoding: "7bit",
					ID:               "",
					Charset:          "iso-8859-11",
				},
				Data: []byte{
					123, 34, 102, 111, 111, 34, 58, 34, 98, 97, 114, 34, 125,
				},
			},
			&email.File{
				FileType: "attachment",
				Name:     "attached-text-plain-filename.txt",
				ContentInfo: &email.ContentInfo{
					Type: "text/plain",
					TypeParams: map[string]string{
						"name": "attached-text-plain-name.txt",
					},
					Disposition: "attachment",
					DispositionParams: map[string]string{
						"filename": "attached-text-plain-filename.txt",
					},
					TransferEncoding: "base64",
					ID:               "",
					Charset:          "iso-8859-11",
				},
				Data: []byte{
					84, 101, 120, 116, 47, 112, 108, 97, 105, 110, 32, 99, 111, 110, 116, 101, 110, 116,
					32, 97, 115, 32, 97, 110, 32, 97, 116, 116, 97, 99, 104, 101, 100, 32, 46, 116, 120,
					116, 32, 102, 105, 108, 101, 46,
				},
			},
			&email.File{
				FileType: "attachment",
				Name:     "attached-text-html-filename.html",
				ContentInfo: &email.ContentInfo{
					Type: "text/html",
					TypeParams: map[string]string{
						"name": "attached-text-html-name.html",
					},
					Disposition: "attachment",
					DispositionParams: map[string]string{
						"filename": "attached-text-html-filename.html",
					},
					TransferEncoding: "base64",
					ID:               "",
					Charset:          "iso-8859-11",
				},
				Data: []byte{
					84, 101, 120, 116, 47, 104, 116, 109, 108, 32, 99, 111, 110, 116, 101, 110, 116,
					32, 97, 115, 32, 97, 110, 32, 97, 116, 116, 97, 99, 104, 101, 100, 32, 46, 104, 116,
					109, 108, 32, 102, 105, 108, 101, 46,
				},
			},
		},
	}
	testEmailFromFile(t, fp, expectedEmail)
}

func TestParseEmailThaiMultipartMixedWindows874OverBase64(t *testing.T) {
	fp := "tests/test_thai_multipart_mixed_windows-874_over_base64.txt"
	expectedEmail := &email.Email{
		Headers: email.Headers{
			Date: time.Time(time.Date(2019, 4, 1, 0, 55, 0, 0, time.UTC)),
			Sender: &mail.Address{
				Name:    "อลิซ ผู้ส่งจดหมาย",
				Address: "alis.phusngcdhmay@example.com",
			},
			From: []*mail.Address{
				&mail.Address{
					Name:    "อลิซ ผู้ส่งจดหมาย",
					Address: "alis.phusngcdhmay@example.com",
				},
				&mail.Address{
					Name:    "อลิซ ผู้ส่งจดหมาย",
					Address: "alis.phusngcdhmay@example.net",
				},
			},
			ReplyTo: []*mail.Address{
				&mail.Address{
					Name:    "อลิซ ผู้ส่งจดหมาย",
					Address: "alis.phusngcdhmay@example.net",
				},
			},
			To: []*mail.Address{
				&mail.Address{
					Name:    "บ๊อบ ผู้รับ",
					Address: "bob.phurab@example.com",
				},
				&mail.Address{
					Name:    "คาโรล ผู้รับ",
					Address: "carol.phurab@example.com",
				},
			},
			Cc: []*mail.Address{
				&mail.Address{
					Name:    "แดน ผู้รับ",
					Address: "dan.phurab@example.com",
				},
				&mail.Address{
					Name:    "อีฟ ผู้รับ",
					Address: "eve.phurab@example.com",
				},
			},
			Bcc: []*mail.Address{
				&mail.Address{
					Name:    "แฟรงค์ ผู้รับ",
					Address: "frank.phurab@example.com",
				},
				&mail.Address{
					Name:    "เกรซ ผู้รับ",
					Address: "grace.phurab@example.com",
				},
			},
			MessageID: "Message-Id-1@example.com",
			InReplyTo: []string{
				"Message-Id-0@example.com",
			},
			References: []string{
				"Message-Id-0@example.com",
			},
			Subject:  "📧 Test แพนแกรมภาษาไทย",
			Comments: "Message Header Comment",
			Keywords: []string{
				"Keyword 1",
				"Keyword 2",
			},
			ResentDate: time.Time(time.Date(2019, 4, 1, 0, 55, 0, 0, time.UTC)),
			ResentFrom: []*mail.Address{
				&mail.Address{
					Name:    "อลิซ ผู้ส่งจดหมาย",
					Address: "alis.phusngcdhmay@example.net",
				},
				&mail.Address{
					Name:    "อลิซ ผู้ส่งจดหมาย",
					Address: "alis.phusngcdhmay@example.com",
				},
			},
			ResentSender: &mail.Address{
				Name:    "อลิซ ผู้ส่งจดหมาย",
				Address: "alis.phusngcdhmay@example.net",
			},
			ResentTo: []*mail.Address{
				&mail.Address{
					Name:    "บ๊อบ ผู้รับ",
					Address: "bob.phurab@example.net",
				},
				&mail.Address{
					Name:    "คาโรล ผู้รับ",
					Address: "carol.phurab@example.net",
				},
			},
			ResentCc: []*mail.Address{
				&mail.Address{
					Name:    "แดน ผู้รับ",
					Address: "dan.phurab@example.net",
				},
				&mail.Address{
					Name:    "อีฟ ผู้รับ",
					Address: "eve.phurab@example.net",
				},
			},
			ResentBcc: []*mail.Address{
				&mail.Address{
					Name:    "แฟรงค์ ผู้รับ",
					Address: "frank.phurab@example.net",
				},
				&mail.Address{
					Name:    "เกรซ ผู้รับ",
					Address: "grace.phurab@example.net",
				},
			},
			ResentMessageID: "Message-Id-1@example.net",
			ExtraHeaders: map[string][]string{
				"X-Clacks-Overhead": []string{
					"GNU Terry Pratchett",
				},
			},
			ContentInfo: &email.ContentInfo{
				Type: "multipart/mixed",
				TypeParams: map[string]string{
					"boundary": "MixedBoundaryString",
					"charset":  "windows-874",
				},
				Disposition:       "",
				DispositionParams: map[string]string(nil), // p0
				TransferEncoding:  "base64",
				ID:                "",
				Charset:           "windows-874",
			},
			Received: nil,
		},
		Text: "เป็นมนุษย์สุดประเสริฐเลิศคุณค่า กว่าบรรดาฝูงสัตว์เดรัจฉาน จงฝ่าฟันพัฒนาวิชาการ อย่าล้างผลาญฤๅเข่นฆ่าบีฑาใคร ไม่ถือโทษโกรธแช่งซัดฮึดฮัดด่า หัดอภัยเหมือนกีฬาอัชฌาสัย ปฏิบัติประพฤติกฎกำหนดใจ พูดจาให้จ๊ะๆ จ๋าๆ น่าฟังเอยฯ\n" +
			"\n" +
			"นายสังฆภัณฑ์ เฮงพิทักษ์ฝั่ง ผู้เฒ่าซึ่งมีอาชีพเป็นฅนขายฃวด ถูกตำรวจปฏิบัติการจับฟ้องศาล ฐานลักนาฬิกาคุณหญิงฉัตรชฎา ฌานสมาธิ",
		EnrichedText: "<bold>เป็นมนุษย์สุดประเสริฐเลิศคุณค่า</bold> <italic>กว่าบรรดาฝูงสัตว์เดรัจฉาน</italic> <fixed>จงฝ่าฟันพัฒนาวิชาการ</fixed> <underline>อย่าล้างผลาญฤๅเข่นฆ่าบีฑาใคร</underline> ไม่ถือโทษโกรธแช่งซัดฮึดฮัดด่า หัดอภัยเหมือนกีฬาอัชฌาสัย ปฏิบัติประพฤติกฎกำหนดใจ พูดจาให้จ๊ะๆ จ๋าๆ น่าฟังเอยฯ\n" +
			"\n" +
			"นายสังฆภัณฑ์ เฮงพิทักษ์ฝั่ง ผู้เฒ่าซึ่งมีอาชีพเป็นฅนขายฃวด ถูกตำรวจปฏิบัติการจับฟ้องศาล ฐานลักนาฬิกาคุณหญิงฉัตรชฎา ฌานสมาธิ",
		HTML: "<html>\n" +
			"<div dir=\"ltr\">\n" +
			"<p>เป็นมนุษย์สุดประเสริฐเลิศคุณค่า กว่าบรรดาฝูงสัตว์เดรัจฉาน จงฝ่าฟันพัฒนาวิชาการ อย่าล้างผลาญฤๅเข่นฆ่าบีฑาใคร ไม่ถือโทษโกรธแช่งซัดฮึดฮัดด่า หัดอภัยเหมือนกีฬาอัชฌาสัย ปฏิบัติประพฤติกฎกำหนดใจ พูดจาให้จ๊ะๆ จ๋าๆ น่าฟังเอยฯ</p>\n" +
			"\n" +
			"<p>นายสังฆภัณฑ์ เฮงพิทักษ์ฝั่ง ผู้เฒ่าซึ่งมีอาชีพเป็นฅนขายฃวด ถูกตำรวจปฏิบัติการจับฟ้องศาล ฐานลักนาฬิกาคุณหญิงฉัตรชฎา ฌานสมาธิ</p>\n" +
			"</div>\n" +
			"</html>",
		Files: []*email.File{
			&email.File{
				FileType: "",
				Name:     "inline-jpg-image-without-disposition.jpg",
				ContentInfo: &email.ContentInfo{
					Type: "image/jpeg",
					TypeParams: map[string]string{
						"name": "inline-jpg-image-without-disposition.jpg",
					},
					Disposition:       "",
					DispositionParams: map[string]string(nil), // p0
					TransferEncoding:  "base64",
					ID:                "",
					Charset:           "windows-874",
				},
				Data: []byte{
					239, 191, 189, 224, 184, 184, 239, 191, 189, 239, 191, 189, 0, 67, 0, 3, 2, 2, 2,
					2, 2, 3, 2, 2, 2, 3, 3, 3, 3, 4, 6, 4, 4, 4, 4, 4, 8, 6, 6, 5, 6, 9, 8, 10, 10, 9,
					8, 9, 9, 10, 12, 15, 12, 10, 11, 14, 11, 9, 9, 13, 17, 13, 14, 15, 16, 16, 17, 16,
					10, 12, 18, 19, 18, 16, 19, 15, 16, 16, 16, 239, 191, 189, 224, 184, 169, 0, 11,
					8, 0, 1, 0, 1, 1, 1, 17, 0, 239, 191, 189, 224, 184, 172, 0, 6, 0, 16, 16, 5, 239,
					191, 189, 224, 184, 186, 0, 8, 1, 1, 0, 0, 63, 0, 224, 184, 178, 224, 184, 175, 32,
					239, 191, 189, 224, 184, 185,
				},
			},
			&email.File{
				FileType: "inline",
				Name:     "inline-jpg-image-filename.jpg",
				ContentInfo: &email.ContentInfo{
					Type: "image/jpeg",
					TypeParams: map[string]string{
						"name": "inline-jpg-image-name.jpg",
					},
					Disposition: "inline",
					DispositionParams: map[string]string{
						"filename": "inline-jpg-image-filename.jpg",
					},
					TransferEncoding: "base64",
					ID:               "inline-jpg-image.jpg@example.com",
					Charset:          "windows-874",
				},
				Data: []byte{
					239, 191, 189, 224, 184, 184, 239, 191, 189, 239, 191, 189, 0, 67, 0, 3, 2, 2, 2,
					2, 2, 3, 2, 2, 2, 3, 3, 3, 3, 4, 6, 4, 4, 4, 4, 4, 8, 6, 6, 5, 6, 9, 8, 10, 10, 9,
					8, 9, 9, 10, 12, 15, 12, 10, 11, 14, 11, 9, 9, 13, 17, 13, 14, 15, 16, 16, 17, 16,
					10, 12, 18, 19, 18, 16, 19, 15, 16, 16, 16, 239, 191, 189, 224, 184, 169, 0, 11,
					8, 0, 1, 0, 1, 1, 1, 17, 0, 239, 191, 189, 224, 184, 172, 0, 6, 0, 16, 16, 5, 239,
					191, 189, 224, 184, 186, 0, 8, 1, 1, 0, 0, 63, 0, 224, 184, 178, 224, 184, 175, 32,
					239, 191, 189, 224, 184, 185,
				},
			},
			&email.File{
				FileType: "attachment",
				Name:     "attached-pdf-filename.pdf",
				ContentInfo: &email.ContentInfo{
					Type: "application/pdf",
					TypeParams: map[string]string{
						"name": "attached-pdf-name.pdf",
					},
					Disposition: "attachment",
					DispositionParams: map[string]string{
						"filename": "attached-pdf-filename.pdf",
					},
					TransferEncoding: "base64",
					ID:               "",
					Charset:          "windows-874",
				},
				Data: []byte{
					37, 80, 68, 70, 45, 49, 46, 13, 116, 114, 97, 105, 108, 101, 114, 60, 60, 47, 82,
					111, 111, 116, 60, 60, 47, 80, 97, 103, 101, 115, 60, 60, 47, 75, 105, 100, 115,
					91, 60, 60, 47, 77, 101, 100, 105, 97, 66, 111, 120, 91, 48, 32, 48, 32, 51, 32,
					51, 93, 62, 62, 93, 62, 62, 62, 62, 62, 62,
				},
			},
			&email.File{
				FileType: "",
				Name:     "attached-pdf-without-disposition.pdf",
				ContentInfo: &email.ContentInfo{
					Type: "application/pdf",
					TypeParams: map[string]string{
						"name": "attached-pdf-without-disposition.pdf",
					},
					Disposition:       "",
					DispositionParams: map[string]string(nil), // p0
					TransferEncoding:  "base64",
					ID:                "",
					Charset:           "windows-874",
				},
				Data: []byte{
					37, 80, 68, 70, 45, 49, 46, 13, 116, 114, 97, 105, 108, 101, 114, 60, 60, 47, 82,
					111, 111, 116, 60, 60, 47, 80, 97, 103, 101, 115, 60, 60, 47, 75, 105, 100, 115,
					91, 60, 60, 47, 77, 101, 100, 105, 97, 66, 111, 120, 91, 48, 32, 48, 32, 51, 32,
					51, 93, 62, 62, 93, 62, 62, 62, 62, 62, 62,
				},
			},
			&email.File{
				FileType: "attachment",
				Name:     "attached-json-filename.json",
				ContentInfo: &email.ContentInfo{
					Type: "application/json",
					TypeParams: map[string]string{
						"name": "attached-json-name.json",
					},
					Disposition: "attachment",
					DispositionParams: map[string]string{
						"filename": "attached-json-filename.json",
					},
					TransferEncoding: "7bit",
					ID:               "",
					Charset:          "windows-874",
				},
				Data: []byte{
					123, 34, 102, 111, 111, 34, 58, 34, 98, 97, 114, 34, 125,
				},
			},
			&email.File{
				FileType: "attachment",
				Name:     "attached-text-plain-filename.txt",
				ContentInfo: &email.ContentInfo{
					Type: "text/plain",
					TypeParams: map[string]string{
						"name": "attached-text-plain-name.txt",
					},
					Disposition: "attachment",
					DispositionParams: map[string]string{
						"filename": "attached-text-plain-filename.txt",
					},
					TransferEncoding: "base64",
					ID:               "",
					Charset:          "windows-874",
				},
				Data: []byte{
					84, 101, 120, 116, 47, 112, 108, 97, 105, 110, 32, 99, 111, 110, 116, 101, 110, 116,
					32, 97, 115, 32, 97, 110, 32, 97, 116, 116, 97, 99, 104, 101, 100, 32, 46, 116, 120,
					116, 32, 102, 105, 108, 101, 46,
				},
			},
			&email.File{
				FileType: "attachment",
				Name:     "attached-text-html-filename.html",
				ContentInfo: &email.ContentInfo{
					Type: "text/html",
					TypeParams: map[string]string{
						"name": "attached-text-html-name.html",
					},
					Disposition: "attachment",
					DispositionParams: map[string]string{
						"filename": "attached-text-html-filename.html",
					},
					TransferEncoding: "base64",
					ID:               "",
					Charset:          "windows-874",
				},
				Data: []byte{
					84, 101, 120, 116, 47, 104, 116, 109, 108, 32, 99, 111, 110, 116, 101, 110, 116,
					32, 97, 115, 32, 97, 110, 32, 97, 116, 116, 97, 99, 104, 101, 100, 32, 46, 104, 116,
					109, 108, 32, 102, 105, 108, 101, 46,
				},
			},
		},
	}
	testEmailFromFile(t, fp, expectedEmail)
}

func TestParseEmailThaiMultipartMixedWindows874OverQuotedprintable(t *testing.T) {
	fp := "tests/test_thai_multipart_mixed_windows-874_over_quoted-printable.txt"
	expectedEmail := &email.Email{
		Headers: email.Headers{
			Date: time.Time(time.Date(2019, 4, 1, 0, 55, 0, 0, time.UTC)),
			Sender: &mail.Address{
				Name:    "อลิซ ผู้ส่งจดหมาย",
				Address: "alis.phusngcdhmay@example.com",
			},
			From: []*mail.Address{
				&mail.Address{
					Name:    "อลิซ ผู้ส่งจดหมาย",
					Address: "alis.phusngcdhmay@example.com",
				},
				&mail.Address{
					Name:    "อลิซ ผู้ส่งจดหมาย",
					Address: "alis.phusngcdhmay@example.net",
				},
			},
			ReplyTo: []*mail.Address{
				&mail.Address{
					Name:    "อลิซ ผู้ส่งจดหมาย",
					Address: "alis.phusngcdhmay@example.net",
				},
			},
			To: []*mail.Address{
				&mail.Address{
					Name:    "บ๊อบ ผู้รับ",
					Address: "bob.phurab@example.com",
				},
				&mail.Address{
					Name:    "คาโรล ผู้รับ",
					Address: "carol.phurab@example.com",
				},
			},
			Cc: []*mail.Address{
				&mail.Address{
					Name:    "แดน ผู้รับ",
					Address: "dan.phurab@example.com",
				},
				&mail.Address{
					Name:    "อีฟ ผู้รับ",
					Address: "eve.phurab@example.com",
				},
			},
			Bcc: []*mail.Address{
				&mail.Address{
					Name:    "แฟรงค์ ผู้รับ",
					Address: "frank.phurab@example.com",
				},
				&mail.Address{
					Name:    "เกรซ ผู้รับ",
					Address: "grace.phurab@example.com",
				},
			},
			MessageID: "Message-Id-1@example.com",
			InReplyTo: []string{
				"Message-Id-0@example.com",
			},
			References: []string{
				"Message-Id-0@example.com",
			},
			Subject:  "📧 Test แพนแกรมภาษาไทย",
			Comments: "Message Header Comment",
			Keywords: []string{
				"Keyword 1",
				"Keyword 2",
			},
			ResentDate: time.Time(time.Date(2019, 4, 1, 0, 55, 0, 0, time.UTC)),
			ResentFrom: []*mail.Address{
				&mail.Address{
					Name:    "อลิซ ผู้ส่งจดหมาย",
					Address: "alis.phusngcdhmay@example.net",
				},
				&mail.Address{
					Name:    "อลิซ ผู้ส่งจดหมาย",
					Address: "alis.phusngcdhmay@example.com",
				},
			},
			ResentSender: &mail.Address{
				Name:    "อลิซ ผู้ส่งจดหมาย",
				Address: "alis.phusngcdhmay@example.net",
			},
			ResentTo: []*mail.Address{
				&mail.Address{
					Name:    "บ๊อบ ผู้รับ",
					Address: "bob.phurab@example.net",
				},
				&mail.Address{
					Name:    "คาโรล ผู้รับ",
					Address: "carol.phurab@example.net",
				},
			},
			ResentCc: []*mail.Address{
				&mail.Address{
					Name:    "แดน ผู้รับ",
					Address: "dan.phurab@example.net",
				},
				&mail.Address{
					Name:    "อีฟ ผู้รับ",
					Address: "eve.phurab@example.net",
				},
			},
			ResentBcc: []*mail.Address{
				&mail.Address{
					Name:    "แฟรงค์ ผู้รับ",
					Address: "frank.phurab@example.net",
				},
				&mail.Address{
					Name:    "เกรซ ผู้รับ",
					Address: "grace.phurab@example.net",
				},
			},
			ResentMessageID: "Message-Id-1@example.net",
			ExtraHeaders: map[string][]string{
				"X-Clacks-Overhead": []string{
					"GNU Terry Pratchett",
				},
			},
			ContentInfo: &email.ContentInfo{
				Type: "multipart/mixed",
				TypeParams: map[string]string{
					"boundary": "MixedBoundaryString",
					"charset":  "windows-874",
				},
				Disposition:       "",
				DispositionParams: map[string]string(nil), // p0
				TransferEncoding:  "quoted-printable",
				ID:                "",
				Charset:           "windows-874",
			},
			Received: nil,
		},
		Text: "เป็นมนุษย์สุดประเสริฐเลิศคุณค่า กว่าบรรดาฝูงสัตว์เดรัจฉาน จงฝ่าฟันพัฒนาวิชาการ อย่าล้างผลาญฤๅเข่นฆ่าบีฑาใคร ไม่ถือโทษโกรธแช่งซัดฮึดฮัดด่า หัดอภัยเหมือนกีฬาอัชฌาสัย ปฏิบัติประพฤติกฎกำหนดใจ พูดจาให้จ๊ะๆ จ๋าๆ น่าฟังเอยฯ\n" +
			"\n" +
			"นายสังฆภัณฑ์ เฮงพิทักษ์ฝั่ง ผู้เฒ่าซึ่งมีอาชีพเป็นฅนขายฃวด ถูกตำรวจปฏิบัติการจับฟ้องศาล ฐานลักนาฬิกาคุณหญิงฉัตรชฎา ฌานสมาธิ",
		EnrichedText: "<bold>เป็นมนุษย์สุดประเสริฐเลิศคุณค่า</bold> <italic>กว่าบรรดาฝูงสัตว์เดรัจฉาน</italic> <fixed>จงฝ่าฟันพัฒนาวิชาการ</fixed> <underline>อย่าล้างผลาญฤๅเข่นฆ่าบีฑาใคร</underline> ไม่ถือโทษโกรธแช่งซัดฮึดฮัดด่า หัดอภัยเหมือนกีฬาอัชฌาสัย ปฏิบัติประพฤติกฎกำหนดใจ พูดจาให้จ๊ะๆ จ๋าๆ น่าฟังเอยฯ\n" +
			"\n" +
			"นายสังฆภัณฑ์ เฮงพิทักษ์ฝั่ง ผู้เฒ่าซึ่งมีอาชีพเป็นฅนขายฃวด ถูกตำรวจปฏิบัติการจับฟ้องศาล ฐานลักนาฬิกาคุณหญิงฉัตรชฎา ฌานสมาธิ",
		HTML: "<html>\n" +
			"<div dir=\"ltr\">\n" +
			"<p>เป็นมนุษย์สุดประเสริฐเลิศคุณค่า กว่าบรรดาฝูงสัตว์เดรัจฉาน จงฝ่าฟันพัฒนาวิชาการ อย่าล้างผลาญฤๅเข่นฆ่าบีฑาใคร ไม่ถือโทษโกรธแช่งซัดฮึดฮัดด่า หัดอภัยเหมือนกีฬาอัชฌาสัย ปฏิบัติประพฤติกฎกำหนดใจ พูดจาให้จ๊ะๆ จ๋าๆ น่าฟังเอยฯ</p>\n" +
			"\n" +
			"<p>นายสังฆภัณฑ์ เฮงพิทักษ์ฝั่ง ผู้เฒ่าซึ่งมีอาชีพเป็นฅนขายฃวด ถูกตำรวจปฏิบัติการจับฟ้องศาล ฐานลักนาฬิกาคุณหญิงฉัตรชฎา ฌานสมาธิ</p>\n" +
			"</div>\n" +
			"</html>",
		Files: []*email.File{
			&email.File{
				FileType: "",
				Name:     "inline-jpg-image-without-disposition.jpg",
				ContentInfo: &email.ContentInfo{
					Type: "image/jpeg",
					TypeParams: map[string]string{
						"name": "inline-jpg-image-without-disposition.jpg",
					},
					Disposition:       "",
					DispositionParams: map[string]string(nil), // p0
					TransferEncoding:  "base64",
					ID:                "",
					Charset:           "windows-874",
				},
				Data: []byte{
					239, 191, 189, 224, 184, 184, 239, 191, 189, 239, 191, 189, 0, 67, 0, 3, 2, 2, 2,
					2, 2, 3, 2, 2, 2, 3, 3, 3, 3, 4, 6, 4, 4, 4, 4, 4, 8, 6, 6, 5, 6, 9, 8, 10, 10, 9,
					8, 9, 9, 10, 12, 15, 12, 10, 11, 14, 11, 9, 9, 13, 17, 13, 14, 15, 16, 16, 17, 16,
					10, 12, 18, 19, 18, 16, 19, 15, 16, 16, 16, 239, 191, 189, 224, 184, 169, 0, 11,
					8, 0, 1, 0, 1, 1, 1, 17, 0, 239, 191, 189, 224, 184, 172, 0, 6, 0, 16, 16, 5, 239,
					191, 189, 224, 184, 186, 0, 8, 1, 1, 0, 0, 63, 0, 224, 184, 178, 224, 184, 175, 32,
					239, 191, 189, 224, 184, 185,
				},
			},
			&email.File{
				FileType: "inline",
				Name:     "inline-jpg-image-filename.jpg",
				ContentInfo: &email.ContentInfo{
					Type: "image/jpeg",
					TypeParams: map[string]string{
						"name": "inline-jpg-image-name.jpg",
					},
					Disposition: "inline",
					DispositionParams: map[string]string{
						"filename": "inline-jpg-image-filename.jpg",
					},
					TransferEncoding: "base64",
					ID:               "inline-jpg-image.jpg@example.com",
					Charset:          "windows-874",
				},
				Data: []byte{
					239, 191, 189, 224, 184, 184, 239, 191, 189, 239, 191, 189, 0, 67, 0, 3, 2, 2, 2,
					2, 2, 3, 2, 2, 2, 3, 3, 3, 3, 4, 6, 4, 4, 4, 4, 4, 8, 6, 6, 5, 6, 9, 8, 10, 10, 9,
					8, 9, 9, 10, 12, 15, 12, 10, 11, 14, 11, 9, 9, 13, 17, 13, 14, 15, 16, 16, 17, 16,
					10, 12, 18, 19, 18, 16, 19, 15, 16, 16, 16, 239, 191, 189, 224, 184, 169, 0, 11,
					8, 0, 1, 0, 1, 1, 1, 17, 0, 239, 191, 189, 224, 184, 172, 0, 6, 0, 16, 16, 5, 239,
					191, 189, 224, 184, 186, 0, 8, 1, 1, 0, 0, 63, 0, 224, 184, 178, 224, 184, 175, 32,
					239, 191, 189, 224, 184, 185,
				},
			},
			&email.File{
				FileType: "attachment",
				Name:     "attached-pdf-filename.pdf",
				ContentInfo: &email.ContentInfo{
					Type: "application/pdf",
					TypeParams: map[string]string{
						"name": "attached-pdf-name.pdf",
					},
					Disposition: "attachment",
					DispositionParams: map[string]string{
						"filename": "attached-pdf-filename.pdf",
					},
					TransferEncoding: "base64",
					ID:               "",
					Charset:          "windows-874",
				},
				Data: []byte{
					37, 80, 68, 70, 45, 49, 46, 13, 116, 114, 97, 105, 108, 101, 114, 60, 60, 47, 82,
					111, 111, 116, 60, 60, 47, 80, 97, 103, 101, 115, 60, 60, 47, 75, 105, 100, 115,
					91, 60, 60, 47, 77, 101, 100, 105, 97, 66, 111, 120, 91, 48, 32, 48, 32, 51, 32,
					51, 93, 62, 62, 93, 62, 62, 62, 62, 62, 62,
				},
			},
			&email.File{
				FileType: "",
				Name:     "attached-pdf-without-disposition.pdf",
				ContentInfo: &email.ContentInfo{
					Type: "application/pdf",
					TypeParams: map[string]string{
						"name": "attached-pdf-without-disposition.pdf",
					},
					Disposition:       "",
					DispositionParams: map[string]string(nil), // p0
					TransferEncoding:  "base64",
					ID:                "",
					Charset:           "windows-874",
				},
				Data: []byte{
					37, 80, 68, 70, 45, 49, 46, 13, 116, 114, 97, 105, 108, 101, 114, 60, 60, 47, 82,
					111, 111, 116, 60, 60, 47, 80, 97, 103, 101, 115, 60, 60, 47, 75, 105, 100, 115,
					91, 60, 60, 47, 77, 101, 100, 105, 97, 66, 111, 120, 91, 48, 32, 48, 32, 51, 32,
					51, 93, 62, 62, 93, 62, 62, 62, 62, 62, 62,
				},
			},
			&email.File{
				FileType: "attachment",
				Name:     "attached-json-filename.json",
				ContentInfo: &email.ContentInfo{
					Type: "application/json",
					TypeParams: map[string]string{
						"name": "attached-json-name.json",
					},
					Disposition: "attachment",
					DispositionParams: map[string]string{
						"filename": "attached-json-filename.json",
					},
					TransferEncoding: "7bit",
					ID:               "",
					Charset:          "windows-874",
				},
				Data: []byte{
					123, 34, 102, 111, 111, 34, 58, 34, 98, 97, 114, 34, 125,
				},
			},
			&email.File{
				FileType: "attachment",
				Name:     "attached-text-plain-filename.txt",
				ContentInfo: &email.ContentInfo{
					Type: "text/plain",
					TypeParams: map[string]string{
						"name": "attached-text-plain-name.txt",
					},
					Disposition: "attachment",
					DispositionParams: map[string]string{
						"filename": "attached-text-plain-filename.txt",
					},
					TransferEncoding: "base64",
					ID:               "",
					Charset:          "windows-874",
				},
				Data: []byte{
					84, 101, 120, 116, 47, 112, 108, 97, 105, 110, 32, 99, 111, 110, 116, 101, 110, 116,
					32, 97, 115, 32, 97, 110, 32, 97, 116, 116, 97, 99, 104, 101, 100, 32, 46, 116, 120,
					116, 32, 102, 105, 108, 101, 46,
				},
			},
			&email.File{
				FileType: "attachment",
				Name:     "attached-text-html-filename.html",
				ContentInfo: &email.ContentInfo{
					Type: "text/html",
					TypeParams: map[string]string{
						"name": "attached-text-html-name.html",
					},
					Disposition: "attachment",
					DispositionParams: map[string]string{
						"filename": "attached-text-html-filename.html",
					},
					TransferEncoding: "base64",
					ID:               "",
					Charset:          "windows-874",
				},
				Data: []byte{
					84, 101, 120, 116, 47, 104, 116, 109, 108, 32, 99, 111, 110, 116, 101, 110, 116,
					32, 97, 115, 32, 97, 110, 32, 97, 116, 116, 97, 99, 104, 101, 100, 32, 46, 104, 116,
					109, 108, 32, 102, 105, 108, 101, 46,
				},
			},
		},
	}
	testEmailFromFile(t, fp, expectedEmail)
}

func TestParseEmailThaiMultipartMixedTis620OverBase64(t *testing.T) {
	fp := "tests/test_thai_multipart_mixed_tis-620_over_base64.txt"
	expectedEmail := &email.Email{
		Headers: email.Headers{
			Date: time.Time(time.Date(2019, 4, 1, 0, 55, 0, 0, time.UTC)),
			Sender: &mail.Address{
				Name:    "อลิซ ผู้ส่งจดหมาย",
				Address: "alis.phusngcdhmay@example.com",
			},
			From: []*mail.Address{
				&mail.Address{
					Name:    "อลิซ ผู้ส่งจดหมาย",
					Address: "alis.phusngcdhmay@example.com",
				},
				&mail.Address{
					Name:    "อลิซ ผู้ส่งจดหมาย",
					Address: "alis.phusngcdhmay@example.net",
				},
			},
			ReplyTo: []*mail.Address{
				&mail.Address{
					Name:    "อลิซ ผู้ส่งจดหมาย",
					Address: "alis.phusngcdhmay@example.net",
				},
			},
			To: []*mail.Address{
				&mail.Address{
					Name:    "บ๊อบ ผู้รับ",
					Address: "bob.phurab@example.com",
				},
				&mail.Address{
					Name:    "คาโรล ผู้รับ",
					Address: "carol.phurab@example.com",
				},
			},
			Cc: []*mail.Address{
				&mail.Address{
					Name:    "แดน ผู้รับ",
					Address: "dan.phurab@example.com",
				},
				&mail.Address{
					Name:    "อีฟ ผู้รับ",
					Address: "eve.phurab@example.com",
				},
			},
			Bcc: []*mail.Address{
				&mail.Address{
					Name:    "แฟรงค์ ผู้รับ",
					Address: "frank.phurab@example.com",
				},
				&mail.Address{
					Name:    "เกรซ ผู้รับ",
					Address: "grace.phurab@example.com",
				},
			},
			MessageID: "Message-Id-1@example.com",
			InReplyTo: []string{
				"Message-Id-0@example.com",
			},
			References: []string{
				"Message-Id-0@example.com",
			},
			Subject:  "📧 Test แพนแกรมภาษาไทย",
			Comments: "Message Header Comment",
			Keywords: []string{
				"Keyword 1",
				"Keyword 2",
			},
			ResentDate: time.Time(time.Date(2019, 4, 1, 0, 55, 0, 0, time.UTC)),
			ResentFrom: []*mail.Address{
				&mail.Address{
					Name:    "อลิซ ผู้ส่งจดหมาย",
					Address: "alis.phusngcdhmay@example.net",
				},
				&mail.Address{
					Name:    "อลิซ ผู้ส่งจดหมาย",
					Address: "alis.phusngcdhmay@example.com",
				},
			},
			ResentSender: &mail.Address{
				Name:    "อลิซ ผู้ส่งจดหมาย",
				Address: "alis.phusngcdhmay@example.net",
			},
			ResentTo: []*mail.Address{
				&mail.Address{
					Name:    "บ๊อบ ผู้รับ",
					Address: "bob.phurab@example.net",
				},
				&mail.Address{
					Name:    "คาโรล ผู้รับ",
					Address: "carol.phurab@example.net",
				},
			},
			ResentCc: []*mail.Address{
				&mail.Address{
					Name:    "แดน ผู้รับ",
					Address: "dan.phurab@example.net",
				},
				&mail.Address{
					Name:    "อีฟ ผู้รับ",
					Address: "eve.phurab@example.net",
				},
			},
			ResentBcc: []*mail.Address{
				&mail.Address{
					Name:    "แฟรงค์ ผู้รับ",
					Address: "frank.phurab@example.net",
				},
				&mail.Address{
					Name:    "เกรซ ผู้รับ",
					Address: "grace.phurab@example.net",
				},
			},
			ResentMessageID: "Message-Id-1@example.net",
			ExtraHeaders: map[string][]string{
				"X-Clacks-Overhead": []string{
					"GNU Terry Pratchett",
				},
			},
			ContentInfo: &email.ContentInfo{
				Type: "multipart/mixed",
				TypeParams: map[string]string{
					"boundary": "MixedBoundaryString",
					"charset":  "tis-620",
				},
				Disposition:       "",
				DispositionParams: map[string]string(nil), // p0
				TransferEncoding:  "base64",
				ID:                "",
				Charset:           "tis-620",
			},
			Received: nil,
		},
		Text: "เป็นมนุษย์สุดประเสริฐเลิศคุณค่า กว่าบรรดาฝูงสัตว์เดรัจฉาน จงฝ่าฟันพัฒนาวิชาการ อย่าล้างผลาญฤๅเข่นฆ่าบีฑาใคร ไม่ถือโทษโกรธแช่งซัดฮึดฮัดด่า หัดอภัยเหมือนกีฬาอัชฌาสัย ปฏิบัติประพฤติกฎกำหนดใจ พูดจาให้จ๊ะๆ จ๋าๆ น่าฟังเอยฯ\n" +
			"\n" +
			"นายสังฆภัณฑ์ เฮงพิทักษ์ฝั่ง ผู้เฒ่าซึ่งมีอาชีพเป็นฅนขายฃวด ถูกตำรวจปฏิบัติการจับฟ้องศาล ฐานลักนาฬิกาคุณหญิงฉัตรชฎา ฌานสมาธิ",
		EnrichedText: "<bold>เป็นมนุษย์สุดประเสริฐเลิศคุณค่า</bold> <italic>กว่าบรรดาฝูงสัตว์เดรัจฉาน</italic> <fixed>จงฝ่าฟันพัฒนาวิชาการ</fixed> <underline>อย่าล้างผลาญฤๅเข่นฆ่าบีฑาใคร</underline> ไม่ถือโทษโกรธแช่งซัดฮึดฮัดด่า หัดอภัยเหมือนกีฬาอัชฌาสัย ปฏิบัติประพฤติกฎกำหนดใจ พูดจาให้จ๊ะๆ จ๋าๆ น่าฟังเอยฯ\n" +
			"\n" +
			"นายสังฆภัณฑ์ เฮงพิทักษ์ฝั่ง ผู้เฒ่าซึ่งมีอาชีพเป็นฅนขายฃวด ถูกตำรวจปฏิบัติการจับฟ้องศาล ฐานลักนาฬิกาคุณหญิงฉัตรชฎา ฌานสมาธิ",
		HTML: "<html>\n" +
			"<div dir=\"ltr\">\n" +
			"<p>เป็นมนุษย์สุดประเสริฐเลิศคุณค่า กว่าบรรดาฝูงสัตว์เดรัจฉาน จงฝ่าฟันพัฒนาวิชาการ อย่าล้างผลาญฤๅเข่นฆ่าบีฑาใคร ไม่ถือโทษโกรธแช่งซัดฮึดฮัดด่า หัดอภัยเหมือนกีฬาอัชฌาสัย ปฏิบัติประพฤติกฎกำหนดใจ พูดจาให้จ๊ะๆ จ๋าๆ น่าฟังเอยฯ</p>\n" +
			"\n" +
			"<p>นายสังฆภัณฑ์ เฮงพิทักษ์ฝั่ง ผู้เฒ่าซึ่งมีอาชีพเป็นฅนขายฃวด ถูกตำรวจปฏิบัติการจับฟ้องศาล ฐานลักนาฬิกาคุณหญิงฉัตรชฎา ฌานสมาธิ</p>\n" +
			"</div>\n" +
			"</html>",
		Files: []*email.File{
			&email.File{
				FileType: "",
				Name:     "inline-jpg-image-without-disposition.jpg",
				ContentInfo: &email.ContentInfo{
					Type: "image/jpeg",
					TypeParams: map[string]string{
						"name": "inline-jpg-image-without-disposition.jpg",
					},
					Disposition:       "",
					DispositionParams: map[string]string(nil), // p0
					TransferEncoding:  "base64",
					ID:                "",
					Charset:           "tis-620",
				},
				Data: []byte{
					239, 191, 189, 224, 184, 184, 239, 191, 189, 239, 191, 189, 0, 67, 0, 3, 2, 2, 2,
					2, 2, 3, 2, 2, 2, 3, 3, 3, 3, 4, 6, 4, 4, 4, 4, 4, 8, 6, 6, 5, 6, 9, 8, 10, 10, 9,
					8, 9, 9, 10, 12, 15, 12, 10, 11, 14, 11, 9, 9, 13, 17, 13, 14, 15, 16, 16, 17, 16,
					10, 12, 18, 19, 18, 16, 19, 15, 16, 16, 16, 239, 191, 189, 224, 184, 169, 0, 11,
					8, 0, 1, 0, 1, 1, 1, 17, 0, 239, 191, 189, 224, 184, 172, 0, 6, 0, 16, 16, 5, 239,
					191, 189, 224, 184, 186, 0, 8, 1, 1, 0, 0, 63, 0, 224, 184, 178, 224, 184, 175, 32,
					239, 191, 189, 224, 184, 185,
				},
			},
			&email.File{
				FileType: "inline",
				Name:     "inline-jpg-image-filename.jpg",
				ContentInfo: &email.ContentInfo{
					Type: "image/jpeg",
					TypeParams: map[string]string{
						"name": "inline-jpg-image-name.jpg",
					},
					Disposition: "inline",
					DispositionParams: map[string]string{
						"filename": "inline-jpg-image-filename.jpg",
					},
					TransferEncoding: "base64",
					ID:               "inline-jpg-image.jpg@example.com",
					Charset:          "tis-620",
				},
				Data: []byte{
					239, 191, 189, 224, 184, 184, 239, 191, 189, 239, 191, 189, 0, 67, 0, 3, 2, 2, 2,
					2, 2, 3, 2, 2, 2, 3, 3, 3, 3, 4, 6, 4, 4, 4, 4, 4, 8, 6, 6, 5, 6, 9, 8, 10, 10, 9,
					8, 9, 9, 10, 12, 15, 12, 10, 11, 14, 11, 9, 9, 13, 17, 13, 14, 15, 16, 16, 17, 16,
					10, 12, 18, 19, 18, 16, 19, 15, 16, 16, 16, 239, 191, 189, 224, 184, 169, 0, 11,
					8, 0, 1, 0, 1, 1, 1, 17, 0, 239, 191, 189, 224, 184, 172, 0, 6, 0, 16, 16, 5, 239,
					191, 189, 224, 184, 186, 0, 8, 1, 1, 0, 0, 63, 0, 224, 184, 178, 224, 184, 175, 32,
					239, 191, 189, 224, 184, 185,
				},
			},
			&email.File{
				FileType: "attachment",
				Name:     "attached-pdf-filename.pdf",
				ContentInfo: &email.ContentInfo{
					Type: "application/pdf",
					TypeParams: map[string]string{
						"name": "attached-pdf-name.pdf",
					},
					Disposition: "attachment",
					DispositionParams: map[string]string{
						"filename": "attached-pdf-filename.pdf",
					},
					TransferEncoding: "base64",
					ID:               "",
					Charset:          "tis-620",
				},
				Data: []byte{
					37, 80, 68, 70, 45, 49, 46, 13, 116, 114, 97, 105, 108, 101, 114, 60, 60, 47, 82,
					111, 111, 116, 60, 60, 47, 80, 97, 103, 101, 115, 60, 60, 47, 75, 105, 100, 115,
					91, 60, 60, 47, 77, 101, 100, 105, 97, 66, 111, 120, 91, 48, 32, 48, 32, 51, 32,
					51, 93, 62, 62, 93, 62, 62, 62, 62, 62, 62,
				},
			},
			&email.File{
				FileType: "",
				Name:     "attached-pdf-without-disposition.pdf",
				ContentInfo: &email.ContentInfo{
					Type: "application/pdf",
					TypeParams: map[string]string{
						"name": "attached-pdf-without-disposition.pdf",
					},
					Disposition:       "",
					DispositionParams: map[string]string(nil), // p0
					TransferEncoding:  "base64",
					ID:                "",
					Charset:           "tis-620",
				},
				Data: []byte{
					37, 80, 68, 70, 45, 49, 46, 13, 116, 114, 97, 105, 108, 101, 114, 60, 60, 47, 82,
					111, 111, 116, 60, 60, 47, 80, 97, 103, 101, 115, 60, 60, 47, 75, 105, 100, 115,
					91, 60, 60, 47, 77, 101, 100, 105, 97, 66, 111, 120, 91, 48, 32, 48, 32, 51, 32,
					51, 93, 62, 62, 93, 62, 62, 62, 62, 62, 62,
				},
			},
			&email.File{
				FileType: "attachment",
				Name:     "attached-json-filename.json",
				ContentInfo: &email.ContentInfo{
					Type: "application/json",
					TypeParams: map[string]string{
						"name": "attached-json-name.json",
					},
					Disposition: "attachment",
					DispositionParams: map[string]string{
						"filename": "attached-json-filename.json",
					},
					TransferEncoding: "7bit",
					ID:               "",
					Charset:          "tis-620",
				},
				Data: []byte{
					123, 34, 102, 111, 111, 34, 58, 34, 98, 97, 114, 34, 125,
				},
			},
			&email.File{
				FileType: "attachment",
				Name:     "attached-text-plain-filename.txt",
				ContentInfo: &email.ContentInfo{
					Type: "text/plain",
					TypeParams: map[string]string{
						"name": "attached-text-plain-name.txt",
					},
					Disposition: "attachment",
					DispositionParams: map[string]string{
						"filename": "attached-text-plain-filename.txt",
					},
					TransferEncoding: "base64",
					ID:               "",
					Charset:          "tis-620",
				},
				Data: []byte{
					84, 101, 120, 116, 47, 112, 108, 97, 105, 110, 32, 99, 111, 110, 116, 101, 110, 116,
					32, 97, 115, 32, 97, 110, 32, 97, 116, 116, 97, 99, 104, 101, 100, 32, 46, 116, 120,
					116, 32, 102, 105, 108, 101, 46,
				},
			},
			&email.File{
				FileType: "attachment",
				Name:     "attached-text-html-filename.html",
				ContentInfo: &email.ContentInfo{
					Type: "text/html",
					TypeParams: map[string]string{
						"name": "attached-text-html-name.html",
					},
					Disposition: "attachment",
					DispositionParams: map[string]string{
						"filename": "attached-text-html-filename.html",
					},
					TransferEncoding: "base64",
					ID:               "",
					Charset:          "tis-620",
				},
				Data: []byte{
					84, 101, 120, 116, 47, 104, 116, 109, 108, 32, 99, 111, 110, 116, 101, 110, 116,
					32, 97, 115, 32, 97, 110, 32, 97, 116, 116, 97, 99, 104, 101, 100, 32, 46, 104, 116,
					109, 108, 32, 102, 105, 108, 101, 46,
				},
			},
		},
	}
	testEmailFromFile(t, fp, expectedEmail)
}

func TestParseEmailThaiMultipartMixedTis620OverQuotedprintable(t *testing.T) {
	fp := "tests/test_thai_multipart_mixed_tis-620_over_quoted-printable.txt"
	expectedEmail := &email.Email{
		Headers: email.Headers{
			Date: time.Time(time.Date(2019, 4, 1, 0, 55, 0, 0, time.UTC)),
			Sender: &mail.Address{
				Name:    "อลิซ ผู้ส่งจดหมาย",
				Address: "alis.phusngcdhmay@example.com",
			},
			From: []*mail.Address{
				&mail.Address{
					Name:    "อลิซ ผู้ส่งจดหมาย",
					Address: "alis.phusngcdhmay@example.com",
				},
				&mail.Address{
					Name:    "อลิซ ผู้ส่งจดหมาย",
					Address: "alis.phusngcdhmay@example.net",
				},
			},
			ReplyTo: []*mail.Address{
				&mail.Address{
					Name:    "อลิซ ผู้ส่งจดหมาย",
					Address: "alis.phusngcdhmay@example.net",
				},
			},
			To: []*mail.Address{
				&mail.Address{
					Name:    "บ๊อบ ผู้รับ",
					Address: "bob.phurab@example.com",
				},
				&mail.Address{
					Name:    "คาโรล ผู้รับ",
					Address: "carol.phurab@example.com",
				},
			},
			Cc: []*mail.Address{
				&mail.Address{
					Name:    "แดน ผู้รับ",
					Address: "dan.phurab@example.com",
				},
				&mail.Address{
					Name:    "อีฟ ผู้รับ",
					Address: "eve.phurab@example.com",
				},
			},
			Bcc: []*mail.Address{
				&mail.Address{
					Name:    "แฟรงค์ ผู้รับ",
					Address: "frank.phurab@example.com",
				},
				&mail.Address{
					Name:    "เกรซ ผู้รับ",
					Address: "grace.phurab@example.com",
				},
			},
			MessageID: "Message-Id-1@example.com",
			InReplyTo: []string{
				"Message-Id-0@example.com",
			},
			References: []string{
				"Message-Id-0@example.com",
			},
			Subject:  "📧 Test แพนแกรมภาษาไทย",
			Comments: "Message Header Comment",
			Keywords: []string{
				"Keyword 1",
				"Keyword 2",
			},
			ResentDate: time.Time(time.Date(2019, 4, 1, 0, 55, 0, 0, time.UTC)),
			ResentFrom: []*mail.Address{
				&mail.Address{
					Name:    "อลิซ ผู้ส่งจดหมาย",
					Address: "alis.phusngcdhmay@example.net",
				},
				&mail.Address{
					Name:    "อลิซ ผู้ส่งจดหมาย",
					Address: "alis.phusngcdhmay@example.com",
				},
			},
			ResentSender: &mail.Address{
				Name:    "อลิซ ผู้ส่งจดหมาย",
				Address: "alis.phusngcdhmay@example.net",
			},
			ResentTo: []*mail.Address{
				&mail.Address{
					Name:    "บ๊อบ ผู้รับ",
					Address: "bob.phurab@example.net",
				},
				&mail.Address{
					Name:    "คาโรล ผู้รับ",
					Address: "carol.phurab@example.net",
				},
			},
			ResentCc: []*mail.Address{
				&mail.Address{
					Name:    "แดน ผู้รับ",
					Address: "dan.phurab@example.net",
				},
				&mail.Address{
					Name:    "อีฟ ผู้รับ",
					Address: "eve.phurab@example.net",
				},
			},
			ResentBcc: []*mail.Address{
				&mail.Address{
					Name:    "แฟรงค์ ผู้รับ",
					Address: "frank.phurab@example.net",
				},
				&mail.Address{
					Name:    "เกรซ ผู้รับ",
					Address: "grace.phurab@example.net",
				},
			},
			ResentMessageID: "Message-Id-1@example.net",
			ExtraHeaders: map[string][]string{
				"X-Clacks-Overhead": []string{
					"GNU Terry Pratchett",
				},
			},
			ContentInfo: &email.ContentInfo{
				Type: "multipart/mixed",
				TypeParams: map[string]string{
					"boundary": "MixedBoundaryString",
					"charset":  "tis-620",
				},
				Disposition:       "",
				DispositionParams: map[string]string(nil), // p0
				TransferEncoding:  "quoted-printable",
				ID:                "",
				Charset:           "tis-620",
			},
			Received: nil,
		},
		Text: "เป็นมนุษย์สุดประเสริฐเลิศคุณค่า กว่าบรรดาฝูงสัตว์เดรัจฉาน จงฝ่าฟันพัฒนาวิชาการ อย่าล้างผลาญฤๅเข่นฆ่าบีฑาใคร ไม่ถือโทษโกรธแช่งซัดฮึดฮัดด่า หัดอภัยเหมือนกีฬาอัชฌาสัย ปฏิบัติประพฤติกฎกำหนดใจ พูดจาให้จ๊ะๆ จ๋าๆ น่าฟังเอยฯ\n" +
			"\n" +
			"นายสังฆภัณฑ์ เฮงพิทักษ์ฝั่ง ผู้เฒ่าซึ่งมีอาชีพเป็นฅนขายฃวด ถูกตำรวจปฏิบัติการจับฟ้องศาล ฐานลักนาฬิกาคุณหญิงฉัตรชฎา ฌานสมาธิ",
		EnrichedText: "<bold>เป็นมนุษย์สุดประเสริฐเลิศคุณค่า</bold> <italic>กว่าบรรดาฝูงสัตว์เดรัจฉาน</italic> <fixed>จงฝ่าฟันพัฒนาวิชาการ</fixed> <underline>อย่าล้างผลาญฤๅเข่นฆ่าบีฑาใคร</underline> ไม่ถือโทษโกรธแช่งซัดฮึดฮัดด่า หัดอภัยเหมือนกีฬาอัชฌาสัย ปฏิบัติประพฤติกฎกำหนดใจ พูดจาให้จ๊ะๆ จ๋าๆ น่าฟังเอยฯ\n" +
			"\n" +
			"นายสังฆภัณฑ์ เฮงพิทักษ์ฝั่ง ผู้เฒ่าซึ่งมีอาชีพเป็นฅนขายฃวด ถูกตำรวจปฏิบัติการจับฟ้องศาล ฐานลักนาฬิกาคุณหญิงฉัตรชฎา ฌานสมาธิ",
		HTML: "<html>\n" +
			"<div dir=\"ltr\">\n" +
			"<p>เป็นมนุษย์สุดประเสริฐเลิศคุณค่า กว่าบรรดาฝูงสัตว์เดรัจฉาน จงฝ่าฟันพัฒนาวิชาการ อย่าล้างผลาญฤๅเข่นฆ่าบีฑาใคร ไม่ถือโทษโกรธแช่งซัดฮึดฮัดด่า หัดอภัยเหมือนกีฬาอัชฌาสัย ปฏิบัติประพฤติกฎกำหนดใจ พูดจาให้จ๊ะๆ จ๋าๆ น่าฟังเอยฯ</p>\n" +
			"\n" +
			"<p>นายสังฆภัณฑ์ เฮงพิทักษ์ฝั่ง ผู้เฒ่าซึ่งมีอาชีพเป็นฅนขายฃวด ถูกตำรวจปฏิบัติการจับฟ้องศาล ฐานลักนาฬิกาคุณหญิงฉัตรชฎา ฌานสมาธิ</p>\n" +
			"</div>\n" +
			"</html>",
		Files: []*email.File{
			&email.File{
				FileType: "",
				Name:     "inline-jpg-image-without-disposition.jpg",
				ContentInfo: &email.ContentInfo{
					Type: "image/jpeg",
					TypeParams: map[string]string{
						"name": "inline-jpg-image-without-disposition.jpg",
					},
					Disposition:       "",
					DispositionParams: map[string]string(nil), // p0
					TransferEncoding:  "base64",
					ID:                "",
					Charset:           "tis-620",
				},
				Data: []byte{
					239, 191, 189, 224, 184, 184, 239, 191, 189, 239, 191, 189, 0, 67, 0, 3, 2, 2, 2,
					2, 2, 3, 2, 2, 2, 3, 3, 3, 3, 4, 6, 4, 4, 4, 4, 4, 8, 6, 6, 5, 6, 9, 8, 10, 10, 9,
					8, 9, 9, 10, 12, 15, 12, 10, 11, 14, 11, 9, 9, 13, 17, 13, 14, 15, 16, 16, 17, 16,
					10, 12, 18, 19, 18, 16, 19, 15, 16, 16, 16, 239, 191, 189, 224, 184, 169, 0, 11,
					8, 0, 1, 0, 1, 1, 1, 17, 0, 239, 191, 189, 224, 184, 172, 0, 6, 0, 16, 16, 5, 239,
					191, 189, 224, 184, 186, 0, 8, 1, 1, 0, 0, 63, 0, 224, 184, 178, 224, 184, 175, 32,
					239, 191, 189, 224, 184, 185,
				},
			},
			&email.File{
				FileType: "inline",
				Name:     "inline-jpg-image-filename.jpg",
				ContentInfo: &email.ContentInfo{
					Type: "image/jpeg",
					TypeParams: map[string]string{
						"name": "inline-jpg-image-name.jpg",
					},
					Disposition: "inline",
					DispositionParams: map[string]string{
						"filename": "inline-jpg-image-filename.jpg",
					},
					TransferEncoding: "base64",
					ID:               "inline-jpg-image.jpg@example.com",
					Charset:          "tis-620",
				},
				Data: []byte{
					239, 191, 189, 224, 184, 184, 239, 191, 189, 239, 191, 189, 0, 67, 0, 3, 2, 2, 2,
					2, 2, 3, 2, 2, 2, 3, 3, 3, 3, 4, 6, 4, 4, 4, 4, 4, 8, 6, 6, 5, 6, 9, 8, 10, 10, 9,
					8, 9, 9, 10, 12, 15, 12, 10, 11, 14, 11, 9, 9, 13, 17, 13, 14, 15, 16, 16, 17, 16,
					10, 12, 18, 19, 18, 16, 19, 15, 16, 16, 16, 239, 191, 189, 224, 184, 169, 0, 11,
					8, 0, 1, 0, 1, 1, 1, 17, 0, 239, 191, 189, 224, 184, 172, 0, 6, 0, 16, 16, 5, 239,
					191, 189, 224, 184, 186, 0, 8, 1, 1, 0, 0, 63, 0, 224, 184, 178, 224, 184, 175, 32,
					239, 191, 189, 224, 184, 185,
				},
			},
			&email.File{
				FileType: "attachment",
				Name:     "attached-pdf-filename.pdf",
				ContentInfo: &email.ContentInfo{
					Type: "application/pdf",
					TypeParams: map[string]string{
						"name": "attached-pdf-name.pdf",
					},
					Disposition: "attachment",
					DispositionParams: map[string]string{
						"filename": "attached-pdf-filename.pdf",
					},
					TransferEncoding: "base64",
					ID:               "",
					Charset:          "tis-620",
				},
				Data: []byte{
					37, 80, 68, 70, 45, 49, 46, 13, 116, 114, 97, 105, 108, 101, 114, 60, 60, 47, 82,
					111, 111, 116, 60, 60, 47, 80, 97, 103, 101, 115, 60, 60, 47, 75, 105, 100, 115,
					91, 60, 60, 47, 77, 101, 100, 105, 97, 66, 111, 120, 91, 48, 32, 48, 32, 51, 32,
					51, 93, 62, 62, 93, 62, 62, 62, 62, 62, 62,
				},
			},
			&email.File{
				FileType: "",
				Name:     "attached-pdf-without-disposition.pdf",
				ContentInfo: &email.ContentInfo{
					Type: "application/pdf",
					TypeParams: map[string]string{
						"name": "attached-pdf-without-disposition.pdf",
					},
					Disposition:       "",
					DispositionParams: map[string]string(nil), // p0
					TransferEncoding:  "base64",
					ID:                "",
					Charset:           "tis-620",
				},
				Data: []byte{
					37, 80, 68, 70, 45, 49, 46, 13, 116, 114, 97, 105, 108, 101, 114, 60, 60, 47, 82,
					111, 111, 116, 60, 60, 47, 80, 97, 103, 101, 115, 60, 60, 47, 75, 105, 100, 115,
					91, 60, 60, 47, 77, 101, 100, 105, 97, 66, 111, 120, 91, 48, 32, 48, 32, 51, 32,
					51, 93, 62, 62, 93, 62, 62, 62, 62, 62, 62,
				},
			},
			&email.File{
				FileType: "attachment",
				Name:     "attached-json-filename.json",
				ContentInfo: &email.ContentInfo{
					Type: "application/json",
					TypeParams: map[string]string{
						"name": "attached-json-name.json",
					},
					Disposition: "attachment",
					DispositionParams: map[string]string{
						"filename": "attached-json-filename.json",
					},
					TransferEncoding: "7bit",
					ID:               "",
					Charset:          "tis-620",
				},
				Data: []byte{
					123, 34, 102, 111, 111, 34, 58, 34, 98, 97, 114, 34, 125,
				},
			},
			&email.File{
				FileType: "attachment",
				Name:     "attached-text-plain-filename.txt",
				ContentInfo: &email.ContentInfo{
					Type: "text/plain",
					TypeParams: map[string]string{
						"name": "attached-text-plain-name.txt",
					},
					Disposition: "attachment",
					DispositionParams: map[string]string{
						"filename": "attached-text-plain-filename.txt",
					},
					TransferEncoding: "base64",
					ID:               "",
					Charset:          "tis-620",
				},
				Data: []byte{
					84, 101, 120, 116, 47, 112, 108, 97, 105, 110, 32, 99, 111, 110, 116, 101, 110, 116,
					32, 97, 115, 32, 97, 110, 32, 97, 116, 116, 97, 99, 104, 101, 100, 32, 46, 116, 120,
					116, 32, 102, 105, 108, 101, 46,
				},
			},
			&email.File{
				FileType: "attachment",
				Name:     "attached-text-html-filename.html",
				ContentInfo: &email.ContentInfo{
					Type: "text/html",
					TypeParams: map[string]string{
						"name": "attached-text-html-name.html",
					},
					Disposition: "attachment",
					DispositionParams: map[string]string{
						"filename": "attached-text-html-filename.html",
					},
					TransferEncoding: "base64",
					ID:               "",
					Charset:          "tis-620",
				},
				Data: []byte{
					84, 101, 120, 116, 47, 104, 116, 109, 108, 32, 99, 111, 110, 116, 101, 110, 116,
					32, 97, 115, 32, 97, 110, 32, 97, 116, 116, 97, 99, 104, 101, 100, 32, 46, 104, 116,
					109, 108, 32, 102, 105, 108, 101, 46,
				},
			},
		},
	}
	testEmailFromFile(t, fp, expectedEmail)
}

func TestParseEmailThaiMultipartSignedIso885911OverBase64(t *testing.T) {
	fp := "tests/test_thai_multipart_signed_iso-8859-11_over_base64.txt"
	expectedEmail := &email.Email{
		Headers: email.Headers{
			Date: time.Time(time.Date(2019, 4, 1, 0, 55, 0, 0, time.UTC)),
			Sender: &mail.Address{
				Name:    "อลิซ ผู้ส่งจดหมาย",
				Address: "alis.phusngcdhmay@example.com",
			},
			From: []*mail.Address{
				&mail.Address{
					Name:    "อลิซ ผู้ส่งจดหมาย",
					Address: "alis.phusngcdhmay@example.com",
				},
				&mail.Address{
					Name:    "อลิซ ผู้ส่งจดหมาย",
					Address: "alis.phusngcdhmay@example.net",
				},
			},
			ReplyTo: []*mail.Address{
				&mail.Address{
					Name:    "อลิซ ผู้ส่งจดหมาย",
					Address: "alis.phusngcdhmay@example.net",
				},
			},
			To: []*mail.Address{
				&mail.Address{
					Name:    "บ๊อบ ผู้รับ",
					Address: "bob.phurab@example.com",
				},
				&mail.Address{
					Name:    "คาโรล ผู้รับ",
					Address: "carol.phurab@example.com",
				},
			},
			Cc: []*mail.Address{
				&mail.Address{
					Name:    "แดน ผู้รับ",
					Address: "dan.phurab@example.com",
				},
				&mail.Address{
					Name:    "อีฟ ผู้รับ",
					Address: "eve.phurab@example.com",
				},
			},
			Bcc: []*mail.Address{
				&mail.Address{
					Name:    "แฟรงค์ ผู้รับ",
					Address: "frank.phurab@example.com",
				},
				&mail.Address{
					Name:    "เกรซ ผู้รับ",
					Address: "grace.phurab@example.com",
				},
			},
			MessageID: "Message-Id-1@example.com",
			InReplyTo: []string{
				"Message-Id-0@example.com",
			},
			References: []string{
				"Message-Id-0@example.com",
			},
			Subject:  "📧 Signed Test แพนแกรมภาษาไทย",
			Comments: "Message Header Comment",
			Keywords: []string{
				"Keyword 1",
				"Keyword 2",
			},
			ResentDate: time.Time(time.Date(2019, 4, 1, 0, 55, 0, 0, time.UTC)),
			ResentFrom: []*mail.Address{
				&mail.Address{
					Name:    "อลิซ ผู้ส่งจดหมาย",
					Address: "alis.phusngcdhmay@example.net",
				},
				&mail.Address{
					Name:    "อลิซ ผู้ส่งจดหมาย",
					Address: "alis.phusngcdhmay@example.com",
				},
			},
			ResentSender: &mail.Address{
				Name:    "อลิซ ผู้ส่งจดหมาย",
				Address: "alis.phusngcdhmay@example.net",
			},
			ResentTo: []*mail.Address{
				&mail.Address{
					Name:    "บ๊อบ ผู้รับ",
					Address: "bob.phurab@example.net",
				},
				&mail.Address{
					Name:    "คาโรล ผู้รับ",
					Address: "carol.phurab@example.net",
				},
			},
			ResentCc: []*mail.Address{
				&mail.Address{
					Name:    "แดน ผู้รับ",
					Address: "dan.phurab@example.net",
				},
				&mail.Address{
					Name:    "อีฟ ผู้รับ",
					Address: "eve.phurab@example.net",
				},
			},
			ResentBcc: []*mail.Address{
				&mail.Address{
					Name:    "แฟรงค์ ผู้รับ",
					Address: "frank.phurab@example.net",
				},
				&mail.Address{
					Name:    "เกรซ ผู้รับ",
					Address: "grace.phurab@example.net",
				},
			},
			ResentMessageID: "Message-Id-1@example.net",
			ExtraHeaders: map[string][]string{
				"X-Clacks-Overhead": []string{
					"GNU Terry Pratchett",
				},
			},
			ContentInfo: &email.ContentInfo{
				Type: "multipart/signed",
				TypeParams: map[string]string{
					"boundary": "SignedBoundaryString",
					"charset":  "iso-8859-11",
					"micalg":   "sha1",
					"protocol": "application/pkcs7-signature",
				},
				Disposition:       "",
				DispositionParams: map[string]string(nil), // p0
				TransferEncoding:  "base64",
				ID:                "",
				Charset:           "iso-8859-11",
			},
			Received: nil,
		},
		Text: "เป็นมนุษย์สุดประเสริฐเลิศคุณค่า กว่าบรรดาฝูงสัตว์เดรัจฉาน จงฝ่าฟันพัฒนาวิชาการ อย่าล้างผลาญฤๅเข่นฆ่าบีฑาใคร ไม่ถือโทษโกรธแช่งซัดฮึดฮัดด่า หัดอภัยเหมือนกีฬาอัชฌาสัย ปฏิบัติประพฤติกฎกำหนดใจ พูดจาให้จ๊ะๆ จ๋าๆ น่าฟังเอยฯ\n" +
			"\n" +
			"นายสังฆภัณฑ์ เฮงพิทักษ์ฝั่ง ผู้เฒ่าซึ่งมีอาชีพเป็นฅนขายฃวด ถูกตำรวจปฏิบัติการจับฟ้องศาล ฐานลักนาฬิกาคุณหญิงฉัตรชฎา ฌานสมาธิ",
		EnrichedText: "",
		HTML:         "",
		Files: []*email.File{
			&email.File{
				FileType: "attachment",
				Name:     "smime.p7s",
				ContentInfo: &email.ContentInfo{
					Type: "application/pkcs7-signature",
					TypeParams: map[string]string{
						"name": "smime.p7s",
					},
					Disposition: "attachment",
					DispositionParams: map[string]string{
						"filename": "smime.p7s",
					},
					TransferEncoding: "base64",
					ID:               "",
					Charset:          "iso-8859-11",
				},
				Data: []byte{
					239, 191, 189, 28, 239, 191, 189, 239, 191, 189, 117, 46, 239, 191, 189, 18, 97,
					239, 191, 189, 126, 224, 185, 155, 239, 191, 189, 224, 184, 161, 224, 184, 167, 25,
					58, 224, 184, 191, 224, 184, 157, 224, 184, 153, 224, 185, 131, 224, 185, 143, 239,
					191, 189, 224, 184, 141, 108, 31, 71, 27, 226, 128, 166, 80, 224, 184, 133, 239,
					191, 189, 226, 128, 166, 224, 185, 131, 224, 184, 142, 224, 184, 166, 239, 191, 189,
					239, 191, 189, 239, 191, 189, 29, 224, 185, 150, 19, 224, 185, 139, 226, 128, 166,
					80, 224, 184, 133, 239, 191, 189, 226, 128, 166, 224, 185, 131, 224, 184, 142, 224,
					184, 166, 239, 191, 189, 239, 191, 189, 239, 191, 189, 29, 224, 185, 150, 19, 224,
					185, 138, 49, 224, 185, 155, 224, 185, 142, 127, 7, 28, 104, 33, 224, 184, 168, 120,
					71, 82, 224, 185, 136, 224, 185, 129, 38, 30, 224, 185, 153, 224, 185, 138, 224,
					184, 182, 224, 184, 161, 224, 185, 148, 113, 226, 128, 156, 224, 184, 141, 224, 185,
					155, 239, 191, 189, 239, 191, 189, 57, 239, 191, 189, 28, 113, 226, 128, 156, 224,
					184, 141, 224, 185, 155, 224, 185, 129, 38, 24, 224, 184, 167, 224, 185, 143, 224,
					184, 158, 224, 184, 141, 108, 31, 71, 27, 226, 128, 166, 80, 110, 120, 224, 185,
					155, 224, 185, 135, 224, 184, 142, 224, 184, 166, 239, 191, 189, 239, 191, 189, 239,
					191, 189, 29, 224, 185, 150, 19, 224, 185, 138, 8, 114, 30, 17, 224, 184, 180, 224,
					184, 154, 58, 95, 224, 184, 168, 94, 59, 26, 18, 6, 124, 119, 224, 184, 184, 79,
					224, 184, 142, 21, 65, 224, 184, 153, 224, 185, 131, 224, 185, 143, 239, 191, 189,
				},
			},
		},
	}
	testEmailFromFile(t, fp, expectedEmail)
}

func TestParseEmailThaiMultipartSignedIso885911OverQuotedprintable(t *testing.T) {
	fp := "tests/test_thai_multipart_signed_iso-8859-11_over_quoted-printable.txt"
	expectedEmail := &email.Email{
		Headers: email.Headers{
			Date: time.Time(time.Date(2019, 4, 1, 0, 55, 0, 0, time.UTC)),
			Sender: &mail.Address{
				Name:    "อลิซ ผู้ส่งจดหมาย",
				Address: "alis.phusngcdhmay@example.com",
			},
			From: []*mail.Address{
				&mail.Address{
					Name:    "อลิซ ผู้ส่งจดหมาย",
					Address: "alis.phusngcdhmay@example.com",
				},
				&mail.Address{
					Name:    "อลิซ ผู้ส่งจดหมาย",
					Address: "alis.phusngcdhmay@example.net",
				},
			},
			ReplyTo: []*mail.Address{
				&mail.Address{
					Name:    "อลิซ ผู้ส่งจดหมาย",
					Address: "alis.phusngcdhmay@example.net",
				},
			},
			To: []*mail.Address{
				&mail.Address{
					Name:    "บ๊อบ ผู้รับ",
					Address: "bob.phurab@example.com",
				},
				&mail.Address{
					Name:    "คาโรล ผู้รับ",
					Address: "carol.phurab@example.com",
				},
			},
			Cc: []*mail.Address{
				&mail.Address{
					Name:    "แดน ผู้รับ",
					Address: "dan.phurab@example.com",
				},
				&mail.Address{
					Name:    "อีฟ ผู้รับ",
					Address: "eve.phurab@example.com",
				},
			},
			Bcc: []*mail.Address{
				&mail.Address{
					Name:    "แฟรงค์ ผู้รับ",
					Address: "frank.phurab@example.com",
				},
				&mail.Address{
					Name:    "เกรซ ผู้รับ",
					Address: "grace.phurab@example.com",
				},
			},
			MessageID: "Message-Id-1@example.com",
			InReplyTo: []string{
				"Message-Id-0@example.com",
			},
			References: []string{
				"Message-Id-0@example.com",
			},
			Subject:  "📧 Signed Test แพนแกรมภาษาไทย",
			Comments: "Message Header Comment",
			Keywords: []string{
				"Keyword 1",
				"Keyword 2",
			},
			ResentDate: time.Time(time.Date(2019, 4, 1, 0, 55, 0, 0, time.UTC)),
			ResentFrom: []*mail.Address{
				&mail.Address{
					Name:    "อลิซ ผู้ส่งจดหมาย",
					Address: "alis.phusngcdhmay@example.net",
				},
				&mail.Address{
					Name:    "อลิซ ผู้ส่งจดหมาย",
					Address: "alis.phusngcdhmay@example.com",
				},
			},
			ResentSender: &mail.Address{
				Name:    "อลิซ ผู้ส่งจดหมาย",
				Address: "alis.phusngcdhmay@example.net",
			},
			ResentTo: []*mail.Address{
				&mail.Address{
					Name:    "บ๊อบ ผู้รับ",
					Address: "bob.phurab@example.net",
				},
				&mail.Address{
					Name:    "คาโรล ผู้รับ",
					Address: "carol.phurab@example.net",
				},
			},
			ResentCc: []*mail.Address{
				&mail.Address{
					Name:    "แดน ผู้รับ",
					Address: "dan.phurab@example.net",
				},
				&mail.Address{
					Name:    "อีฟ ผู้รับ",
					Address: "eve.phurab@example.net",
				},
			},
			ResentBcc: []*mail.Address{
				&mail.Address{
					Name:    "แฟรงค์ ผู้รับ",
					Address: "frank.phurab@example.net",
				},
				&mail.Address{
					Name:    "เกรซ ผู้รับ",
					Address: "grace.phurab@example.net",
				},
			},
			ResentMessageID: "Message-Id-1@example.net",
			ExtraHeaders: map[string][]string{
				"X-Clacks-Overhead": []string{
					"GNU Terry Pratchett",
				},
			},
			ContentInfo: &email.ContentInfo{
				Type: "multipart/signed",
				TypeParams: map[string]string{
					"boundary": "SignedBoundaryString",
					"charset":  "iso-8859-11",
					"micalg":   "sha1",
					"protocol": "application/pkcs7-signature",
				},
				Disposition:       "",
				DispositionParams: map[string]string(nil), // p0
				TransferEncoding:  "quoted-printable",
				ID:                "",
				Charset:           "iso-8859-11",
			},
			Received: nil,
		},
		Text: "เป็นมนุษย์สุดประเสริฐเลิศคุณค่า กว่าบรรดาฝูงสัตว์เดรัจฉาน จงฝ่าฟันพัฒนาวิชาการ อย่าล้างผลาญฤๅเข่นฆ่าบีฑาใคร ไม่ถือโทษโกรธแช่งซัดฮึดฮัดด่า หัดอภัยเหมือนกีฬาอัชฌาสัย ปฏิบัติประพฤติกฎกำหนดใจ พูดจาให้จ๊ะๆ จ๋าๆ น่าฟังเอยฯ\n" +
			"\n" +
			"นายสังฆภัณฑ์ เฮงพิทักษ์ฝั่ง ผู้เฒ่าซึ่งมีอาชีพเป็นฅนขายฃวด ถูกตำรวจปฏิบัติการจับฟ้องศาล ฐานลักนาฬิกาคุณหญิงฉัตรชฎา ฌานสมาธิ",
		EnrichedText: "",
		HTML:         "",
		Files: []*email.File{
			&email.File{
				FileType: "attachment",
				Name:     "smime.p7s",
				ContentInfo: &email.ContentInfo{
					Type: "application/pkcs7-signature",
					TypeParams: map[string]string{
						"name": "smime.p7s",
					},
					Disposition: "attachment",
					DispositionParams: map[string]string{
						"filename": "smime.p7s",
					},
					TransferEncoding: "base64",
					ID:               "",
					Charset:          "iso-8859-11",
				},
				Data: []byte{
					239, 191, 189, 28, 239, 191, 189, 239, 191, 189, 117, 46, 239, 191, 189, 18, 97,
					239, 191, 189, 126, 224, 185, 155, 239, 191, 189, 224, 184, 161, 224, 184, 167, 25,
					58, 224, 184, 191, 224, 184, 157, 224, 184, 153, 224, 185, 131, 224, 185, 143, 239,
					191, 189, 224, 184, 141, 108, 31, 71, 27, 226, 128, 166, 80, 224, 184, 133, 239,
					191, 189, 226, 128, 166, 224, 185, 131, 224, 184, 142, 224, 184, 166, 239, 191, 189,
					239, 191, 189, 239, 191, 189, 29, 224, 185, 150, 19, 224, 185, 139, 226, 128, 166,
					80, 224, 184, 133, 239, 191, 189, 226, 128, 166, 224, 185, 131, 224, 184, 142, 224,
					184, 166, 239, 191, 189, 239, 191, 189, 239, 191, 189, 29, 224, 185, 150, 19, 224,
					185, 138, 49, 224, 185, 155, 224, 185, 142, 127, 7, 28, 104, 33, 224, 184, 168, 120,
					71, 82, 224, 185, 136, 224, 185, 129, 38, 30, 224, 185, 153, 224, 185, 138, 224,
					184, 182, 224, 184, 161, 224, 185, 148, 113, 226, 128, 156, 224, 184, 141, 224, 185,
					155, 239, 191, 189, 239, 191, 189, 57, 239, 191, 189, 28, 113, 226, 128, 156, 224,
					184, 141, 224, 185, 155, 224, 185, 129, 38, 24, 224, 184, 167, 224, 185, 143, 224,
					184, 158, 224, 184, 141, 108, 31, 71, 27, 226, 128, 166, 80, 110, 120, 224, 185,
					155, 224, 185, 135, 224, 184, 142, 224, 184, 166, 239, 191, 189, 239, 191, 189, 239,
					191, 189, 29, 224, 185, 150, 19, 224, 185, 138, 8, 114, 30, 17, 224, 184, 180, 224,
					184, 154, 58, 95, 224, 184, 168, 94, 59, 26, 18, 6, 124, 119, 224, 184, 184, 79,
					224, 184, 142, 21, 65, 224, 184, 153, 224, 185, 131, 224, 185, 143, 239, 191, 189,
				},
			},
		},
	}
	testEmailFromFile(t, fp, expectedEmail)
}

func TestParseEmailThaiMultipartSignedWindows874OverBase64(t *testing.T) {
	fp := "tests/test_thai_multipart_signed_windows-874_over_base64.txt"
	expectedEmail := &email.Email{
		Headers: email.Headers{
			Date: time.Time(time.Date(2019, 4, 1, 0, 55, 0, 0, time.UTC)),
			Sender: &mail.Address{
				Name:    "อลิซ ผู้ส่งจดหมาย",
				Address: "alis.phusngcdhmay@example.com",
			},
			From: []*mail.Address{
				&mail.Address{
					Name:    "อลิซ ผู้ส่งจดหมาย",
					Address: "alis.phusngcdhmay@example.com",
				},
				&mail.Address{
					Name:    "อลิซ ผู้ส่งจดหมาย",
					Address: "alis.phusngcdhmay@example.net",
				},
			},
			ReplyTo: []*mail.Address{
				&mail.Address{
					Name:    "อลิซ ผู้ส่งจดหมาย",
					Address: "alis.phusngcdhmay@example.net",
				},
			},
			To: []*mail.Address{
				&mail.Address{
					Name:    "บ๊อบ ผู้รับ",
					Address: "bob.phurab@example.com",
				},
				&mail.Address{
					Name:    "คาโรล ผู้รับ",
					Address: "carol.phurab@example.com",
				},
			},
			Cc: []*mail.Address{
				&mail.Address{
					Name:    "แดน ผู้รับ",
					Address: "dan.phurab@example.com",
				},
				&mail.Address{
					Name:    "อีฟ ผู้รับ",
					Address: "eve.phurab@example.com",
				},
			},
			Bcc: []*mail.Address{
				&mail.Address{
					Name:    "แฟรงค์ ผู้รับ",
					Address: "frank.phurab@example.com",
				},
				&mail.Address{
					Name:    "เกรซ ผู้รับ",
					Address: "grace.phurab@example.com",
				},
			},
			MessageID: "Message-Id-1@example.com",
			InReplyTo: []string{
				"Message-Id-0@example.com",
			},
			References: []string{
				"Message-Id-0@example.com",
			},
			Subject:  "📧 Signed Test แพนแกรมภาษาไทย",
			Comments: "Message Header Comment",
			Keywords: []string{
				"Keyword 1",
				"Keyword 2",
			},
			ResentDate: time.Time(time.Date(2019, 4, 1, 0, 55, 0, 0, time.UTC)),
			ResentFrom: []*mail.Address{
				&mail.Address{
					Name:    "อลิซ ผู้ส่งจดหมาย",
					Address: "alis.phusngcdhmay@example.net",
				},
				&mail.Address{
					Name:    "อลิซ ผู้ส่งจดหมาย",
					Address: "alis.phusngcdhmay@example.com",
				},
			},
			ResentSender: &mail.Address{
				Name:    "อลิซ ผู้ส่งจดหมาย",
				Address: "alis.phusngcdhmay@example.net",
			},
			ResentTo: []*mail.Address{
				&mail.Address{
					Name:    "บ๊อบ ผู้รับ",
					Address: "bob.phurab@example.net",
				},
				&mail.Address{
					Name:    "คาโรล ผู้รับ",
					Address: "carol.phurab@example.net",
				},
			},
			ResentCc: []*mail.Address{
				&mail.Address{
					Name:    "แดน ผู้รับ",
					Address: "dan.phurab@example.net",
				},
				&mail.Address{
					Name:    "อีฟ ผู้รับ",
					Address: "eve.phurab@example.net",
				},
			},
			ResentBcc: []*mail.Address{
				&mail.Address{
					Name:    "แฟรงค์ ผู้รับ",
					Address: "frank.phurab@example.net",
				},
				&mail.Address{
					Name:    "เกรซ ผู้รับ",
					Address: "grace.phurab@example.net",
				},
			},
			ResentMessageID: "Message-Id-1@example.net",
			ExtraHeaders: map[string][]string{
				"X-Clacks-Overhead": []string{
					"GNU Terry Pratchett",
				},
			},
			ContentInfo: &email.ContentInfo{
				Type: "multipart/signed",
				TypeParams: map[string]string{
					"boundary": "SignedBoundaryString",
					"charset":  "windows-874",
					"micalg":   "sha1",
					"protocol": "application/pkcs7-signature",
				},
				Disposition:       "",
				DispositionParams: map[string]string(nil), // p0
				TransferEncoding:  "base64",
				ID:                "",
				Charset:           "windows-874",
			},
			Received: nil,
		},
		Text: "เป็นมนุษย์สุดประเสริฐเลิศคุณค่า กว่าบรรดาฝูงสัตว์เดรัจฉาน จงฝ่าฟันพัฒนาวิชาการ อย่าล้างผลาญฤๅเข่นฆ่าบีฑาใคร ไม่ถือโทษโกรธแช่งซัดฮึดฮัดด่า หัดอภัยเหมือนกีฬาอัชฌาสัย ปฏิบัติประพฤติกฎกำหนดใจ พูดจาให้จ๊ะๆ จ๋าๆ น่าฟังเอยฯ\n" +
			"\n" +
			"นายสังฆภัณฑ์ เฮงพิทักษ์ฝั่ง ผู้เฒ่าซึ่งมีอาชีพเป็นฅนขายฃวด ถูกตำรวจปฏิบัติการจับฟ้องศาล ฐานลักนาฬิกาคุณหญิงฉัตรชฎา ฌานสมาธิ",
		EnrichedText: "",
		HTML:         "",
		Files: []*email.File{
			&email.File{
				FileType: "attachment",
				Name:     "smime.p7s",
				ContentInfo: &email.ContentInfo{
					Type: "application/pkcs7-signature",
					TypeParams: map[string]string{
						"name": "smime.p7s",
					},
					Disposition: "attachment",
					DispositionParams: map[string]string{
						"filename": "smime.p7s",
					},
					TransferEncoding: "base64",
					ID:               "",
					Charset:          "windows-874",
				},
				Data: []byte{
					239, 191, 189, 28, 239, 191, 189, 239, 191, 189, 117, 46, 239, 191, 189, 18, 97,
					239, 191, 189, 126, 224, 185, 155, 239, 191, 189, 224, 184, 161, 224, 184, 167, 25,
					58, 224, 184, 191, 224, 184, 157, 224, 184, 153, 224, 185, 131, 224, 185, 143, 239,
					191, 189, 224, 184, 141, 108, 31, 71, 27, 226, 128, 166, 80, 224, 184, 133, 239,
					191, 189, 226, 128, 166, 224, 185, 131, 224, 184, 142, 224, 184, 166, 239, 191, 189,
					239, 191, 189, 239, 191, 189, 29, 224, 185, 150, 19, 224, 185, 139, 226, 128, 166,
					80, 224, 184, 133, 239, 191, 189, 226, 128, 166, 224, 185, 131, 224, 184, 142, 224,
					184, 166, 239, 191, 189, 239, 191, 189, 239, 191, 189, 29, 224, 185, 150, 19, 224,
					185, 138, 49, 224, 185, 155, 224, 185, 142, 127, 7, 28, 104, 33, 224, 184, 168, 120,
					71, 82, 224, 185, 136, 224, 185, 129, 38, 30, 224, 185, 153, 224, 185, 138, 224,
					184, 182, 224, 184, 161, 224, 185, 148, 113, 226, 128, 156, 224, 184, 141, 224, 185,
					155, 239, 191, 189, 239, 191, 189, 57, 239, 191, 189, 28, 113, 226, 128, 156, 224,
					184, 141, 224, 185, 155, 224, 185, 129, 38, 24, 224, 184, 167, 224, 185, 143, 224,
					184, 158, 224, 184, 141, 108, 31, 71, 27, 226, 128, 166, 80, 110, 120, 224, 185,
					155, 224, 185, 135, 224, 184, 142, 224, 184, 166, 239, 191, 189, 239, 191, 189, 239,
					191, 189, 29, 224, 185, 150, 19, 224, 185, 138, 8, 114, 30, 17, 224, 184, 180, 224,
					184, 154, 58, 95, 224, 184, 168, 94, 59, 26, 18, 6, 124, 119, 224, 184, 184, 79,
					224, 184, 142, 21, 65, 224, 184, 153, 224, 185, 131, 224, 185, 143, 239, 191, 189,
				},
			},
		},
	}
	testEmailFromFile(t, fp, expectedEmail)
}

func TestParseEmailThaiMultipartSignedWindows874OverQuotedprintable(t *testing.T) {
	fp := "tests/test_thai_multipart_signed_windows-874_over_quoted-printable.txt"
	expectedEmail := &email.Email{
		Headers: email.Headers{
			Date: time.Time(time.Date(2019, 4, 1, 0, 55, 0, 0, time.UTC)),
			Sender: &mail.Address{
				Name:    "อลิซ ผู้ส่งจดหมาย",
				Address: "alis.phusngcdhmay@example.com",
			},
			From: []*mail.Address{
				&mail.Address{
					Name:    "อลิซ ผู้ส่งจดหมาย",
					Address: "alis.phusngcdhmay@example.com",
				},
				&mail.Address{
					Name:    "อลิซ ผู้ส่งจดหมาย",
					Address: "alis.phusngcdhmay@example.net",
				},
			},
			ReplyTo: []*mail.Address{
				&mail.Address{
					Name:    "อลิซ ผู้ส่งจดหมาย",
					Address: "alis.phusngcdhmay@example.net",
				},
			},
			To: []*mail.Address{
				&mail.Address{
					Name:    "บ๊อบ ผู้รับ",
					Address: "bob.phurab@example.com",
				},
				&mail.Address{
					Name:    "คาโรล ผู้รับ",
					Address: "carol.phurab@example.com",
				},
			},
			Cc: []*mail.Address{
				&mail.Address{
					Name:    "แดน ผู้รับ",
					Address: "dan.phurab@example.com",
				},
				&mail.Address{
					Name:    "อีฟ ผู้รับ",
					Address: "eve.phurab@example.com",
				},
			},
			Bcc: []*mail.Address{
				&mail.Address{
					Name:    "แฟรงค์ ผู้รับ",
					Address: "frank.phurab@example.com",
				},
				&mail.Address{
					Name:    "เกรซ ผู้รับ",
					Address: "grace.phurab@example.com",
				},
			},
			MessageID: "Message-Id-1@example.com",
			InReplyTo: []string{
				"Message-Id-0@example.com",
			},
			References: []string{
				"Message-Id-0@example.com",
			},
			Subject:  "📧 Signed Test แพนแกรมภาษาไทย",
			Comments: "Message Header Comment",
			Keywords: []string{
				"Keyword 1",
				"Keyword 2",
			},
			ResentDate: time.Time(time.Date(2019, 4, 1, 0, 55, 0, 0, time.UTC)),
			ResentFrom: []*mail.Address{
				&mail.Address{
					Name:    "อลิซ ผู้ส่งจดหมาย",
					Address: "alis.phusngcdhmay@example.net",
				},
				&mail.Address{
					Name:    "อลิซ ผู้ส่งจดหมาย",
					Address: "alis.phusngcdhmay@example.com",
				},
			},
			ResentSender: &mail.Address{
				Name:    "อลิซ ผู้ส่งจดหมาย",
				Address: "alis.phusngcdhmay@example.net",
			},
			ResentTo: []*mail.Address{
				&mail.Address{
					Name:    "บ๊อบ ผู้รับ",
					Address: "bob.phurab@example.net",
				},
				&mail.Address{
					Name:    "คาโรล ผู้รับ",
					Address: "carol.phurab@example.net",
				},
			},
			ResentCc: []*mail.Address{
				&mail.Address{
					Name:    "แดน ผู้รับ",
					Address: "dan.phurab@example.net",
				},
				&mail.Address{
					Name:    "อีฟ ผู้รับ",
					Address: "eve.phurab@example.net",
				},
			},
			ResentBcc: []*mail.Address{
				&mail.Address{
					Name:    "แฟรงค์ ผู้รับ",
					Address: "frank.phurab@example.net",
				},
				&mail.Address{
					Name:    "เกรซ ผู้รับ",
					Address: "grace.phurab@example.net",
				},
			},
			ResentMessageID: "Message-Id-1@example.net",
			ExtraHeaders: map[string][]string{
				"X-Clacks-Overhead": []string{
					"GNU Terry Pratchett",
				},
			},
			ContentInfo: &email.ContentInfo{
				Type: "multipart/signed",
				TypeParams: map[string]string{
					"boundary": "SignedBoundaryString",
					"charset":  "windows-874",
					"micalg":   "sha1",
					"protocol": "application/pkcs7-signature",
				},
				Disposition:       "",
				DispositionParams: map[string]string(nil), // p0
				TransferEncoding:  "quoted-printable",
				ID:                "",
				Charset:           "windows-874",
			},
			Received: nil,
		},
		Text: "เป็นมนุษย์สุดประเสริฐเลิศคุณค่า กว่าบรรดาฝูงสัตว์เดรัจฉาน จงฝ่าฟันพัฒนาวิชาการ อย่าล้างผลาญฤๅเข่นฆ่าบีฑาใคร ไม่ถือโทษโกรธแช่งซัดฮึดฮัดด่า หัดอภัยเหมือนกีฬาอัชฌาสัย ปฏิบัติประพฤติกฎกำหนดใจ พูดจาให้จ๊ะๆ จ๋าๆ น่าฟังเอยฯ\n" +
			"\n" +
			"นายสังฆภัณฑ์ เฮงพิทักษ์ฝั่ง ผู้เฒ่าซึ่งมีอาชีพเป็นฅนขายฃวด ถูกตำรวจปฏิบัติการจับฟ้องศาล ฐานลักนาฬิกาคุณหญิงฉัตรชฎา ฌานสมาธิ",
		EnrichedText: "",
		HTML:         "",
		Files: []*email.File{
			&email.File{
				FileType: "attachment",
				Name:     "smime.p7s",
				ContentInfo: &email.ContentInfo{
					Type: "application/pkcs7-signature",
					TypeParams: map[string]string{
						"name": "smime.p7s",
					},
					Disposition: "attachment",
					DispositionParams: map[string]string{
						"filename": "smime.p7s",
					},
					TransferEncoding: "base64",
					ID:               "",
					Charset:          "windows-874",
				},
				Data: []byte{
					239, 191, 189, 28, 239, 191, 189, 239, 191, 189, 117, 46, 239, 191, 189, 18, 97,
					239, 191, 189, 126, 224, 185, 155, 239, 191, 189, 224, 184, 161, 224, 184, 167, 25,
					58, 224, 184, 191, 224, 184, 157, 224, 184, 153, 224, 185, 131, 224, 185, 143, 239,
					191, 189, 224, 184, 141, 108, 31, 71, 27, 226, 128, 166, 80, 224, 184, 133, 239,
					191, 189, 226, 128, 166, 224, 185, 131, 224, 184, 142, 224, 184, 166, 239, 191, 189,
					239, 191, 189, 239, 191, 189, 29, 224, 185, 150, 19, 224, 185, 139, 226, 128, 166,
					80, 224, 184, 133, 239, 191, 189, 226, 128, 166, 224, 185, 131, 224, 184, 142, 224,
					184, 166, 239, 191, 189, 239, 191, 189, 239, 191, 189, 29, 224, 185, 150, 19, 224,
					185, 138, 49, 224, 185, 155, 224, 185, 142, 127, 7, 28, 104, 33, 224, 184, 168, 120,
					71, 82, 224, 185, 136, 224, 185, 129, 38, 30, 224, 185, 153, 224, 185, 138, 224,
					184, 182, 224, 184, 161, 224, 185, 148, 113, 226, 128, 156, 224, 184, 141, 224, 185,
					155, 239, 191, 189, 239, 191, 189, 57, 239, 191, 189, 28, 113, 226, 128, 156, 224,
					184, 141, 224, 185, 155, 224, 185, 129, 38, 24, 224, 184, 167, 224, 185, 143, 224,
					184, 158, 224, 184, 141, 108, 31, 71, 27, 226, 128, 166, 80, 110, 120, 224, 185,
					155, 224, 185, 135, 224, 184, 142, 224, 184, 166, 239, 191, 189, 239, 191, 189, 239,
					191, 189, 29, 224, 185, 150, 19, 224, 185, 138, 8, 114, 30, 17, 224, 184, 180, 224,
					184, 154, 58, 95, 224, 184, 168, 94, 59, 26, 18, 6, 124, 119, 224, 184, 184, 79,
					224, 184, 142, 21, 65, 224, 184, 153, 224, 185, 131, 224, 185, 143, 239, 191, 189,
				},
			},
		},
	}
	testEmailFromFile(t, fp, expectedEmail)
}

func TestParseEmailThaiMultipartSignedTis620OverBase64(t *testing.T) {
	fp := "tests/test_thai_multipart_signed_tis-620_over_base64.txt"
	expectedEmail := &email.Email{
		Headers: email.Headers{
			Date: time.Time(time.Date(2019, 4, 1, 0, 55, 0, 0, time.UTC)),
			Sender: &mail.Address{
				Name:    "อลิซ ผู้ส่งจดหมาย",
				Address: "alis.phusngcdhmay@example.com",
			},
			From: []*mail.Address{
				&mail.Address{
					Name:    "อลิซ ผู้ส่งจดหมาย",
					Address: "alis.phusngcdhmay@example.com",
				},
				&mail.Address{
					Name:    "อลิซ ผู้ส่งจดหมาย",
					Address: "alis.phusngcdhmay@example.net",
				},
			},
			ReplyTo: []*mail.Address{
				&mail.Address{
					Name:    "อลิซ ผู้ส่งจดหมาย",
					Address: "alis.phusngcdhmay@example.net",
				},
			},
			To: []*mail.Address{
				&mail.Address{
					Name:    "บ๊อบ ผู้รับ",
					Address: "bob.phurab@example.com",
				},
				&mail.Address{
					Name:    "คาโรล ผู้รับ",
					Address: "carol.phurab@example.com",
				},
			},
			Cc: []*mail.Address{
				&mail.Address{
					Name:    "แดน ผู้รับ",
					Address: "dan.phurab@example.com",
				},
				&mail.Address{
					Name:    "อีฟ ผู้รับ",
					Address: "eve.phurab@example.com",
				},
			},
			Bcc: []*mail.Address{
				&mail.Address{
					Name:    "แฟรงค์ ผู้รับ",
					Address: "frank.phurab@example.com",
				},
				&mail.Address{
					Name:    "เกรซ ผู้รับ",
					Address: "grace.phurab@example.com",
				},
			},
			MessageID: "Message-Id-1@example.com",
			InReplyTo: []string{
				"Message-Id-0@example.com",
			},
			References: []string{
				"Message-Id-0@example.com",
			},
			Subject:  "📧 Signed Test แพนแกรมภาษาไทย",
			Comments: "Message Header Comment",
			Keywords: []string{
				"Keyword 1",
				"Keyword 2",
			},
			ResentDate: time.Time(time.Date(2019, 4, 1, 0, 55, 0, 0, time.UTC)),
			ResentFrom: []*mail.Address{
				&mail.Address{
					Name:    "อลิซ ผู้ส่งจดหมาย",
					Address: "alis.phusngcdhmay@example.net",
				},
				&mail.Address{
					Name:    "อลิซ ผู้ส่งจดหมาย",
					Address: "alis.phusngcdhmay@example.com",
				},
			},
			ResentSender: &mail.Address{
				Name:    "อลิซ ผู้ส่งจดหมาย",
				Address: "alis.phusngcdhmay@example.net",
			},
			ResentTo: []*mail.Address{
				&mail.Address{
					Name:    "บ๊อบ ผู้รับ",
					Address: "bob.phurab@example.net",
				},
				&mail.Address{
					Name:    "คาโรล ผู้รับ",
					Address: "carol.phurab@example.net",
				},
			},
			ResentCc: []*mail.Address{
				&mail.Address{
					Name:    "แดน ผู้รับ",
					Address: "dan.phurab@example.net",
				},
				&mail.Address{
					Name:    "อีฟ ผู้รับ",
					Address: "eve.phurab@example.net",
				},
			},
			ResentBcc: []*mail.Address{
				&mail.Address{
					Name:    "แฟรงค์ ผู้รับ",
					Address: "frank.phurab@example.net",
				},
				&mail.Address{
					Name:    "เกรซ ผู้รับ",
					Address: "grace.phurab@example.net",
				},
			},
			ResentMessageID: "Message-Id-1@example.net",
			ExtraHeaders: map[string][]string{
				"X-Clacks-Overhead": []string{
					"GNU Terry Pratchett",
				},
			},
			ContentInfo: &email.ContentInfo{
				Type: "multipart/signed",
				TypeParams: map[string]string{
					"boundary": "SignedBoundaryString",
					"charset":  "tis-620",
					"micalg":   "sha1",
					"protocol": "application/pkcs7-signature",
				},
				Disposition:       "",
				DispositionParams: map[string]string(nil), // p0
				TransferEncoding:  "base64",
				ID:                "",
				Charset:           "tis-620",
			},
			Received: nil,
		},
		Text: "เป็นมนุษย์สุดประเสริฐเลิศคุณค่า กว่าบรรดาฝูงสัตว์เดรัจฉาน จงฝ่าฟันพัฒนาวิชาการ อย่าล้างผลาญฤๅเข่นฆ่าบีฑาใคร ไม่ถือโทษโกรธแช่งซัดฮึดฮัดด่า หัดอภัยเหมือนกีฬาอัชฌาสัย ปฏิบัติประพฤติกฎกำหนดใจ พูดจาให้จ๊ะๆ จ๋าๆ น่าฟังเอยฯ\n" +
			"\n" +
			"นายสังฆภัณฑ์ เฮงพิทักษ์ฝั่ง ผู้เฒ่าซึ่งมีอาชีพเป็นฅนขายฃวด ถูกตำรวจปฏิบัติการจับฟ้องศาล ฐานลักนาฬิกาคุณหญิงฉัตรชฎา ฌานสมาธิ",
		EnrichedText: "",
		HTML:         "",
		Files: []*email.File{
			&email.File{
				FileType: "attachment",
				Name:     "smime.p7s",
				ContentInfo: &email.ContentInfo{
					Type: "application/pkcs7-signature",
					TypeParams: map[string]string{
						"name": "smime.p7s",
					},
					Disposition: "attachment",
					DispositionParams: map[string]string{
						"filename": "smime.p7s",
					},
					TransferEncoding: "base64",
					ID:               "",
					Charset:          "tis-620",
				},
				Data: []byte{
					239, 191, 189, 28, 239, 191, 189, 239, 191, 189, 117, 46, 239, 191, 189, 18, 97,
					239, 191, 189, 126, 224, 185, 155, 239, 191, 189, 224, 184, 161, 224, 184, 167, 25,
					58, 224, 184, 191, 224, 184, 157, 224, 184, 153, 224, 185, 131, 224, 185, 143, 239,
					191, 189, 224, 184, 141, 108, 31, 71, 27, 226, 128, 166, 80, 224, 184, 133, 239,
					191, 189, 226, 128, 166, 224, 185, 131, 224, 184, 142, 224, 184, 166, 239, 191, 189,
					239, 191, 189, 239, 191, 189, 29, 224, 185, 150, 19, 224, 185, 139, 226, 128, 166,
					80, 224, 184, 133, 239, 191, 189, 226, 128, 166, 224, 185, 131, 224, 184, 142, 224,
					184, 166, 239, 191, 189, 239, 191, 189, 239, 191, 189, 29, 224, 185, 150, 19, 224,
					185, 138, 49, 224, 185, 155, 224, 185, 142, 127, 7, 28, 104, 33, 224, 184, 168, 120,
					71, 82, 224, 185, 136, 224, 185, 129, 38, 30, 224, 185, 153, 224, 185, 138, 224,
					184, 182, 224, 184, 161, 224, 185, 148, 113, 226, 128, 156, 224, 184, 141, 224, 185,
					155, 239, 191, 189, 239, 191, 189, 57, 239, 191, 189, 28, 113, 226, 128, 156, 224,
					184, 141, 224, 185, 155, 224, 185, 129, 38, 24, 224, 184, 167, 224, 185, 143, 224,
					184, 158, 224, 184, 141, 108, 31, 71, 27, 226, 128, 166, 80, 110, 120, 224, 185,
					155, 224, 185, 135, 224, 184, 142, 224, 184, 166, 239, 191, 189, 239, 191, 189, 239,
					191, 189, 29, 224, 185, 150, 19, 224, 185, 138, 8, 114, 30, 17, 224, 184, 180, 224,
					184, 154, 58, 95, 224, 184, 168, 94, 59, 26, 18, 6, 124, 119, 224, 184, 184, 79,
					224, 184, 142, 21, 65, 224, 184, 153, 224, 185, 131, 224, 185, 143, 239, 191, 189,
				},
			},
		},
	}
	testEmailFromFile(t, fp, expectedEmail)
}

func TestParseEmailThaiMultipartSignedTis620OverQuotedprintable(t *testing.T) {
	fp := "tests/test_thai_multipart_signed_tis-620_over_quoted-printable.txt"
	expectedEmail := &email.Email{
		Headers: email.Headers{
			Date: time.Time(time.Date(2019, 4, 1, 0, 55, 0, 0, time.UTC)),
			Sender: &mail.Address{
				Name:    "อลิซ ผู้ส่งจดหมาย",
				Address: "alis.phusngcdhmay@example.com",
			},
			From: []*mail.Address{
				&mail.Address{
					Name:    "อลิซ ผู้ส่งจดหมาย",
					Address: "alis.phusngcdhmay@example.com",
				},
				&mail.Address{
					Name:    "อลิซ ผู้ส่งจดหมาย",
					Address: "alis.phusngcdhmay@example.net",
				},
			},
			ReplyTo: []*mail.Address{
				&mail.Address{
					Name:    "อลิซ ผู้ส่งจดหมาย",
					Address: "alis.phusngcdhmay@example.net",
				},
			},
			To: []*mail.Address{
				&mail.Address{
					Name:    "บ๊อบ ผู้รับ",
					Address: "bob.phurab@example.com",
				},
				&mail.Address{
					Name:    "คาโรล ผู้รับ",
					Address: "carol.phurab@example.com",
				},
			},
			Cc: []*mail.Address{
				&mail.Address{
					Name:    "แดน ผู้รับ",
					Address: "dan.phurab@example.com",
				},
				&mail.Address{
					Name:    "อีฟ ผู้รับ",
					Address: "eve.phurab@example.com",
				},
			},
			Bcc: []*mail.Address{
				&mail.Address{
					Name:    "แฟรงค์ ผู้รับ",
					Address: "frank.phurab@example.com",
				},
				&mail.Address{
					Name:    "เกรซ ผู้รับ",
					Address: "grace.phurab@example.com",
				},
			},
			MessageID: "Message-Id-1@example.com",
			InReplyTo: []string{
				"Message-Id-0@example.com",
			},
			References: []string{
				"Message-Id-0@example.com",
			},
			Subject:  "📧 Signed Test แพนแกรมภาษาไทย",
			Comments: "Message Header Comment",
			Keywords: []string{
				"Keyword 1",
				"Keyword 2",
			},
			ResentDate: time.Time(time.Date(2019, 4, 1, 0, 55, 0, 0, time.UTC)),
			ResentFrom: []*mail.Address{
				&mail.Address{
					Name:    "อลิซ ผู้ส่งจดหมาย",
					Address: "alis.phusngcdhmay@example.net",
				},
				&mail.Address{
					Name:    "อลิซ ผู้ส่งจดหมาย",
					Address: "alis.phusngcdhmay@example.com",
				},
			},
			ResentSender: &mail.Address{
				Name:    "อลิซ ผู้ส่งจดหมาย",
				Address: "alis.phusngcdhmay@example.net",
			},
			ResentTo: []*mail.Address{
				&mail.Address{
					Name:    "บ๊อบ ผู้รับ",
					Address: "bob.phurab@example.net",
				},
				&mail.Address{
					Name:    "คาโรล ผู้รับ",
					Address: "carol.phurab@example.net",
				},
			},
			ResentCc: []*mail.Address{
				&mail.Address{
					Name:    "แดน ผู้รับ",
					Address: "dan.phurab@example.net",
				},
				&mail.Address{
					Name:    "อีฟ ผู้รับ",
					Address: "eve.phurab@example.net",
				},
			},
			ResentBcc: []*mail.Address{
				&mail.Address{
					Name:    "แฟรงค์ ผู้รับ",
					Address: "frank.phurab@example.net",
				},
				&mail.Address{
					Name:    "เกรซ ผู้รับ",
					Address: "grace.phurab@example.net",
				},
			},
			ResentMessageID: "Message-Id-1@example.net",
			ExtraHeaders: map[string][]string{
				"X-Clacks-Overhead": []string{
					"GNU Terry Pratchett",
				},
			},
			ContentInfo: &email.ContentInfo{
				Type: "multipart/signed",
				TypeParams: map[string]string{
					"boundary": "SignedBoundaryString",
					"charset":  "tis-620",
					"micalg":   "sha1",
					"protocol": "application/pkcs7-signature",
				},
				Disposition:       "",
				DispositionParams: map[string]string(nil), // p0
				TransferEncoding:  "quoted-printable",
				ID:                "",
				Charset:           "tis-620",
			},
			Received: nil,
		},
		Text: "เป็นมนุษย์สุดประเสริฐเลิศคุณค่า กว่าบรรดาฝูงสัตว์เดรัจฉาน จงฝ่าฟันพัฒนาวิชาการ อย่าล้างผลาญฤๅเข่นฆ่าบีฑาใคร ไม่ถือโทษโกรธแช่งซัดฮึดฮัดด่า หัดอภัยเหมือนกีฬาอัชฌาสัย ปฏิบัติประพฤติกฎกำหนดใจ พูดจาให้จ๊ะๆ จ๋าๆ น่าฟังเอยฯ\n" +
			"\n" +
			"นายสังฆภัณฑ์ เฮงพิทักษ์ฝั่ง ผู้เฒ่าซึ่งมีอาชีพเป็นฅนขายฃวด ถูกตำรวจปฏิบัติการจับฟ้องศาล ฐานลักนาฬิกาคุณหญิงฉัตรชฎา ฌานสมาธิ",
		EnrichedText: "",
		HTML:         "",
		Files: []*email.File{
			&email.File{
				FileType: "attachment",
				Name:     "smime.p7s",
				ContentInfo: &email.ContentInfo{
					Type: "application/pkcs7-signature",
					TypeParams: map[string]string{
						"name": "smime.p7s",
					},
					Disposition: "attachment",
					DispositionParams: map[string]string{
						"filename": "smime.p7s",
					},
					TransferEncoding: "base64",
					ID:               "",
					Charset:          "tis-620",
				},
				Data: []byte{
					239, 191, 189, 28, 239, 191, 189, 239, 191, 189, 117, 46, 239, 191, 189, 18, 97,
					239, 191, 189, 126, 224, 185, 155, 239, 191, 189, 224, 184, 161, 224, 184, 167, 25,
					58, 224, 184, 191, 224, 184, 157, 224, 184, 153, 224, 185, 131, 224, 185, 143, 239,
					191, 189, 224, 184, 141, 108, 31, 71, 27, 226, 128, 166, 80, 224, 184, 133, 239,
					191, 189, 226, 128, 166, 224, 185, 131, 224, 184, 142, 224, 184, 166, 239, 191, 189,
					239, 191, 189, 239, 191, 189, 29, 224, 185, 150, 19, 224, 185, 139, 226, 128, 166,
					80, 224, 184, 133, 239, 191, 189, 226, 128, 166, 224, 185, 131, 224, 184, 142, 224,
					184, 166, 239, 191, 189, 239, 191, 189, 239, 191, 189, 29, 224, 185, 150, 19, 224,
					185, 138, 49, 224, 185, 155, 224, 185, 142, 127, 7, 28, 104, 33, 224, 184, 168, 120,
					71, 82, 224, 185, 136, 224, 185, 129, 38, 30, 224, 185, 153, 224, 185, 138, 224,
					184, 182, 224, 184, 161, 224, 185, 148, 113, 226, 128, 156, 224, 184, 141, 224, 185,
					155, 239, 191, 189, 239, 191, 189, 57, 239, 191, 189, 28, 113, 226, 128, 156, 224,
					184, 141, 224, 185, 155, 224, 185, 129, 38, 24, 224, 184, 167, 224, 185, 143, 224,
					184, 158, 224, 184, 141, 108, 31, 71, 27, 226, 128, 166, 80, 110, 120, 224, 185,
					155, 224, 185, 135, 224, 184, 142, 224, 184, 166, 239, 191, 189, 239, 191, 189, 239,
					191, 189, 29, 224, 185, 150, 19, 224, 185, 138, 8, 114, 30, 17, 224, 184, 180, 224,
					184, 154, 58, 95, 224, 184, 168, 94, 59, 26, 18, 6, 124, 119, 224, 184, 184, 79,
					224, 184, 142, 21, 65, 224, 184, 153, 224, 185, 131, 224, 185, 143, 239, 191, 189,
				},
			},
		},
	}
	testEmailFromFile(t, fp, expectedEmail)
}
